2023-04-20 14:06:43+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-04-20 14:06:43+0530 - sLogger - DEBUG - {'fileid': '1ed57401-7218-49d3-898c-dadfd4af2c57', 'filename': '20230331 2022 General Purpose Financial Statements signed.pdf', 'filepath': '/home/jayesh/mgs_ai/crm_syd_1/CRM_SYD_main_app_2/classification/../FILE_DB/FILES/20230331 2022 General Purpose Financial Statements signed.pdf'}
2023-04-20 14:06:43+0530 - sLogger - DEBUG - save file completed
2023-04-20 14:06:43+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-04-20 14:06:43+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-04-20 14:06:43+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-04-20 14:06:43+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-04-20 14:06:43+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-04-20 14:06:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:06:44+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:06:45+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:06:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:06:45+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:06:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:06:45+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:06:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:06:45+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:06:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:06:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:06:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:06:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:06:47+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:06:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:06:47+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:06:54+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:06:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:06:54+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:06:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:06:54+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:06:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:06:54+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:07:00+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:07:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:07:00+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:07:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:07:00+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:07:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:07:00+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:07:03+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:07:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:07:03+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:07:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:07:03+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:07:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:07:03+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:07:09+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:07:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:07:09+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:07:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:07:09+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:07:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:07:09+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:07:14+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:07:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:07:14+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:07:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:07:14+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:07:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:07:14+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:07:18+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:07:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:07:18+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:07:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:07:18+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:07:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:07:18+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:07:21+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:07:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:07:21+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:07:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:07:21+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:07:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:07:21+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:07:24+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:07:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:07:24+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:07:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:07:24+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:07:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:07:24+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:07:28+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:07:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:07:28+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:07:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:07:28+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:07:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:07:28+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:07:31+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:07:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:07:31+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:07:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:07:31+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:07:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:07:31+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:07:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:07:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:07:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:07:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:07:35+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:07:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:07:35+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:07:41+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:07:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:07:41+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:07:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:07:41+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:07:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:07:41+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:07:48+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:07:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:07:48+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:07:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:07:48+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:07:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:07:48+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:07:58+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:07:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:07:58+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:07:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:07:58+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:07:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:07:58+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:08:05+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:08:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:08:05+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:08:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:08:05+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:08:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:08:05+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:08:13+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:08:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:08:13+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:08:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:08:13+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:08:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:08:13+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:08:20+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:08:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:08:20+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:08:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:08:20+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:08:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:08:20+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:08:28+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:08:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:08:28+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:08:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:08:28+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:08:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:08:28+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:08:37+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:08:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:08:37+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:08:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:08:37+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:08:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:08:37+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:08:45+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:08:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:08:45+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:08:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:08:45+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:08:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:08:45+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:08:51+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:08:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:08:51+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:08:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:08:51+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:08:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:08:51+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:08:58+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:08:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:08:58+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:08:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:08:58+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:08:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:08:58+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:09:06+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:09:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:09:06+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:09:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:09:06+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:09:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:09:06+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:09:11+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:09:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:09:11+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:09:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:09:11+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:09:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:09:11+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:09:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:09:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:09:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:09:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:09:19+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:09:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:09:19+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:09:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:09:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:09:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:09:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:09:26+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:09:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:09:26+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:09:32+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:09:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:09:32+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:09:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:09:32+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:09:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:09:32+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:09:36+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:09:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:09:36+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:09:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:09:36+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:09:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:09:36+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:09:39+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:09:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:09:39+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:09:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:09:39+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:09:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:09:39+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:09:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:09:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:09:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:09:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:09:43+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:09:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:09:43+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:09:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:09:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:09:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:09:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:09:47+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:09:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:09:47+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:09:50+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:09:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:09:50+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:09:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:09:50+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:09:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:09:50+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:09:53+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:09:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:09:53+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:09:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:09:53+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:09:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:09:53+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:09:58+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:09:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:09:58+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:09:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:09:58+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:09:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:09:58+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:10:04+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:10:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:10:04+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:10:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:10:04+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:10:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:10:04+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:10:10+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:10:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:10:10+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:10:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:10:10+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:10:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:10:10+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:10:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:10:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:10:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:10:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:10:16+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:10:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:10:16+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:10:21+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:10:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:10:21+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:10:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:10:21+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:10:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-04-20 14:10:21+0530 - sLogger - DEBUG - filetype: pdf
2023-04-20 14:10:24+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-04-20 14:10:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-04-20 14:10:24+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-04-20 14:10:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-04-20 14:10:24+0530 - sLogger - DEBUG - function: predict completed.
2023-04-20 14:10:24+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-04-20 14:10:24+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [10], 'predicted_cpl_pages': [9], 'predicted_ccf_pages': [12], 'filtered_cbs_pages': [10], 'filtered_cpl_pages': [9], 'filtered_ccf_pages': [12], 'month': 'december'}
2023-04-20 14:10:24+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-04-20 14:10:24+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-04-20 14:10:24+0530 - sLogger - DEBUG - process file completed
2023-04-20 14:10:24+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-04-20 14:11:39+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-04-20 14:11:39+0530 - sLogger - DEBUG - TE process file started
2023-04-20 14:12:54+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-04-20 14:12:54+0530 - sLogger - DEBUG - TE process file started
2023-04-20 14:19:27+0530 - sLogger - DEBUG - TE Proces file completed
2023-04-20 14:19:37+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-04-20 14:19:37+0530 - sLogger - DEBUG - process_main_pages started
2023-04-20 14:19:37+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-04-20 14:19:37+0530 - sLogger - DEBUG - start_refactoring started
2023-04-20 14:19:37+0530 - sLogger - DEBUG - start_refactoring completed
2023-04-20 14:19:37+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-04-20 14:19:37+0530 - sLogger - DEBUG - start_refactoring started
2023-04-20 14:19:37+0530 - sLogger - DEBUG - start_refactoring completed
2023-04-20 14:19:37+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-04-20 14:19:37+0530 - sLogger - DEBUG - start_refactoring started
2023-04-20 14:19:37+0530 - sLogger - DEBUG - start_refactoring completed
2023-04-20 14:19:37+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-04-20 14:19:37+0530 - sLogger - DEBUG - set_section_details started
2023-04-20 14:19:37+0530 - sLogger - DEBUG - ASSETS | [('assets', 100), ('current assets', 56), ('noncurrent assets', 56), ('equity', 36), ('equity and liabilities', 27), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD current assets | score 90
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD current liabilities | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrent assets | score 90
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrent liabilities | score 31
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD non current assets | score 90
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD non current liabilities | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD equity and liabilities | score 28
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD equity | score 33
2023-04-20 14:19:37+0530 - sLogger - DEBUG - CURRENT ASSETS | [('current assets', 100), ('noncurrent assets', 77), ('assets', 56), ('current liabilities', 52), ('noncurrent liabilities', 44), ('equity', 32), ('equity liabilities', 23), ('equity and liabilities', 20), ('liabilities', 11)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD current assets | score 100
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD current liabilities | score 67
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrent assets | score 90
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrent liabilities | score 61
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD non current assets | score 95
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD non current liabilities | score 86
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equity and liabilities | score 33
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equity | score 31
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 47), ('assets', 31), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('current liabilities', 17), ('liabilities', 7), ('noncurrent liabilities', 6)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 29
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 36
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 33
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 46
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Trade and other receivables | [('equity and liabilities', 41), ('current assets', 34), ('current liabilities', 28), ('noncurrent assets', 23), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('liabilities', 14), ('noncurrent liabilities', 11)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 39
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 35
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 34
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Inventories | [('noncurrent assets', 36), ('current liabilities', 35), ('assets', 29), ('current assets', 27), ('liabilities', 27), ('equity', 27), ('equity and liabilities', 23), ('equity liabilities', 18), ('noncurrent liabilities', 17)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 32
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 40
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 40
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 45
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Current tax receivables | [('current liabilities', 62), ('current assets', 45), ('noncurrent assets', 26), ('equity liabilities', 26), ('equity', 25), ('noncurrent liabilities', 25), ('liabilities', 17), ('assets', 9), ('equity and liabilities', 6)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD current assets | score 86
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD current liabilities | score 67
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD noncurrent assets | score 50
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD noncurrent liabilities | score 62
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD non current assets | score 56
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD non current liabilities | score 62
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD equity and liabilities | score 38
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Prepayments | [('current liabilities', 30), ('current assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity', 17), ('noncurrent assets', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current assets | score 40
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current liabilities | score 33
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent assets | score 40
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent liabilities | score 40
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current assets | score 40
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current liabilities | score 32
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity and liabilities | score 24
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Other investments | [('noncurrent assets', 40), ('current assets', 32), ('noncurrent liabilities', 31), ('assets', 24), ('equity liabilities', 24), ('current liabilities', 23), ('equity', 22), ('equity and liabilities', 21), ('liabilities', 11)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD current assets | score 37
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD current liabilities | score 31
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD noncurrent assets | score 39
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD noncurrent liabilities | score 29
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD non current assets | score 32
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD non current liabilities | score 28
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD equity and liabilities | score 26
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - TOTAL CURRENT ASSETS | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 55), ('assets', 42), ('noncurrent liabilities', 36), ('equity liabilities', 31), ('equity and liabilities', 28), ('equity', 24), ('liabilities', 8)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD current assets | score 95
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD current liabilities | score 56
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrent assets | score 81
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrent liabilities | score 57
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD non current assets | score 84
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD non current liabilities | score 60
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD equity and liabilities | score 29
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - NONCURRENT ASSETS | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('current liabilities', 30), ('equity', 21), ('equity and liabilities', 20), ('equity liabilities', 15), ('liabilities', 11)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD current assets | score 90
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD current liabilities | score 61
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrent assets | score 100
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrent liabilities | score 72
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD non current assets | score 97
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD non current liabilities | score 70
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD equity and liabilities | score 31
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD equity | score 31
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 49), ('equity', 40), ('current assets', 38), ('noncurrent assets', 32), ('equity liabilities', 32), ('current liabilities', 26), ('assets', 21), ('liabilities', 13), ('noncurrent liabilities', 11)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 36
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 24
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 33
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 40
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Rightofuse assets | [('noncurrent assets', 57), ('assets', 50), ('current assets', 50), ('current liabilities', 28), ('noncurrent liabilities', 21), ('equity', 19), ('equity and liabilities', 19), ('equity liabilities', 14), ('liabilities', 10)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 22
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 34
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 25
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 26
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equity', 33), ('equity liabilities', 32), ('current liabilities', 31), ('noncurrent liabilities', 23), ('liabilities', 22), ('equity and liabilities', 14)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current assets | score 58
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current liabilities | score 33
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent assets | score 53
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent liabilities | score 31
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current assets | score 54
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current liabilities | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity and liabilities | score 26
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Other noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 30), ('equity', 24), ('equity and liabilities', 22), ('equity liabilities', 19), ('liabilities', 8)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD current assets | score 90
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD current liabilities | score 52
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD non current assets | score 83
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD non current liabilities | score 61
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - TOTAL NONCURRENT ASSETS | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 36), ('equity and liabilities', 28), ('equity liabilities', 25), ('equity', 24), ('liabilities', 8)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD current assets | score 90
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD current liabilities | score 52
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrent assets | score 95
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrent liabilities | score 62
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD non current assets | score 83
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD non current liabilities | score 61
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD equity and liabilities | score 27
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - TOTAL ASSETS | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('equity liabilities', 33), ('current liabilities', 32), ('equity and liabilities', 29), ('equity', 24), ('liabilities', 12), ('noncurrent liabilities', 8)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD current assets | score 64
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD current liabilities | score 22
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrent assets | score 64
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrent liabilities | score 36
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD non current assets | score 86
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD non current liabilities | score 36
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD equity and liabilities | score 36
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD equity | score 40
2023-04-20 14:19:37+0530 - sLogger - DEBUG - LIABILITIES | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equity', 33), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD current assets | score 16
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD current liabilities | score 90
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrent assets | score 29
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrent liabilities | score 90
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD non current assets | score 29
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD non current liabilities | score 90
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD equity and liabilities | score 90
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - CURRENT LIABILITIES | [('current liabilities', 100), ('equity liabilities', 67), ('liabilities', 60), ('equity and liabilities', 58), ('current assets', 52), ('noncurrent liabilities', 43), ('noncurrent assets', 30), ('equity', 30), ('assets', 11)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD current assets | score 64
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD current liabilities | score 100
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrent assets | score 56
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 93
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD non current assets | score 54
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD non current liabilities | score 95
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equity and liabilities | score 69
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current assets', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('noncurrent assets', 23), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 39
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 37
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 28
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 39
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 28
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 34
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Employee benefits | [('equity liabilities', 36), ('current liabilities', 34), ('current assets', 29), ('noncurrent assets', 29), ('equity', 29), ('equity and liabilities', 25), ('assets', 20), ('noncurrent liabilities', 14), ('liabilities', 10)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 28
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 34
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 25
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Current tax liabilities | [('current liabilities', 88), ('equity liabilities', 58), ('equity and liabilities', 51), ('liabilities', 50), ('current assets', 45), ('noncurrent liabilities', 44), ('noncurrent assets', 26), ('equity', 25), ('assets', 17)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current assets | score 86
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current liabilities | score 95
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent assets | score 50
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent liabilities | score 84
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current assets | score 56
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current liabilities | score 86
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity and liabilities | score 71
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 22
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 26
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 36
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 22
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrent assets', 32), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Lease liability | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current assets | score 34
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current liabilities | score 59
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent assets | score 31
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent liabilities | score 54
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current assets | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current liabilities | score 60
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity and liabilities | score 59
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity | score 45
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Other current liabilities | [('current liabilities', 82), ('equity liabilities', 55), ('noncurrent liabilities', 53), ('equity and liabilities', 49), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD current assets | score 86
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD current liabilities | score 95
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD noncurrent assets | score 52
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD non current assets | score 57
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD non current liabilities | score 88
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD equity and liabilities | score 64
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - TOTAL CURRENT LIABILITIES | [('current liabilities', 82), ('equity liabilities', 55), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD current assets | score 86
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD current liabilities | score 95
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrent assets | score 52
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 85
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD non current assets | score 57
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD non current liabilities | score 88
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD equity and liabilities | score 64
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - NONCURRENT LIABILITIES | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('assets', 11), ('equity', 10)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD current assets | score 61
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD current liabilities | score 93
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrent assets | score 70
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 100
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD non current assets | score 65
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD non current liabilities | score 98
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD equity and liabilities | score 65
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current assets', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('noncurrent assets', 23), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 39
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 37
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 28
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 39
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 28
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 34
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Employee benefits | [('equity liabilities', 36), ('current liabilities', 34), ('current assets', 29), ('noncurrent assets', 29), ('equity', 29), ('equity and liabilities', 25), ('assets', 20), ('noncurrent liabilities', 14), ('liabilities', 10)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 28
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 34
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 25
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 22
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 26
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 36
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 22
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrent assets', 32), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Lease liability | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current assets | score 34
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current liabilities | score 59
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent assets | score 31
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent liabilities | score 54
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current assets | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current liabilities | score 60
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity and liabilities | score 59
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity | score 45
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Deferred tax liability | [('liabilities', 55), ('equity and liabilities', 55), ('equity liabilities', 55), ('current liabilities', 53), ('noncurrent liabilities', 47), ('equity', 27), ('assets', 19), ('current assets', 14), ('noncurrent assets', 14)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD current assets | score 39
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD current liabilities | score 63
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD noncurrent assets | score 36
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD noncurrent liabilities | score 59
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD non current assets | score 35
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD non current liabilities | score 58
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD equity and liabilities | score 55
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD equity | score 45
2023-04-20 14:19:37+0530 - sLogger - DEBUG - TOTAL NONCURRENT LIABILITIES | [('noncurrent liabilities', 82), ('noncurrent assets', 55), ('liabilities', 46), ('current assets', 42), ('equity liabilities', 36), ('current liabilities', 35), ('equity and liabilities', 32), ('assets', 16), ('equity', 15)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD current assets | score 61
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD current liabilities | score 81
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrent assets | score 86
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 95
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD non current assets | score 60
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD non current liabilities | score 86
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD equity and liabilities | score 64
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - TOTAL LIABILITIES | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 22)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD current assets | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD current liabilities | score 75
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrent assets | score 33
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrent liabilities | score 75
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD non current assets | score 32
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD non current liabilities | score 75
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD equity and liabilities | score 75
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - NET ASSETS | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('equity and liabilities', 31), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('liabilities', 13)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD current assets | score 75
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD current liabilities | score 41
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrent assets | score 86
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrent liabilities | score 44
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD non current assets | score 86
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD non current liabilities | score 42
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD equity and liabilities | score 38
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - EQUITY | [('equity', 100), ('equity liabilities', 63), ('equity and liabilities', 52), ('assets', 36), ('liabilities', 33), ('current liabilities', 30), ('current assets', 21), ('noncurrent assets', 21), ('noncurrent liabilities', 20)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD current assets | score 31
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD current liabilities | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrent assets | score 31
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrent liabilities | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD non current assets | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD non current liabilities | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD equity and liabilities | score 90
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD equity | score 100
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('current assets', 35), ('noncurrent assets', 35), ('current liabilities', 33), ('equity and liabilities', 30), ('equity liabilities', 26), ('liabilities', 25), ('noncurrent liabilities', 25)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 29
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 34
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 26
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 25
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 27
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Reserves | [('assets', 36), ('current assets', 32), ('noncurrent assets', 32), ('current liabilities', 20), ('noncurrent liabilities', 20), ('equity', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current assets | score 45
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current liabilities | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent assets | score 45
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent liabilities | score 28
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current assets | score 45
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current liabilities | score 26
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity and liabilities | score 32
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity | score 14
2023-04-20 14:19:37+0530 - sLogger - DEBUG - Retained earnings | [('assets', 38), ('equity and liabilities', 36), ('current assets', 33), ('noncurrent assets', 33), ('current liabilities', 32), ('equity', 24), ('equity liabilities', 17), ('noncurrent liabilities', 16), ('liabilities', 12)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 33
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 31
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 34
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 36
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-04-20 14:19:37+0530 - sLogger - DEBUG - TOTAL EQUITY | [('equity', 67), ('equity liabilities', 64), ('equity and liabilities', 55), ('current liabilities', 31), ('assets', 12), ('liabilities', 11), ('current assets', 8), ('noncurrent assets', 8), ('noncurrent liabilities', 8)]
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD current assets | score 15
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD current liabilities | score 38
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD noncurrent assets | score 21
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD noncurrent liabilities | score 38
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD non current assets | score 32
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD non current liabilities | score 38
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD equity and liabilities | score 86
2023-04-20 14:19:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD equity | score 90
2023-04-20 14:19:37+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-04-20 14:19:37+0530 - sLogger - DEBUG - set_section_details started
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from operating activities | operating cash flow before working capital changes
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | adiustments for movements in working capital
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid | working capital adjustments
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- GST refund | adjustments for increase decrease in operating assets
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income taxes paid | changes in working capital
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to related party supplier | changes in operating assets and liabilities
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash from operating activities | adjustments for increase decrease in operating liabilities
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows used in investing activities | operating cash flow before working capital changes
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments for purchase of property, plant & equipment | operating profit before working capital changes
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from disposal of property, plant & equipment | operating profit before working capital changes
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from maturities of deposits with fixed maturity dates | adiustments for movements in working capital
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments for deposits with fixed maturity dates | adiustments for movements in working capital
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in investing activities | operating cash flow before working capital changes
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows used in financing activities | operating cash flow before working capital changes
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of borrowings | operating profit before working capital changes
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from borrowings | operating profit before working capital changes
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of lease liability | changes in assets liabilities
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of dividends | adiustments for movements in working capital
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in financing activities | operating cash flow before working capital changes
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the year | changes in operating assets and liabilities
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Effects of exchange rate changes on the balance of | operating profit before working capital changes
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- cash held in foreign currencies | adjustments for increase decrease in operating assets
2023-04-20 14:19:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the end of the year | changes in operating assets and liabilities
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-20 14:19:40+0530 - sLogger - ERROR - error occured: 'year'
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-20 14:19:40+0530 - sLogger - ERROR - error occured: 'value'
2023-04-20 14:19:40+0530 - sLogger - DEBUG - process_main_pages completed
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:40+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-04-20 14:19:40+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:40+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-04-20 14:19:40+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:40+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-04-20 14:19:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:40+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('other bank balances', 18), ('cash and bank balances', 16), ('bank balances other than above', 12)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 25), ('cash and cash equivalents', 24), (' cash and cash equivalents', 24), ('bank balances other than above', 20), ('other bank balances', 20), ('bank balances other than cash and cash equivalents', 18), ('cash and bank balances', 18)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and short term deposits', 54), ('cash and bank balances', 39), ('bank balances other than above', 17), ('other bank balances', 11)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('bank balances other than above', 45), ('cash and cash equivalents', 42), (' cash and cash equivalents', 42), ('other bank balances', 41), ('bank balances other than cash and cash equivalents', 36), ('cash and short term deposits', 33), ('cash and bank balances', 24)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('cash and bank balances', 14), ('bank balances other than cash and cash equivalents', 11), ('bank balances other than above', 11)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('cash and cash equivalents', 36), (' cash and cash equivalents', 36), ('bank balances other than cash and cash equivalents', 29), ('cash and short term deposits', 27), ('bank balances other than above', 13), ('other bank balances', 6), ('cash and bank balances', 5)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash and short term deposits', 12), ('other bank balances', 9), ('cash and bank balances', 8), ('cash and cash equivalents', 7), (' cash and cash equivalents', 7), ('bank balances other than above', 6), ('bank balances other than cash and cash equivalents', 4)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other bank balances', 48), ('bank balances other than above', 36), ('cash and short term deposits', 36), ('bank balances other than cash and cash equivalents', 29), ('cash and cash equivalents', 24), (' cash and cash equivalents', 24), ('cash and bank balances', 19)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 38371500.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['19'], 'line_item_value': [38371500.0]}
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:40+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('other bank balances', 18), ('cash and bank balances', 16), ('bank balances other than above', 12)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 25), ('cash and cash equivalents', 24), (' cash and cash equivalents', 24), ('bank balances other than above', 20), ('other bank balances', 20), ('bank balances other than cash and cash equivalents', 18), ('cash and bank balances', 18)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and short term deposits', 54), ('cash and bank balances', 39), ('bank balances other than above', 17), ('other bank balances', 11)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('bank balances other than above', 45), ('cash and cash equivalents', 42), (' cash and cash equivalents', 42), ('other bank balances', 41), ('bank balances other than cash and cash equivalents', 36), ('cash and short term deposits', 33), ('cash and bank balances', 24)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('cash and bank balances', 14), ('bank balances other than cash and cash equivalents', 11), ('bank balances other than above', 11)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('cash and cash equivalents', 36), (' cash and cash equivalents', 36), ('bank balances other than cash and cash equivalents', 29), ('cash and short term deposits', 27), ('bank balances other than above', 13), ('other bank balances', 6), ('cash and bank balances', 5)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash and short term deposits', 12), ('other bank balances', 9), ('cash and bank balances', 8), ('cash and cash equivalents', 7), (' cash and cash equivalents', 7), ('bank balances other than above', 6), ('bank balances other than cash and cash equivalents', 4)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other bank balances', 48), ('bank balances other than above', 36), ('cash and short term deposits', 36), ('bank balances other than cash and cash equivalents', 29), ('cash and cash equivalents', 24), (' cash and cash equivalents', 24), ('cash and bank balances', 19)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 47888561.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['19'], 'line_item_value': [47888561.0]}
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:40+0530 - sLogger - DEBUG - keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows = cash and cash equivalents , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 48), (' short term deposits', 31)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows = cash and cash equivalents , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 48), (' short term deposits', 31)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [47888561.0, 38371500.0], 'label': [' Cash and cash equivalents', ' Cash and cash equivalents'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:40+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-04-20 14:19:40+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:40+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-04-20 14:19:40+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:40+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-04-20 14:19:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:40+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 31)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 36)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('inventories', 33)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 22)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('inventories', 67)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 5244865.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [5244865.0]}
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:40+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 31)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 36)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('inventories', 33)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 22)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('inventories', 67)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 6229038.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [6229038.0]}
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:40+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows = coal inventory at cost , res_fuzz_match = [(' inventories', 100), (' provision for inventory obsolescence', 74), (' finished goods at cost', 52), (' work in progress', 45), (' stores and other consumables at cost', 42), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' finished goods', 36), (' finished goods', 36), (' spare parts', 33), (' goods in transit', 29), (' cranes - in transit', 20)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows = operating supplies at cost , res_fuzz_match = [(' stores and other consumables at cost', 62), (' finished goods at cost', 52), (' provision for inventory obsolescence', 38), (' goods in transit', 33), (' work in progress', 31), ('raw materials', 30), (' raw materials', 30), (' spare parts', 30), (' inventories', 27), (' finished goods', 24), (' finished goods', 24), (' cranes - in transit', 24), (' cranes', 22)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows = spare parts at cost , res_fuzz_match = [(' spare parts', 100), (' finished goods at cost', 52), (' cranes - in transit', 48), (' work in progress', 46), (' stores and other consumables at cost', 40), ('raw materials', 35), (' raw materials', 35), (' inventories', 33), (' provision for inventory obsolescence', 27), (' goods in transit', 25), (' cranes', 22), (' finished goods', 18), (' finished goods', 18)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows = stock on hand - stores , res_fuzz_match = [(' provision for inventory obsolescence', 44), (' inventories', 44), (' goods in transit', 40), (' cranes', 40), (' spare parts', 40), (' finished goods at cost', 38), (' work in progress', 35), ('raw materials', 33), (' raw materials', 33), (' stores and other consumables at cost', 31), (' cranes - in transit', 31), (' finished goods', 30), (' finished goods', 30)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows = coal inventory at cost , res_fuzz_match = [(' inventories', 100), (' provision for inventory obsolescence', 74), (' finished goods at cost', 52), (' work in progress', 45), (' stores and other consumables at cost', 42), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' finished goods', 36), (' finished goods', 36), (' spare parts', 33), (' goods in transit', 29), (' cranes - in transit', 20)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows = operating supplies at cost , res_fuzz_match = [(' stores and other consumables at cost', 62), (' finished goods at cost', 52), (' provision for inventory obsolescence', 38), (' goods in transit', 33), (' work in progress', 31), ('raw materials', 30), (' raw materials', 30), (' spare parts', 30), (' inventories', 27), (' finished goods', 24), (' finished goods', 24), (' cranes - in transit', 24), (' cranes', 22)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows = spare parts at cost , res_fuzz_match = [(' spare parts', 100), (' finished goods at cost', 52), (' cranes - in transit', 48), (' work in progress', 46), (' stores and other consumables at cost', 40), ('raw materials', 35), (' raw materials', 35), (' inventories', 33), (' provision for inventory obsolescence', 27), (' goods in transit', 25), (' cranes', 22), (' finished goods', 18), (' finished goods', 18)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows = stock on hand - stores , res_fuzz_match = [(' provision for inventory obsolescence', 44), (' inventories', 44), (' goods in transit', 40), (' cranes', 40), (' spare parts', 40), (' finished goods at cost', 38), (' work in progress', 35), ('raw materials', 33), (' raw materials', 33), (' stores and other consumables at cost', 31), (' cranes - in transit', 31), (' finished goods', 30), (' finished goods', 30)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 5, 7], 'score': [100, 100, 100, 100], 'value': [3528471.0, 1346758.0, 3174270.0, 444171.0], 'label': [' Coal inventory at cost', ' Spare parts at cost', ' Coal inventory at cost', ' Spare parts at cost'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:40+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-04-20 14:19:40+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:40+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-04-20 14:19:40+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:40+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-04-20 14:19:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:40+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other financial assets', 30), ('other current financial assets', 29), ('other current assets', 25), ('other assets', 25), ('prepayments', 15)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current assets', 39), ('other financial assets', 39), ('other current financial assets', 33), ('prepayments', 21)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 29), ('other current financial assets', 22), ('prepayments', 13)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('other current assets', 49), ('other current financial assets', 44), ('other assets', 28), ('other financial assets', 27), ('prepayments', 25)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('prepayments', 100), ('other current financial assets', 18), ('other current assets', 16), ('other assets', 12), ('other financial assets', 8)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other assets', 70), ('other current assets', 52), ('other financial assets', 52), ('other current financial assets', 41), ('prepayments', 11)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 6], 'score': 100, 'value': 243822.0, 'line_item_label': ['CURRENT ASSETS', 'Prepayments'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 243822.0]}
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:40+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other financial assets', 30), ('other current financial assets', 29), ('other current assets', 25), ('other assets', 25), ('prepayments', 15)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current assets', 39), ('other financial assets', 39), ('other current financial assets', 33), ('prepayments', 21)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 29), ('other current financial assets', 22), ('prepayments', 13)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('other current assets', 49), ('other current financial assets', 44), ('other assets', 28), ('other financial assets', 27), ('prepayments', 25)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('prepayments', 100), ('other current financial assets', 18), ('other current assets', 16), ('other assets', 12), ('other financial assets', 8)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other assets', 70), ('other current assets', 52), ('other financial assets', 52), ('other current financial assets', 41), ('prepayments', 11)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 6], 'score': 100, 'value': 629661.0, 'line_item_label': ['CURRENT ASSETS', 'Prepayments'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 629661.0]}
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:40+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-04-20 14:19:40+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:40+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-04-20 14:19:40+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:40+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-04-20 14:19:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:40+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' deferred operating expenditure', 15), (' trade and other receivables', 15), (' income tax receivable from related parties', 11)]
2023-04-20 14:19:40+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' deferred operating expenditure', 29), (' income tax receivable from related parties', 17)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 42), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), (' other financial assets', 30), ('other current assets', 25), ('other assets', 25), (' other current assets', 25), (' deferred operating expenditure', 19)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets', 42), (' income tax receivable from related parties', 40), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' deferred operating expenditure', 37), (' financial assets', 23), (' biological assets', 18)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' biological assets', 29), (' other financial assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24), (' deferred operating expenditure', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [(' trade and other receivables', 60), (' income tax receivable from related parties', 55), ('other current assets', 49), (' other current assets', 49), (' financial assets', 32), ('other assets', 28), (' biological assets', 27), (' other financial assets', 27), (' deferred operating expenditure', 26)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' income tax receivable from related parties', 15), (' deferred operating expenditure', 15), ('other assets', 12), (' financial assets', 11), (' biological assets', 11), (' other financial assets', 8)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other assets', 70), ('other current assets', 52), (' other current assets', 52), (' other financial assets', 52), (' trade and other receivables', 41), (' biological assets', 33), (' income tax receivable from related parties', 27), (' financial assets', 24), (' deferred operating expenditure', 18)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 13983506.0, 'line_item_label': ['CURRENT ASSETS', 'Trade and other receivables'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 13983506.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' deferred operating expenditure', 15), (' trade and other receivables', 15), (' income tax receivable from related parties', 11)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' deferred operating expenditure', 29), (' income tax receivable from related parties', 17)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 42), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), (' other financial assets', 30), ('other current assets', 25), ('other assets', 25), (' other current assets', 25), (' deferred operating expenditure', 19)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets', 42), (' income tax receivable from related parties', 40), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' deferred operating expenditure', 37), (' financial assets', 23), (' biological assets', 18)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' biological assets', 29), (' other financial assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24), (' deferred operating expenditure', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [(' trade and other receivables', 60), (' income tax receivable from related parties', 55), ('other current assets', 49), (' other current assets', 49), (' financial assets', 32), ('other assets', 28), (' biological assets', 27), (' other financial assets', 27), (' deferred operating expenditure', 26)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' income tax receivable from related parties', 15), (' deferred operating expenditure', 15), ('other assets', 12), (' financial assets', 11), (' biological assets', 11), (' other financial assets', 8)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other assets', 70), ('other current assets', 52), (' other current assets', 52), (' other financial assets', 52), (' trade and other receivables', 41), (' biological assets', 33), (' income tax receivable from related parties', 27), (' financial assets', 24), (' deferred operating expenditure', 18)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 23265701.0, 'line_item_label': ['CURRENT ASSETS', 'Trade and other receivables'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 23265701.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 70), (' related party receivable', 70), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 50), (' foreign exchange forward contracts', 47), (' forward exchange contracts', 47), (' accrued interest', 44), (' other', 40), (' accrued rebates', 38), ('other assets', 36), (' bank guarantee', 35), (' share of jv prepayments', 35), (' current investments', 33), ('current', 29), (' deposits', 29), (' condensate', 29), (' related party disclosures', 25), (' rental bond', 24), (' lng', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [(' other', 100), (' other receivables - related party', 100), (' other deposits receivable - related party', 75), (' amount receivable from controlling entity', 75), (' interest receivable', 75), (' income tax receivable from related parties', 67), (' long service leave receivable', 67), (' related party receivable', 67), ('other assets', 64), (' other debtors and prepayments', 58), ('current', 43), ('foreign exchange derivatives at fair value', 42), (' electricity derivatives at fair value', 42), (' accrued interest', 42), (' forward exchange contracts', 40), (' condensate', 36), (' accrued rebates', 36), (' share of jv prepayments', 35), (' derivative contracts - fair value', 33), (' current investments', 33), (' foreign exchange forward contracts', 33), (' deposits', 29), (' bank guarantee', 27), (' related party disclosures', 25), (' rental bond', 24), (' lng', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 70), (' related party receivable', 70), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 50), (' foreign exchange forward contracts', 47), (' forward exchange contracts', 47), (' accrued interest', 44), (' other', 40), (' accrued rebates', 38), ('other assets', 36), (' bank guarantee', 35), (' share of jv prepayments', 35), (' current investments', 33), ('current', 29), (' deposits', 29), (' condensate', 29), (' related party disclosures', 25), (' rental bond', 24), (' lng', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [(' other', 100), (' other receivables - related party', 100), (' other deposits receivable - related party', 75), (' amount receivable from controlling entity', 75), (' interest receivable', 75), (' income tax receivable from related parties', 67), (' long service leave receivable', 67), (' related party receivable', 67), ('other assets', 64), (' other debtors and prepayments', 58), ('current', 43), ('foreign exchange derivatives at fair value', 42), (' electricity derivatives at fair value', 42), (' accrued interest', 42), (' forward exchange contracts', 40), (' condensate', 36), (' accrued rebates', 36), (' share of jv prepayments', 35), (' derivative contracts - fair value', 33), (' current investments', 33), (' foreign exchange forward contracts', 33), (' deposits', 29), (' bank guarantee', 27), (' related party disclosures', 25), (' rental bond', 24), (' lng', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4], 'score': [100, 100], 'value': [2461924.0, 1525145.0], 'label': [' Other receivables', ' Other receivables'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('current assets', 45)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('current assets', 21)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('current assets', 32)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('current assets', 45)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('current assets', 21)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('current assets', 32)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 77944930.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [77944930.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 83893305.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [83893305.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [40, 41, 42, 43, 44, 45, 46, 47, 48, 49], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [15625586.0, 1626478.0, 0.0, -91683.0, 17160381.0, 0.0, 0.0, 0.0, 0.0, 17160381.0], 'label': ['Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 77944930.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [77944930.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 83893305.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [83893305.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('right of use', 47), ('right to use', 47), ('capital work-in-progress', 45), ('capital workinprogress', 45), ('capital work in progress', 38), ('work in progress', 38), ('tangible', 25), ('rightofuse', 24), ('righttouse', 24)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('work in progress', 31), ('capital work in progress', 26), ('capital work-in-progress', 25), ('capital workinprogress', 25), ('rightofuse', 22), ('righttouse', 22)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 37), ('capital workinprogress', 37), ('capital work in progress', 36), ('work in progress', 35), ('tangible', 29)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible', 57), ('capital work-in-progress', 45), ('capital workinprogress', 45), ('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('capital work in progress', 27), ('work in progress', 27)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('capital work-in-progress', 32), ('capital workinprogress', 32), ('tangible', 29), ('capital work in progress', 28)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': 9562117.0, 'line_item_label': ['Right-of-use assets'], 'note_numbers': ['21'], 'line_item_value': [9562117.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('right of use', 47), ('right to use', 47), ('capital work-in-progress', 45), ('capital workinprogress', 45), ('capital work in progress', 38), ('work in progress', 38), ('tangible', 25), ('rightofuse', 24), ('righttouse', 24)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('work in progress', 31), ('capital work in progress', 26), ('capital work-in-progress', 25), ('capital workinprogress', 25), ('rightofuse', 22), ('righttouse', 22)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 37), ('capital workinprogress', 37), ('capital work in progress', 36), ('work in progress', 35), ('tangible', 29)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible', 57), ('capital work-in-progress', 45), ('capital workinprogress', 45), ('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('capital work in progress', 27), ('work in progress', 27)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('capital work-in-progress', 32), ('capital workinprogress', 32), ('tangible', 29), ('capital work in progress', 28)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': 7678852.0, 'line_item_label': ['Right-of-use assets'], 'note_numbers': ['21'], 'line_item_value': [7678852.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('tangible assets', 44)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 80, 'value': 48644405.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['12'], 'line_item_value': [48644405.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('tangible assets', 44)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 80, 'value': 44593458.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['12'], 'line_item_value': [44593458.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill', 29), ('goodwill on consolidatio', 15)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill', 29), ('goodwill on consolidatio', 29)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill', 29), ('goodwill on consolidatio', 15)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill', 29), ('goodwill on consolidatio', 29)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 33)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 44), ('intangible assets under development', 18)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible', 33), ('intangible under development', 17)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('intangible assets under development', 42), ('intangible', 33), ('intangible under development', 26)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 48644405.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['12'], 'line_item_value': [48644405.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 33)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 44), ('intangible assets under development', 18)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible', 33), ('intangible under development', 17)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('intangible assets under development', 42), ('intangible', 33), ('intangible under development', 26)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 44593458.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['12'], 'line_item_value': [44593458.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 10)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('donations', 25)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 10)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('donations', 25)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), (' investment in associate', 40), ('investment', 36), (' investment in joint venture', 33), ('derivative financial instruments', 31)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 44), (' investment in joint venture', 39), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33), ('derivative financial instruments', 32)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), (' investments accounted for using the equity method', 40), ('joint ventures and associates', 37), ('investment', 36), ('derivative financial instruments', 27), (' investment in joint venture', 12)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investments accounted for using the equity method', 50), (' investment in joint venture', 45)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('joint ventures and associates', 53), (' investments accounted for using the equity method', 43), (' investment in associate', 40), ('derivative financial instruments', 37), ('investment', 36), (' investment in joint venture', 30)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), (' investment in associate', 40), ('investment', 36), (' investment in joint venture', 33), ('derivative financial instruments', 31)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 44), (' investment in joint venture', 39), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33), ('derivative financial instruments', 32)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), (' investments accounted for using the equity method', 40), ('joint ventures and associates', 37), ('investment', 36), ('derivative financial instruments', 27), (' investment in joint venture', 12)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investments accounted for using the equity method', 50), (' investment in joint venture', 45)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('joint ventures and associates', 53), (' investments accounted for using the equity method', 43), (' investment in associate', 40), ('derivative financial instruments', 37), ('investment', 36), (' investment in joint venture', 30)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 23)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 47), ('deferred tax', 17), ('deferred charges', 15)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('deferred tax assets', 47), ('deferred charges', 27), ('deferred tax', 21)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 23)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 47), ('deferred tax', 17), ('deferred charges', 15)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('deferred tax assets', 47), ('deferred charges', 27), ('deferred tax', 21)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 30), (' loan receivables', 25), (' leases', 24)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other assets', 40), (' other assets', 40), (' exploration and evaluation expenditure', 39), (' loan receivables', 34), (' other non-current assets', 33), (' other non-current assets', 33), (' leased assets', 29), (' financial assets', 27), ('non-current', 19), (' leases', 14)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' leases', 21), ('non-current', 18), (' exploration and evaluation expenditure', 14)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' leases', 25), ('non-current', 21), (' loan receivables', 17), (' exploration and evaluation expenditure', 10)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [(' other non-current assets', 100), (' other non-current assets', 100), ('other assets', 73), (' other assets', 73), (' financial assets', 56), ('non-current', 54), (' leased assets', 48), (' exploration and evaluation expenditure', 35), (' loan receivables', 27), (' leases', 17)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 12, 13], 'score': 100, 'value': 48854520.0, 'line_item_label': ['NON-CURRENT ASSETS', 'Intangible assets', 'Other non-current assets'], 'note_numbers': [nan, '12', nan], 'line_item_value': [0.0, 48644405.0, 210115.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 30), (' loan receivables', 25), (' leases', 24)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other assets', 40), (' other assets', 40), (' exploration and evaluation expenditure', 39), (' loan receivables', 34), (' other non-current assets', 33), (' other non-current assets', 33), (' leased assets', 29), (' financial assets', 27), ('non-current', 19), (' leases', 14)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' leases', 21), ('non-current', 18), (' exploration and evaluation expenditure', 14)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' leases', 25), ('non-current', 21), (' loan receivables', 17), (' exploration and evaluation expenditure', 10)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [(' other non-current assets', 100), (' other non-current assets', 100), ('other assets', 73), (' other assets', 73), (' financial assets', 56), ('non-current', 54), (' leased assets', 48), (' exploration and evaluation expenditure', 35), (' loan receivables', 27), (' leases', 17)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 12, 13], 'score': 100, 'value': 44861945.0, 'line_item_label': ['NON-CURRENT ASSETS', 'Intangible assets', 'Other non-current assets'], 'note_numbers': [nan, '12', nan], 'line_item_value': [0.0, 44593458.0, 268487.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('non-current assets total', 53)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('non-current assets total', 58)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('non-current assets total', 84)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 13], 'score': 84, 'value': 210115.0, 'line_item_label': ['NON-CURRENT ASSETS', 'Other non-current assets'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 210115.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('non-current assets total', 53)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('non-current assets total', 58)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('non-current assets total', 84)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 13], 'score': 84, 'value': 268487.0, 'line_item_label': ['NON-CURRENT ASSETS', 'Other non-current assets'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 268487.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), ('borrowings', 20), ('shortterm borrowings', 20), (' bank overdraft', 7)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' bank overdraft', 44), (' loans and borrowings', 38), ('lease liabilities', 30), ('shortterm borrowings', 21), (' leases', 15), ('borrowings', 14), ('short term debt', 11), ('short-term debt', 11), ('shortterm debt', 11)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), (' leases', 21), ('borrowings', 19), ('shortterm borrowings', 19), ('lease liabilities', 15)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17), (' bank overdraft', 12)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), ('lease liabilities', 12), (' leases', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), ('short-term debt', 16), ('shortterm debt', 16), ('short term debt', 15), ('borrowings', 12), (' bank overdraft', 8), ('shortterm borrowings', 7)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('lease liabilities', 52), ('short-term debt', 35), ('shortterm debt', 35), ('short term debt', 34), ('shortterm borrowings', 33), (' loans and borrowings', 29), (' bank overdraft', 29), ('borrowings', 23), (' leases', 17)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [22, 23], 'score': 100, 'value': 17226057.0, 'line_item_label': ['Borrowings', 'Lease liability'], 'note_numbers': ['14', '22'], 'line_item_value': [14506615.0, 2719442.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), ('borrowings', 20), ('shortterm borrowings', 20), (' bank overdraft', 7)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' bank overdraft', 44), (' loans and borrowings', 38), ('lease liabilities', 30), ('shortterm borrowings', 21), (' leases', 15), ('borrowings', 14), ('short term debt', 11), ('short-term debt', 11), ('shortterm debt', 11)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), (' leases', 21), ('borrowings', 19), ('shortterm borrowings', 19), ('lease liabilities', 15)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17), (' bank overdraft', 12)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), ('lease liabilities', 12), (' leases', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), ('short-term debt', 16), ('shortterm debt', 16), ('short term debt', 15), ('borrowings', 12), (' bank overdraft', 8), ('shortterm borrowings', 7)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('lease liabilities', 52), ('short-term debt', 35), ('shortterm debt', 35), ('short term debt', 34), ('shortterm borrowings', 33), (' loans and borrowings', 29), (' bank overdraft', 29), ('borrowings', 23), (' leases', 17)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [22, 23], 'score': 100, 'value': 17152202.0, 'line_item_label': ['Borrowings', 'Lease liability'], 'note_numbers': ['14', '22'], 'line_item_value': [15536531.0, 1615671.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost mizuho bank term loan, secured , res_fuzz_match = [(' not later than 1 year', 58), (' bank overdraft', 57), ('bank borrowings', 55), (' secured long-term bank loans', 54), (' leases', 50), ('current', 43), (' current', 43), (' lease liabilities - current', 42), (' utilised – bank borrowings', 40), (' loans from related party', 39), (' lease liabilities', 36), (' balance at the end of period', 34)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost smbc term loan, secured , res_fuzz_match = [(' not later than 1 year', 53), (' leases', 50), (' secured long-term bank loans', 50), ('current', 43), (' current', 43), (' bank overdraft', 43), ('bank borrowings', 42), (' lease liabilities - current', 42), (' utilised – bank borrowings', 40), (' loans from related party', 39), (' lease liabilities', 36), (' balance at the end of period', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost , res_fuzz_match = [('current', 43), (' current', 43), (' loans from related party', 43), (' secured long-term bank loans', 39), (' lease liabilities - current', 37), ('bank borrowings', 36), (' utilised – bank borrowings', 33), (' not later than 1 year', 32), (' bank overdraft', 30), (' lease liabilities', 27), (' leases', 25), (' balance at the end of period', 23)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost current , res_fuzz_match = [('current', 100), (' current', 100), (' lease liabilities - current', 56), (' utilised – bank borrowings', 40), (' secured long-term bank loans', 38), ('bank borrowings', 36), (' bank overdraft', 29), (' not later than 1 year', 27), (' lease liabilities', 27), (' leases', 25), (' balance at the end of period', 24), (' loans from related party', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost mizuho bank term loan, secured , res_fuzz_match = [(' not later than 1 year', 58), (' bank overdraft', 57), ('bank borrowings', 55), (' secured long-term bank loans', 54), (' leases', 50), ('current', 43), (' current', 43), (' lease liabilities - current', 42), (' utilised – bank borrowings', 40), (' loans from related party', 39), (' lease liabilities', 36), (' balance at the end of period', 34)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost smbc term loan, secured , res_fuzz_match = [(' not later than 1 year', 53), (' leases', 50), (' secured long-term bank loans', 50), ('current', 43), (' current', 43), (' bank overdraft', 43), ('bank borrowings', 42), (' lease liabilities - current', 42), (' utilised – bank borrowings', 40), (' loans from related party', 39), (' lease liabilities', 36), (' balance at the end of period', 36)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost , res_fuzz_match = [('current', 43), (' current', 43), (' loans from related party', 43), (' secured long-term bank loans', 39), (' lease liabilities - current', 37), ('bank borrowings', 36), (' utilised – bank borrowings', 33), (' not later than 1 year', 32), (' bank overdraft', 30), (' lease liabilities', 27), (' leases', 25), (' balance at the end of period', 23)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost current , res_fuzz_match = [('current', 100), (' current', 100), (' lease liabilities - current', 56), (' utilised – bank borrowings', 40), (' secured long-term bank loans', 38), ('bank borrowings', 36), (' bank overdraft', 29), (' not later than 1 year', 27), (' lease liabilities', 27), (' leases', 25), (' balance at the end of period', 24), (' loans from related party', 20)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 7], 'score': [100, 100], 'value': [15536531.0, 14506615.0], 'label': ['Secured - at amortised cost Current', 'Secured - at amortised cost Current'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' current', 100), (' lease liabilities - current', 100), (' secured long-term bank loans', 57), (' loans from related party', 43), (' bank overdraft', 43), ('bank borrowings', 31), (' utilised – bank borrowings', 31), (' not later than 1 year', 29), (' balance at the end of period', 29), (' leases', 25), (' lease liabilities', 14)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' current', 73), ('bank borrowings', 57), (' utilised – bank borrowings', 57), (' lease liabilities - current', 57), (' secured long-term bank loans', 43), (' bank overdraft', 43), (' not later than 1 year', 31), (' loans from related party', 29), (' balance at the end of period', 29), (' leases', 0), (' lease liabilities', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' current', 100), (' lease liabilities - current', 100), (' secured long-term bank loans', 57), (' loans from related party', 43), (' bank overdraft', 43), ('bank borrowings', 31), (' utilised – bank borrowings', 31), (' not later than 1 year', 29), (' balance at the end of period', 29), (' leases', 25), (' lease liabilities', 14)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' current', 73), ('bank borrowings', 57), (' utilised – bank borrowings', 57), (' lease liabilities - current', 57), (' secured long-term bank loans', 43), (' bank overdraft', 43), (' not later than 1 year', 31), (' loans from related party', 29), (' balance at the end of period', 29), (' leases', 0), (' lease liabilities', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': [100, 100], 'value': [1615671.0, 2719442.0], 'label': [' Current', ' Current'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['current maturities']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other financial liabilities', 46), ('other current liabilities', 46), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('other financial liabilities', 38), ('other current liabilities', 33), ('current maturities', 17), ('current maturities of long-term debt', 16), ('current maturities of longterm debt', 16)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('current maturities of long-term debt', 38), ('current maturities of longterm debt', 38), ('current maturities', 36), ('other financial liabilities', 34)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), ('current maturities', 65), ('other financial liabilities', 53), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other financial liabilities', 23), ('other current liabilities', 23), ('current maturities', 21), ('current maturities of long-term debt', 18), ('current maturities of longterm debt', 18)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), ('other financial liabilities', 70), ('current maturities', 67), ('current maturities of long-term debt', 51), ('current maturities of longterm debt', 51)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 20, 24], 'score': 100, 'value': 5582432.0, 'line_item_label': ['CURRENT LIABILITIES', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 5334394.0, 248038.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other financial liabilities', 46), ('other current liabilities', 46), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('other financial liabilities', 38), ('other current liabilities', 33), ('current maturities', 17), ('current maturities of long-term debt', 16), ('current maturities of longterm debt', 16)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('current maturities of long-term debt', 38), ('current maturities of longterm debt', 38), ('current maturities', 36), ('other financial liabilities', 34)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), ('current maturities', 65), ('other financial liabilities', 53), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other financial liabilities', 23), ('other current liabilities', 23), ('current maturities', 21), ('current maturities of long-term debt', 18), ('current maturities of longterm debt', 18)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), ('other financial liabilities', 70), ('current maturities', 67), ('current maturities of long-term debt', 51), ('current maturities of longterm debt', 51)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 20, 24], 'score': 100, 'value': 39390069.0, 'line_item_label': ['CURRENT LIABILITIES', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 39141813.0, 248256.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('note payable(debt)', 27)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('note payable(debt)', 19)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('note payable(debt)', 41)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('note payable(debt)', 9)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('note payable(debt)', 37)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('note payable(debt)', 22)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('note payable(debt)', 27)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('note payable(debt)', 19)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('note payable(debt)', 41)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('note payable(debt)', 9)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('note payable(debt)', 37)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('note payable(debt)', 22)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('accounts payable', 30), ('small enterprises', 29), ('other trade payables', 25), ('trade and other payables', 21), ('micro enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('total outstanding due of other creditors other than micro and small', 9), ('outstanding dues of creditors other than micro enterprises and small enterprises', 8)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises', 34), ('other trade payables', 31), ('trade and other payables', 28), ('micro enterprises and small enterprises', 24), ('other than micro and small enterprises', 24), ('trade payable', 23), ('outstanding dues of micro enterprises and small enterprises', 23), ('outstanding dues of creditors other than micro enterprises and small enterprises', 22), ('outstanding dues of creditors other than', 22), ('total outstanding due of other creditors other than micro and small', 16)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('total outstanding due of other creditors other than micro and small', 39), ('small enterprises', 38), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36), ('micro enterprises and small enterprises', 35), ('micro enterprises', 32), ('outstanding dues of micro enterprises and small enterprises', 29)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('micro enterprises', 40), ('small enterprises', 40), ('accounts payable', 34), ('trade and other payables', 22), ('trade payable', 22), ('outstanding dues of creditors other than', 21), ('outstanding dues of creditors other than micro enterprises and small enterprises', 17), ('micro enterprises and small enterprises', 16), ('outstanding dues of micro enterprises and small enterprises', 16), ('total outstanding due of other creditors other than micro and small', 16), ('other than micro and small enterprises', 16), ('other trade payables', 12)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('accounts payable', 50), ('other trade payables', 44), ('trade and other payables', 40), ('trade payable', 40), ('small enterprises', 36), ('other than micro and small enterprises', 33), ('micro enterprises', 30), ('outstanding dues of creditors other than micro enterprises and small enterprises', 28), ('outstanding dues of creditors other than', 28), ('micro enterprises and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 24), ('total outstanding due of other creditors other than micro and small', 23)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10), ('total outstanding due of other creditors other than micro and small', 9), ('other trade payables', 8), ('trade and other payables', 7)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('micro enterprises', 29), ('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21), ('small enterprises', 19), ('outstanding dues of creditors other than', 16), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than', 14), ('total outstanding due of other creditors other than micro and small', 14)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('accounts payable', 47), ('other than micro and small enterprises', 39), ('trade payable', 38), ('outstanding dues of creditors other than', 38), ('trade and other payables', 33), ('outstanding dues of creditors other than micro enterprises and small enterprises', 32), ('micro enterprises', 29), ('small enterprises', 29), ('total outstanding due of other creditors other than micro and small', 28), ('other trade payables', 26), ('micro enterprises and small enterprises', 18), ('outstanding dues of micro enterprises and small enterprises', 18)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 8092154.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['16'], 'line_item_value': [8092154.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('accounts payable', 30), ('small enterprises', 29), ('other trade payables', 25), ('trade and other payables', 21), ('micro enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('total outstanding due of other creditors other than micro and small', 9), ('outstanding dues of creditors other than micro enterprises and small enterprises', 8)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises', 34), ('other trade payables', 31), ('trade and other payables', 28), ('micro enterprises and small enterprises', 24), ('other than micro and small enterprises', 24), ('trade payable', 23), ('outstanding dues of micro enterprises and small enterprises', 23), ('outstanding dues of creditors other than micro enterprises and small enterprises', 22), ('outstanding dues of creditors other than', 22), ('total outstanding due of other creditors other than micro and small', 16)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('total outstanding due of other creditors other than micro and small', 39), ('small enterprises', 38), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36), ('micro enterprises and small enterprises', 35), ('micro enterprises', 32), ('outstanding dues of micro enterprises and small enterprises', 29)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('micro enterprises', 40), ('small enterprises', 40), ('accounts payable', 34), ('trade and other payables', 22), ('trade payable', 22), ('outstanding dues of creditors other than', 21), ('outstanding dues of creditors other than micro enterprises and small enterprises', 17), ('micro enterprises and small enterprises', 16), ('outstanding dues of micro enterprises and small enterprises', 16), ('total outstanding due of other creditors other than micro and small', 16), ('other than micro and small enterprises', 16), ('other trade payables', 12)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('accounts payable', 50), ('other trade payables', 44), ('trade and other payables', 40), ('trade payable', 40), ('small enterprises', 36), ('other than micro and small enterprises', 33), ('micro enterprises', 30), ('outstanding dues of creditors other than micro enterprises and small enterprises', 28), ('outstanding dues of creditors other than', 28), ('micro enterprises and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 24), ('total outstanding due of other creditors other than micro and small', 23)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10), ('total outstanding due of other creditors other than micro and small', 9), ('other trade payables', 8), ('trade and other payables', 7)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('micro enterprises', 29), ('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21), ('small enterprises', 19), ('outstanding dues of creditors other than', 16), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than', 14), ('total outstanding due of other creditors other than micro and small', 14)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('accounts payable', 47), ('other than micro and small enterprises', 39), ('trade payable', 38), ('outstanding dues of creditors other than', 38), ('trade and other payables', 33), ('outstanding dues of creditors other than micro enterprises and small enterprises', 32), ('micro enterprises', 29), ('small enterprises', 29), ('total outstanding due of other creditors other than micro and small', 28), ('other trade payables', 26), ('micro enterprises and small enterprises', 18), ('outstanding dues of micro enterprises and small enterprises', 18)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 12878066.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['16'], 'line_item_value': [12878066.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables - other parties', 100), (' trade payables', 100), (' other trade payables', 100), (' trade and other payables', 75), (' related party payables', 70), (' amounts payable to controlling entity', 67), ('trade creditors', 50), ('current', 29)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('trade creditors', 81), (' trade payables - other parties', 64), ('current', 57), (' other trade payables', 57), (' trade and other payables', 46), (' amounts payable to controlling entity', 37), (' trade payables - related parties', 29), (' trade payables', 25), (' trade payables', 25), (' related party payables', 21)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('current', 43), (' amounts payable to controlling entity', 42), ('trade creditors', 33), (' related party payables', 33), (' trade payables', 27), (' trade payables', 27), (' other trade payables', 27), (' trade and other payables', 25), (' trade payables - other parties', 25), (' trade payables - related parties', 17)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), ('trade creditors', 57), (' amounts payable to controlling entity', 57), (' related party payables', 43), (' trade payables - related parties', 43), (' trade payables - other parties', 43), (' other trade payables', 43), (' trade and other payables', 29), (' trade payables', 29), (' trade payables', 29)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' amounts payable to controlling entity', 43), ('trade creditors', 40), (' trade and other payables', 29), (' trade payables - other parties', 29), (' other trade payables', 29), (' related party payables', 14), (' trade payables', 14), (' trade payables - related parties', 14), (' trade payables', 14)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables - other parties', 100), (' trade payables', 100), (' other trade payables', 100), (' trade and other payables', 75), (' related party payables', 70), (' amounts payable to controlling entity', 67), ('trade creditors', 50), ('current', 29)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('trade creditors', 81), (' trade payables - other parties', 64), ('current', 57), (' other trade payables', 57), (' trade and other payables', 46), (' amounts payable to controlling entity', 37), (' trade payables - related parties', 29), (' trade payables', 25), (' trade payables', 25), (' related party payables', 21)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('current', 43), (' amounts payable to controlling entity', 42), ('trade creditors', 33), (' related party payables', 33), (' trade payables', 27), (' trade payables', 27), (' other trade payables', 27), (' trade and other payables', 25), (' trade payables - other parties', 25), (' trade payables - related parties', 17)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), ('trade creditors', 57), (' amounts payable to controlling entity', 57), (' related party payables', 43), (' trade payables - related parties', 43), (' trade payables - other parties', 43), (' other trade payables', 43), (' trade and other payables', 29), (' trade payables', 29), (' trade payables', 29)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' amounts payable to controlling entity', 43), ('trade creditors', 40), (' trade and other payables', 29), (' trade payables - other parties', 29), (' other trade payables', 29), (' related party payables', 14), (' trade payables', 14), (' trade payables - related parties', 14), (' trade payables', 14)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 4, 7, 8, 11], 'score': [100, 81, 100, 100, 81, 100], 'value': [1932688.0, 1415152.0, 12878066.0, 2506637.0, 649702.0, 8092154.0], 'label': ['  Trade payables ', '  Other creditors ', '  Current ', '  Trade payables ', '  Other creditors ', '  Current '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:41+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-04-20 14:19:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other liabilities', 67), ('other current liabilities', 46), ('other financial liabilities', 46), ('other current financial liabilities', 35), ('trade and other payables', 21)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 28)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other liabilities', 41), ('other financial liabilities', 38), ('other current liabilities', 33), ('other current financial liabilities', 32)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('other financial liabilities', 34), ('other current financial liabilities', 33), ('trade and other payables', 22), ('other liabilities', 22)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), ('other current financial liabilities', 70), ('other financial liabilities', 53), ('other liabilities', 53), ('trade and other payables', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8), ('trade and other payables', 7)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other liabilities', 33), ('other current liabilities', 23), ('other financial liabilities', 23), ('trade and other payables', 21), ('other current financial liabilities', 18)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), ('other current financial liabilities', 83), ('other liabilities', 75), ('other financial liabilities', 70), ('trade and other payables', 33)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18, 20, 24], 'score': 100, 'value': 13674586.0, 'line_item_label': ['CURRENT LIABILITIES', 'Trade and other payables', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '16', '7', nan], 'line_item_value': [0.0, 8092154.0, 5334394.0, 248038.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other liabilities', 67), ('other current liabilities', 46), ('other financial liabilities', 46), ('other current financial liabilities', 35), ('trade and other payables', 21)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 28)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other liabilities', 41), ('other financial liabilities', 38), ('other current liabilities', 33), ('other current financial liabilities', 32)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('other financial liabilities', 34), ('other current financial liabilities', 33), ('trade and other payables', 22), ('other liabilities', 22)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), ('other current financial liabilities', 70), ('other financial liabilities', 53), ('other liabilities', 53), ('trade and other payables', 40)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8), ('trade and other payables', 7)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other liabilities', 33), ('other current liabilities', 23), ('other financial liabilities', 23), ('trade and other payables', 21), ('other current financial liabilities', 18)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), ('other current financial liabilities', 83), ('other liabilities', 75), ('other financial liabilities', 70), ('trade and other payables', 33)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18, 20, 24], 'score': 100, 'value': 52268135.0, 'line_item_label': ['CURRENT LIABILITIES', 'Trade and other payables', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '16', '7', nan], 'line_item_value': [0.0, 12878066.0, 39141813.0, 248256.0]}
2023-04-20 14:19:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:41+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [('accrued expenses', 27), ('interest accrued', 25)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 27)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 59)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('accrued expenses', 43), ('interest accrued', 43)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('interest accrued', 33), ('accrued expenses', 22)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [('accrued expenses', 27), ('interest accrued', 25)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 27)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 59)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('accrued expenses', 43), ('interest accrued', 43)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('interest accrued', 33), ('accrued expenses', 22)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-20 14:19:41+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 9], 'score': [100, 100], 'value': [9550494.0, 4976574.0], 'label': ['  Accrued expenses ', '  Accrued expenses '], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 55), ('tax', 33)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 65), ('current tax liabilities', 41)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 50), (' income tax payable', 21), ('current tax liabilities', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 60)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 25), ('tax', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('current tax liabilities', 88), (' income tax payable', 38), ('tax', 33)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [16, 20, 24], 'score': 88, 'value': 5582432.0, 'line_item_label': ['LIABILITIES', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 5334394.0, 248038.0]}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 55), ('tax', 33)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 65), ('current tax liabilities', 41)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 50), (' income tax payable', 21), ('current tax liabilities', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 60)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 25), ('tax', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('current tax liabilities', 88), (' income tax payable', 38), ('tax', 33)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [16, 20, 24], 'score': 88, 'value': 39390069.0, 'line_item_label': ['LIABILITIES', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 39141813.0, 248256.0]}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' other financial liabilities', 47), (' foreign exchange contract liability', 44), (' customer deposits', 36), (' employee benefits', 34), (' deferred revenue', 31), (' trade and other payables', 28), ('provisions', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' other financial liabilities', 38), (' deferred revenue', 35), ('other current liabilities', 33), (' financial liabilities', 33), (' other current liabilities', 33), (' customer deposits', 22), (' foreign exchange contract liability', 19), ('provisions', 14), (' employee benefits', 11)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' other financial liabilities', 34), (' deferred revenue', 30), (' financial liabilities', 28), (' foreign exchange contract liability', 26), (' trade and other payables', 22), (' customer deposits', 21), ('provisions', 19)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 41), (' trade and other payables', 40), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' deferred revenue', 22), ('other current liabilities', 15), (' other current liabilities', 15), (' foreign exchange contract liability', 11), (' financial liabilities', 10), (' employee benefits', 10), (' customer deposits', 10), (' other financial liabilities', 8), (' trade and other payables', 7)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 11), (' financial liabilities', 10)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 38), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), (' other current liabilities', 100), (' other financial liabilities', 70), (' financial liabilities', 47), (' foreign exchange contract liability', 39), (' trade and other payables', 33), (' employee benefits', 29), (' customer deposits', 29), (' deferred revenue', 19), ('provisions', 15)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18, 19, 20, 21, 24], 'score': 100, 'value': 15711294.0, 'line_item_label': ['CURRENT LIABILITIES', 'Trade and other payables', 'Employee benefits', 'Current tax liabilities', 'Provisions', 'Other current liabilities'], 'note_numbers': [nan, '16', '15', '7', '15', nan], 'line_item_value': [0.0, 8092154.0, 1786202.0, 5334394.0, 250506.0, 248038.0]}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' other financial liabilities', 47), (' foreign exchange contract liability', 44), (' customer deposits', 36), (' employee benefits', 34), (' deferred revenue', 31), (' trade and other payables', 28), ('provisions', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' other financial liabilities', 38), (' deferred revenue', 35), ('other current liabilities', 33), (' financial liabilities', 33), (' other current liabilities', 33), (' customer deposits', 22), (' foreign exchange contract liability', 19), ('provisions', 14), (' employee benefits', 11)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' other financial liabilities', 34), (' deferred revenue', 30), (' financial liabilities', 28), (' foreign exchange contract liability', 26), (' trade and other payables', 22), (' customer deposits', 21), ('provisions', 19)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 41), (' trade and other payables', 40), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' deferred revenue', 22), ('other current liabilities', 15), (' other current liabilities', 15), (' foreign exchange contract liability', 11), (' financial liabilities', 10), (' employee benefits', 10), (' customer deposits', 10), (' other financial liabilities', 8), (' trade and other payables', 7)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 11), (' financial liabilities', 10)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 38), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), (' other current liabilities', 100), (' other financial liabilities', 70), (' financial liabilities', 47), (' foreign exchange contract liability', 39), (' trade and other payables', 33), (' employee benefits', 29), (' customer deposits', 29), (' deferred revenue', 19), ('provisions', 15)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18, 19, 20, 21, 24], 'score': 100, 'value': 55808008.0, 'line_item_label': ['CURRENT LIABILITIES', 'Trade and other payables', 'Employee benefits', 'Current tax liabilities', 'Provisions', 'Other current liabilities'], 'note_numbers': [nan, '16', '15', '7', '15', nan], 'line_item_value': [0.0, 12878066.0, 2455852.0, 39141813.0, 1084021.0, 248256.0]}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [(' share of joint venture payables', 76), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 67), (' gst payable and accruals', 67), (' employee benefits - payroll', 60), (' contract liabilites - current', 58), ('other creditors and accruals', 50), (' other related parties', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' loans from related party', 42), (' current - liability for annual and long service leave', 42), (' gst liabilities', 42), (' rebates', 40), (' other', 40), (' arising from service contracts', 35), (' forward exchange contracts', 35), (' ultimate parent entity', 33), (' make good provisions', 33), (' gst', 33), (' total current employee benefits', 33), ('current', 29), (' other creditors', 25), (' other creditors', 25), (' employee benefits - current', 25), (' provision for associate funding', 25), (' other creditors', 25), (' warranty', 25), (' restructuring', 20), (' abandonment and decommissioning costs', 17), (' provisions - current', 15)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' other related parties', 64), (' rebates', 60), ('current', 57), (' employee benefits - current', 50), (' total current employee benefits', 50), (' provisions - current', 48), (' contract liabilites - current', 48), (' restructuring', 47), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' employee benefits - payroll', 43), (' arising from service contracts', 43), (' warranty', 38), (' ultimate parent entity', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' share of joint venture payables', 36), (' provision for associate funding', 36), (' forward exchange contracts', 36), (' current - liability for annual and long service leave', 33), (' gst', 33), (' abandonment and decommissioning costs', 31), (' make good provisions', 26), (' gst payable and accruals', 24), (' gst payables', 20), (' gst liabilities', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('other creditors and accruals', 53), (' gst payable and accruals', 53), (' forward exchange contracts', 50), ('current', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 42), (' total current employee benefits', 42), (' provisions - current', 40), (' contract liabilites - current', 40), (' gst', 40), (' rebates', 40), (' provision for associate funding', 35), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' secured long-term bank loans', 30), (' other creditors', 27), (' other creditors', 27), (' arising from service contracts', 27), (' other creditors', 27), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' warranty', 25), (' other related parties', 22), (' make good provisions', 20), (' restructuring', 20), (' other', 20), (' gst payables', 17), (' gst liabilities', 17)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 67), ('other creditors and accruals', 57), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), (' restructuring', 55), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 29), (' other', 29), (' gst payables', 14), (' make good provisions', 14), (' gst liabilities', 14)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' current - liability for annual and long service leave', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' restructuring', 46), ('other creditors and accruals', 43), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' other', 40), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' loans from related party', 29), (' other creditors', 29), (' make good provisions', 29), (' rebates', 29), (' other creditors', 29), (' warranty', 29), (' provision for associate funding', 22), (' employee benefits - payroll', 20), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [(' share of joint venture payables', 76), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 67), (' gst payable and accruals', 67), (' employee benefits - payroll', 60), (' contract liabilites - current', 58), ('other creditors and accruals', 50), (' other related parties', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' loans from related party', 42), (' current - liability for annual and long service leave', 42), (' gst liabilities', 42), (' rebates', 40), (' other', 40), (' arising from service contracts', 35), (' forward exchange contracts', 35), (' ultimate parent entity', 33), (' make good provisions', 33), (' gst', 33), (' total current employee benefits', 33), ('current', 29), (' other creditors', 25), (' other creditors', 25), (' employee benefits - current', 25), (' provision for associate funding', 25), (' other creditors', 25), (' warranty', 25), (' restructuring', 20), (' abandonment and decommissioning costs', 17), (' provisions - current', 15)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' other related parties', 64), (' rebates', 60), ('current', 57), (' employee benefits - current', 50), (' total current employee benefits', 50), (' provisions - current', 48), (' contract liabilites - current', 48), (' restructuring', 47), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' employee benefits - payroll', 43), (' arising from service contracts', 43), (' warranty', 38), (' ultimate parent entity', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' share of joint venture payables', 36), (' provision for associate funding', 36), (' forward exchange contracts', 36), (' current - liability for annual and long service leave', 33), (' gst', 33), (' abandonment and decommissioning costs', 31), (' make good provisions', 26), (' gst payable and accruals', 24), (' gst payables', 20), (' gst liabilities', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('other creditors and accruals', 53), (' gst payable and accruals', 53), (' forward exchange contracts', 50), ('current', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 42), (' total current employee benefits', 42), (' provisions - current', 40), (' contract liabilites - current', 40), (' gst', 40), (' rebates', 40), (' provision for associate funding', 35), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' secured long-term bank loans', 30), (' other creditors', 27), (' other creditors', 27), (' arising from service contracts', 27), (' other creditors', 27), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' warranty', 25), (' other related parties', 22), (' make good provisions', 20), (' restructuring', 20), (' other', 20), (' gst payables', 17), (' gst liabilities', 17)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 67), ('other creditors and accruals', 57), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), (' restructuring', 55), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 29), (' other', 29), (' gst payables', 14), (' make good provisions', 14), (' gst liabilities', 14)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' current - liability for annual and long service leave', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' restructuring', 46), ('other creditors and accruals', 43), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' other', 40), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' loans from related party', 29), (' other creditors', 29), (' make good provisions', 29), (' rebates', 29), (' other creditors', 29), (' warranty', 29), (' provision for associate funding', 22), (' employee benefits - payroll', 20), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4, 8, 11], 'score': [100, 100, 100, 100], 'value': [1415152.0, 12878066.0, 649702.0, 8092154.0], 'label': ['  Other creditors ', '  Current ', '  Other creditors ', '  Current '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' loan payable to relayed party under tax funding agreement', 50), (' other creditors', 48), (' other creditors', 48), (' other creditors', 48), (' ultimate parent entity', 47), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' rebates', 40), (' other', 40), (' contract liabilites - current', 37), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' gst', 33), (' abandonment and decommissioning costs', 29), (' restructuring', 29), (' arising from service contracts', 28), ('other creditors and accruals', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' make good provisions', 27), (' forward exchange contracts', 27), (' warranty', 27), (' other related parties', 21), (' gst payables', 15), (' gst liabilities', 15)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = other provisions , res_fuzz_match = [(' other', 100), (' make good provisions', 73), ('other creditors and accruals', 67), (' other creditors', 67), (' other creditors', 67), (' other creditors', 67), (' other related parties', 58), (' loans from related party', 50), (' provisions - current', 50), (' provision for associate funding', 50), (' employee benefits - payroll', 48), (' secured long-term bank loans', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' share of joint venture payables', 42), (' arising from service contracts', 42), (' gst', 40), (' warranty', 38), (' ultimate parent entity', 33), (' derivative contracts - at fair value', 33), (' loan payable to relayed party under tax funding agreement', 33), (' gst payables', 30), (' forward exchange contracts', 30), ('current', 29), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' abandonment and decommissioning costs', 25), (' total current employee benefits', 25), (' restructuring', 22), (' rebates', 20), (' gst liabilities', 17)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 67), ('other creditors and accruals', 57), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), (' restructuring', 55), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 29), (' other', 29), (' gst payables', 14), (' make good provisions', 14), (' gst liabilities', 14)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' current - liability for annual and long service leave', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' restructuring', 46), ('other creditors and accruals', 43), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' other', 40), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' loans from related party', 29), (' other creditors', 29), (' make good provisions', 29), (' rebates', 29), (' other creditors', 29), (' warranty', 29), (' provision for associate funding', 22), (' employee benefits - payroll', 20), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = balance at beginning of the period , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' loans from related party', 48), (' employee benefits - payroll', 45), ('current', 43), (' other creditors', 42), (' other creditors', 42), (' other creditors', 42), (' gst payables', 40), (' rebates', 40), (' warranty', 38), (' share of joint venture payables', 35), (' total current employee benefits', 34), (' gst', 33), (' forward exchange contracts', 33), (' ultimate parent entity', 32), (' make good provisions', 32), (' secured long-term bank loans', 31), (' employee benefits - current', 31), ('other creditors and accruals', 30), (' loan payable to relayed party under tax funding agreement', 30), (' current - liability for annual and long service leave', 30), (' provisions - current', 30), (' abandonment and decommissioning costs', 30), (' gst liabilities', 30), (' provision for associate funding', 29), (' gst payable and accruals', 28), (' arising from service contracts', 26), (' contract liabilites - current', 22), (' derivative contracts - at fair value', 17), (' restructuring', 14)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = additional provisions recognised , res_fuzz_match = [(' provisions - current', 71), (' make good provisions', 56), (' provision for associate funding', 48), (' arising from service contracts', 48), ('current', 43), (' abandonment and decommissioning costs', 43), (' employee benefits - current', 42), (' contract liabilites - current', 42), (' gst', 40), (' rebates', 40), (' employee benefits - payroll', 39), (' ultimate parent entity', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' forward exchange contracts', 34), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' restructuring', 33), (' total current employee benefits', 33), (' gst payables', 30), (' gst liabilities', 30), (' derivative contracts - at fair value', 29), (' secured long-term bank loans', 29), ('other creditors and accruals', 26), (' gst payable and accruals', 25), (' share of joint venture payables', 24), (' other', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = balance at end of period , res_fuzz_match = [(' current - liability for annual and long service leave', 53), (' abandonment and decommissioning costs', 47), (' make good provisions', 47), (' employee benefits - payroll', 45), ('current', 43), (' loans from related party', 43), (' loan payable to relayed party under tax funding agreement', 41), (' total current employee benefits', 41), (' ultimate parent entity', 40), (' rebates', 40), (' other', 40), (' gst payable and accruals', 39), (' secured long-term bank loans', 38), (' warranty', 38), (' provision for associate funding', 36), (' share of joint venture payables', 35), ('other creditors and accruals', 34), (' contract liabilites - current', 33), (' forward exchange contracts', 33), (' employee benefits - current', 31), (' derivative contracts - at fair value', 29), (' other creditors', 27), (' other creditors', 27), (' other creditors', 27), (' arising from service contracts', 26), (' other related parties', 24), (' gst liabilities', 22), (' provisions - current', 21), (' gst payables', 20), (' restructuring', 14), (' gst', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' loan payable to relayed party under tax funding agreement', 50), (' other creditors', 48), (' other creditors', 48), (' other creditors', 48), (' ultimate parent entity', 47), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' rebates', 40), (' other', 40), (' contract liabilites - current', 37), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' gst', 33), (' abandonment and decommissioning costs', 29), (' restructuring', 29), (' arising from service contracts', 28), ('other creditors and accruals', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' make good provisions', 27), (' forward exchange contracts', 27), (' warranty', 27), (' other related parties', 21), (' gst payables', 15), (' gst liabilities', 15)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = other provisions , res_fuzz_match = [(' other', 100), (' make good provisions', 73), ('other creditors and accruals', 67), (' other creditors', 67), (' other creditors', 67), (' other creditors', 67), (' other related parties', 58), (' loans from related party', 50), (' provisions - current', 50), (' provision for associate funding', 50), (' employee benefits - payroll', 48), (' secured long-term bank loans', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' share of joint venture payables', 42), (' arising from service contracts', 42), (' gst', 40), (' warranty', 38), (' ultimate parent entity', 33), (' derivative contracts - at fair value', 33), (' loan payable to relayed party under tax funding agreement', 33), (' gst payables', 30), (' forward exchange contracts', 30), ('current', 29), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' abandonment and decommissioning costs', 25), (' total current employee benefits', 25), (' restructuring', 22), (' rebates', 20), (' gst liabilities', 17)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 67), ('other creditors and accruals', 57), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), (' restructuring', 55), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 29), (' other', 29), (' gst payables', 14), (' make good provisions', 14), (' gst liabilities', 14)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' current - liability for annual and long service leave', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' restructuring', 46), ('other creditors and accruals', 43), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' other', 40), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' loans from related party', 29), (' other creditors', 29), (' make good provisions', 29), (' rebates', 29), (' other creditors', 29), (' warranty', 29), (' provision for associate funding', 22), (' employee benefits - payroll', 20), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = balance at beginning of the period , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' loans from related party', 48), (' employee benefits - payroll', 45), ('current', 43), (' other creditors', 42), (' other creditors', 42), (' other creditors', 42), (' gst payables', 40), (' rebates', 40), (' warranty', 38), (' share of joint venture payables', 35), (' total current employee benefits', 34), (' gst', 33), (' forward exchange contracts', 33), (' ultimate parent entity', 32), (' make good provisions', 32), (' secured long-term bank loans', 31), (' employee benefits - current', 31), ('other creditors and accruals', 30), (' loan payable to relayed party under tax funding agreement', 30), (' current - liability for annual and long service leave', 30), (' provisions - current', 30), (' abandonment and decommissioning costs', 30), (' gst liabilities', 30), (' provision for associate funding', 29), (' gst payable and accruals', 28), (' arising from service contracts', 26), (' contract liabilites - current', 22), (' derivative contracts - at fair value', 17), (' restructuring', 14)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = additional provisions recognised , res_fuzz_match = [(' provisions - current', 71), (' make good provisions', 56), (' provision for associate funding', 48), (' arising from service contracts', 48), ('current', 43), (' abandonment and decommissioning costs', 43), (' employee benefits - current', 42), (' contract liabilites - current', 42), (' gst', 40), (' rebates', 40), (' employee benefits - payroll', 39), (' ultimate parent entity', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' forward exchange contracts', 34), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' restructuring', 33), (' total current employee benefits', 33), (' gst payables', 30), (' gst liabilities', 30), (' derivative contracts - at fair value', 29), (' secured long-term bank loans', 29), ('other creditors and accruals', 26), (' gst payable and accruals', 25), (' share of joint venture payables', 24), (' other', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = balance at end of period , res_fuzz_match = [(' current - liability for annual and long service leave', 53), (' abandonment and decommissioning costs', 47), (' make good provisions', 47), (' employee benefits - payroll', 45), ('current', 43), (' loans from related party', 43), (' loan payable to relayed party under tax funding agreement', 41), (' total current employee benefits', 41), (' ultimate parent entity', 40), (' rebates', 40), (' other', 40), (' gst payable and accruals', 39), (' secured long-term bank loans', 38), (' warranty', 38), (' provision for associate funding', 36), (' share of joint venture payables', 35), ('other creditors and accruals', 34), (' contract liabilites - current', 33), (' forward exchange contracts', 33), (' employee benefits - current', 31), (' derivative contracts - at fair value', 29), (' other creditors', 27), (' other creditors', 27), (' other creditors', 27), (' arising from service contracts', 26), (' other related parties', 24), (' gst liabilities', 22), (' provisions - current', 21), (' gst payables', 20), (' restructuring', 14), (' gst', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 11, 12, 14], 'score': [100, 100, 100, 100, 100, 100], 'value': [2767587.0, 12151482.0, 3539873.0, 2027681.0, 11466220.0, 2036708.0], 'label': ['  Employee benefits', '  Other provisions', '  Current', '  Employee benefits', '  Other provisions', '  Current'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 28)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current liabilities', 88)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current liabilities', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current liabilities', 64)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('current liabilities', 82)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 20, 24], 'score': 82, 'value': 5582432.0, 'line_item_label': ['CURRENT LIABILITIES', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 5334394.0, 248038.0]}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 28)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current liabilities', 88)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current liabilities', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current liabilities', 64)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('current liabilities', 82)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 20, 24], 'score': 82, 'value': 39390069.0, 'line_item_label': ['CURRENT LIABILITIES', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 39141813.0, 248256.0]}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term debt', 11)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term debt', 41)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('long term debt', 30)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('long term debt', 24)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('long term debt', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term debt', 11)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term debt', 41)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('long term debt', 30)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('long term debt', 24)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('long term debt', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 35), (' borrowings', 33)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 53), (' lease liabilities', 48), (' lease liability', 48), ('interest bearing loans and borrowings', 45), (' borrowings', 25)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 40), (' lease liabilities', 36), (' lease liability', 36), (' loans and borrowings', 30), (' borrowings', 17)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), (' loans and borrowings', 40), (' borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 100), (' borrowings', 100), (' loans and borrowings', 100), (' lease liabilities', 22), (' lease liability', 22)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 22)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 44), (' loans and borrowings', 29), (' borrowings', 22)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [30, 31], 'score': 100, 'value': 54936678.0, 'line_item_label': ['Borrowings', 'Lease liability'], 'note_numbers': ['14', '22'], 'line_item_value': [48102669.0, 6834009.0]}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 35), (' borrowings', 33)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 53), (' lease liabilities', 48), (' lease liability', 48), ('interest bearing loans and borrowings', 45), (' borrowings', 25)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 40), (' lease liabilities', 36), (' lease liability', 36), (' loans and borrowings', 30), (' borrowings', 17)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), (' loans and borrowings', 40), (' borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 100), (' borrowings', 100), (' loans and borrowings', 100), (' lease liabilities', 22), (' lease liability', 22)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 22)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 44), (' loans and borrowings', 29), (' borrowings', 22)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [30, 31], 'score': 100, 'value': 42372893.0, 'line_item_label': ['Borrowings', 'Lease liability'], 'note_numbers': ['14', '22'], 'line_item_value': [36057231.0, 6315662.0]}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost mizuho bank term loan, secured , res_fuzz_match = [('later than 1 year', 60), ('not later than 5 years', 58), (' bank loan', 56), (' non current', 55), ('leases', 50), (' secured finance debt', 47), (' lease liabilities - non-current', 42), (' lease liabilities', 36), (' lease liability', 36)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost smbc term loan, secured , res_fuzz_match = [('later than 1 year', 60), (' bank loan', 56), (' non current', 55), ('not later than 5 years', 53), ('leases', 50), (' secured finance debt', 47), (' lease liabilities - non-current', 42), (' lease liabilities', 36), (' lease liability', 36)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost , res_fuzz_match = [(' secured finance debt', 47), (' non current', 45), (' lease liabilities - non-current', 33), ('later than 1 year', 33), ('not later than 5 years', 32), (' lease liabilities', 27), (' lease liability', 27), ('leases', 25), (' bank loan', 22)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost current , res_fuzz_match = [(' non current', 82), (' secured finance debt', 47), (' lease liabilities - non-current', 42), ('later than 1 year', 33), (' lease liabilities', 27), (' lease liability', 27), ('not later than 5 years', 27), ('leases', 25), (' bank loan', 22)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost mizuho bank term loan, secured , res_fuzz_match = [('later than 1 year', 60), ('not later than 5 years', 58), (' bank loan', 56), (' non current', 55), ('leases', 50), (' secured finance debt', 47), (' lease liabilities - non-current', 42), (' lease liabilities', 36), (' lease liability', 36)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost smbc term loan, secured , res_fuzz_match = [('later than 1 year', 60), (' bank loan', 56), (' non current', 55), ('not later than 5 years', 53), ('leases', 50), (' secured finance debt', 47), (' lease liabilities - non-current', 42), (' lease liabilities', 36), (' lease liability', 36)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost , res_fuzz_match = [(' secured finance debt', 47), (' non current', 45), (' lease liabilities - non-current', 33), ('later than 1 year', 33), ('not later than 5 years', 32), (' lease liabilities', 27), (' lease liability', 27), ('leases', 25), (' bank loan', 22)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost current , res_fuzz_match = [(' non current', 82), (' secured finance debt', 47), (' lease liabilities - non-current', 42), ('later than 1 year', 33), (' lease liabilities', 27), (' lease liability', 27), ('not later than 5 years', 27), ('leases', 25), (' bank loan', 22)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 7], 'score': [82, 82], 'value': [15536531.0, 14506615.0], 'label': ['Secured - at amortised cost Current', 'Secured - at amortised cost Current'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' non current', 100), (' lease liabilities - non-current', 73), (' secured finance debt', 57), ('later than 1 year', 29), ('not later than 5 years', 29), ('leases', 25), (' bank loan', 14), (' lease liabilities', 14), (' lease liability', 14)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [(' lease liabilities - non-current', 100), (' non current', 86), (' secured finance debt', 43), (' bank loan', 43), ('later than 1 year', 31), ('not later than 5 years', 31), ('leases', 0), (' lease liabilities', 0), (' lease liability', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' non current', 100), (' lease liabilities - non-current', 73), (' secured finance debt', 57), ('later than 1 year', 29), ('not later than 5 years', 29), ('leases', 25), (' bank loan', 14), (' lease liabilities', 14), (' lease liability', 14)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [(' lease liabilities - non-current', 100), (' non current', 86), (' secured finance debt', 43), (' bank loan', 43), ('later than 1 year', 31), ('not later than 5 years', 31), ('leases', 0), (' lease liabilities', 0), (' lease liability', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [100, 100, 100, 100], 'value': [1615671.0, 6315662.0, 2719442.0, 6834009.0], 'label': [' Current', ' Non-current', ' Current', ' Non-current'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 23)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 39), ('(bond)', 15)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 21)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('(bond)', 40), ('interest bearing loans and borrowings', 34)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 26), ('(bond)', 15)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 23)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 39), ('(bond)', 15)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 21)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('(bond)', 40), ('interest bearing loans and borrowings', 34)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 26), ('(bond)', 15)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 23)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 39), ('lease liabilities', 30)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('lease liabilities', 15)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 34), ('lease liabilities', 12)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('lease liabilities', 59), ('interest bearing loans and borrowings', 36)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('lease liabilities', 30), ('interest bearing loans and borrowings', 26)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [31], 'score': 100, 'value': 6834009.0, 'line_item_label': ['Lease liability'], 'note_numbers': ['22'], 'line_item_value': [6834009.0]}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 23)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 39), ('lease liabilities', 30)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('lease liabilities', 15)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 34), ('lease liabilities', 12)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('lease liabilities', 59), ('interest bearing loans and borrowings', 36)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('lease liabilities', 30), ('interest bearing loans and borrowings', 26)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [31], 'score': 100, 'value': 6315662.0, 'line_item_label': ['Lease liability'], 'note_numbers': ['22'], 'line_item_value': [6315662.0]}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 45)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 40), ('lease liabilities', 36)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), ('lease liabilities', 17)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 100), ('lease liabilities', 22)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 44)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [30, 31], 'score': 100, 'value': 54936678.0, 'line_item_label': ['Borrowings', 'Lease liability'], 'note_numbers': ['14', '22'], 'line_item_value': [48102669.0, 6834009.0]}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 45)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 40), ('lease liabilities', 36)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), ('lease liabilities', 17)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 100), ('lease liabilities', 22)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 44)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [30, 31], 'score': 100, 'value': 42372893.0, 'line_item_label': ['Borrowings', 'Lease liability'], 'note_numbers': ['14', '22'], 'line_item_value': [36057231.0, 6315662.0]}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost mizuho bank term loan, secured , res_fuzz_match = [('total deferred tax (assets) / liabilities', 36), ('deferred tax liabilities', 31)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost smbc term loan, secured , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 31)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost , res_fuzz_match = [('total deferred tax (assets) / liabilities', 36), ('deferred tax liabilities', 31)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost current , res_fuzz_match = [('deferred tax liabilities', 31), ('total deferred tax (assets) / liabilities', 22)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost mizuho bank term loan, secured , res_fuzz_match = [('total deferred tax (assets) / liabilities', 36), ('deferred tax liabilities', 31)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost smbc term loan, secured , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 31)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost , res_fuzz_match = [('total deferred tax (assets) / liabilities', 36), ('deferred tax liabilities', 31)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost current , res_fuzz_match = [('deferred tax liabilities', 31), ('total deferred tax (assets) / liabilities', 22)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('deferred tax liabilities', 29), ('total deferred tax (assets) / liabilities', 29)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('deferred tax liabilities', 14), ('total deferred tax (assets) / liabilities', 14)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('deferred tax liabilities', 29), ('total deferred tax (assets) / liabilities', 29)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('deferred tax liabilities', 14), ('total deferred tax (assets) / liabilities', 14)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('common stock', 23), ('contributed equity', 20), ('equity share capital', 19), (' issued capital', 17), ('share capital', 16), (' share capital', 16), ('perpetual equity instrument', 15)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('share capital', 30), (' share capital', 30), ('perpetual equity instrument', 21), ('contributed equity', 21), ('equity share capital', 20), (' issued capital', 19), ('common stock', 18)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('contributed equity', 32), ('share capital', 31), (' share capital', 31), ('equity share capital', 30), ('perpetual equity instrument', 30), (' issued capital', 24), ('common stock', 7)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' issued capital', 38), ('share capital', 35), (' share capital', 35), ('equity share capital', 25), ('common stock', 22), ('contributed equity', 18), ('perpetual equity instrument', 13)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('common stock', 22), ('contributed equity', 18), ('perpetual equity instrument', 13), ('share capital', 12), (' share capital', 12), ('equity share capital', 8), (' issued capital', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' issued capital', 29), ('share capital', 27), (' share capital', 27), ('contributed equity', 22), ('equity share capital', 21), ('perpetual equity instrument', 17), ('common stock', 9)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('share capital', 30), (' share capital', 30), ('equity share capital', 24), (' issued capital', 23), ('perpetual equity instrument', 20), ('common stock', 14), ('contributed equity', 6)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('share capital', 40), (' share capital', 40), ('equity share capital', 37), ('contributed equity', 32), (' issued capital', 32), ('perpetual equity instrument', 29), ('common stock', 19)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('common stock', 23), ('contributed equity', 20), ('equity share capital', 19), (' issued capital', 17), ('share capital', 16), (' share capital', 16), ('perpetual equity instrument', 15)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('share capital', 30), (' share capital', 30), ('perpetual equity instrument', 21), ('contributed equity', 21), ('equity share capital', 20), (' issued capital', 19), ('common stock', 18)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('contributed equity', 32), ('share capital', 31), (' share capital', 31), ('equity share capital', 30), ('perpetual equity instrument', 30), (' issued capital', 24), ('common stock', 7)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' issued capital', 38), ('share capital', 35), (' share capital', 35), ('equity share capital', 25), ('common stock', 22), ('contributed equity', 18), ('perpetual equity instrument', 13)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('common stock', 22), ('contributed equity', 18), ('perpetual equity instrument', 13), ('share capital', 12), (' share capital', 12), ('equity share capital', 8), (' issued capital', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' issued capital', 29), ('share capital', 27), (' share capital', 27), ('contributed equity', 22), ('equity share capital', 21), ('perpetual equity instrument', 17), ('common stock', 9)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('share capital', 30), (' share capital', 30), ('equity share capital', 24), (' issued capital', 23), ('perpetual equity instrument', 20), ('common stock', 14), ('contributed equity', 6)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('share capital', 40), (' share capital', 40), ('equity share capital', 37), ('contributed equity', 32), (' issued capital', 32), ('perpetual equity instrument', 29), ('common stock', 19)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('minority interest', 28)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('minority interest', 34)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('minority interest', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('minority interest', 16)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('minority interest', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('minority interest', 28)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('minority interest', 34)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('minority interest', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('minority interest', 16)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('minority interest', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term liabilities', 32)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term liabilities', 32)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('long term liabilities', 27)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('long term liabilities', 44)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('long term liabilities', 50)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term liabilities', 32)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term liabilities', 32)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('long term liabilities', 27)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('long term liabilities', 44)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('long term liabilities', 50)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('share capital', 67), ('equity share capital', 50), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('perpetual equity instrument', 26), ('share capital', 24), ('equity share capital', 17), ('common stock', 11)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('equity share capital', 28), ('share capital', 27), ('common stock', 26), ('perpetual equity instrument', 22)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('share capital', 67), ('equity share capital', 50), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('perpetual equity instrument', 26), ('share capital', 24), ('equity share capital', 17), ('common stock', 11)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('equity share capital', 28), ('share capital', 27), ('common stock', 26), ('perpetual equity instrument', 22)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67), ('reserves and surplus', 52), ('other equity', 33), ('additional paid in capital', 0), ('additional paid up capital', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves and surplus', 36), ('additional paid in capital', 30), ('additional paid up capital', 30), ('other equity', 17)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67), ('reserves and surplus', 52), ('other equity', 33), ('additional paid in capital', 0), ('additional paid up capital', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves and surplus', 36), ('additional paid in capital', 30), ('additional paid up capital', 30), ('other equity', 17)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves surplus', 63), ('other equity', 33), ('retained earnings', 24), (' accumulated losses', 11)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('other equity', 17), ('reserves surplus', 17), (' accumulated losses', 17)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [39], 'score': 100, 'value': 28509330.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [28509330.0]}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves surplus', 63), ('other equity', 33), ('retained earnings', 24), (' accumulated losses', 11)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('other equity', 17), ('reserves surplus', 17), (' accumulated losses', 17)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [39], 'score': 100, 'value': 122111851.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [122111851.0]}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves', 'reserves']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27), ('reserves', 12)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves', 100), ('other reserves', 67)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves', 24)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [38], 'score': 100, 'value': 2011521.0, 'line_item_label': ['Reserves'], 'note_numbers': [nan], 'line_item_value': [2011521.0]}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27), ('reserves', 12)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves', 100), ('other reserves', 67)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves', 24)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [38], 'score': 100, 'value': 3384.0, 'line_item_label': ['Reserves'], 'note_numbers': [nan], 'line_item_value': [3384.0]}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 17)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 29)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 17)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 29)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:42+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-04-20 14:19:42+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value']
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 77944930.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [77944930.0]}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 83893305.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [83893305.0]}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['cost', 'gross'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - best_match = {'data_index': [40, 41, 42, 43, 44, 45, 46, 47, 48, 49], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [15625586.0, 1626478.0, 0.0, -91683.0, 17160381.0, 0.0, 0.0, 0.0, 0.0, 17160381.0], 'label': ['Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-04-20 14:19:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:42+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:42+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('government subsidies receivable', 31), ('billed', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('receivable', 50), ('billed', 50), ('trade and other receivables', 48), ('account receivables', 36), ('trade receivables', 35), ('government subsidies receivable', 26)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 61), ('billed', 29), ('unbilled', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('receivable', 50), ('account receivables', 44), ('unbilled', 40), ('trade receivables', 36), ('trade and other receivables', 36), ('government subsidies receivable', 33), ('billed', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('receivable', 100), ('trade receivables', 78), ('account receivables', 64), ('trade and other receivables', 55), ('government subsidies receivable', 50), ('unbilled', 40), ('billed', 29)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('receivable', 36), ('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('billed', 0), ('unbilled', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('trade and other receivables', 67), ('account receivables', 43), ('government subsidies receivable', 42), ('receivable', 33), ('trade receivables', 26), ('billed', 25), ('unbilled', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 5], 'score': 100, 'value': 13983506.0, 'line_item_label': ['Trade and other receivables', 'Current tax receivables'], 'note_numbers': ['10', '7'], 'line_item_value': [13983506.0, 0.0]}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('government subsidies receivable', 31), ('billed', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('receivable', 50), ('billed', 50), ('trade and other receivables', 48), ('account receivables', 36), ('trade receivables', 35), ('government subsidies receivable', 26)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 61), ('billed', 29), ('unbilled', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('receivable', 50), ('account receivables', 44), ('unbilled', 40), ('trade receivables', 36), ('trade and other receivables', 36), ('government subsidies receivable', 33), ('billed', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('receivable', 100), ('trade receivables', 78), ('account receivables', 64), ('trade and other receivables', 55), ('government subsidies receivable', 50), ('unbilled', 40), ('billed', 29)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('receivable', 36), ('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('billed', 0), ('unbilled', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('trade and other receivables', 67), ('account receivables', 43), ('government subsidies receivable', 42), ('receivable', 33), ('trade receivables', 26), ('billed', 25), ('unbilled', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 5], 'score': 100, 'value': 23265701.0, 'line_item_label': ['Trade and other receivables', 'Current tax receivables'], 'note_numbers': ['10', '7'], 'line_item_value': [23265701.0, 0.0]}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 76), (' related party receivables', 70), (' net trade debtors', 58), (' other debtors', 42), ('current', 29)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [('trade receivables', 78), (' share of joint venture receivables', 75), (' related party receivables', 67), (' other debtors', 58), ('current', 43), (' net trade debtors', 29)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 76), (' related party receivables', 70), (' net trade debtors', 58), (' other debtors', 42), ('current', 29)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [('trade receivables', 78), (' share of joint venture receivables', 75), (' related party receivables', 67), (' other debtors', 58), ('current', 43), (' net trade debtors', 29)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': [100, 100], 'value': [20803777.0, 12458361.0], 'label': [' Trade receivables', ' Trade receivables'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('revenue from operations', 43), (' Sale of coal', 38), (' Sales revenue', 35), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 22), (' Revenue', 22), ('net sales', 20), ('sale of products', 17), ('transmission and distribution business', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('sale of products', 22), ('net sales', 14), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Sale of coal', 100), ('net sales', 59), ('sale of products', 57), (' Sales revenue', 50), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('from trading business', 25), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('sale of products', 69), ('from trading business', 38), (' Sale of coal', 38), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('net sales', 32), ('transmission and distribution business', 31), ('revenue from operations', 24), (' Revenue', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Sale of coal', 61), ('sale of products', 46), ('net sales', 36), ('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('transmission and distribution business', 29), ('from trading business', 28), ('revenue from operations', 27), (' Sales revenue', 24), (' Revenue', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('sale of products', 33), ('from trading business', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 19), (' Sales revenue', 17), ('transmission and distribution business', 15), (' Revenue', 11), ('net sales', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 21), ('transmission and distribution business', 21), (' Revenue', 12), ('sale of products', 9), (' Sales revenue', 9)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), (' Revenue', 33), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('from trading business', 22), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), ('transmission and distribution business', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('transmission and distribution business', 53), (' Sales revenue', 44), ('sale of products', 36), ('revenue from operations', 32), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), (' Revenue', 30), ('net sales', 28), ('from trading business', 28), (' Sale of coal', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('transmission and distribution business', 41), (' Sales revenue', 37), (' Revenue', 36), ('revenue from operations', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('from trading business', 26), ('net sales', 25), (' Sale of coal', 24), ('sale of products', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations', 68), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), ('from trading business', 43), ('sale of products', 24), (' Sales revenue', 24), (' Revenue', 21), (' Sale of coal', 19), ('transmission and distribution business', 16), ('net sales', 13)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), (' Sales revenue', 17), ('revenue from contracts with customers', 14), ('Revenue from contract with customers', 14), (' Revenue', 11), ('sale of products', 8)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('sale of products', 35), ('net sales', 32), ('from trading business', 31), (' Sale of coal', 30), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), (' Sales revenue', 18), ('revenue from operations', 15), (' Revenue', 12), ('transmission and distribution business', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal', 42), ('sale of products', 37), ('from trading business', 33), ('net sales', 26), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), ('revenue from operations', 19), ('transmission and distribution business', 19), (' Revenue', 10), (' Sales revenue', 8)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('revenue from operations', 32), (' Revenue', 29), ('from trading business', 27), (' Sale of coal', 25), ('transmission and distribution business', 23), (' Sales revenue', 23), ('net sales', 17), ('sale of products', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('net sales', 35), (' Sales revenue', 30), ('transmission and distribution business', 27), (' Sale of coal', 22), ('sale of products', 19), (' Revenue', 13), ('revenue from contracts with customers', 10), ('Revenue from contract with customers', 10), ('revenue from operations', 8), ('from trading business', 8)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('transmission and distribution business', 32), (' Sale of coal', 32), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('from trading business', 27), ('revenue from operations', 22), (' Revenue', 17), ('net sales', 16), ('sale of products', 15), (' Sales revenue', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('sale of products', 35), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('transmission and distribution business', 28), ('net sales', 27), (' Sales revenue', 24), (' Sale of coal', 19), (' Revenue', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('sale of products', 29), ('transmission and distribution business', 27), (' Revenue', 27), ('net sales', 25), (' Sale of coal', 24), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), ('revenue from operations', 19)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('transmission and distribution business', 33), ('from trading business', 33), ('revenue from operations', 29), ('sale of products', 27), (' Sales revenue', 27), ('revenue from contracts with customers', 25), ('Revenue from contract with customers', 25), ('net sales', 24), (' Revenue', 21), (' Sale of coal', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), (' Sale of coal', 26), ('transmission and distribution business', 16), ('net sales', 13)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('transmission and distribution business', 33), ('sale of products', 27), ('revenue from operations', 25), (' Sales revenue', 24), ('from trading business', 22), ('net sales', 21), (' Sale of coal', 21), (' Revenue', 18)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Sale of coal', 31), ('sale of products', 25), ('net sales', 17), (' Sales revenue', 13), ('transmission and distribution business', 12), ('revenue from contracts with customers', 11), ('from trading business', 11), ('Revenue from contract with customers', 11), ('revenue from operations', 10), (' Revenue', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('net sales', 32), ('transmission and distribution business', 32), ('revenue from operations', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('sale of products', 29), (' Revenue', 23), (' Sales revenue', 20), ('from trading business', 18), (' Sale of coal', 16)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('revenue from contracts with customers', 42), ('Revenue from contract with customers', 42), ('transmission and distribution business', 39), ('from trading business', 37), ('revenue from operations', 28), (' Sales revenue', 27), ('sale of products', 26), (' Sale of coal', 23), (' Revenue', 20), ('net sales', 19)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), (' Sales revenue', 36), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('transmission and distribution business', 32), ('net sales', 28), (' Revenue', 24), (' Sale of coal', 22)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('sale of products', 38), ('from trading business', 36), (' Sales revenue', 35), ('revenue from operations', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('net sales', 28), (' Sale of coal', 27), (' Revenue', 20), ('transmission and distribution business', 19)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 116377997.0, 'line_item_label': ['Revenue', 'Sale of coal'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 116377997.0]}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('revenue from operations', 43), (' Sale of coal', 38), (' Sales revenue', 35), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 22), (' Revenue', 22), ('net sales', 20), ('sale of products', 17), ('transmission and distribution business', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('sale of products', 22), ('net sales', 14), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Sale of coal', 100), ('net sales', 59), ('sale of products', 57), (' Sales revenue', 50), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('from trading business', 25), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('sale of products', 69), ('from trading business', 38), (' Sale of coal', 38), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('net sales', 32), ('transmission and distribution business', 31), ('revenue from operations', 24), (' Revenue', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Sale of coal', 61), ('sale of products', 46), ('net sales', 36), ('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('transmission and distribution business', 29), ('from trading business', 28), ('revenue from operations', 27), (' Sales revenue', 24), (' Revenue', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('sale of products', 33), ('from trading business', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 19), (' Sales revenue', 17), ('transmission and distribution business', 15), (' Revenue', 11), ('net sales', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 21), ('transmission and distribution business', 21), (' Revenue', 12), ('sale of products', 9), (' Sales revenue', 9)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), (' Revenue', 33), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('from trading business', 22), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), ('transmission and distribution business', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('transmission and distribution business', 53), (' Sales revenue', 44), ('sale of products', 36), ('revenue from operations', 32), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), (' Revenue', 30), ('net sales', 28), ('from trading business', 28), (' Sale of coal', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('transmission and distribution business', 41), (' Sales revenue', 37), (' Revenue', 36), ('revenue from operations', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('from trading business', 26), ('net sales', 25), (' Sale of coal', 24), ('sale of products', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations', 68), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), ('from trading business', 43), ('sale of products', 24), (' Sales revenue', 24), (' Revenue', 21), (' Sale of coal', 19), ('transmission and distribution business', 16), ('net sales', 13)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), (' Sales revenue', 17), ('revenue from contracts with customers', 14), ('Revenue from contract with customers', 14), (' Revenue', 11), ('sale of products', 8)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('sale of products', 35), ('net sales', 32), ('from trading business', 31), (' Sale of coal', 30), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), (' Sales revenue', 18), ('revenue from operations', 15), (' Revenue', 12), ('transmission and distribution business', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal', 42), ('sale of products', 37), ('from trading business', 33), ('net sales', 26), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), ('revenue from operations', 19), ('transmission and distribution business', 19), (' Revenue', 10), (' Sales revenue', 8)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('revenue from operations', 32), (' Revenue', 29), ('from trading business', 27), (' Sale of coal', 25), ('transmission and distribution business', 23), (' Sales revenue', 23), ('net sales', 17), ('sale of products', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('net sales', 35), (' Sales revenue', 30), ('transmission and distribution business', 27), (' Sale of coal', 22), ('sale of products', 19), (' Revenue', 13), ('revenue from contracts with customers', 10), ('Revenue from contract with customers', 10), ('revenue from operations', 8), ('from trading business', 8)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('transmission and distribution business', 32), (' Sale of coal', 32), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('from trading business', 27), ('revenue from operations', 22), (' Revenue', 17), ('net sales', 16), ('sale of products', 15), (' Sales revenue', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('sale of products', 35), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('transmission and distribution business', 28), ('net sales', 27), (' Sales revenue', 24), (' Sale of coal', 19), (' Revenue', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('sale of products', 29), ('transmission and distribution business', 27), (' Revenue', 27), ('net sales', 25), (' Sale of coal', 24), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), ('revenue from operations', 19)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('transmission and distribution business', 33), ('from trading business', 33), ('revenue from operations', 29), ('sale of products', 27), (' Sales revenue', 27), ('revenue from contracts with customers', 25), ('Revenue from contract with customers', 25), ('net sales', 24), (' Revenue', 21), (' Sale of coal', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), (' Sale of coal', 26), ('transmission and distribution business', 16), ('net sales', 13)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('transmission and distribution business', 33), ('sale of products', 27), ('revenue from operations', 25), (' Sales revenue', 24), ('from trading business', 22), ('net sales', 21), (' Sale of coal', 21), (' Revenue', 18)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Sale of coal', 31), ('sale of products', 25), ('net sales', 17), (' Sales revenue', 13), ('transmission and distribution business', 12), ('revenue from contracts with customers', 11), ('from trading business', 11), ('Revenue from contract with customers', 11), ('revenue from operations', 10), (' Revenue', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('net sales', 32), ('transmission and distribution business', 32), ('revenue from operations', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('sale of products', 29), (' Revenue', 23), (' Sales revenue', 20), ('from trading business', 18), (' Sale of coal', 16)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('revenue from contracts with customers', 42), ('Revenue from contract with customers', 42), ('transmission and distribution business', 39), ('from trading business', 37), ('revenue from operations', 28), (' Sales revenue', 27), ('sale of products', 26), (' Sale of coal', 23), (' Revenue', 20), ('net sales', 19)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), (' Sales revenue', 36), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('transmission and distribution business', 32), ('net sales', 28), (' Revenue', 24), (' Sale of coal', 22)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('sale of products', 38), ('from trading business', 36), (' Sales revenue', 35), ('revenue from operations', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('net sales', 28), (' Sale of coal', 27), (' Revenue', 20), ('transmission and distribution business', 19)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 256646599.0, 'line_item_label': ['Revenue', 'Sale of coal'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 256646599.0]}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' Cost of goods and services sold', 38), ('purchase of stock-in-trade', 32), (' cost of coal sold', 31), ('expenditure', 27), ('expense', 22), ('total expenditure', 21), ('total expenses', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('cost of sales', 13), ('Cost of sales', 13), ('purchase of stock-in-trade', 8), (' Cost of goods and services sold', 6), (' cost of coal sold', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('cost of sales', 78), ('Cost of sales', 78), (' cost of coal sold', 61), (' Cost of product sold', 38), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), (' Personnel costs', 35), ('total expenses', 29), (' Cost of goods and services sold', 29), ('total expenditure', 24), ('expense', 13), ('expenditure', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' Cost of product sold', 100), (' Personnel costs', 65), (' Cost of goods and services sold', 62), (' Cost of inventory sold', 61), (' cost of coal sold', 58), ('cost of sales', 54), ('Cost of sales', 54), ('purchase of stock-in-trade', 39), ('total expenditure', 36), ('total expenses', 28), ('expenditure', 22), ('expense', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' cost of coal sold', 100), ('cost of sales', 61), ('Cost of sales', 61), (' Cost of product sold', 58), (' Personnel costs', 57), (' Cost of goods and services sold', 56), (' Cost of inventory sold', 55), ('purchase of stock-in-trade', 42), ('total expenses', 23), ('total expenditure', 20), ('expense', 10), ('expenditure', 8)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' cost of coal sold', 23), ('total expenditure', 21), (' Cost of inventory sold', 19), (' Cost of goods and services sold', 16), ('expense', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), ('total expenses', 35), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27), ('expenditure', 19), ('expense', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of inventory sold', 26), (' Personnel costs', 23), (' Cost of product sold', 21), (' cost of coal sold', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('total expenses', 48), (' Personnel costs', 46), ('expense', 44), (' Cost of product sold', 42), (' Cost of inventory sold', 40), ('total expenditure', 38), (' Cost of goods and services sold', 35), ('cost of sales', 33), ('Cost of sales', 33), ('expenditure', 32), (' cost of coal sold', 29), ('purchase of stock-in-trade', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 23)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Personnel costs', 44), (' Cost of goods and services sold', 43), (' Cost of product sold', 36), ('total expenditure', 26), ('cost of sales', 26), ('Cost of sales', 26), ('total expenses', 24), (' cost of coal sold', 22), ('expense', 21), (' Cost of inventory sold', 20), ('expenditure', 19), ('purchase of stock-in-trade', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of inventory sold', 32), (' Cost of goods and services sold', 27), ('total expenses', 25), ('total expenditure', 21), ('purchase of stock-in-trade', 19), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), (' cost of coal sold', 15), (' Personnel costs', 15), (' Cost of product sold', 14), ('expense', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 17), ('total expenditure', 15), ('expense', 12), ('expenditure', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of product sold', 44), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('expenditure', 16), ('total expenses', 15), ('total expenditure', 13), ('expense', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('purchase of stock-in-trade', 41), ('expense', 38), ('expenditure', 32), ('total expenses', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), ('total expenditure', 26), ('cost of sales', 25), ('Cost of sales', 25), (' Cost of goods and services sold', 25), (' Cost of product sold', 19), (' cost of coal sold', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' cost of coal sold', 43), (' Cost of goods and services sold', 35), ('cost of sales', 33), ('Cost of sales', 33), ('expense', 27), (' Personnel costs', 26), ('total expenditure', 24), (' Cost of product sold', 23), ('purchase of stock-in-trade', 21), (' Cost of inventory sold', 21), ('total expenses', 19), ('expenditure', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('total expenses', 34), (' cost of coal sold', 33), ('expenditure', 31), ('expense', 29), (' Personnel costs', 28), ('total expenditure', 27), ('purchase of stock-in-trade', 25), (' Cost of goods and services sold', 22), ('cost of sales', 21), ('Cost of sales', 21), (' Cost of product sold', 17), (' Cost of inventory sold', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), ('total expenditure', 37), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('purchase of stock-in-trade', 29), ('total expenses', 29), (' Cost of inventory sold', 29), ('expenditure', 25), (' Personnel costs', 22), (' Cost of goods and services sold', 21), ('expense', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of inventory sold', 29), (' Cost of goods and services sold', 24), (' cost of coal sold', 20), (' Personnel costs', 20), (' Cost of product sold', 18)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('total expenses', 49), ('total expenditure', 41), (' Cost of product sold', 36), (' Cost of inventory sold', 35), ('expenditure', 33), ('purchase of stock-in-trade', 31), ('expense', 31), (' Cost of goods and services sold', 31), (' Personnel costs', 30), (' cost of coal sold', 26), ('cost of sales', 24), ('Cost of sales', 24)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), ('total expenses', 41), (' Cost of inventory sold', 39), ('expenditure', 38), ('total expenditure', 37), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of product sold', 31), ('expense', 29), (' Cost of goods and services sold', 26)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Cost of product sold', 29), (' Cost of goods and services sold', 28), ('total expenses', 27), (' Cost of inventory sold', 24), (' Personnel costs', 23), ('total expenditure', 22), ('cost of sales', 21), ('Cost of sales', 21), ('expense', 18), ('purchase of stock-in-trade', 17), (' cost of coal sold', 15), ('expenditure', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('cost of sales', 46), ('Cost of sales', 46), (' cost of coal sold', 44), (' Personnel costs', 33), (' Cost of product sold', 29), (' Cost of inventory sold', 26), (' Cost of goods and services sold', 21), ('expense', 20), ('purchase of stock-in-trade', 17), ('total expenses', 12), ('total expenditure', 10), ('expenditure', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' Cost of inventory sold', 38), ('expenditure', 31), ('total expenses', 29), ('total expenditure', 27), (' Cost of goods and services sold', 26), ('expense', 23), (' cost of coal sold', 23), (' Personnel costs', 23), (' Cost of product sold', 22), ('cost of sales', 21), ('Cost of sales', 21), ('purchase of stock-in-trade', 8)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('total expenditure', 44), ('total expenses', 43), ('expenditure', 36), ('expense', 30), (' Cost of goods and services sold', 24), ('cost of sales', 23), ('Cost of sales', 23), (' Cost of inventory sold', 23), (' cost of coal sold', 21), (' Personnel costs', 17), (' Cost of product sold', 16), ('purchase of stock-in-trade', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('total expenditure', 55), ('total expenses', 50), (' Cost of inventory sold', 43), (' Cost of product sold', 40), ('purchase of stock-in-trade', 38), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), (' Cost of goods and services sold', 34), ('expenditure', 32), ('expense', 24), (' cost of coal sold', 19)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' Cost of product sold', 38), (' Cost of inventory sold', 37), ('cost of sales', 36), ('Cost of sales', 36), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 30), (' Personnel costs', 29), ('expenditure', 27), ('expense', 20), (' cost of coal sold', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': -70764509.0, 'line_item_label': ['Cost of product sold', 'Cost of coal sold'], 'note_numbers': [nan, '4'], 'line_item_value': [0.0, -70764509.0]}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' Cost of goods and services sold', 38), ('purchase of stock-in-trade', 32), (' cost of coal sold', 31), ('expenditure', 27), ('expense', 22), ('total expenditure', 21), ('total expenses', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('cost of sales', 13), ('Cost of sales', 13), ('purchase of stock-in-trade', 8), (' Cost of goods and services sold', 6), (' cost of coal sold', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('cost of sales', 78), ('Cost of sales', 78), (' cost of coal sold', 61), (' Cost of product sold', 38), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), (' Personnel costs', 35), ('total expenses', 29), (' Cost of goods and services sold', 29), ('total expenditure', 24), ('expense', 13), ('expenditure', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' Cost of product sold', 100), (' Personnel costs', 65), (' Cost of goods and services sold', 62), (' Cost of inventory sold', 61), (' cost of coal sold', 58), ('cost of sales', 54), ('Cost of sales', 54), ('purchase of stock-in-trade', 39), ('total expenditure', 36), ('total expenses', 28), ('expenditure', 22), ('expense', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' cost of coal sold', 100), ('cost of sales', 61), ('Cost of sales', 61), (' Cost of product sold', 58), (' Personnel costs', 57), (' Cost of goods and services sold', 56), (' Cost of inventory sold', 55), ('purchase of stock-in-trade', 42), ('total expenses', 23), ('total expenditure', 20), ('expense', 10), ('expenditure', 8)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' cost of coal sold', 23), ('total expenditure', 21), (' Cost of inventory sold', 19), (' Cost of goods and services sold', 16), ('expense', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), ('total expenses', 35), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27), ('expenditure', 19), ('expense', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of inventory sold', 26), (' Personnel costs', 23), (' Cost of product sold', 21), (' cost of coal sold', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('total expenses', 48), (' Personnel costs', 46), ('expense', 44), (' Cost of product sold', 42), (' Cost of inventory sold', 40), ('total expenditure', 38), (' Cost of goods and services sold', 35), ('cost of sales', 33), ('Cost of sales', 33), ('expenditure', 32), (' cost of coal sold', 29), ('purchase of stock-in-trade', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 23)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Personnel costs', 44), (' Cost of goods and services sold', 43), (' Cost of product sold', 36), ('total expenditure', 26), ('cost of sales', 26), ('Cost of sales', 26), ('total expenses', 24), (' cost of coal sold', 22), ('expense', 21), (' Cost of inventory sold', 20), ('expenditure', 19), ('purchase of stock-in-trade', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of inventory sold', 32), (' Cost of goods and services sold', 27), ('total expenses', 25), ('total expenditure', 21), ('purchase of stock-in-trade', 19), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), (' cost of coal sold', 15), (' Personnel costs', 15), (' Cost of product sold', 14), ('expense', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 17), ('total expenditure', 15), ('expense', 12), ('expenditure', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of product sold', 44), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('expenditure', 16), ('total expenses', 15), ('total expenditure', 13), ('expense', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('purchase of stock-in-trade', 41), ('expense', 38), ('expenditure', 32), ('total expenses', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), ('total expenditure', 26), ('cost of sales', 25), ('Cost of sales', 25), (' Cost of goods and services sold', 25), (' Cost of product sold', 19), (' cost of coal sold', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' cost of coal sold', 43), (' Cost of goods and services sold', 35), ('cost of sales', 33), ('Cost of sales', 33), ('expense', 27), (' Personnel costs', 26), ('total expenditure', 24), (' Cost of product sold', 23), ('purchase of stock-in-trade', 21), (' Cost of inventory sold', 21), ('total expenses', 19), ('expenditure', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('total expenses', 34), (' cost of coal sold', 33), ('expenditure', 31), ('expense', 29), (' Personnel costs', 28), ('total expenditure', 27), ('purchase of stock-in-trade', 25), (' Cost of goods and services sold', 22), ('cost of sales', 21), ('Cost of sales', 21), (' Cost of product sold', 17), (' Cost of inventory sold', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), ('total expenditure', 37), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('purchase of stock-in-trade', 29), ('total expenses', 29), (' Cost of inventory sold', 29), ('expenditure', 25), (' Personnel costs', 22), (' Cost of goods and services sold', 21), ('expense', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of inventory sold', 29), (' Cost of goods and services sold', 24), (' cost of coal sold', 20), (' Personnel costs', 20), (' Cost of product sold', 18)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('total expenses', 49), ('total expenditure', 41), (' Cost of product sold', 36), (' Cost of inventory sold', 35), ('expenditure', 33), ('purchase of stock-in-trade', 31), ('expense', 31), (' Cost of goods and services sold', 31), (' Personnel costs', 30), (' cost of coal sold', 26), ('cost of sales', 24), ('Cost of sales', 24)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), ('total expenses', 41), (' Cost of inventory sold', 39), ('expenditure', 38), ('total expenditure', 37), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of product sold', 31), ('expense', 29), (' Cost of goods and services sold', 26)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Cost of product sold', 29), (' Cost of goods and services sold', 28), ('total expenses', 27), (' Cost of inventory sold', 24), (' Personnel costs', 23), ('total expenditure', 22), ('cost of sales', 21), ('Cost of sales', 21), ('expense', 18), ('purchase of stock-in-trade', 17), (' cost of coal sold', 15), ('expenditure', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('cost of sales', 46), ('Cost of sales', 46), (' cost of coal sold', 44), (' Personnel costs', 33), (' Cost of product sold', 29), (' Cost of inventory sold', 26), (' Cost of goods and services sold', 21), ('expense', 20), ('purchase of stock-in-trade', 17), ('total expenses', 12), ('total expenditure', 10), ('expenditure', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' Cost of inventory sold', 38), ('expenditure', 31), ('total expenses', 29), ('total expenditure', 27), (' Cost of goods and services sold', 26), ('expense', 23), (' cost of coal sold', 23), (' Personnel costs', 23), (' Cost of product sold', 22), ('cost of sales', 21), ('Cost of sales', 21), ('purchase of stock-in-trade', 8)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('total expenditure', 44), ('total expenses', 43), ('expenditure', 36), ('expense', 30), (' Cost of goods and services sold', 24), ('cost of sales', 23), ('Cost of sales', 23), (' Cost of inventory sold', 23), (' cost of coal sold', 21), (' Personnel costs', 17), (' Cost of product sold', 16), ('purchase of stock-in-trade', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('total expenditure', 55), ('total expenses', 50), (' Cost of inventory sold', 43), (' Cost of product sold', 40), ('purchase of stock-in-trade', 38), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), (' Cost of goods and services sold', 34), ('expenditure', 32), ('expense', 24), (' cost of coal sold', 19)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' Cost of product sold', 38), (' Cost of inventory sold', 37), ('cost of sales', 36), ('Cost of sales', 36), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 30), (' Personnel costs', 29), ('expenditure', 27), ('expense', 20), (' cost of coal sold', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': -86129151.0, 'line_item_label': ['Cost of product sold', 'Cost of coal sold'], 'note_numbers': [nan, '4'], 'line_item_value': [0.0, -86129151.0]}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['Included in cost of sales'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = amortisation & depreciation , res_fuzz_match = [('Included in cost of sales', 22)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = changes in finished products inventory , res_fuzz_match = [('Included in cost of sales', 31)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = contractors , res_fuzz_match = [('Included in cost of sales', 42)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = railing , res_fuzz_match = [('Included in cost of sales', 50)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = equipment leasing - joint venture , res_fuzz_match = [('Included in cost of sales', 38)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = explosives , res_fuzz_match = [('Included in cost of sales', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = fuel and oil , res_fuzz_match = [('Included in cost of sales', 42)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = port charges , res_fuzz_match = [('Included in cost of sales', 42)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = royalties , res_fuzz_match = [('Included in cost of sales', 31)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = other cost , res_fuzz_match = [('Included in cost of sales', 50)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = administration expenses , res_fuzz_match = [('Included in cost of sales', 41)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = amortisation & depreciation , res_fuzz_match = [('Included in cost of sales', 22)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = changes in finished products inventory , res_fuzz_match = [('Included in cost of sales', 31)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = contractors , res_fuzz_match = [('Included in cost of sales', 42)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = railing , res_fuzz_match = [('Included in cost of sales', 50)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = equipment leasing - joint venture , res_fuzz_match = [('Included in cost of sales', 38)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = explosives , res_fuzz_match = [('Included in cost of sales', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = fuel and oil , res_fuzz_match = [('Included in cost of sales', 42)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = port charges , res_fuzz_match = [('Included in cost of sales', 42)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = royalties , res_fuzz_match = [('Included in cost of sales', 31)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = other cost , res_fuzz_match = [('Included in cost of sales', 50)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = administration expenses , res_fuzz_match = [('Included in cost of sales', 41)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), (' Depreciation expenses', 38), (' Depreciation expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Administrative and other expenses', 32), (' Selling & distribution expenses', 30), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Sales and marketing', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Occupancy expenses', 17), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Advertising expenses', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15), (' Sales and marketing', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 30), (' Selling Expenses', 30), (' Logistics and distribution', 28), (' Amortisation expenses', 26), (' Administrative expenses', 24), (' Administration expenses', 24), (' Administrative and other expenses', 23), (' Selling & distribution expenses', 20), (' Advertising expenses', 17), ('Distribution expenses', 16), (' Occupancy ', 14), (' depreciation', 12), ('other expenses', 10), (' Occupancy expenses', 10), (' Other expenses', 10), (' Management expenses', 10), (' Other expenses', 10), (' Marketing expenses', 9), (' Depreciation expenses', 9), (' Depreciation expenses', 9)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('Distribution expenses', 42), (' Selling & distribution expenses', 42), (' Logistics and distribution', 38), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Selling Expenses', 29), (' Amortisation expenses', 26), (' depreciation', 25), (' Administrative and other expenses', 23), ('other expenses', 21), (' Occupancy expenses', 21), (' Other expenses', 21), (' Lease expenses', 21), (' Other expenses', 21), (' Advertising expenses', 19), (' Occupancy ', 18), (' Management expenses', 14), (' Marketing expenses', 13)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Sales and marketing', 41), (' Logistics and distribution', 35), (' Administrative expenses', 33), (' Administration expenses', 33), (' Selling Expenses', 32), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), ('Distribution expenses', 27), (' Administrative and other expenses', 25), (' Lease expenses', 24), ('other expenses', 23), (' Occupancy expenses', 23), (' Other expenses', 23), (' Other expenses', 23), (' Occupancy ', 21), (' Marketing expenses', 15), (' Management expenses', 15), (' Advertising expenses', 14), (' depreciation', 10), (' Depreciation expenses', 7), (' Depreciation expenses', 7)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Logistics and distribution', 19), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), ('Distribution expenses', 14), (' Administrative expenses', 14), (' Administration expenses', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Administrative expenses', 30), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Amortisation expenses', 24), (' Sales and marketing', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Selling & distribution expenses', 19), (' Marketing expenses', 17), (' Depreciation expenses', 16), (' Depreciation expenses', 16), (' Advertising expenses', 15), (' Occupancy ', 12), (' Lease expenses', 9), (' Selling Expenses', 9), (' Management expenses', 9)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 25), (' Sales and marketing', 22), (' Occupancy ', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' Selling & distribution expenses', 100), ('Distribution expenses', 86), (' Selling Expenses', 69), (' Administrative expenses', 65), (' Administration expenses', 65), (' Administrative and other expenses', 60), (' Depreciation expenses', 57), (' Depreciation expenses', 57), (' Advertising expenses', 56), (' Logistics and distribution', 54), (' Amortisation expenses', 51), (' Lease expenses', 50), ('other expenses', 48), (' Other expenses', 48), (' Other expenses', 48), (' Marketing expenses', 47), (' Occupancy expenses', 42), (' Management expenses', 42), (' Sales and marketing', 33), (' depreciation', 29), (' Occupancy ', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' depreciation', 35), (' Sales and marketing', 32), (' Occupancy ', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), (' Administrative and other expenses', 29), (' Advertising expenses', 27), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), (' Other expenses', 24), (' Marketing expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Management expenses', 18), (' Occupancy ', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Amortisation expenses', 15), (' Occupancy ', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Distribution expenses', 30), (' Management expenses', 26), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' depreciation', 22), (' Administrative expenses', 22), (' Administrative and other expenses', 22), (' Administration expenses', 22), (' Lease expenses', 18), (' Marketing expenses', 17), (' Occupancy expenses', 17), (' Amortisation expenses', 16), (' Advertising expenses', 15), (' Sales and marketing', 15), (' Logistics and distribution', 13), ('other expenses', 9), (' Other expenses', 9), (' Selling Expenses', 9), (' Other expenses', 9)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses', 34), (' Sales and marketing', 33), (' Marketing expenses', 29), ('Distribution expenses', 26), (' Logistics and distribution', 23), (' Selling & distribution expenses', 22), (' Management expenses', 22), (' Occupancy ', 20), (' Advertising expenses', 20), (' Administrative expenses', 19), (' Administration expenses', 19), ('other expenses', 15), (' Other expenses', 15), (' Other expenses', 15), (' Amortisation expenses', 14), (' depreciation', 9), (' Lease expenses', 8), (' Selling Expenses', 8), (' Occupancy expenses', 7), (' Depreciation expenses', 7), (' Depreciation expenses', 7)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' Management expenses', 37), (' depreciation', 36), (' Depreciation expenses', 34), (' Depreciation expenses', 34), (' Amortisation expenses', 34), (' Sales and marketing', 33), (' Lease expenses', 31), (' Selling Expenses', 31), ('other expenses', 30), (' Occupancy expenses', 30), (' Other expenses', 30), (' Other expenses', 30), (' Marketing expenses', 29), (' Logistics and distribution', 29), (' Advertising expenses', 27), ('Distribution expenses', 26), (' Administrative expenses', 26), (' Administration expenses', 26), (' Administrative and other expenses', 24), (' Selling & distribution expenses', 22), (' Occupancy ', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' Logistics and distribution', 41), (' Administrative expenses', 40), (' Lease expenses', 40), (' Administration expenses', 40), (' Amortisation expenses', 35), (' Advertising expenses', 33), (' Sales and marketing', 33), (' Selling Expenses', 30), (' Administrative and other expenses', 29), (' Depreciation expenses', 26), (' Depreciation expenses', 26), ('Distribution expenses', 24), (' Selling & distribution expenses', 20), ('other expenses', 19), (' Occupancy expenses', 19), (' Other expenses', 19), (' Management expenses', 19), (' Other expenses', 19), (' Marketing expenses', 18), (' Occupancy ', 14), (' depreciation', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' Logistics and distribution', 41), (' Marketing expenses', 38), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 34), (' Other expenses', 34), (' Management expenses', 34), (' Other expenses', 34), (' Amortisation expenses', 33), (' Occupancy expenses', 29), (' Depreciation expenses', 28), (' Selling & distribution expenses', 28), (' Depreciation expenses', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), (' Administrative and other expenses', 25), (' depreciation', 22), ('Distribution expenses', 22), (' Administrative expenses', 22), (' Administration expenses', 22), (' Occupancy ', 6)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Depreciation expenses', 33), (' Depreciation expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), (' Administrative and other expenses', 29), (' Logistics and distribution', 29), (' depreciation', 28), (' Selling & distribution expenses', 28), (' Amortisation expenses', 28), (' Occupancy ', 22), ('other expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Lease expenses', 12), (' Selling Expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Marketing expenses', 11), (' Advertising expenses', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Occupancy ', 10), (' Logistics and distribution', 6), (' Sales and marketing', 6)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Administrative and other expenses', 47), ('other expenses', 44), (' Other expenses', 44), (' Other expenses', 44), (' Marketing expenses', 43), (' Advertising expenses', 42), (' Administrative expenses', 41), (' Selling & distribution expenses', 41), (' Lease expenses', 41), (' Administration expenses', 41), (' Occupancy expenses', 40), (' Management expenses', 40), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Amortisation expenses', 38), ('Distribution expenses', 37), (' Selling Expenses', 36), (' Logistics and distribution', 34), (' Sales and marketing', 33), (' depreciation', 20), (' Occupancy ', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' depreciation', 28), ('Distribution expenses', 26), (' Logistics and distribution', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), (' Occupancy ', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Selling & distribution expenses', 37), (' Logistics and distribution', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Sales and marketing', 30), ('Distribution expenses', 29), (' Selling Expenses', 28), ('other expenses', 27), (' Marketing expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' depreciation', 26), (' Occupancy expenses', 24), (' Lease expenses', 24), (' Administrative and other expenses', 22), (' Management expenses', 20), (' Administrative expenses', 18), (' Administration expenses', 18), (' Amortisation expenses', 15), (' Occupancy ', 14), (' Advertising expenses', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Amortisation expenses', 33), (' Lease expenses', 27), (' Selling Expenses', 27), (' Logistics and distribution', 25), (' Occupancy ', 22), (' Advertising expenses', 21), ('Distribution expenses', 20), (' Administrative expenses', 20), (' Administration expenses', 20), (' Selling & distribution expenses', 16), (' Administrative and other expenses', 13), ('other expenses', 12), (' Marketing expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Depreciation expenses', 11), (' Depreciation expenses', 11), (' Sales and marketing', 11), (' depreciation', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('Distribution expenses', 49), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 44), (' Logistics and distribution', 41), (' Administrative expenses', 40), (' Lease expenses', 40), (' Administration expenses', 40), (' Marketing expenses', 38), (' Advertising expenses', 36), ('other expenses', 34), (' Other expenses', 34), (' Management expenses', 34), (' Other expenses', 34), (' Amortisation expenses', 33), (' Sales and marketing', 32), (' Selling Expenses', 30), (' Occupancy expenses', 29), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' depreciation', 22), (' Occupancy ', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Selling & distribution expenses', 55), ('Distribution expenses', 52), (' Marketing expenses', 47), (' Lease expenses', 44), (' Administrative and other expenses', 43), (' Management expenses', 43), (' Amortisation expenses', 42), (' Advertising expenses', 41), (' Logistics and distribution', 41), (' Administrative expenses', 40), (' Administration expenses', 40), ('other expenses', 39), (' Occupancy expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Selling Expenses', 36), (' Sales and marketing', 24), (' depreciation', 20), (' Occupancy ', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('other expenses', 50), (' Other expenses', 50), (' Other expenses', 50), (' Administrative and other expenses', 44), (' Selling Expenses', 36), (' Management expenses', 35), (' Marketing expenses', 34), (' Selling & distribution expenses', 33), (' Sales and marketing', 33), (' Lease expenses', 31), (' Occupancy expenses', 30), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Administrative expenses', 27), (' Administration expenses', 27), (' depreciation', 23), ('Distribution expenses', 23), (' Advertising expenses', 19), (' Occupancy ', 12), (' Logistics and distribution', 8)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other expenses', 43), (' Other expenses', 43), (' Other expenses', 43), (' Administrative and other expenses', 39), (' Lease expenses', 35), (' Management expenses', 34), (' Marketing expenses', 33), (' Occupancy expenses', 30), (' Selling Expenses', 30), (' Selling & distribution expenses', 29), (' Administrative expenses', 24), (' Depreciation expenses', 24), (' Administration expenses', 24), (' Depreciation expenses', 24), (' Amortisation expenses', 24), ('Distribution expenses', 20), (' depreciation', 19), (' Advertising expenses', 16), (' Sales and marketing', 16), (' Logistics and distribution', 11), (' Occupancy ', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 8, 9], 'score': 100, 'value': -9141972.0, 'line_item_label': ['Other expenses', 'Selling & distribution expenses', 'Administration expenses'], 'note_numbers': [nan, nan, '5'], 'line_item_value': [0.0, -1686525.0, -7455447.0]}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), (' Depreciation expenses', 38), (' Depreciation expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Administrative and other expenses', 32), (' Selling & distribution expenses', 30), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Sales and marketing', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Occupancy expenses', 17), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Advertising expenses', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15), (' Sales and marketing', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 30), (' Selling Expenses', 30), (' Logistics and distribution', 28), (' Amortisation expenses', 26), (' Administrative expenses', 24), (' Administration expenses', 24), (' Administrative and other expenses', 23), (' Selling & distribution expenses', 20), (' Advertising expenses', 17), ('Distribution expenses', 16), (' Occupancy ', 14), (' depreciation', 12), ('other expenses', 10), (' Occupancy expenses', 10), (' Other expenses', 10), (' Management expenses', 10), (' Other expenses', 10), (' Marketing expenses', 9), (' Depreciation expenses', 9), (' Depreciation expenses', 9)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('Distribution expenses', 42), (' Selling & distribution expenses', 42), (' Logistics and distribution', 38), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Selling Expenses', 29), (' Amortisation expenses', 26), (' depreciation', 25), (' Administrative and other expenses', 23), ('other expenses', 21), (' Occupancy expenses', 21), (' Other expenses', 21), (' Lease expenses', 21), (' Other expenses', 21), (' Advertising expenses', 19), (' Occupancy ', 18), (' Management expenses', 14), (' Marketing expenses', 13)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Sales and marketing', 41), (' Logistics and distribution', 35), (' Administrative expenses', 33), (' Administration expenses', 33), (' Selling Expenses', 32), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), ('Distribution expenses', 27), (' Administrative and other expenses', 25), (' Lease expenses', 24), ('other expenses', 23), (' Occupancy expenses', 23), (' Other expenses', 23), (' Other expenses', 23), (' Occupancy ', 21), (' Marketing expenses', 15), (' Management expenses', 15), (' Advertising expenses', 14), (' depreciation', 10), (' Depreciation expenses', 7), (' Depreciation expenses', 7)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Logistics and distribution', 19), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), ('Distribution expenses', 14), (' Administrative expenses', 14), (' Administration expenses', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Administrative expenses', 30), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Amortisation expenses', 24), (' Sales and marketing', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Selling & distribution expenses', 19), (' Marketing expenses', 17), (' Depreciation expenses', 16), (' Depreciation expenses', 16), (' Advertising expenses', 15), (' Occupancy ', 12), (' Lease expenses', 9), (' Selling Expenses', 9), (' Management expenses', 9)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 25), (' Sales and marketing', 22), (' Occupancy ', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' Selling & distribution expenses', 100), ('Distribution expenses', 86), (' Selling Expenses', 69), (' Administrative expenses', 65), (' Administration expenses', 65), (' Administrative and other expenses', 60), (' Depreciation expenses', 57), (' Depreciation expenses', 57), (' Advertising expenses', 56), (' Logistics and distribution', 54), (' Amortisation expenses', 51), (' Lease expenses', 50), ('other expenses', 48), (' Other expenses', 48), (' Other expenses', 48), (' Marketing expenses', 47), (' Occupancy expenses', 42), (' Management expenses', 42), (' Sales and marketing', 33), (' depreciation', 29), (' Occupancy ', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' depreciation', 35), (' Sales and marketing', 32), (' Occupancy ', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), (' Administrative and other expenses', 29), (' Advertising expenses', 27), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), (' Other expenses', 24), (' Marketing expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Management expenses', 18), (' Occupancy ', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Amortisation expenses', 15), (' Occupancy ', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Distribution expenses', 30), (' Management expenses', 26), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' depreciation', 22), (' Administrative expenses', 22), (' Administrative and other expenses', 22), (' Administration expenses', 22), (' Lease expenses', 18), (' Marketing expenses', 17), (' Occupancy expenses', 17), (' Amortisation expenses', 16), (' Advertising expenses', 15), (' Sales and marketing', 15), (' Logistics and distribution', 13), ('other expenses', 9), (' Other expenses', 9), (' Selling Expenses', 9), (' Other expenses', 9)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses', 34), (' Sales and marketing', 33), (' Marketing expenses', 29), ('Distribution expenses', 26), (' Logistics and distribution', 23), (' Selling & distribution expenses', 22), (' Management expenses', 22), (' Occupancy ', 20), (' Advertising expenses', 20), (' Administrative expenses', 19), (' Administration expenses', 19), ('other expenses', 15), (' Other expenses', 15), (' Other expenses', 15), (' Amortisation expenses', 14), (' depreciation', 9), (' Lease expenses', 8), (' Selling Expenses', 8), (' Occupancy expenses', 7), (' Depreciation expenses', 7), (' Depreciation expenses', 7)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' Management expenses', 37), (' depreciation', 36), (' Depreciation expenses', 34), (' Depreciation expenses', 34), (' Amortisation expenses', 34), (' Sales and marketing', 33), (' Lease expenses', 31), (' Selling Expenses', 31), ('other expenses', 30), (' Occupancy expenses', 30), (' Other expenses', 30), (' Other expenses', 30), (' Marketing expenses', 29), (' Logistics and distribution', 29), (' Advertising expenses', 27), ('Distribution expenses', 26), (' Administrative expenses', 26), (' Administration expenses', 26), (' Administrative and other expenses', 24), (' Selling & distribution expenses', 22), (' Occupancy ', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' Logistics and distribution', 41), (' Administrative expenses', 40), (' Lease expenses', 40), (' Administration expenses', 40), (' Amortisation expenses', 35), (' Advertising expenses', 33), (' Sales and marketing', 33), (' Selling Expenses', 30), (' Administrative and other expenses', 29), (' Depreciation expenses', 26), (' Depreciation expenses', 26), ('Distribution expenses', 24), (' Selling & distribution expenses', 20), ('other expenses', 19), (' Occupancy expenses', 19), (' Other expenses', 19), (' Management expenses', 19), (' Other expenses', 19), (' Marketing expenses', 18), (' Occupancy ', 14), (' depreciation', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' Logistics and distribution', 41), (' Marketing expenses', 38), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 34), (' Other expenses', 34), (' Management expenses', 34), (' Other expenses', 34), (' Amortisation expenses', 33), (' Occupancy expenses', 29), (' Depreciation expenses', 28), (' Selling & distribution expenses', 28), (' Depreciation expenses', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), (' Administrative and other expenses', 25), (' depreciation', 22), ('Distribution expenses', 22), (' Administrative expenses', 22), (' Administration expenses', 22), (' Occupancy ', 6)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Depreciation expenses', 33), (' Depreciation expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), (' Administrative and other expenses', 29), (' Logistics and distribution', 29), (' depreciation', 28), (' Selling & distribution expenses', 28), (' Amortisation expenses', 28), (' Occupancy ', 22), ('other expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Lease expenses', 12), (' Selling Expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Marketing expenses', 11), (' Advertising expenses', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Occupancy ', 10), (' Logistics and distribution', 6), (' Sales and marketing', 6)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Administrative and other expenses', 47), ('other expenses', 44), (' Other expenses', 44), (' Other expenses', 44), (' Marketing expenses', 43), (' Advertising expenses', 42), (' Administrative expenses', 41), (' Selling & distribution expenses', 41), (' Lease expenses', 41), (' Administration expenses', 41), (' Occupancy expenses', 40), (' Management expenses', 40), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Amortisation expenses', 38), ('Distribution expenses', 37), (' Selling Expenses', 36), (' Logistics and distribution', 34), (' Sales and marketing', 33), (' depreciation', 20), (' Occupancy ', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' depreciation', 28), ('Distribution expenses', 26), (' Logistics and distribution', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), (' Occupancy ', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Selling & distribution expenses', 37), (' Logistics and distribution', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Sales and marketing', 30), ('Distribution expenses', 29), (' Selling Expenses', 28), ('other expenses', 27), (' Marketing expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' depreciation', 26), (' Occupancy expenses', 24), (' Lease expenses', 24), (' Administrative and other expenses', 22), (' Management expenses', 20), (' Administrative expenses', 18), (' Administration expenses', 18), (' Amortisation expenses', 15), (' Occupancy ', 14), (' Advertising expenses', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Amortisation expenses', 33), (' Lease expenses', 27), (' Selling Expenses', 27), (' Logistics and distribution', 25), (' Occupancy ', 22), (' Advertising expenses', 21), ('Distribution expenses', 20), (' Administrative expenses', 20), (' Administration expenses', 20), (' Selling & distribution expenses', 16), (' Administrative and other expenses', 13), ('other expenses', 12), (' Marketing expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Depreciation expenses', 11), (' Depreciation expenses', 11), (' Sales and marketing', 11), (' depreciation', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('Distribution expenses', 49), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 44), (' Logistics and distribution', 41), (' Administrative expenses', 40), (' Lease expenses', 40), (' Administration expenses', 40), (' Marketing expenses', 38), (' Advertising expenses', 36), ('other expenses', 34), (' Other expenses', 34), (' Management expenses', 34), (' Other expenses', 34), (' Amortisation expenses', 33), (' Sales and marketing', 32), (' Selling Expenses', 30), (' Occupancy expenses', 29), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' depreciation', 22), (' Occupancy ', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Selling & distribution expenses', 55), ('Distribution expenses', 52), (' Marketing expenses', 47), (' Lease expenses', 44), (' Administrative and other expenses', 43), (' Management expenses', 43), (' Amortisation expenses', 42), (' Advertising expenses', 41), (' Logistics and distribution', 41), (' Administrative expenses', 40), (' Administration expenses', 40), ('other expenses', 39), (' Occupancy expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Selling Expenses', 36), (' Sales and marketing', 24), (' depreciation', 20), (' Occupancy ', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('other expenses', 50), (' Other expenses', 50), (' Other expenses', 50), (' Administrative and other expenses', 44), (' Selling Expenses', 36), (' Management expenses', 35), (' Marketing expenses', 34), (' Selling & distribution expenses', 33), (' Sales and marketing', 33), (' Lease expenses', 31), (' Occupancy expenses', 30), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Administrative expenses', 27), (' Administration expenses', 27), (' depreciation', 23), ('Distribution expenses', 23), (' Advertising expenses', 19), (' Occupancy ', 12), (' Logistics and distribution', 8)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other expenses', 43), (' Other expenses', 43), (' Other expenses', 43), (' Administrative and other expenses', 39), (' Lease expenses', 35), (' Management expenses', 34), (' Marketing expenses', 33), (' Occupancy expenses', 30), (' Selling Expenses', 30), (' Selling & distribution expenses', 29), (' Administrative expenses', 24), (' Depreciation expenses', 24), (' Administration expenses', 24), (' Depreciation expenses', 24), (' Amortisation expenses', 24), ('Distribution expenses', 20), (' depreciation', 19), (' Advertising expenses', 16), (' Sales and marketing', 16), (' Logistics and distribution', 11), (' Occupancy ', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 8, 9], 'score': 100, 'value': -12948940.0, 'line_item_label': ['Other expenses', 'Selling & distribution expenses', 'Administration expenses'], 'note_numbers': [nan, nan, '5'], 'line_item_value': [0.0, -3717145.0, -9231795.0]}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = amortisation & depreciation , res_fuzz_match = [('Included in administrative expenses', 53), (' Administrative expenses', 53), ('research', 50), (' Depreciation – property', 47), (' Depreciation – right-of-use assets', 47), (' Compulsory superannuation contributions', 47), ('equipment', 44), ('miscellaneous', 44), ('power', 40), ('csr', 40), ('social', 40), (' Staff welfare', 38), ('exchange', 36), ('machinery', 33), ('analytical', 33), (' Payroll on-costs (excluding employee benefit provision)', 33), ('loss allowance', 30), (' plant and equipment', 30), ('charges', 29), (' Wages and salaries', 27), ('consum', 25), ('loss on', 25), ('donation', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = stamp duty , res_fuzz_match = [(' plant and equipment', 50), ('equipment', 44), ('donation', 44), (' Compulsory superannuation contributions', 40), (' Payroll on-costs (excluding employee benefit provision)', 40), (' Staff welfare', 40), (' Wages and salaries', 38), ('consum', 33), ('csr', 33), ('social', 33), ('Included in administrative expenses', 30), (' Depreciation – property', 30), (' Administrative expenses', 30), ('machinery', 25), ('research', 25), ('loss on', 25), ('miscellaneous', 25), (' Depreciation – right-of-use assets', 24), ('power', 20), ('charges', 20), ('loss allowance', 20), ('analytical', 17), ('exchange', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = management fees , res_fuzz_match = [('analytical', 50), ('machinery', 44), ('Included in administrative expenses', 44), (' plant and equipment', 44), (' Administrative expenses', 44), ('exchange', 43), ('charges', 40), ('donation', 40), ('research', 36), ('miscellaneous', 33), (' Wages and salaries', 33), (' Compulsory superannuation contributions', 33), (' Payroll on-costs (excluding employee benefit provision)', 33), (' Staff welfare', 33), ('equipment', 29), (' Depreciation – right-of-use assets', 27), (' Depreciation – property', 22), ('power', 20), ('consum', 17), ('social', 17), ('loss allowance', 13), ('loss on', 0), ('csr', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = rent , res_fuzz_match = [('research', 50), ('donation', 50), ('Included in administrative expenses', 50), (' Depreciation – property', 50), (' plant and equipment', 50), (' Depreciation – right-of-use assets', 50), (' Administrative expenses', 50), (' Compulsory superannuation contributions', 50), (' Payroll on-costs (excluding employee benefit provision)', 50), ('power', 40), (' Staff welfare', 40), ('machinery', 33), ('charges', 33), ('csr', 33), (' Wages and salaries', 33), ('miscellaneous', 29), ('consum', 25), ('analytical', 25), ('equipment', 25), ('exchange', 25), ('loss on', 0), ('social', 0), ('loss allowance', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = accountancy fees , res_fuzz_match = [('donation', 60), ('consum', 50), ('Included in administrative expenses', 45), (' plant and equipment', 45), (' Administrative expenses', 45), (' Payroll on-costs (excluding employee benefit provision)', 45), ('research', 36), (' Compulsory superannuation contributions', 36), ('machinery', 33), ('analytical', 33), ('csr', 33), ('equipment', 29), (' Staff welfare', 29), (' Depreciation – property', 27), (' Wages and salaries', 27), ('loss on', 25), (' Depreciation – right-of-use assets', 25), ('exchange', 22), ('miscellaneous', 22), ('loss allowance', 22), ('power', 20), ('charges', 20), ('social', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = consultancy fees , res_fuzz_match = [('consum', 83), (' Payroll on-costs (excluding employee benefit provision)', 55), ('analytical', 50), (' Compulsory superannuation contributions', 50), ('donation', 40), ('research', 36), (' plant and equipment', 36), ('csr', 33), ('social', 33), (' Wages and salaries', 30), ('equipment', 29), (' Depreciation – right-of-use assets', 29), ('Included in administrative expenses', 27), (' Depreciation – property', 27), (' Administrative expenses', 27), (' Staff welfare', 27), ('loss on', 25), ('loss allowance', 25), ('machinery', 22), ('exchange', 22), ('miscellaneous', 22), ('power', 20), ('charges', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = salary and wages , res_fuzz_match = [(' plant and equipment', 55), ('analytical', 50), ('social', 50), (' Compulsory superannuation contributions', 47), ('power', 44), ('miscellaneous', 44), ('exchange', 43), ('charges', 40), ('donation', 40), ('loss allowance', 40), ('Included in administrative expenses', 40), (' Wages and salaries', 40), (' Staff welfare', 40), ('research', 38), ('machinery', 33), ('equipment', 33), ('csr', 33), (' Depreciation – property', 33), (' Depreciation – right-of-use assets', 33), (' Payroll on-costs (excluding employee benefit provision)', 33), (' Administrative expenses', 32), ('loss on', 25), ('consum', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = other costs , res_fuzz_match = [('csr', 67), ('consum', 60), ('power', 60), (' Payroll on-costs (excluding employee benefit provision)', 60), ('loss on', 50), (' Depreciation – property', 50), (' Compulsory superannuation contributions', 50), ('Included in administrative expenses', 42), (' Administrative expenses', 42), ('donation', 40), ('machinery', 33), (' Wages and salaries', 30), ('research', 29), ('exchange', 29), ('loss allowance', 29), ('social', 25), ('charges', 22), ('equipment', 20), (' plant and equipment', 20), (' Depreciation – right-of-use assets', 20), (' Staff welfare', 20), ('analytical', 17), ('miscellaneous', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = finance costs , res_fuzz_match = [('consum', 60), (' Compulsory superannuation contributions', 55), ('loss on', 50), (' Payroll on-costs (excluding employee benefit provision)', 45), ('donation', 40), (' Depreciation – right-of-use assets', 40), ('Included in administrative expenses', 36), (' Depreciation – property', 36), (' Administrative expenses', 36), (' Wages and salaries', 36), ('analytical', 33), ('csr', 33), ('miscellaneous', 33), ('exchange', 29), ('loss allowance', 29), (' plant and equipment', 27), ('social', 25), ('power', 22), ('machinery', 22), ('charges', 20), ('equipment', 20), (' Staff welfare', 18), ('research', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = amortisation & depreciation , res_fuzz_match = [('Included in administrative expenses', 53), (' Administrative expenses', 53), ('research', 50), (' Depreciation – property', 47), (' Depreciation – right-of-use assets', 47), (' Compulsory superannuation contributions', 47), ('equipment', 44), ('miscellaneous', 44), ('power', 40), ('csr', 40), ('social', 40), (' Staff welfare', 38), ('exchange', 36), ('machinery', 33), ('analytical', 33), (' Payroll on-costs (excluding employee benefit provision)', 33), ('loss allowance', 30), (' plant and equipment', 30), ('charges', 29), (' Wages and salaries', 27), ('consum', 25), ('loss on', 25), ('donation', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = stamp duty , res_fuzz_match = [(' plant and equipment', 50), ('equipment', 44), ('donation', 44), (' Compulsory superannuation contributions', 40), (' Payroll on-costs (excluding employee benefit provision)', 40), (' Staff welfare', 40), (' Wages and salaries', 38), ('consum', 33), ('csr', 33), ('social', 33), ('Included in administrative expenses', 30), (' Depreciation – property', 30), (' Administrative expenses', 30), ('machinery', 25), ('research', 25), ('loss on', 25), ('miscellaneous', 25), (' Depreciation – right-of-use assets', 24), ('power', 20), ('charges', 20), ('loss allowance', 20), ('analytical', 17), ('exchange', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = management fees , res_fuzz_match = [('analytical', 50), ('machinery', 44), ('Included in administrative expenses', 44), (' plant and equipment', 44), (' Administrative expenses', 44), ('exchange', 43), ('charges', 40), ('donation', 40), ('research', 36), ('miscellaneous', 33), (' Wages and salaries', 33), (' Compulsory superannuation contributions', 33), (' Payroll on-costs (excluding employee benefit provision)', 33), (' Staff welfare', 33), ('equipment', 29), (' Depreciation – right-of-use assets', 27), (' Depreciation – property', 22), ('power', 20), ('consum', 17), ('social', 17), ('loss allowance', 13), ('loss on', 0), ('csr', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = rent , res_fuzz_match = [('research', 50), ('donation', 50), ('Included in administrative expenses', 50), (' Depreciation – property', 50), (' plant and equipment', 50), (' Depreciation – right-of-use assets', 50), (' Administrative expenses', 50), (' Compulsory superannuation contributions', 50), (' Payroll on-costs (excluding employee benefit provision)', 50), ('power', 40), (' Staff welfare', 40), ('machinery', 33), ('charges', 33), ('csr', 33), (' Wages and salaries', 33), ('miscellaneous', 29), ('consum', 25), ('analytical', 25), ('equipment', 25), ('exchange', 25), ('loss on', 0), ('social', 0), ('loss allowance', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = accountancy fees , res_fuzz_match = [('donation', 60), ('consum', 50), ('Included in administrative expenses', 45), (' plant and equipment', 45), (' Administrative expenses', 45), (' Payroll on-costs (excluding employee benefit provision)', 45), ('research', 36), (' Compulsory superannuation contributions', 36), ('machinery', 33), ('analytical', 33), ('csr', 33), ('equipment', 29), (' Staff welfare', 29), (' Depreciation – property', 27), (' Wages and salaries', 27), ('loss on', 25), (' Depreciation – right-of-use assets', 25), ('exchange', 22), ('miscellaneous', 22), ('loss allowance', 22), ('power', 20), ('charges', 20), ('social', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = consultancy fees , res_fuzz_match = [('consum', 83), (' Payroll on-costs (excluding employee benefit provision)', 55), ('analytical', 50), (' Compulsory superannuation contributions', 50), ('donation', 40), ('research', 36), (' plant and equipment', 36), ('csr', 33), ('social', 33), (' Wages and salaries', 30), ('equipment', 29), (' Depreciation – right-of-use assets', 29), ('Included in administrative expenses', 27), (' Depreciation – property', 27), (' Administrative expenses', 27), (' Staff welfare', 27), ('loss on', 25), ('loss allowance', 25), ('machinery', 22), ('exchange', 22), ('miscellaneous', 22), ('power', 20), ('charges', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = salary and wages , res_fuzz_match = [(' plant and equipment', 55), ('analytical', 50), ('social', 50), (' Compulsory superannuation contributions', 47), ('power', 44), ('miscellaneous', 44), ('exchange', 43), ('charges', 40), ('donation', 40), ('loss allowance', 40), ('Included in administrative expenses', 40), (' Wages and salaries', 40), (' Staff welfare', 40), ('research', 38), ('machinery', 33), ('equipment', 33), ('csr', 33), (' Depreciation – property', 33), (' Depreciation – right-of-use assets', 33), (' Payroll on-costs (excluding employee benefit provision)', 33), (' Administrative expenses', 32), ('loss on', 25), ('consum', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = other costs , res_fuzz_match = [('csr', 67), ('consum', 60), ('power', 60), (' Payroll on-costs (excluding employee benefit provision)', 60), ('loss on', 50), (' Depreciation – property', 50), (' Compulsory superannuation contributions', 50), ('Included in administrative expenses', 42), (' Administrative expenses', 42), ('donation', 40), ('machinery', 33), (' Wages and salaries', 30), ('research', 29), ('exchange', 29), ('loss allowance', 29), ('social', 25), ('charges', 22), ('equipment', 20), (' plant and equipment', 20), (' Depreciation – right-of-use assets', 20), (' Staff welfare', 20), ('analytical', 17), ('miscellaneous', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = finance costs , res_fuzz_match = [('consum', 60), (' Compulsory superannuation contributions', 55), ('loss on', 50), (' Payroll on-costs (excluding employee benefit provision)', 45), ('donation', 40), (' Depreciation – right-of-use assets', 40), ('Included in administrative expenses', 36), (' Depreciation – property', 36), (' Administrative expenses', 36), (' Wages and salaries', 36), ('analytical', 33), ('csr', 33), ('miscellaneous', 33), ('exchange', 29), ('loss allowance', 29), (' plant and equipment', 27), ('social', 25), ('power', 22), ('machinery', 22), ('charges', 20), ('equipment', 20), (' Staff welfare', 18), ('research', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 15], 'score': [83, 83], 'value': [496798.0, 237787.0], 'label': [' Consultancy fees', ' Consultancy fees'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), ('Rent', 25), (' Rental expenses', 24), (' Occupancy expenses', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Administration expenses', 24), (' Rental expenses', 18), ('Rent', 15), (' Occupancy', 14), (' Occupancy expenses', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' Administration expenses', 30), (' Occupancy expenses', 21), (' Rental expenses', 20), ('Rent', 19), (' Occupancy', 18)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Administration expenses', 33), (' Occupancy expenses', 23), (' Occupancy', 21), (' Rental expenses', 15), ('Rent', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), (' Occupancy expenses', 26), (' Rental expenses', 17), ('Rent', 13), (' Occupancy', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' Administration expenses', 65), (' Rental expenses', 53), (' Occupancy expenses', 42), ('Rent', 24), (' Occupancy', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), ('Rent', 12), (' Occupancy', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Occupancy', 25), (' Administration expenses', 22), (' Rental expenses', 17), (' Occupancy expenses', 17), ('Rent', 13)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('Rent', 21), (' Occupancy', 20), (' Administration expenses', 19), (' Rental expenses', 14), (' Occupancy expenses', 7)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' Rental expenses', 50), ('Rent', 32), (' Occupancy expenses', 30), (' Administration expenses', 26), (' Occupancy', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' Administration expenses', 40), (' Occupancy expenses', 19), (' Rental expenses', 18), ('Rent', 15), (' Occupancy', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' Rental expenses', 38), (' Occupancy expenses', 29), ('Rent', 24), (' Administration expenses', 22), (' Occupancy', 6)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Administration expenses', 32), (' Rental expenses', 29), ('Rent', 23), (' Occupancy', 22), (' Occupancy expenses', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Rental expenses', 43), (' Administration expenses', 41), (' Occupancy expenses', 40), ('Rent', 22), (' Occupancy', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Occupancy expenses', 35), (' Rental expenses', 34), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Rental expenses', 27), (' Occupancy expenses', 24), (' Administration expenses', 18), ('Rent', 14), (' Occupancy', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Occupancy', 22), (' Administration expenses', 20), (' Rental expenses', 12), (' Occupancy expenses', 12), ('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' Administration expenses', 40), (' Rental expenses', 38), (' Occupancy expenses', 29), ('Rent', 24), (' Occupancy', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Rental expenses', 47), (' Administration expenses', 40), (' Occupancy expenses', 39), ('Rent', 16), (' Occupancy', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' Rental expenses', 44), (' Occupancy expenses', 30), (' Administration expenses', 27), ('Rent', 25), (' Occupancy', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 30), (' Administration expenses', 24), ('Rent', 21), (' Occupancy', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -7455447.0, 'line_item_label': ['Administration expenses'], 'note_numbers': ['5'], 'line_item_value': [-7455447.0]}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), ('Rent', 25), (' Rental expenses', 24), (' Occupancy expenses', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Administration expenses', 24), (' Rental expenses', 18), ('Rent', 15), (' Occupancy', 14), (' Occupancy expenses', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' Administration expenses', 30), (' Occupancy expenses', 21), (' Rental expenses', 20), ('Rent', 19), (' Occupancy', 18)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Administration expenses', 33), (' Occupancy expenses', 23), (' Occupancy', 21), (' Rental expenses', 15), ('Rent', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), (' Occupancy expenses', 26), (' Rental expenses', 17), ('Rent', 13), (' Occupancy', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' Administration expenses', 65), (' Rental expenses', 53), (' Occupancy expenses', 42), ('Rent', 24), (' Occupancy', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), ('Rent', 12), (' Occupancy', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Occupancy', 25), (' Administration expenses', 22), (' Rental expenses', 17), (' Occupancy expenses', 17), ('Rent', 13)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('Rent', 21), (' Occupancy', 20), (' Administration expenses', 19), (' Rental expenses', 14), (' Occupancy expenses', 7)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' Rental expenses', 50), ('Rent', 32), (' Occupancy expenses', 30), (' Administration expenses', 26), (' Occupancy', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' Administration expenses', 40), (' Occupancy expenses', 19), (' Rental expenses', 18), ('Rent', 15), (' Occupancy', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' Rental expenses', 38), (' Occupancy expenses', 29), ('Rent', 24), (' Administration expenses', 22), (' Occupancy', 6)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Administration expenses', 32), (' Rental expenses', 29), ('Rent', 23), (' Occupancy', 22), (' Occupancy expenses', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Rental expenses', 43), (' Administration expenses', 41), (' Occupancy expenses', 40), ('Rent', 22), (' Occupancy', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Occupancy expenses', 35), (' Rental expenses', 34), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Rental expenses', 27), (' Occupancy expenses', 24), (' Administration expenses', 18), ('Rent', 14), (' Occupancy', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Occupancy', 22), (' Administration expenses', 20), (' Rental expenses', 12), (' Occupancy expenses', 12), ('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' Administration expenses', 40), (' Rental expenses', 38), (' Occupancy expenses', 29), ('Rent', 24), (' Occupancy', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Rental expenses', 47), (' Administration expenses', 40), (' Occupancy expenses', 39), ('Rent', 16), (' Occupancy', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' Rental expenses', 44), (' Occupancy expenses', 30), (' Administration expenses', 27), ('Rent', 25), (' Occupancy', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 30), (' Administration expenses', 24), ('Rent', 21), (' Occupancy', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -9231795.0, 'line_item_label': ['Administration expenses'], 'note_numbers': ['5'], 'line_item_value': [-9231795.0]}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['Rent'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = amortisation & depreciation , res_fuzz_match = [('Rent', 50)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = stamp duty , res_fuzz_match = [('Rent', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = management fees , res_fuzz_match = [('Rent', 29)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = rent , res_fuzz_match = [('Rent', 100)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = accountancy fees , res_fuzz_match = [('Rent', 50)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = consultancy fees , res_fuzz_match = [('Rent', 29)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = salary and wages , res_fuzz_match = [('Rent', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = other costs , res_fuzz_match = [('Rent', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = finance costs , res_fuzz_match = [('Rent', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = amortisation & depreciation , res_fuzz_match = [('Rent', 50)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = stamp duty , res_fuzz_match = [('Rent', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = management fees , res_fuzz_match = [('Rent', 29)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = rent , res_fuzz_match = [('Rent', 100)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = accountancy fees , res_fuzz_match = [('Rent', 50)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = consultancy fees , res_fuzz_match = [('Rent', 29)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = salary and wages , res_fuzz_match = [('Rent', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = other costs , res_fuzz_match = [('Rent', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = finance costs , res_fuzz_match = [('Rent', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 13], 'score': [100, 100], 'value': [4668.0, 22674.0], 'label': [' Rent', ' Rent'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 36), ('Other revenue', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Other income', 40), ('other operating', 21), ('Other revenue', 19)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('other operating', 37), (' Other income', 36), ('Other revenue', 28)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Other income', 40), ('other operating', 33), ('Other revenue', 23)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), ('Other revenue', 17), (' Other income', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 9), ('Other revenue', 8)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('other operating', 24), ('Other revenue', 22)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('Other revenue', 30), ('other operating', 16), (' Other income', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' Other income', 30), ('other operating', 11), ('Other revenue', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Other income', 48), ('other operating', 31), ('Other revenue', 24)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Other income', 36), ('Other revenue', 31), ('other operating', 28)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('Other revenue', 27), (' Other income', 24), ('other operating', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('other operating', 14), (' Other income', 13), ('Other revenue', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('Other revenue', 39), (' Other income', 30), ('other operating', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Other income', 31), ('Other revenue', 26), ('other operating', 23)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' Other income', 56), ('other operating', 47), ('Other revenue', 30)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 21)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': 143754.0, 'line_item_label': ['Other income'], 'note_numbers': [nan], 'line_item_value': [143754.0]}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 36), ('Other revenue', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Other income', 40), ('other operating', 21), ('Other revenue', 19)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('other operating', 37), (' Other income', 36), ('Other revenue', 28)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Other income', 40), ('other operating', 33), ('Other revenue', 23)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), ('Other revenue', 17), (' Other income', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 9), ('Other revenue', 8)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('other operating', 24), ('Other revenue', 22)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('Other revenue', 30), ('other operating', 16), (' Other income', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' Other income', 30), ('other operating', 11), ('Other revenue', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Other income', 48), ('other operating', 31), ('Other revenue', 24)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Other income', 36), ('Other revenue', 31), ('other operating', 28)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('Other revenue', 27), (' Other income', 24), ('other operating', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('other operating', 14), (' Other income', 13), ('Other revenue', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('Other revenue', 39), (' Other income', 30), ('other operating', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Other income', 31), ('Other revenue', 26), ('other operating', 23)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' Other income', 56), ('other operating', 47), ('Other revenue', 30)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 21)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': 152362.0, 'line_item_label': ['Other income'], 'note_numbers': [nan], 'line_item_value': [152362.0]}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Net finance costs', 42), ('other income', 40), (' Finance income and costs', 27), (' Finance income and finance costs', 22), ('finance income', 19), ('Finance income', 19), (' Interest revenue', 8)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 42), ('other income', 36), (' Finance income and finance costs', 36), (' Interest revenue', 31), ('finance income', 14), ('Finance income', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Finance income and costs', 46), ('other income', 40), (' Finance income and finance costs', 38), (' Net finance costs', 34), (' Interest revenue', 21), ('finance income', 15), ('Finance income', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 30), (' Finance income and finance costs', 25), ('other income', 17), ('finance income', 17), ('Finance income', 17), (' Interest revenue', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Finance income and costs', 31), (' Net finance costs', 31), (' Finance income and finance costs', 26)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' Interest revenue', 39), (' Net finance costs', 33), (' Finance income and costs', 29), ('other income', 25), (' Finance income and finance costs', 24), ('finance income', 18), ('Finance income', 18)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), ('other income', 30), (' Finance income and finance costs', 27), (' Net finance costs', 26), ('finance income', 21), ('Finance income', 21)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Net finance costs', 38), (' Finance income and costs', 33), (' Interest revenue', 32), (' Finance income and finance costs', 28), ('finance income', 18), ('Finance income', 18)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs', 100), (' Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('Finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('finance income', 37), ('Finance income', 37), (' Finance income and costs', 33), (' Net finance costs', 33), (' Finance income and finance costs', 28), (' Interest revenue', 27), ('other income', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('finance income', 38), ('Finance income', 38), (' Finance income and costs', 33), ('other income', 30), (' Finance income and finance costs', 27), (' Interest revenue', 25), (' Net finance costs', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' Net finance costs', 32), ('other income', 25), (' Finance income and costs', 24), (' Finance income and finance costs', 21), ('finance income', 20), ('Finance income', 20), (' Interest revenue', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('other income', 48), ('finance income', 41), ('Finance income', 41), (' Finance income and costs', 33), (' Finance income and finance costs', 28), (' Interest revenue', 27), (' Net finance costs', 27)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Net finance costs', 26), (' Interest revenue', 19)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('other income', 36), ('finance income', 36), ('Finance income', 36), (' Finance income and costs', 33), (' Interest revenue', 33), (' Finance income and finance costs', 30), (' Net finance costs', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Interest revenue', 37), (' Finance income and costs', 27), (' Net finance costs', 26), ('other income', 24), (' Finance income and finance costs', 24), ('finance income', 16), ('Finance income', 16)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Net finance costs', 21), (' Finance income and costs', 16), ('other income', 13), ('finance income', 12), ('Finance income', 12), (' Finance income and finance costs', 12), (' Interest revenue', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' Interest revenue', 41), ('other income', 30), ('finance income', 24), ('Finance income', 24), (' Finance income and costs', 24), (' Finance income and finance costs', 21), (' Net finance costs', 18)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Finance income and costs', 36), ('finance income', 35), ('Finance income', 35), (' Finance income and finance costs', 32), ('other income', 31), (' Interest revenue', 29), (' Net finance costs', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('other income', 56), (' Finance income and costs', 37), ('finance income', 35), ('Finance income', 35), (' Net finance costs', 33), (' Finance income and finance costs', 32), (' Interest revenue', 28)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other income', 43), (' Net finance costs', 40), (' Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 11, 12, 13], 'score': 100, 'value': -5949157.0, 'line_item_label': ['Other income', 'Finance income', 'Finance costs', 'Net finance costs'], 'note_numbers': [nan, nan, '6', nan], 'line_item_value': [143754.0, 25598.0, -3072053.0, -3046456.0]}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Net finance costs', 42), ('other income', 40), (' Finance income and costs', 27), (' Finance income and finance costs', 22), ('finance income', 19), ('Finance income', 19), (' Interest revenue', 8)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 42), ('other income', 36), (' Finance income and finance costs', 36), (' Interest revenue', 31), ('finance income', 14), ('Finance income', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Finance income and costs', 46), ('other income', 40), (' Finance income and finance costs', 38), (' Net finance costs', 34), (' Interest revenue', 21), ('finance income', 15), ('Finance income', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 30), (' Finance income and finance costs', 25), ('other income', 17), ('finance income', 17), ('Finance income', 17), (' Interest revenue', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Finance income and costs', 31), (' Net finance costs', 31), (' Finance income and finance costs', 26)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' Interest revenue', 39), (' Net finance costs', 33), (' Finance income and costs', 29), ('other income', 25), (' Finance income and finance costs', 24), ('finance income', 18), ('Finance income', 18)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), ('other income', 30), (' Finance income and finance costs', 27), (' Net finance costs', 26), ('finance income', 21), ('Finance income', 21)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Net finance costs', 38), (' Finance income and costs', 33), (' Interest revenue', 32), (' Finance income and finance costs', 28), ('finance income', 18), ('Finance income', 18)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs', 100), (' Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('Finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('finance income', 37), ('Finance income', 37), (' Finance income and costs', 33), (' Net finance costs', 33), (' Finance income and finance costs', 28), (' Interest revenue', 27), ('other income', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('finance income', 38), ('Finance income', 38), (' Finance income and costs', 33), ('other income', 30), (' Finance income and finance costs', 27), (' Interest revenue', 25), (' Net finance costs', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' Net finance costs', 32), ('other income', 25), (' Finance income and costs', 24), (' Finance income and finance costs', 21), ('finance income', 20), ('Finance income', 20), (' Interest revenue', 14)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('other income', 48), ('finance income', 41), ('Finance income', 41), (' Finance income and costs', 33), (' Finance income and finance costs', 28), (' Interest revenue', 27), (' Net finance costs', 27)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Net finance costs', 26), (' Interest revenue', 19)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('other income', 36), ('finance income', 36), ('Finance income', 36), (' Finance income and costs', 33), (' Interest revenue', 33), (' Finance income and finance costs', 30), (' Net finance costs', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Interest revenue', 37), (' Finance income and costs', 27), (' Net finance costs', 26), ('other income', 24), (' Finance income and finance costs', 24), ('finance income', 16), ('Finance income', 16)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Net finance costs', 21), (' Finance income and costs', 16), ('other income', 13), ('finance income', 12), ('Finance income', 12), (' Finance income and finance costs', 12), (' Interest revenue', 11)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' Interest revenue', 41), ('other income', 30), ('finance income', 24), ('Finance income', 24), (' Finance income and costs', 24), (' Finance income and finance costs', 21), (' Net finance costs', 18)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Finance income and costs', 36), ('finance income', 35), ('Finance income', 35), (' Finance income and finance costs', 32), ('other income', 31), (' Interest revenue', 29), (' Net finance costs', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('other income', 56), (' Finance income and costs', 37), ('finance income', 35), ('Finance income', 35), (' Net finance costs', 33), (' Finance income and finance costs', 32), (' Interest revenue', 28)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other income', 43), (' Net finance costs', 40), (' Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 11, 12, 13], 'score': 100, 'value': -4789408.0, 'line_item_label': ['Other income', 'Finance income', 'Finance costs', 'Net finance costs'], 'note_numbers': [nan, nan, '6', nan], 'line_item_value': [152362.0, 478743.0, -2949628.0, -2470885.0]}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans (other than those from related parties) , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), ('Bank interest', 62), (' Interest received - Loan', 55), (' Sublease interest income', 50), (' Bank Deposits - cash and cash equivalents', 47), (' Share of JV interest received/(paid)', 46), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 32)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans interest on leases , res_fuzz_match = [('interest', 100), ('Bank interest', 85), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), (' Share of JV interest received/(paid)', 58), (' Sublease interest income', 56), (' Interest received - Loan', 55), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 48), (' Bank Deposits - cash and cash equivalents', 47)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans other interest expense , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), ('Bank interest', 69), (' Interest received - Bank', 65), (' Interest received - Loan', 60), (' Share of JV interest received/(paid)', 60), (' Sublease interest income', 57), (' Bank Deposits - cash and cash equivalents', 47), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 37)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), ('Bank interest', 62), (' Interest received - Loan', 55), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 53), (' Sublease interest income', 50), (' Share of JV interest received/(paid)', 46), (' Bank Deposits - cash and cash equivalents', 41)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans taxation , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), ('Bank interest', 62), (' Interest received - Loan', 55), (' Sublease interest income', 50), (' Bank Deposits - cash and cash equivalents', 48), (' Share of JV interest received/(paid)', 46), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 42)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans (other than those from related parties) , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), ('Bank interest', 62), (' Interest received - Loan', 55), (' Sublease interest income', 50), (' Bank Deposits - cash and cash equivalents', 47), (' Share of JV interest received/(paid)', 46), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 32)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans interest on leases , res_fuzz_match = [('interest', 100), ('Bank interest', 85), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), (' Share of JV interest received/(paid)', 58), (' Sublease interest income', 56), (' Interest received - Loan', 55), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 48), (' Bank Deposits - cash and cash equivalents', 47)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans other interest expense , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), ('Bank interest', 69), (' Interest received - Bank', 65), (' Interest received - Loan', 60), (' Share of JV interest received/(paid)', 60), (' Sublease interest income', 57), (' Bank Deposits - cash and cash equivalents', 47), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 37)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), ('Bank interest', 62), (' Interest received - Loan', 55), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 53), (' Sublease interest income', 50), (' Share of JV interest received/(paid)', 46), (' Bank Deposits - cash and cash equivalents', 41)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans taxation , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), ('Bank interest', 62), (' Interest received - Loan', 55), (' Sublease interest income', 50), (' Bank Deposits - cash and cash equivalents', 48), (' Share of JV interest received/(paid)', 46), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 42)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [2211657.0, 197276.0, 540695.0, 2949628.0, 2022.0, 2601186.0, 102990.0, 367877.0, 3072053.0, 2021.0], 'label': ['Interest on bank overdrafts and loans (other than those from related parties)', 'Interest on bank overdrafts and loans Interest on leases', 'Interest on bank overdrafts and loans Other interest expense', 'Interest on bank overdrafts and loans ', 'Interest on bank overdrafts and loans Taxation', 'Interest on bank overdrafts and loans (other than those from related parties)', 'Interest on bank overdrafts and loans Interest on leases', 'Interest on bank overdrafts and loans Other interest expense', 'Interest on bank overdrafts and loans ', 'Interest on bank overdrafts and loans Taxation'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 9)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 13)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('finance cost', 40), ('finance costs', 40), (' net finance costs ', 34), (' finance expenses', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' finance expenses', 50), ('finance cost', 38), ('finance costs', 38), (' net finance costs ', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('finance cost', 20), ('finance costs', 20), (' finance expenses', 18), (' net finance costs ', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' finance expenses', 33), (' net finance costs ', 32), ('finance cost', 20), ('finance costs', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('finance cost', 30), ('finance costs', 30), (' finance expenses', 29), (' net finance costs ', 27)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 32), ('finance costs', 32), (' net finance costs ', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' net finance costs ', 26), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 19)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' net finance costs ', 21), (' finance expenses', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' finance expenses', 29), ('finance cost', 20), ('finance costs', 20), (' net finance costs ', 18)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' finance expenses', 39), ('finance cost', 36), ('finance costs', 36), (' net finance costs ', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13], 'score': 100, 'value': -6118509.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [-3072053.0, -3046456.0]}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 9)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 13)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('finance cost', 40), ('finance costs', 40), (' net finance costs ', 34), (' finance expenses', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' finance expenses', 50), ('finance cost', 38), ('finance costs', 38), (' net finance costs ', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('finance cost', 20), ('finance costs', 20), (' finance expenses', 18), (' net finance costs ', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' finance expenses', 33), (' net finance costs ', 32), ('finance cost', 20), ('finance costs', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('finance cost', 30), ('finance costs', 30), (' finance expenses', 29), (' net finance costs ', 27)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 32), ('finance costs', 32), (' net finance costs ', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' net finance costs ', 26), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 19)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' net finance costs ', 21), (' finance expenses', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' finance expenses', 29), ('finance cost', 20), ('finance costs', 20), (' net finance costs ', 18)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' finance expenses', 39), ('finance cost', 36), ('finance costs', 36), (' net finance costs ', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13], 'score': 100, 'value': -5420513.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [-2949628.0, -2470885.0]}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans (other than those from related parties) , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 100), (' Interest on leases', 77), (' Interest income', 71), ('Interest expenses', 67), (' Interest accrued on loans', 58), ('debt', 50), ('bank facilities', 50), ('bonds', 50), (' Interest accrued on lease liabilities', 50), (' Lease interest expense', 50), ('  Other interest expense', 48), (' Lease liabilities interest expense', 41), (' Interest expense on financial liabilities using the effective interest rate method - other', 40), ('debenture', 38), ('cash credit', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 38), (' Discount unwind on the provision for asset retirement obligation', 35), ('borrowings', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans interest on leases , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on leases', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 83), (' Lease interest expense', 74), ('Interest expenses', 73), (' Interest income', 71), ('  Other interest expense', 67), (' Lease liabilities interest expense', 64), (' Interest accrued on loans', 58), (' Interest accrued on lease liabilities', 58), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 54), ('debt', 50), ('bank facilities', 50), ('bonds', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 39), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 35), ('borrowings', 33), ('cash credit', 29)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans other interest expense , res_fuzz_match = [('loan', 100), ('interest', 100), ('Interest expenses', 100), ('  Other interest expense', 100), (' Lease interest expense', 87), (' Interest on bank overdrafts and loans (other than those from related parties)', 80), (' Interest on leases', 77), (' Interest income', 71), (' Lease liabilities interest expense', 70), (' Interest accrued on loans', 58), ('bank facilities', 50), ('bonds', 50), (' Interest accrued on lease liabilities', 50), ('debenture', 43), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 36), ('borrowings', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 30), ('debt', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 100), (' Interest on leases', 77), (' Interest income', 71), ('Interest expenses', 67), (' Interest accrued on loans', 58), ('bank facilities', 50), ('bonds', 50), (' Interest accrued on lease liabilities', 50), (' Lease interest expense', 50), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 50), ('  Other interest expense', 48), (' Interest expense on financial liabilities using the effective interest rate method - other', 44), (' Lease liabilities interest expense', 41), ('debenture', 38), ('cash credit', 36), ('borrowings', 33), (' Discount unwind on the provision for asset retirement obligation', 31), ('debt', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans taxation , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 89), (' Interest on leases', 77), (' Interest income', 71), ('Interest expenses', 67), (' Interest accrued on loans', 58), ('bank facilities', 50), ('bonds', 50), (' Interest accrued on lease liabilities', 50), (' Lease interest expense', 50), ('  Other interest expense', 48), (' Interest expense on financial liabilities using the effective interest rate method - other', 42), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 42), (' Lease liabilities interest expense', 41), ('debenture', 38), ('cash credit', 36), ('borrowings', 33), (' Discount unwind on the provision for asset retirement obligation', 29), ('debt', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans (other than those from related parties) , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 100), (' Interest on leases', 77), (' Interest income', 71), ('Interest expenses', 67), (' Interest accrued on loans', 58), ('debt', 50), ('bank facilities', 50), ('bonds', 50), (' Interest accrued on lease liabilities', 50), (' Lease interest expense', 50), ('  Other interest expense', 48), (' Lease liabilities interest expense', 41), (' Interest expense on financial liabilities using the effective interest rate method - other', 40), ('debenture', 38), ('cash credit', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 38), (' Discount unwind on the provision for asset retirement obligation', 35), ('borrowings', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans interest on leases , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on leases', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 83), (' Lease interest expense', 74), ('Interest expenses', 73), (' Interest income', 71), ('  Other interest expense', 67), (' Lease liabilities interest expense', 64), (' Interest accrued on loans', 58), (' Interest accrued on lease liabilities', 58), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 54), ('debt', 50), ('bank facilities', 50), ('bonds', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 39), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 35), ('borrowings', 33), ('cash credit', 29)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans other interest expense , res_fuzz_match = [('loan', 100), ('interest', 100), ('Interest expenses', 100), ('  Other interest expense', 100), (' Lease interest expense', 87), (' Interest on bank overdrafts and loans (other than those from related parties)', 80), (' Interest on leases', 77), (' Interest income', 71), (' Lease liabilities interest expense', 70), (' Interest accrued on loans', 58), ('bank facilities', 50), ('bonds', 50), (' Interest accrued on lease liabilities', 50), ('debenture', 43), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 36), ('borrowings', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 30), ('debt', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 100), (' Interest on leases', 77), (' Interest income', 71), ('Interest expenses', 67), (' Interest accrued on loans', 58), ('bank facilities', 50), ('bonds', 50), (' Interest accrued on lease liabilities', 50), (' Lease interest expense', 50), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 50), ('  Other interest expense', 48), (' Interest expense on financial liabilities using the effective interest rate method - other', 44), (' Lease liabilities interest expense', 41), ('debenture', 38), ('cash credit', 36), ('borrowings', 33), (' Discount unwind on the provision for asset retirement obligation', 31), ('debt', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans taxation , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 89), (' Interest on leases', 77), (' Interest income', 71), ('Interest expenses', 67), (' Interest accrued on loans', 58), ('bank facilities', 50), ('bonds', 50), (' Interest accrued on lease liabilities', 50), (' Lease interest expense', 50), ('  Other interest expense', 48), (' Interest expense on financial liabilities using the effective interest rate method - other', 42), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 42), (' Lease liabilities interest expense', 41), ('debenture', 38), ('cash credit', 36), ('borrowings', 33), (' Discount unwind on the provision for asset retirement obligation', 29), ('debt', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [2211657.0, 197276.0, 540695.0, 2949628.0, 2022.0, 2601186.0, 102990.0, 367877.0, 3072053.0, 2021.0], 'label': ['Interest on bank overdrafts and loans (other than those from related parties)', 'Interest on bank overdrafts and loans Interest on leases', 'Interest on bank overdrafts and loans Other interest expense', 'Interest on bank overdrafts and loans ', 'Interest on bank overdrafts and loans Taxation', 'Interest on bank overdrafts and loans (other than those from related parties)', 'Interest on bank overdrafts and loans Interest on leases', 'Interest on bank overdrafts and loans Other interest expense', 'Interest on bank overdrafts and loans ', 'Interest on bank overdrafts and loans Taxation'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:43+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-04-20 14:19:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 9)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 13)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('finance cost', 40), ('finance costs', 40), (' net finance costs ', 34), (' finance expenses', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' finance expenses', 50), ('finance cost', 38), ('finance costs', 38), (' net finance costs ', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('finance cost', 20), ('finance costs', 20), (' finance expenses', 18), (' net finance costs ', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' finance expenses', 33), (' net finance costs ', 32), ('finance cost', 20), ('finance costs', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('finance cost', 30), ('finance costs', 30), (' finance expenses', 29), (' net finance costs ', 27)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 32), ('finance costs', 32), (' net finance costs ', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' net finance costs ', 26), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 19)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' net finance costs ', 21), (' finance expenses', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' finance expenses', 29), ('finance cost', 20), ('finance costs', 20), (' net finance costs ', 18)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' finance expenses', 39), ('finance cost', 36), ('finance costs', 36), (' net finance costs ', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13], 'score': 100, 'value': -6118509.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [-3072053.0, -3046456.0]}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 9)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 13)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('finance cost', 40), ('finance costs', 40), (' net finance costs ', 34), (' finance expenses', 15)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' finance expenses', 50), ('finance cost', 38), ('finance costs', 38), (' net finance costs ', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('finance cost', 20), ('finance costs', 20), (' finance expenses', 18), (' net finance costs ', 17)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' finance expenses', 33), (' net finance costs ', 32), ('finance cost', 20), ('finance costs', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('finance cost', 30), ('finance costs', 30), (' finance expenses', 29), (' net finance costs ', 27)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 32), ('finance costs', 32), (' net finance costs ', 25)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' net finance costs ', 26), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 19)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' net finance costs ', 21), (' finance expenses', 12)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' finance expenses', 29), ('finance cost', 20), ('finance costs', 20), (' net finance costs ', 18)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 20)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' finance expenses', 39), ('finance cost', 36), ('finance costs', 36), (' net finance costs ', 33)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13], 'score': 100, 'value': -5420513.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [-2949628.0, -2470885.0]}
2023-04-20 14:19:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-20 14:19:43+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans (other than those from related parties) , res_fuzz_match = [(' other', 100), (' other income', 64), ('other revenue', 58), ('  government grants', 58), (' net of tax', 57), (' dividend from other parties', 56), (' japan recoveries', 50), (' net other foreign exchange (losses)/gains', 49), (' secondment income (tw recovery)', 48), (' other miscellaneous - net (loss)/gain', 48), (' insurance proceeds', 45), (' net foreign exchange (loss)/gain', 45), (' net foreign exchange gain', 42), (' sundry income', 42), (' net foreign exchange gains/(losses)', 41), (' foreign exchange gain', 40), (' profit from discontinued operation', 38), (' paid by customers - at amortised cost', 38), (' commission revenue', 36), (' share of jv income', 36), (' net (loss)/profit on disposal of non-current assets', 33), (' effective portion of changes in fair value of cash flow', 32), (' quota lease income', 31), (' net ppe disposal (loss)/gain', 29), (' margin charge income', 26)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans interest on leases , res_fuzz_match = [(' other', 60), ('  government grants', 58), (' net of tax', 57), (' japan recoveries', 50), (' quota lease income', 50), (' net ppe disposal (loss)/gain', 46), (' net other foreign exchange (losses)/gains', 46), (' other income', 45), ('other revenue', 42), (' dividend from other parties', 42), (' sundry income', 42), (' profit from discontinued operation', 41), (' net foreign exchange gains/(losses)', 41), (' net foreign exchange (loss)/gain', 41), (' other miscellaneous - net (loss)/gain', 41), (' margin charge income', 39), (' secondment income (tw recovery)', 38), (' insurance proceeds', 36), (' share of jv income', 36), (' foreign exchange gain', 35), (' paid by customers - at amortised cost', 35), (' effective portion of changes in fair value of cash flow', 34), (' net foreign exchange gain', 33), (' commission revenue', 29), (' net (loss)/profit on disposal of non-current assets', 28)]
2023-04-20 14:19:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans other interest expense , res_fuzz_match = [(' other', 100), (' other income', 73), ('other revenue', 67), ('  government grants', 58), (' net of tax', 57), (' dividend from other parties', 52), (' net other foreign exchange (losses)/gains', 52), (' japan recoveries', 50), (' share of jv income', 45), (' margin charge income', 44), (' other miscellaneous - net (loss)/gain', 44), (' sundry income', 42), (' net foreign exchange gains/(losses)', 41), (' net foreign exchange gain', 39), (' net foreign exchange (loss)/gain', 39), (' secondment income (tw recovery)', 38), (' net ppe disposal (loss)/gain', 38), (' quota lease income', 38), (' insurance proceeds', 36), (' foreign exchange gain', 35), (' effective portion of changes in fair value of cash flow', 32), (' net (loss)/profit on disposal of non-current assets', 31), (' profit from discontinued operation', 30), (' commission revenue', 29), (' paid by customers - at amortised cost', 25)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans , res_fuzz_match = [(' other', 60), ('  government grants', 58), (' net of tax', 57), (' japan recoveries', 50), (' quota lease income', 46), (' other income', 45), (' share of jv income', 45), (' net ppe disposal (loss)/gain', 45), ('other revenue', 42), (' net foreign exchange (loss)/gain', 42), (' other miscellaneous - net (loss)/gain', 42), (' net foreign exchange gains/(losses)', 41), (' net foreign exchange gain', 38), (' secondment income (tw recovery)', 38), (' sundry income', 38), (' net other foreign exchange (losses)/gains', 38), (' insurance proceeds', 36), (' effective portion of changes in fair value of cash flow', 36), (' foreign exchange gain', 35), (' dividend from other parties', 31), (' profit from discontinued operation', 30), (' paid by customers - at amortised cost', 30), (' commission revenue', 29), (' margin charge income', 28), (' net (loss)/profit on disposal of non-current assets', 28)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans taxation , res_fuzz_match = [(' net of tax', 71), (' other', 60), ('  government grants', 58), (' japan recoveries', 50), (' other income', 45), (' share of jv income', 45), (' net other foreign exchange (losses)/gains', 43), ('other revenue', 42), (' net foreign exchange gains/(losses)', 41), (' other miscellaneous - net (loss)/gain', 41), (' dividend from other parties', 40), (' net ppe disposal (loss)/gain', 39), (' secondment income (tw recovery)', 38), (' net foreign exchange (loss)/gain', 38), (' net foreign exchange gain', 37), (' insurance proceeds', 36), (' foreign exchange gain', 35), (' effective portion of changes in fair value of cash flow', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 32), (' paid by customers - at amortised cost', 31), (' quota lease income', 31), (' profit from discontinued operation', 30), (' commission revenue', 29), (' margin charge income', 28)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans (other than those from related parties) , res_fuzz_match = [(' other', 100), (' other income', 64), ('other revenue', 58), ('  government grants', 58), (' net of tax', 57), (' dividend from other parties', 56), (' japan recoveries', 50), (' net other foreign exchange (losses)/gains', 49), (' secondment income (tw recovery)', 48), (' other miscellaneous - net (loss)/gain', 48), (' insurance proceeds', 45), (' net foreign exchange (loss)/gain', 45), (' net foreign exchange gain', 42), (' sundry income', 42), (' net foreign exchange gains/(losses)', 41), (' foreign exchange gain', 40), (' profit from discontinued operation', 38), (' paid by customers - at amortised cost', 38), (' commission revenue', 36), (' share of jv income', 36), (' net (loss)/profit on disposal of non-current assets', 33), (' effective portion of changes in fair value of cash flow', 32), (' quota lease income', 31), (' net ppe disposal (loss)/gain', 29), (' margin charge income', 26)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans interest on leases , res_fuzz_match = [(' other', 60), ('  government grants', 58), (' net of tax', 57), (' japan recoveries', 50), (' quota lease income', 50), (' net ppe disposal (loss)/gain', 46), (' net other foreign exchange (losses)/gains', 46), (' other income', 45), ('other revenue', 42), (' dividend from other parties', 42), (' sundry income', 42), (' profit from discontinued operation', 41), (' net foreign exchange gains/(losses)', 41), (' net foreign exchange (loss)/gain', 41), (' other miscellaneous - net (loss)/gain', 41), (' margin charge income', 39), (' secondment income (tw recovery)', 38), (' insurance proceeds', 36), (' share of jv income', 36), (' foreign exchange gain', 35), (' paid by customers - at amortised cost', 35), (' effective portion of changes in fair value of cash flow', 34), (' net foreign exchange gain', 33), (' commission revenue', 29), (' net (loss)/profit on disposal of non-current assets', 28)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans other interest expense , res_fuzz_match = [(' other', 100), (' other income', 73), ('other revenue', 67), ('  government grants', 58), (' net of tax', 57), (' dividend from other parties', 52), (' net other foreign exchange (losses)/gains', 52), (' japan recoveries', 50), (' share of jv income', 45), (' margin charge income', 44), (' other miscellaneous - net (loss)/gain', 44), (' sundry income', 42), (' net foreign exchange gains/(losses)', 41), (' net foreign exchange gain', 39), (' net foreign exchange (loss)/gain', 39), (' secondment income (tw recovery)', 38), (' net ppe disposal (loss)/gain', 38), (' quota lease income', 38), (' insurance proceeds', 36), (' foreign exchange gain', 35), (' effective portion of changes in fair value of cash flow', 32), (' net (loss)/profit on disposal of non-current assets', 31), (' profit from discontinued operation', 30), (' commission revenue', 29), (' paid by customers - at amortised cost', 25)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans , res_fuzz_match = [(' other', 60), ('  government grants', 58), (' net of tax', 57), (' japan recoveries', 50), (' quota lease income', 46), (' other income', 45), (' share of jv income', 45), (' net ppe disposal (loss)/gain', 45), ('other revenue', 42), (' net foreign exchange (loss)/gain', 42), (' other miscellaneous - net (loss)/gain', 42), (' net foreign exchange gains/(losses)', 41), (' net foreign exchange gain', 38), (' secondment income (tw recovery)', 38), (' sundry income', 38), (' net other foreign exchange (losses)/gains', 38), (' insurance proceeds', 36), (' effective portion of changes in fair value of cash flow', 36), (' foreign exchange gain', 35), (' dividend from other parties', 31), (' profit from discontinued operation', 30), (' paid by customers - at amortised cost', 30), (' commission revenue', 29), (' margin charge income', 28), (' net (loss)/profit on disposal of non-current assets', 28)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans taxation , res_fuzz_match = [(' net of tax', 71), (' other', 60), ('  government grants', 58), (' japan recoveries', 50), (' other income', 45), (' share of jv income', 45), (' net other foreign exchange (losses)/gains', 43), ('other revenue', 42), (' net foreign exchange gains/(losses)', 41), (' other miscellaneous - net (loss)/gain', 41), (' dividend from other parties', 40), (' net ppe disposal (loss)/gain', 39), (' secondment income (tw recovery)', 38), (' net foreign exchange (loss)/gain', 38), (' net foreign exchange gain', 37), (' insurance proceeds', 36), (' foreign exchange gain', 35), (' effective portion of changes in fair value of cash flow', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 32), (' paid by customers - at amortised cost', 31), (' quota lease income', 31), (' profit from discontinued operation', 30), (' commission revenue', 29), (' margin charge income', 28)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 5, 7], 'score': [100, 100, 100, 100], 'value': [2211657.0, 540695.0, 2601186.0, 367877.0], 'label': ['Interest on bank overdrafts and loans (other than those from related parties)', 'Interest on bank overdrafts and loans Other interest expense', 'Interest on bank overdrafts and loans (other than those from related parties)', 'Interest on bank overdrafts and loans Other interest expense'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:44+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-04-20 14:19:44+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:44+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-04-20 14:19:44+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:44+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-04-20 14:19:44+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:44+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('NULL', 31)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('NULL', 19)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('NULL', 22)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('NULL', 24)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('NULL', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('NULL', 31)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('NULL', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('NULL', 5)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('NULL', 5)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('NULL', 25)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('NULL', 18)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('NULL', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('NULL', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:44+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('NULL', 31)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('NULL', 19)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('NULL', 22)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('NULL', 24)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('NULL', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('NULL', 31)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('NULL', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('NULL', 5)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('NULL', 5)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('NULL', 25)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('NULL', 18)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('NULL', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('NULL', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:44+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-04-20 14:19:44+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:44+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-04-20 14:19:44+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:44+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-04-20 14:19:44+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:44+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('current tax', 35), (' income tax benefit', 34), (' tax (expense)/benefit', 33), ('provision for taxation previous year', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 19), ('prior year ', 18), (' income tax expense', 14)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), ('prior year ', 25), ('provision for taxation previous year', 23), ('earlier year', 22), ('amount transferred to retained earnings', 18), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax', 13), (' income tax benefit/(expense)', 13)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' income tax', 44), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' income tax benefit/(expense)', 24), ('current tax', 20), ('amount transferred to retained earnings', 17), ('provision for taxation previous year', 16), ('minimum alternate tax credit entitlement', 15), ('deferred tax', 11), ('earlier year', 10), (' tax (expense)/benefit', 7)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' income tax', 31), ('provision for taxation previous year', 30), ('prior year ', 30), ('current tax', 29), ('amount transferred to retained earnings', 27), (' income tax expense', 24), (' income tax benefit', 24), (' income tax benefit/(expense)', 24), (' tax (expense)/benefit', 23), ('minimum alternate tax credit entitlement', 20), ('deferred tax', 15), ('earlier year', 14)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' income tax', 35), ('minimum alternate tax credit entitlement', 30), ('provision for taxation previous year', 28), (' income tax expense', 27), ('current tax', 24), ('amount transferred to retained earnings', 24), ('earlier year', 23), (' income tax benefit/(expense)', 21), (' income tax benefit', 19), (' tax (expense)/benefit', 19), ('prior year ', 17), ('deferred tax', 9)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 34), (' income tax expense', 29), ('prior year ', 27), ('current tax', 26), ('minimum alternate tax credit entitlement', 23), (' income tax benefit', 21), (' tax (expense)/benefit', 20), ('deferred tax', 19), (' income tax', 19), ('earlier year', 17), (' income tax benefit/(expense)', 17), ('amount transferred to retained earnings', 10)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), (' income tax benefit/(expense)', 40), ('amount transferred to retained earnings', 32), ('earlier year', 26), ('deferred tax', 20), ('current tax', 18), ('minimum alternate tax credit entitlement', 14), ('provision for taxation previous year', 10), ('prior year ', 10), (' tax (expense)/benefit', 7)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('provision for taxation previous year', 34), ('amount transferred to retained earnings', 31), ('deferred tax', 29), (' income tax', 29), ('current tax', 26), ('earlier year', 25), (' income tax benefit', 21), ('prior year ', 18), ('minimum alternate tax credit entitlement', 14)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' tax (expense)/benefit', 51), (' income tax benefit/(expense)', 44), (' income tax expense', 38), ('amount transferred to retained earnings', 33), ('deferred tax', 27), ('minimum alternate tax credit entitlement', 26), ('prior year ', 26), ('current tax', 25), ('provision for taxation previous year', 24), (' income tax benefit', 21), (' income tax', 20), ('earlier year', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 22), ('provision for taxation previous year', 22), (' income tax benefit', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('earlier year', 35), ('deferred tax', 32), (' income tax', 32), ('provision for taxation previous year', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit', 26), ('prior year ', 25), (' income tax benefit/(expense)', 22), ('minimum alternate tax credit entitlement', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), (' tax (expense)/benefit', 27), ('amount transferred to retained earnings', 21), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 18), ('prior year ', 18), ('current tax', 17), ('earlier year', 17), ('provision for taxation previous year', 10)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax', 30), (' income tax benefit', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('prior year ', 19), ('earlier year', 9)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax', 42), ('amount transferred to retained earnings', 38), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), ('prior year ', 24), ('provision for taxation previous year', 23), (' income tax benefit', 19), (' tax (expense)/benefit', 18), ('deferred tax', 17), (' income tax benefit/(expense)', 15), ('earlier year', 7)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('current tax', 31), (' income tax benefit', 31), ('minimum alternate tax credit entitlement', 30), ('earlier year', 30), ('amount transferred to retained earnings', 29), (' income tax expense', 26), ('deferred tax', 25), ('prior year ', 24), (' tax (expense)/benefit', 24), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 21), (' income tax', 17)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' income tax', 33), ('amount transferred to retained earnings', 28), (' income tax expense', 24), (' income tax benefit', 23), (' tax (expense)/benefit', 22), ('prior year ', 21), ('current tax', 20), ('minimum alternate tax credit entitlement', 20), ('earlier year', 19), (' income tax benefit/(expense)', 18), ('deferred tax', 11), ('provision for taxation previous year', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('amount transferred to retained earnings', 36), (' income tax expense', 36), ('provision for taxation previous year', 31), ('deferred tax', 26), ('minimum alternate tax credit entitlement', 26), (' income tax', 26), ('current tax', 25), ('earlier year', 24), ('prior year ', 21), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax benefit/(expense)', 15)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' income tax benefit', 67), ('provision for taxation previous year', 59), (' income tax expense', 58), (' income tax', 58), (' income tax benefit/(expense)', 57), (' tax (expense)/benefit', 50), ('deferred tax', 45), ('current tax', 42), ('minimum alternate tax credit entitlement', 41), ('prior year ', 25), ('amount transferred to retained earnings', 24), ('earlier year', 24)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('provision for taxation previous year', 22), ('amount transferred to retained earnings', 19), ('earlier year', 14)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' income tax expense', 65), (' income tax benefit/(expense)', 63), ('provision for taxation previous year', 52), (' income tax benefit', 48), (' tax (expense)/benefit', 47), ('minimum alternate tax credit entitlement', 43), (' income tax', 43), ('current tax', 36), ('deferred tax', 33), ('amount transferred to retained earnings', 30), ('earlier year', 27), ('prior year ', 23)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('prior year ', 31), ('current tax', 30), (' tax (expense)/benefit', 30), ('earlier year', 24), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('minimum alternate tax credit entitlement', 37), (' tax (expense)/benefit', 35), ('amount transferred to retained earnings', 33), ('provision for taxation previous year', 32), (' income tax benefit', 32), (' income tax benefit/(expense)', 32), ('earlier year', 31), ('prior year ', 29), ('deferred tax', 25), ('current tax', 24), (' income tax', 21), (' income tax expense', 18)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' income tax', 15), ('prior year ', 14), ('amount transferred to retained earnings', 13), ('provision for taxation previous year', 12), ('earlier year', 12), (' income tax expense', 10), (' income tax benefit', 10), (' tax (expense)/benefit', 9), (' income tax benefit/(expense)', 7), ('minimum alternate tax credit entitlement', 6), ('current tax', 0), ('deferred tax', 0)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('minimum alternate tax credit entitlement', 36), ('amount transferred to retained earnings', 32), ('prior year ', 31), (' income tax expense', 31), ('current tax', 30), (' income tax benefit', 30), (' tax (expense)/benefit', 30), (' income tax', 26), (' income tax benefit/(expense)', 26), ('provision for taxation previous year', 24), ('deferred tax', 21), ('earlier year', 15)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' income tax benefit/(expense)', 66), (' income tax expense', 64), ('minimum alternate tax credit entitlement', 52), (' income tax benefit', 51), (' tax (expense)/benefit', 50), (' income tax', 42), ('amount transferred to retained earnings', 36), ('deferred tax', 33), ('provision for taxation previous year', 32), ('current tax', 31), ('prior year ', 27), ('earlier year', 22)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' income tax expense', 59), (' income tax benefit/(expense)', 50), (' income tax benefit', 49), (' income tax', 43), ('current tax', 41), ('prior year ', 37), ('deferred tax', 32), ('earlier year', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 28), ('amount transferred to retained earnings', 18), ('minimum alternate tax credit entitlement', 7)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), (' income tax benefit', 46), ('provision for taxation previous year', 44), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('earlier year', 34), ('current tax', 30), ('deferred tax', 27), (' tax (expense)/benefit', 26), ('amount transferred to retained earnings', 16)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': -9664765.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['7'], 'line_item_value': [-9664765.0]}
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:44+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('current tax', 35), (' income tax benefit', 34), (' tax (expense)/benefit', 33), ('provision for taxation previous year', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 19), ('prior year ', 18), (' income tax expense', 14)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), ('prior year ', 25), ('provision for taxation previous year', 23), ('earlier year', 22), ('amount transferred to retained earnings', 18), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax', 13), (' income tax benefit/(expense)', 13)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' income tax', 44), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' income tax benefit/(expense)', 24), ('current tax', 20), ('amount transferred to retained earnings', 17), ('provision for taxation previous year', 16), ('minimum alternate tax credit entitlement', 15), ('deferred tax', 11), ('earlier year', 10), (' tax (expense)/benefit', 7)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' income tax', 31), ('provision for taxation previous year', 30), ('prior year ', 30), ('current tax', 29), ('amount transferred to retained earnings', 27), (' income tax expense', 24), (' income tax benefit', 24), (' income tax benefit/(expense)', 24), (' tax (expense)/benefit', 23), ('minimum alternate tax credit entitlement', 20), ('deferred tax', 15), ('earlier year', 14)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' income tax', 35), ('minimum alternate tax credit entitlement', 30), ('provision for taxation previous year', 28), (' income tax expense', 27), ('current tax', 24), ('amount transferred to retained earnings', 24), ('earlier year', 23), (' income tax benefit/(expense)', 21), (' income tax benefit', 19), (' tax (expense)/benefit', 19), ('prior year ', 17), ('deferred tax', 9)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 34), (' income tax expense', 29), ('prior year ', 27), ('current tax', 26), ('minimum alternate tax credit entitlement', 23), (' income tax benefit', 21), (' tax (expense)/benefit', 20), ('deferred tax', 19), (' income tax', 19), ('earlier year', 17), (' income tax benefit/(expense)', 17), ('amount transferred to retained earnings', 10)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), (' income tax benefit/(expense)', 40), ('amount transferred to retained earnings', 32), ('earlier year', 26), ('deferred tax', 20), ('current tax', 18), ('minimum alternate tax credit entitlement', 14), ('provision for taxation previous year', 10), ('prior year ', 10), (' tax (expense)/benefit', 7)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('provision for taxation previous year', 34), ('amount transferred to retained earnings', 31), ('deferred tax', 29), (' income tax', 29), ('current tax', 26), ('earlier year', 25), (' income tax benefit', 21), ('prior year ', 18), ('minimum alternate tax credit entitlement', 14)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' tax (expense)/benefit', 51), (' income tax benefit/(expense)', 44), (' income tax expense', 38), ('amount transferred to retained earnings', 33), ('deferred tax', 27), ('minimum alternate tax credit entitlement', 26), ('prior year ', 26), ('current tax', 25), ('provision for taxation previous year', 24), (' income tax benefit', 21), (' income tax', 20), ('earlier year', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 22), ('provision for taxation previous year', 22), (' income tax benefit', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('earlier year', 35), ('deferred tax', 32), (' income tax', 32), ('provision for taxation previous year', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit', 26), ('prior year ', 25), (' income tax benefit/(expense)', 22), ('minimum alternate tax credit entitlement', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), (' tax (expense)/benefit', 27), ('amount transferred to retained earnings', 21), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 18), ('prior year ', 18), ('current tax', 17), ('earlier year', 17), ('provision for taxation previous year', 10)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax', 30), (' income tax benefit', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('prior year ', 19), ('earlier year', 9)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax', 42), ('amount transferred to retained earnings', 38), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), ('prior year ', 24), ('provision for taxation previous year', 23), (' income tax benefit', 19), (' tax (expense)/benefit', 18), ('deferred tax', 17), (' income tax benefit/(expense)', 15), ('earlier year', 7)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('current tax', 31), (' income tax benefit', 31), ('minimum alternate tax credit entitlement', 30), ('earlier year', 30), ('amount transferred to retained earnings', 29), (' income tax expense', 26), ('deferred tax', 25), ('prior year ', 24), (' tax (expense)/benefit', 24), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 21), (' income tax', 17)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' income tax', 33), ('amount transferred to retained earnings', 28), (' income tax expense', 24), (' income tax benefit', 23), (' tax (expense)/benefit', 22), ('prior year ', 21), ('current tax', 20), ('minimum alternate tax credit entitlement', 20), ('earlier year', 19), (' income tax benefit/(expense)', 18), ('deferred tax', 11), ('provision for taxation previous year', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('amount transferred to retained earnings', 36), (' income tax expense', 36), ('provision for taxation previous year', 31), ('deferred tax', 26), ('minimum alternate tax credit entitlement', 26), (' income tax', 26), ('current tax', 25), ('earlier year', 24), ('prior year ', 21), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax benefit/(expense)', 15)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' income tax benefit', 67), ('provision for taxation previous year', 59), (' income tax expense', 58), (' income tax', 58), (' income tax benefit/(expense)', 57), (' tax (expense)/benefit', 50), ('deferred tax', 45), ('current tax', 42), ('minimum alternate tax credit entitlement', 41), ('prior year ', 25), ('amount transferred to retained earnings', 24), ('earlier year', 24)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('provision for taxation previous year', 22), ('amount transferred to retained earnings', 19), ('earlier year', 14)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' income tax expense', 65), (' income tax benefit/(expense)', 63), ('provision for taxation previous year', 52), (' income tax benefit', 48), (' tax (expense)/benefit', 47), ('minimum alternate tax credit entitlement', 43), (' income tax', 43), ('current tax', 36), ('deferred tax', 33), ('amount transferred to retained earnings', 30), ('earlier year', 27), ('prior year ', 23)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('prior year ', 31), ('current tax', 30), (' tax (expense)/benefit', 30), ('earlier year', 24), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('minimum alternate tax credit entitlement', 37), (' tax (expense)/benefit', 35), ('amount transferred to retained earnings', 33), ('provision for taxation previous year', 32), (' income tax benefit', 32), (' income tax benefit/(expense)', 32), ('earlier year', 31), ('prior year ', 29), ('deferred tax', 25), ('current tax', 24), (' income tax', 21), (' income tax expense', 18)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' income tax', 15), ('prior year ', 14), ('amount transferred to retained earnings', 13), ('provision for taxation previous year', 12), ('earlier year', 12), (' income tax expense', 10), (' income tax benefit', 10), (' tax (expense)/benefit', 9), (' income tax benefit/(expense)', 7), ('minimum alternate tax credit entitlement', 6), ('current tax', 0), ('deferred tax', 0)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('minimum alternate tax credit entitlement', 36), ('amount transferred to retained earnings', 32), ('prior year ', 31), (' income tax expense', 31), ('current tax', 30), (' income tax benefit', 30), (' tax (expense)/benefit', 30), (' income tax', 26), (' income tax benefit/(expense)', 26), ('provision for taxation previous year', 24), ('deferred tax', 21), ('earlier year', 15)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' income tax benefit/(expense)', 66), (' income tax expense', 64), ('minimum alternate tax credit entitlement', 52), (' income tax benefit', 51), (' tax (expense)/benefit', 50), (' income tax', 42), ('amount transferred to retained earnings', 36), ('deferred tax', 33), ('provision for taxation previous year', 32), ('current tax', 31), ('prior year ', 27), ('earlier year', 22)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' income tax expense', 59), (' income tax benefit/(expense)', 50), (' income tax benefit', 49), (' income tax', 43), ('current tax', 41), ('prior year ', 37), ('deferred tax', 32), ('earlier year', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 28), ('amount transferred to retained earnings', 18), ('minimum alternate tax credit entitlement', 7)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), (' income tax benefit', 46), ('provision for taxation previous year', 44), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('earlier year', 34), ('current tax', 30), ('deferred tax', 27), (' tax (expense)/benefit', 26), ('amount transferred to retained earnings', 16)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': -47777896.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['7'], 'line_item_value': [-47777896.0]}
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:44+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-04-20 14:19:44+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:44+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-04-20 14:19:44+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:44+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-04-20 14:19:44+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:44+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('share of', 40), ('share in', 40)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:44+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('share of', 40), ('share in', 40)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:44+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-04-20 14:19:44+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:44+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-04-20 14:19:44+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:44+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-04-20 14:19:44+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:44+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 25), ('exceptional', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('exceptional', 13), ('prior period', 10)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('prior period', 34), ('exceptional', 26)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('exceptional', 20), ('prior period', 15)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 17), ('exceptional', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('exceptional', 22), ('prior period', 18)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 14)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 17), ('exceptional', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('exceptional', 24), ('prior period', 9)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('exceptional', 19), ('prior period', 7)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('exceptional', 38), ('prior period', 30)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('prior period', 19), ('exceptional', 0)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('exceptional', 29), ('prior period', 20)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('prior period', 47), ('exceptional', 14)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('prior period', 36), ('exceptional', 31)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('exceptional', 21), ('prior period', 18)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('prior period', 24), ('exceptional', 18)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('prior period', 12), ('exceptional', 0)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('prior period', 29), ('exceptional', 17)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('exceptional', 25), ('prior period', 17)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('exceptional', 24), ('prior period', 20)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('prior period', 21), ('exceptional', 20)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:44+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 25), ('exceptional', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('exceptional', 13), ('prior period', 10)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('prior period', 34), ('exceptional', 26)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('exceptional', 20), ('prior period', 15)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 17), ('exceptional', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('exceptional', 22), ('prior period', 18)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 14)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 17), ('exceptional', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('exceptional', 24), ('prior period', 9)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('exceptional', 19), ('prior period', 7)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('exceptional', 38), ('prior period', 30)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('prior period', 19), ('exceptional', 0)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('exceptional', 29), ('prior period', 20)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('prior period', 47), ('exceptional', 14)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('prior period', 36), ('exceptional', 31)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('exceptional', 21), ('prior period', 18)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('prior period', 24), ('exceptional', 18)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('prior period', 12), ('exceptional', 0)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('prior period', 29), ('exceptional', 17)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('exceptional', 25), ('prior period', 17)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('exceptional', 24), ('prior period', 20)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('prior period', 21), ('exceptional', 20)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-20 14:19:44+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-04-20 14:19:44+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-20 14:19:44+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-04-20 14:19:44+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-20 14:19:44+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-04-20 14:19:44+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:44+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('NULL', 31)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('NULL', 19)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('NULL', 22)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('NULL', 24)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('NULL', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('NULL', 31)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('NULL', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('NULL', 5)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('NULL', 5)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('NULL', 25)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('NULL', 18)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('NULL', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('NULL', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-20 14:19:44+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-20 14:19:44+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('NULL', 31)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('NULL', 19)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('NULL', 22)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('NULL', 24)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('NULL', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('NULL', 31)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('NULL', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('NULL', 5)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('NULL', 5)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('NULL', 25)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('NULL', 18)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('NULL', 11)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('NULL', 12)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-04-20 14:19:44+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-04-23 13:58:14+0530 - sLogger - DEBUG - process_main_pages started
2023-04-23 13:58:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-04-23 13:58:14+0530 - sLogger - DEBUG - start_refactoring started
2023-04-23 13:58:14+0530 - sLogger - DEBUG - start_refactoring completed
2023-04-23 13:58:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-04-23 13:58:14+0530 - sLogger - DEBUG - start_refactoring started
2023-04-23 13:58:14+0530 - sLogger - DEBUG - start_refactoring completed
2023-04-23 13:58:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-04-23 13:58:14+0530 - sLogger - DEBUG - start_refactoring started
2023-04-23 13:58:14+0530 - sLogger - DEBUG - start_refactoring completed
2023-04-23 13:58:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-04-23 13:58:14+0530 - sLogger - DEBUG - set_section_details started
2023-04-23 13:58:14+0530 - sLogger - DEBUG - ASSETS | [('assets', 100), ('current assets', 56), ('noncurrent assets', 56), ('equity', 36), ('equity and liabilities', 27), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD current assets | score 90
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD current liabilities | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrent assets | score 90
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrent liabilities | score 31
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD non current assets | score 90
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD non current liabilities | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD equity and liabilities | score 28
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD equity | score 33
2023-04-23 13:58:14+0530 - sLogger - DEBUG - CURRENT ASSETS | [('current assets', 100), ('noncurrent assets', 77), ('assets', 56), ('current liabilities', 52), ('noncurrent liabilities', 44), ('equity', 32), ('equity liabilities', 23), ('equity and liabilities', 20), ('liabilities', 11)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD current assets | score 100
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD current liabilities | score 67
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrent assets | score 90
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrent liabilities | score 61
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD non current assets | score 95
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD non current liabilities | score 86
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equity and liabilities | score 33
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equity | score 31
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 47), ('assets', 31), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('current liabilities', 17), ('liabilities', 7), ('noncurrent liabilities', 6)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 29
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 36
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 33
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 46
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Trade and other receivables | [('equity and liabilities', 41), ('current assets', 34), ('current liabilities', 28), ('noncurrent assets', 23), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('liabilities', 14), ('noncurrent liabilities', 11)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 39
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 35
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 34
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Inventories | [('noncurrent assets', 36), ('current liabilities', 35), ('assets', 29), ('current assets', 27), ('liabilities', 27), ('equity', 27), ('equity and liabilities', 23), ('equity liabilities', 18), ('noncurrent liabilities', 17)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 32
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 40
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 40
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 45
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Current tax receivables | [('current liabilities', 62), ('current assets', 45), ('noncurrent assets', 26), ('equity liabilities', 26), ('equity', 25), ('noncurrent liabilities', 25), ('liabilities', 17), ('assets', 9), ('equity and liabilities', 6)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD current assets | score 86
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD current liabilities | score 67
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD noncurrent assets | score 50
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD noncurrent liabilities | score 62
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD non current assets | score 56
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD non current liabilities | score 62
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD equity and liabilities | score 38
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD equity | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Prepayments | [('current liabilities', 30), ('current assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity', 17), ('noncurrent assets', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current assets | score 40
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current liabilities | score 33
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent assets | score 40
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent liabilities | score 40
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current assets | score 40
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current liabilities | score 32
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity and liabilities | score 24
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Other investments | [('noncurrent assets', 40), ('current assets', 32), ('noncurrent liabilities', 31), ('assets', 24), ('equity liabilities', 24), ('current liabilities', 23), ('equity', 22), ('equity and liabilities', 21), ('liabilities', 11)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD current assets | score 37
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD current liabilities | score 31
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD noncurrent assets | score 39
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD noncurrent liabilities | score 29
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD non current assets | score 32
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD non current liabilities | score 28
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD equity and liabilities | score 26
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD equity | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - TOTAL CURRENT ASSETS | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 55), ('assets', 42), ('noncurrent liabilities', 36), ('equity liabilities', 31), ('equity and liabilities', 28), ('equity', 24), ('liabilities', 8)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD current assets | score 95
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD current liabilities | score 56
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrent assets | score 81
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrent liabilities | score 57
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD non current assets | score 84
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD non current liabilities | score 60
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD equity and liabilities | score 29
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD equity | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - NONCURRENT ASSETS | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('current liabilities', 30), ('equity', 21), ('equity and liabilities', 20), ('equity liabilities', 15), ('liabilities', 11)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD current assets | score 90
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD current liabilities | score 61
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrent assets | score 100
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrent liabilities | score 72
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD non current assets | score 97
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD non current liabilities | score 70
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD equity and liabilities | score 31
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD equity | score 31
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 49), ('equity', 40), ('current assets', 38), ('noncurrent assets', 32), ('equity liabilities', 32), ('current liabilities', 26), ('assets', 21), ('liabilities', 13), ('noncurrent liabilities', 11)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 36
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 24
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 33
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 40
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Rightofuse assets | [('noncurrent assets', 57), ('assets', 50), ('current assets', 50), ('current liabilities', 28), ('noncurrent liabilities', 21), ('equity', 19), ('equity and liabilities', 19), ('equity liabilities', 14), ('liabilities', 10)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 22
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 34
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 25
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 26
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equity', 33), ('equity liabilities', 32), ('current liabilities', 31), ('noncurrent liabilities', 23), ('liabilities', 22), ('equity and liabilities', 14)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current assets | score 58
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current liabilities | score 33
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent assets | score 53
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent liabilities | score 31
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current assets | score 54
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current liabilities | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity and liabilities | score 26
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Other noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 30), ('equity', 24), ('equity and liabilities', 22), ('equity liabilities', 19), ('liabilities', 8)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD current assets | score 90
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD current liabilities | score 52
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD non current assets | score 83
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD non current liabilities | score 61
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD equity | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - TOTAL NONCURRENT ASSETS | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 36), ('equity and liabilities', 28), ('equity liabilities', 25), ('equity', 24), ('liabilities', 8)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD current assets | score 90
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD current liabilities | score 52
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrent assets | score 95
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrent liabilities | score 62
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD non current assets | score 83
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD non current liabilities | score 61
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD equity and liabilities | score 27
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD equity | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - TOTAL ASSETS | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('equity liabilities', 33), ('current liabilities', 32), ('equity and liabilities', 29), ('equity', 24), ('liabilities', 12), ('noncurrent liabilities', 8)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD current assets | score 64
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD current liabilities | score 22
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrent assets | score 64
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrent liabilities | score 36
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD non current assets | score 86
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD non current liabilities | score 36
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD equity and liabilities | score 36
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD equity | score 40
2023-04-23 13:58:14+0530 - sLogger - DEBUG - LIABILITIES | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equity', 33), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD current assets | score 16
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD current liabilities | score 90
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrent assets | score 29
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrent liabilities | score 90
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD non current assets | score 29
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD non current liabilities | score 90
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD equity and liabilities | score 90
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD equity | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - CURRENT LIABILITIES | [('current liabilities', 100), ('equity liabilities', 67), ('liabilities', 60), ('equity and liabilities', 58), ('current assets', 52), ('noncurrent liabilities', 43), ('noncurrent assets', 30), ('equity', 30), ('assets', 11)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD current assets | score 64
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD current liabilities | score 100
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrent assets | score 56
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 93
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD non current assets | score 54
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD non current liabilities | score 95
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equity and liabilities | score 69
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equity | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current assets', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('noncurrent assets', 23), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 39
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 37
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 28
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 39
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 28
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 34
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Employee benefits | [('equity liabilities', 36), ('current liabilities', 34), ('current assets', 29), ('noncurrent assets', 29), ('equity', 29), ('equity and liabilities', 25), ('assets', 20), ('noncurrent liabilities', 14), ('liabilities', 10)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 28
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 34
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 25
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Current tax liabilities | [('current liabilities', 88), ('equity liabilities', 58), ('equity and liabilities', 51), ('liabilities', 50), ('current assets', 45), ('noncurrent liabilities', 44), ('noncurrent assets', 26), ('equity', 25), ('assets', 17)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current assets | score 86
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current liabilities | score 95
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent assets | score 50
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent liabilities | score 84
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current assets | score 56
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current liabilities | score 86
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity and liabilities | score 71
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 22
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 26
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 36
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 22
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrent assets', 32), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Lease liability | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current assets | score 34
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current liabilities | score 59
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent assets | score 31
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent liabilities | score 54
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current assets | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current liabilities | score 60
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity and liabilities | score 59
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity | score 45
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Other current liabilities | [('current liabilities', 82), ('equity liabilities', 55), ('noncurrent liabilities', 53), ('equity and liabilities', 49), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD current assets | score 86
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD current liabilities | score 95
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD noncurrent assets | score 52
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD non current assets | score 57
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD non current liabilities | score 88
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD equity and liabilities | score 64
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD equity | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - TOTAL CURRENT LIABILITIES | [('current liabilities', 82), ('equity liabilities', 55), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD current assets | score 86
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD current liabilities | score 95
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrent assets | score 52
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 85
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD non current assets | score 57
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD non current liabilities | score 88
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD equity and liabilities | score 64
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD equity | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - NONCURRENT LIABILITIES | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('assets', 11), ('equity', 10)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD current assets | score 61
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD current liabilities | score 93
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrent assets | score 70
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 100
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD non current assets | score 65
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD non current liabilities | score 98
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD equity and liabilities | score 65
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD equity | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current assets', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('noncurrent assets', 23), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 39
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 37
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 28
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 39
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 28
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 34
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Employee benefits | [('equity liabilities', 36), ('current liabilities', 34), ('current assets', 29), ('noncurrent assets', 29), ('equity', 29), ('equity and liabilities', 25), ('assets', 20), ('noncurrent liabilities', 14), ('liabilities', 10)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 28
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 34
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 25
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 22
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 26
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 36
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 22
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-04-23 13:58:14+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrent assets', 32), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0)]
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-04-23 13:58:14+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 30
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-04-23 13:58:15+0530 - sLogger - DEBUG - Lease liability | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current assets | score 34
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current liabilities | score 59
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent assets | score 31
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent liabilities | score 54
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current assets | score 30
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current liabilities | score 60
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity and liabilities | score 59
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity | score 45
2023-04-23 13:58:15+0530 - sLogger - DEBUG - Deferred tax liability | [('liabilities', 55), ('equity and liabilities', 55), ('equity liabilities', 55), ('current liabilities', 53), ('noncurrent liabilities', 47), ('equity', 27), ('assets', 19), ('current assets', 14), ('noncurrent assets', 14)]
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD current assets | score 39
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD current liabilities | score 63
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD noncurrent assets | score 36
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD noncurrent liabilities | score 59
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD non current assets | score 35
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD non current liabilities | score 58
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD equity and liabilities | score 55
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD equity | score 45
2023-04-23 13:58:15+0530 - sLogger - DEBUG - TOTAL NONCURRENT LIABILITIES | [('noncurrent liabilities', 82), ('noncurrent assets', 55), ('liabilities', 46), ('current assets', 42), ('equity liabilities', 36), ('current liabilities', 35), ('equity and liabilities', 32), ('assets', 16), ('equity', 15)]
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD current assets | score 61
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD current liabilities | score 81
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrent assets | score 86
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 95
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD non current assets | score 60
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD non current liabilities | score 86
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD equity and liabilities | score 64
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD equity | score 30
2023-04-23 13:58:15+0530 - sLogger - DEBUG - TOTAL LIABILITIES | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 22)]
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD current assets | score 30
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD current liabilities | score 75
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrent assets | score 33
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrent liabilities | score 75
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD non current assets | score 32
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD non current liabilities | score 75
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD equity and liabilities | score 75
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD equity | score 30
2023-04-23 13:58:15+0530 - sLogger - DEBUG - NET ASSETS | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('equity and liabilities', 31), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('liabilities', 13)]
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD current assets | score 75
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD current liabilities | score 41
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrent assets | score 86
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrent liabilities | score 44
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD non current assets | score 86
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD non current liabilities | score 42
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD equity and liabilities | score 38
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD equity | score 30
2023-04-23 13:58:15+0530 - sLogger - DEBUG - EQUITY | [('equity', 100), ('equity liabilities', 63), ('equity and liabilities', 52), ('assets', 36), ('liabilities', 33), ('current liabilities', 30), ('current assets', 21), ('noncurrent assets', 21), ('noncurrent liabilities', 20)]
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD current assets | score 31
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD current liabilities | score 30
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrent assets | score 31
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrent liabilities | score 30
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD non current assets | score 30
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD non current liabilities | score 30
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD equity and liabilities | score 90
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD equity | score 100
2023-04-23 13:58:15+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('current assets', 35), ('noncurrent assets', 35), ('current liabilities', 33), ('equity and liabilities', 30), ('equity liabilities', 26), ('liabilities', 25), ('noncurrent liabilities', 25)]
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 29
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 34
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 26
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 30
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 25
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 27
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-04-23 13:58:15+0530 - sLogger - DEBUG - Reserves | [('assets', 36), ('current assets', 32), ('noncurrent assets', 32), ('current liabilities', 20), ('noncurrent liabilities', 20), ('equity', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current assets | score 45
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current liabilities | score 30
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent assets | score 45
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent liabilities | score 28
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current assets | score 45
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current liabilities | score 26
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity and liabilities | score 32
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity | score 14
2023-04-23 13:58:15+0530 - sLogger - DEBUG - Retained earnings | [('assets', 38), ('equity and liabilities', 36), ('current assets', 33), ('noncurrent assets', 33), ('current liabilities', 32), ('equity', 24), ('equity liabilities', 17), ('noncurrent liabilities', 16), ('liabilities', 12)]
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 33
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 31
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 34
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 30
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 36
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-04-23 13:58:15+0530 - sLogger - DEBUG - TOTAL EQUITY | [('equity', 67), ('equity liabilities', 64), ('equity and liabilities', 55), ('current liabilities', 31), ('assets', 12), ('liabilities', 11), ('current assets', 8), ('noncurrent assets', 8), ('noncurrent liabilities', 8)]
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD current assets | score 15
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD current liabilities | score 38
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD noncurrent assets | score 21
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD noncurrent liabilities | score 38
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD non current assets | score 32
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD non current liabilities | score 38
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD equity and liabilities | score 86
2023-04-23 13:58:15+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD equity | score 90
2023-04-23 13:58:15+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-04-23 13:58:15+0530 - sLogger - DEBUG - set_section_details started
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from operating activities | operating cash flow before working capital changes
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | adiustments for movements in working capital
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid | working capital adjustments
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- GST refund | adjustments for increase decrease in operating assets
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income taxes paid | changes in working capital
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to related party supplier | changes in operating assets and liabilities
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash from operating activities | adjustments for increase decrease in operating liabilities
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows used in investing activities | operating cash flow before working capital changes
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments for purchase of property, plant & equipment | operating profit before working capital changes
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from disposal of property, plant & equipment | operating profit before working capital changes
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from maturities of deposits with fixed maturity dates | adiustments for movements in working capital
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments for deposits with fixed maturity dates | adiustments for movements in working capital
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in investing activities | operating cash flow before working capital changes
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows used in financing activities | operating cash flow before working capital changes
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of borrowings | operating profit before working capital changes
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from borrowings | operating profit before working capital changes
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of lease liability | changes in assets liabilities
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of dividends | adiustments for movements in working capital
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in financing activities | operating cash flow before working capital changes
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the year | changes in operating assets and liabilities
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Effects of exchange rate changes on the balance of | operating profit before working capital changes
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- cash held in foreign currencies | adjustments for increase decrease in operating assets
2023-04-23 13:58:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the end of the year | changes in operating assets and liabilities
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 13:58:17+0530 - sLogger - ERROR - error occured: 'year'
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 13:58:17+0530 - sLogger - ERROR - error occured: 'value'
2023-04-23 13:58:17+0530 - sLogger - DEBUG - process_main_pages completed
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-04-23 13:58:17+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-04-23 13:58:17+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-04-23 13:58:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:17+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('other bank balances', 18), ('cash and bank balances', 16), ('bank balances other than above', 12)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 25), ('cash and cash equivalents', 24), (' cash and cash equivalents', 24), ('bank balances other than above', 20), ('other bank balances', 20), ('bank balances other than cash and cash equivalents', 18), ('cash and bank balances', 18)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and short term deposits', 54), ('cash and bank balances', 39), ('bank balances other than above', 17), ('other bank balances', 11)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('bank balances other than above', 45), ('cash and cash equivalents', 42), (' cash and cash equivalents', 42), ('other bank balances', 41), ('bank balances other than cash and cash equivalents', 36), ('cash and short term deposits', 33), ('cash and bank balances', 24)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('cash and bank balances', 14), ('bank balances other than cash and cash equivalents', 11), ('bank balances other than above', 11)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('cash and cash equivalents', 36), (' cash and cash equivalents', 36), ('bank balances other than cash and cash equivalents', 29), ('cash and short term deposits', 27), ('bank balances other than above', 13), ('other bank balances', 6), ('cash and bank balances', 5)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash and short term deposits', 12), ('other bank balances', 9), ('cash and bank balances', 8), ('cash and cash equivalents', 7), (' cash and cash equivalents', 7), ('bank balances other than above', 6), ('bank balances other than cash and cash equivalents', 4)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other bank balances', 48), ('bank balances other than above', 36), ('cash and short term deposits', 36), ('bank balances other than cash and cash equivalents', 29), ('cash and cash equivalents', 24), (' cash and cash equivalents', 24), ('cash and bank balances', 19)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 38371500.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['19'], 'line_item_value': [38371500.0]}
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:17+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('other bank balances', 18), ('cash and bank balances', 16), ('bank balances other than above', 12)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 25), ('cash and cash equivalents', 24), (' cash and cash equivalents', 24), ('bank balances other than above', 20), ('other bank balances', 20), ('bank balances other than cash and cash equivalents', 18), ('cash and bank balances', 18)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and short term deposits', 54), ('cash and bank balances', 39), ('bank balances other than above', 17), ('other bank balances', 11)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('bank balances other than above', 45), ('cash and cash equivalents', 42), (' cash and cash equivalents', 42), ('other bank balances', 41), ('bank balances other than cash and cash equivalents', 36), ('cash and short term deposits', 33), ('cash and bank balances', 24)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('cash and bank balances', 14), ('bank balances other than cash and cash equivalents', 11), ('bank balances other than above', 11)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('cash and cash equivalents', 36), (' cash and cash equivalents', 36), ('bank balances other than cash and cash equivalents', 29), ('cash and short term deposits', 27), ('bank balances other than above', 13), ('other bank balances', 6), ('cash and bank balances', 5)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash and short term deposits', 12), ('other bank balances', 9), ('cash and bank balances', 8), ('cash and cash equivalents', 7), (' cash and cash equivalents', 7), ('bank balances other than above', 6), ('bank balances other than cash and cash equivalents', 4)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other bank balances', 48), ('bank balances other than above', 36), ('cash and short term deposits', 36), ('bank balances other than cash and cash equivalents', 29), ('cash and cash equivalents', 24), (' cash and cash equivalents', 24), ('cash and bank balances', 19)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 47888561.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['19'], 'line_item_value': [47888561.0]}
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:17+0530 - sLogger - DEBUG - keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows = cash and cash equivalents , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 48), (' short term deposits', 31)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows = cash and cash equivalents , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 48), (' short term deposits', 31)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [47888561.0, 38371500.0], 'label': [' Cash and cash equivalents', ' Cash and cash equivalents'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-04-23 13:58:17+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-04-23 13:58:17+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-04-23 13:58:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:17+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 31)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 36)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('inventories', 33)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 22)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('inventories', 67)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 5244865.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [5244865.0]}
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:17+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 31)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 36)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('inventories', 33)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 22)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('inventories', 67)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 6229038.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [6229038.0]}
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:17+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows = coal inventory at cost , res_fuzz_match = [(' inventories', 100), (' provision for inventory obsolescence', 74), (' finished goods at cost', 52), (' work in progress', 45), (' stores and other consumables at cost', 42), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' finished goods', 36), (' finished goods', 36), (' spare parts', 33), (' goods in transit', 29), (' cranes - in transit', 20)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows = operating supplies at cost , res_fuzz_match = [(' stores and other consumables at cost', 62), (' finished goods at cost', 52), (' provision for inventory obsolescence', 38), (' goods in transit', 33), (' work in progress', 31), ('raw materials', 30), (' raw materials', 30), (' spare parts', 30), (' inventories', 27), (' finished goods', 24), (' finished goods', 24), (' cranes - in transit', 24), (' cranes', 22)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows = spare parts at cost , res_fuzz_match = [(' spare parts', 100), (' finished goods at cost', 52), (' cranes - in transit', 48), (' work in progress', 46), (' stores and other consumables at cost', 40), ('raw materials', 35), (' raw materials', 35), (' inventories', 33), (' provision for inventory obsolescence', 27), (' goods in transit', 25), (' cranes', 22), (' finished goods', 18), (' finished goods', 18)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows = stock on hand - stores , res_fuzz_match = [(' provision for inventory obsolescence', 44), (' inventories', 44), (' goods in transit', 40), (' cranes', 40), (' spare parts', 40), (' finished goods at cost', 38), (' work in progress', 35), ('raw materials', 33), (' raw materials', 33), (' stores and other consumables at cost', 31), (' cranes - in transit', 31), (' finished goods', 30), (' finished goods', 30)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows = coal inventory at cost , res_fuzz_match = [(' inventories', 100), (' provision for inventory obsolescence', 74), (' finished goods at cost', 52), (' work in progress', 45), (' stores and other consumables at cost', 42), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' finished goods', 36), (' finished goods', 36), (' spare parts', 33), (' goods in transit', 29), (' cranes - in transit', 20)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows = operating supplies at cost , res_fuzz_match = [(' stores and other consumables at cost', 62), (' finished goods at cost', 52), (' provision for inventory obsolescence', 38), (' goods in transit', 33), (' work in progress', 31), ('raw materials', 30), (' raw materials', 30), (' spare parts', 30), (' inventories', 27), (' finished goods', 24), (' finished goods', 24), (' cranes - in transit', 24), (' cranes', 22)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows = spare parts at cost , res_fuzz_match = [(' spare parts', 100), (' finished goods at cost', 52), (' cranes - in transit', 48), (' work in progress', 46), (' stores and other consumables at cost', 40), ('raw materials', 35), (' raw materials', 35), (' inventories', 33), (' provision for inventory obsolescence', 27), (' goods in transit', 25), (' cranes', 22), (' finished goods', 18), (' finished goods', 18)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows = stock on hand - stores , res_fuzz_match = [(' provision for inventory obsolescence', 44), (' inventories', 44), (' goods in transit', 40), (' cranes', 40), (' spare parts', 40), (' finished goods at cost', 38), (' work in progress', 35), ('raw materials', 33), (' raw materials', 33), (' stores and other consumables at cost', 31), (' cranes - in transit', 31), (' finished goods', 30), (' finished goods', 30)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 5, 7], 'score': [100, 100, 100, 100], 'value': [3528471.0, 1346758.0, 3174270.0, 444171.0], 'label': [' Coal inventory at cost', ' Spare parts at cost', ' Coal inventory at cost', ' Spare parts at cost'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-04-23 13:58:17+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-04-23 13:58:17+0530 - sLogger - DEBUG - list_target_keywords = ['prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-04-23 13:58:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:17+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other financial assets', 30), ('other current financial assets', 29), ('other current assets', 25), ('other assets', 25), ('prepayments', 15)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current assets', 39), ('other financial assets', 39), ('other current financial assets', 33), ('prepayments', 21)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 29), ('other current financial assets', 22), ('prepayments', 13)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('other current assets', 49), ('other current financial assets', 44), ('other assets', 28), ('other financial assets', 27), ('prepayments', 25)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('prepayments', 100), ('other current financial assets', 18), ('other current assets', 16), ('other assets', 12), ('other financial assets', 8)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other assets', 70), ('other current assets', 52), ('other financial assets', 52), ('other current financial assets', 41), ('prepayments', 11)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 6], 'score': 100, 'value': 243822.0, 'line_item_label': ['CURRENT ASSETS', 'Prepayments'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 243822.0]}
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:17+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other financial assets', 30), ('other current financial assets', 29), ('other current assets', 25), ('other assets', 25), ('prepayments', 15)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current assets', 39), ('other financial assets', 39), ('other current financial assets', 33), ('prepayments', 21)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 29), ('other current financial assets', 22), ('prepayments', 13)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('other current assets', 49), ('other current financial assets', 44), ('other assets', 28), ('other financial assets', 27), ('prepayments', 25)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('prepayments', 100), ('other current financial assets', 18), ('other current assets', 16), ('other assets', 12), ('other financial assets', 8)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other assets', 70), ('other current assets', 52), ('other financial assets', 52), ('other current financial assets', 41), ('prepayments', 11)]
2023-04-23 13:58:17+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 6], 'score': 100, 'value': 629661.0, 'line_item_label': ['CURRENT ASSETS', 'Prepayments'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 629661.0]}
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-04-23 13:58:17+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-04-23 13:58:17+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-04-23 13:58:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:17+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' deferred operating expenditure', 15), (' trade and other receivables', 15), (' income tax receivable from related parties', 11)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' deferred operating expenditure', 29), (' income tax receivable from related parties', 17)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 42), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), (' other financial assets', 30), ('other current assets', 25), ('other assets', 25), (' other current assets', 25), (' deferred operating expenditure', 19)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets', 42), (' income tax receivable from related parties', 40), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' deferred operating expenditure', 37), (' financial assets', 23), (' biological assets', 18)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' biological assets', 29), (' other financial assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24), (' deferred operating expenditure', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [(' trade and other receivables', 60), (' income tax receivable from related parties', 55), ('other current assets', 49), (' other current assets', 49), (' financial assets', 32), ('other assets', 28), (' biological assets', 27), (' other financial assets', 27), (' deferred operating expenditure', 26)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' income tax receivable from related parties', 15), (' deferred operating expenditure', 15), ('other assets', 12), (' financial assets', 11), (' biological assets', 11), (' other financial assets', 8)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other assets', 70), ('other current assets', 52), (' other current assets', 52), (' other financial assets', 52), (' trade and other receivables', 41), (' biological assets', 33), (' income tax receivable from related parties', 27), (' financial assets', 24), (' deferred operating expenditure', 18)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 13983506.0, 'line_item_label': ['CURRENT ASSETS', 'Trade and other receivables'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 13983506.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' deferred operating expenditure', 15), (' trade and other receivables', 15), (' income tax receivable from related parties', 11)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' deferred operating expenditure', 29), (' income tax receivable from related parties', 17)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 42), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), (' other financial assets', 30), ('other current assets', 25), ('other assets', 25), (' other current assets', 25), (' deferred operating expenditure', 19)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets', 42), (' income tax receivable from related parties', 40), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' deferred operating expenditure', 37), (' financial assets', 23), (' biological assets', 18)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' biological assets', 29), (' other financial assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24), (' deferred operating expenditure', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [(' trade and other receivables', 60), (' income tax receivable from related parties', 55), ('other current assets', 49), (' other current assets', 49), (' financial assets', 32), ('other assets', 28), (' biological assets', 27), (' other financial assets', 27), (' deferred operating expenditure', 26)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' income tax receivable from related parties', 15), (' deferred operating expenditure', 15), ('other assets', 12), (' financial assets', 11), (' biological assets', 11), (' other financial assets', 8)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other assets', 70), ('other current assets', 52), (' other current assets', 52), (' other financial assets', 52), (' trade and other receivables', 41), (' biological assets', 33), (' income tax receivable from related parties', 27), (' financial assets', 24), (' deferred operating expenditure', 18)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 23265701.0, 'line_item_label': ['CURRENT ASSETS', 'Trade and other receivables'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 23265701.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 70), (' related party receivable', 70), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 50), (' foreign exchange forward contracts', 47), (' forward exchange contracts', 47), (' accrued interest', 44), (' other', 40), (' accrued rebates', 38), ('other assets', 36), (' bank guarantee', 35), (' share of jv prepayments', 35), (' current investments', 33), ('current', 29), (' deposits', 29), (' condensate', 29), (' related party disclosures', 25), (' rental bond', 24), (' lng', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [(' other', 100), (' other receivables - related party', 100), (' other deposits receivable - related party', 75), (' amount receivable from controlling entity', 75), (' interest receivable', 75), (' income tax receivable from related parties', 67), (' long service leave receivable', 67), (' related party receivable', 67), ('other assets', 64), (' other debtors and prepayments', 58), ('current', 43), ('foreign exchange derivatives at fair value', 42), (' electricity derivatives at fair value', 42), (' accrued interest', 42), (' forward exchange contracts', 40), (' condensate', 36), (' accrued rebates', 36), (' share of jv prepayments', 35), (' derivative contracts - fair value', 33), (' current investments', 33), (' foreign exchange forward contracts', 33), (' deposits', 29), (' bank guarantee', 27), (' related party disclosures', 25), (' rental bond', 24), (' lng', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 70), (' related party receivable', 70), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 50), (' foreign exchange forward contracts', 47), (' forward exchange contracts', 47), (' accrued interest', 44), (' other', 40), (' accrued rebates', 38), ('other assets', 36), (' bank guarantee', 35), (' share of jv prepayments', 35), (' current investments', 33), ('current', 29), (' deposits', 29), (' condensate', 29), (' related party disclosures', 25), (' rental bond', 24), (' lng', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [(' other', 100), (' other receivables - related party', 100), (' other deposits receivable - related party', 75), (' amount receivable from controlling entity', 75), (' interest receivable', 75), (' income tax receivable from related parties', 67), (' long service leave receivable', 67), (' related party receivable', 67), ('other assets', 64), (' other debtors and prepayments', 58), ('current', 43), ('foreign exchange derivatives at fair value', 42), (' electricity derivatives at fair value', 42), (' accrued interest', 42), (' forward exchange contracts', 40), (' condensate', 36), (' accrued rebates', 36), (' share of jv prepayments', 35), (' derivative contracts - fair value', 33), (' current investments', 33), (' foreign exchange forward contracts', 33), (' deposits', 29), (' bank guarantee', 27), (' related party disclosures', 25), (' rental bond', 24), (' lng', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4], 'score': [100, 100], 'value': [2461924.0, 1525145.0], 'label': [' Other receivables', ' Other receivables'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('current assets', 45)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('current assets', 21)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('current assets', 32)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('current assets', 45)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('current assets', 21)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('current assets', 32)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 77944930.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [77944930.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 83893305.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [83893305.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 32)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 33), ('cost', 0), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [40, 41, 42, 43, 44, 45, 46, 47, 48, 49], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [15625586.0, 1626478.0, 0.0, -91683.0, 17160381.0, 0.0, 0.0, 0.0, 0.0, 17160381.0], 'label': ['Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 77944930.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [77944930.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 83893305.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [83893305.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('right of use', 47), ('right to use', 47), ('capital work-in-progress', 45), ('capital workinprogress', 45), ('capital work in progress', 38), ('work in progress', 38), ('tangible', 25), ('rightofuse', 24), ('righttouse', 24)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('work in progress', 31), ('capital work in progress', 26), ('capital work-in-progress', 25), ('capital workinprogress', 25), ('rightofuse', 22), ('righttouse', 22)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 37), ('capital workinprogress', 37), ('capital work in progress', 36), ('work in progress', 35), ('tangible', 29)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible', 57), ('capital work-in-progress', 45), ('capital workinprogress', 45), ('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('capital work in progress', 27), ('work in progress', 27)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('capital work-in-progress', 32), ('capital workinprogress', 32), ('tangible', 29), ('capital work in progress', 28)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': 9562117.0, 'line_item_label': ['Right-of-use assets'], 'note_numbers': ['21'], 'line_item_value': [9562117.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('right of use', 47), ('right to use', 47), ('capital work-in-progress', 45), ('capital workinprogress', 45), ('capital work in progress', 38), ('work in progress', 38), ('tangible', 25), ('rightofuse', 24), ('righttouse', 24)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('work in progress', 31), ('capital work in progress', 26), ('capital work-in-progress', 25), ('capital workinprogress', 25), ('rightofuse', 22), ('righttouse', 22)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 37), ('capital workinprogress', 37), ('capital work in progress', 36), ('work in progress', 35), ('tangible', 29)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible', 57), ('capital work-in-progress', 45), ('capital workinprogress', 45), ('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('capital work in progress', 27), ('work in progress', 27)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('capital work-in-progress', 32), ('capital workinprogress', 32), ('tangible', 29), ('capital work in progress', 28)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': 7678852.0, 'line_item_label': ['Right-of-use assets'], 'note_numbers': ['21'], 'line_item_value': [7678852.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('tangible assets', 44)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 80, 'value': 48644405.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['12'], 'line_item_value': [48644405.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('tangible assets', 44)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 80, 'value': 44593458.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['12'], 'line_item_value': [44593458.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill', 29), ('goodwill on consolidatio', 15)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill', 29), ('goodwill on consolidatio', 29)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill', 29), ('goodwill on consolidatio', 15)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill', 29), ('goodwill on consolidatio', 29)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 44), ('intangible assets under development', 18)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible', 33), ('intangible under development', 17)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('intangible assets under development', 42), ('intangible', 33), ('intangible under development', 26)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 48644405.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['12'], 'line_item_value': [48644405.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 44), ('intangible assets under development', 18)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible', 33), ('intangible under development', 17)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('intangible assets under development', 42), ('intangible', 33), ('intangible under development', 26)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 44593458.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['12'], 'line_item_value': [44593458.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 10)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('donations', 25)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 10)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('donations', 25)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), (' investment in associate', 40), ('investment', 36), (' investment in joint venture', 33), ('derivative financial instruments', 31)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 44), (' investment in joint venture', 39), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33), ('derivative financial instruments', 32)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), (' investments accounted for using the equity method', 40), ('joint ventures and associates', 37), ('investment', 36), ('derivative financial instruments', 27), (' investment in joint venture', 12)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investments accounted for using the equity method', 50), (' investment in joint venture', 45)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('joint ventures and associates', 53), (' investments accounted for using the equity method', 43), (' investment in associate', 40), ('derivative financial instruments', 37), ('investment', 36), (' investment in joint venture', 30)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), (' investment in associate', 40), ('investment', 36), (' investment in joint venture', 33), ('derivative financial instruments', 31)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 44), (' investment in joint venture', 39), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33), ('derivative financial instruments', 32)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), (' investments accounted for using the equity method', 40), ('joint ventures and associates', 37), ('investment', 36), ('derivative financial instruments', 27), (' investment in joint venture', 12)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investments accounted for using the equity method', 50), (' investment in joint venture', 45)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('joint ventures and associates', 53), (' investments accounted for using the equity method', 43), (' investment in associate', 40), ('derivative financial instruments', 37), ('investment', 36), (' investment in joint venture', 30)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 23)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 47), ('deferred tax', 17), ('deferred charges', 15)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('deferred tax assets', 47), ('deferred charges', 27), ('deferred tax', 21)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 23)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 47), ('deferred tax', 17), ('deferred charges', 15)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('deferred tax assets', 47), ('deferred charges', 27), ('deferred tax', 21)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 30), (' loan receivables', 25), (' leases', 24)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other assets', 40), (' other assets', 40), (' exploration and evaluation expenditure', 39), (' loan receivables', 34), (' other non-current assets', 33), (' other non-current assets', 33), (' leased assets', 29), (' financial assets', 27), ('non-current', 19), (' leases', 14)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' leases', 21), ('non-current', 18), (' exploration and evaluation expenditure', 14)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' leases', 25), ('non-current', 21), (' loan receivables', 17), (' exploration and evaluation expenditure', 10)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [(' other non-current assets', 100), (' other non-current assets', 100), ('other assets', 73), (' other assets', 73), (' financial assets', 56), ('non-current', 54), (' leased assets', 48), (' exploration and evaluation expenditure', 35), (' loan receivables', 27), (' leases', 17)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 12, 13], 'score': 100, 'value': 48854520.0, 'line_item_label': ['NON-CURRENT ASSETS', 'Intangible assets', 'Other non-current assets'], 'note_numbers': [nan, '12', nan], 'line_item_value': [0.0, 48644405.0, 210115.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 30), (' loan receivables', 25), (' leases', 24)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other assets', 40), (' other assets', 40), (' exploration and evaluation expenditure', 39), (' loan receivables', 34), (' other non-current assets', 33), (' other non-current assets', 33), (' leased assets', 29), (' financial assets', 27), ('non-current', 19), (' leases', 14)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' leases', 21), ('non-current', 18), (' exploration and evaluation expenditure', 14)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' leases', 25), ('non-current', 21), (' loan receivables', 17), (' exploration and evaluation expenditure', 10)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [(' other non-current assets', 100), (' other non-current assets', 100), ('other assets', 73), (' other assets', 73), (' financial assets', 56), ('non-current', 54), (' leased assets', 48), (' exploration and evaluation expenditure', 35), (' loan receivables', 27), (' leases', 17)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 12, 13], 'score': 100, 'value': 44861945.0, 'line_item_label': ['NON-CURRENT ASSETS', 'Intangible assets', 'Other non-current assets'], 'note_numbers': [nan, '12', nan], 'line_item_value': [0.0, 44593458.0, 268487.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('non-current assets total', 53)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('non-current assets total', 58)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('non-current assets total', 84)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 13], 'score': 84, 'value': 210115.0, 'line_item_label': ['NON-CURRENT ASSETS', 'Other non-current assets'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 210115.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('non-current assets total', 53)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('non-current assets total', 58)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('non-current assets total', 84)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 13], 'score': 84, 'value': 268487.0, 'line_item_label': ['NON-CURRENT ASSETS', 'Other non-current assets'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 268487.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), ('borrowings', 20), ('shortterm borrowings', 20), (' bank overdraft', 7)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' bank overdraft', 44), (' loans and borrowings', 38), ('lease liabilities', 30), ('shortterm borrowings', 21), (' leases', 15), ('borrowings', 14), ('short term debt', 11), ('short-term debt', 11), ('shortterm debt', 11)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), (' leases', 21), ('borrowings', 19), ('shortterm borrowings', 19), ('lease liabilities', 15)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17), (' bank overdraft', 12)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), ('lease liabilities', 12), (' leases', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), ('short-term debt', 16), ('shortterm debt', 16), ('short term debt', 15), ('borrowings', 12), (' bank overdraft', 8), ('shortterm borrowings', 7)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('lease liabilities', 52), ('short-term debt', 35), ('shortterm debt', 35), ('short term debt', 34), ('shortterm borrowings', 33), (' loans and borrowings', 29), (' bank overdraft', 29), ('borrowings', 23), (' leases', 17)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [22, 23], 'score': 100, 'value': 17226057.0, 'line_item_label': ['Borrowings', 'Lease liability'], 'note_numbers': ['14', '22'], 'line_item_value': [14506615.0, 2719442.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), ('borrowings', 20), ('shortterm borrowings', 20), (' bank overdraft', 7)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' bank overdraft', 44), (' loans and borrowings', 38), ('lease liabilities', 30), ('shortterm borrowings', 21), (' leases', 15), ('borrowings', 14), ('short term debt', 11), ('short-term debt', 11), ('shortterm debt', 11)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), (' leases', 21), ('borrowings', 19), ('shortterm borrowings', 19), ('lease liabilities', 15)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17), (' bank overdraft', 12)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), ('lease liabilities', 12), (' leases', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), ('short-term debt', 16), ('shortterm debt', 16), ('short term debt', 15), ('borrowings', 12), (' bank overdraft', 8), ('shortterm borrowings', 7)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('lease liabilities', 52), ('short-term debt', 35), ('shortterm debt', 35), ('short term debt', 34), ('shortterm borrowings', 33), (' loans and borrowings', 29), (' bank overdraft', 29), ('borrowings', 23), (' leases', 17)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [22, 23], 'score': 100, 'value': 17152202.0, 'line_item_label': ['Borrowings', 'Lease liability'], 'note_numbers': ['14', '22'], 'line_item_value': [15536531.0, 1615671.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost mizuho bank term loan, secured , res_fuzz_match = [(' not later than 1 year', 58), (' bank overdraft', 57), ('bank borrowings', 55), (' secured long-term bank loans', 54), (' leases', 50), ('current', 43), (' current', 43), (' lease liabilities - current', 42), (' utilised – bank borrowings', 40), (' loans from related party', 39), (' lease liabilities', 36), (' balance at the end of period', 34)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost smbc term loan, secured , res_fuzz_match = [(' not later than 1 year', 53), (' leases', 50), (' secured long-term bank loans', 50), ('current', 43), (' current', 43), (' bank overdraft', 43), ('bank borrowings', 42), (' lease liabilities - current', 42), (' utilised – bank borrowings', 40), (' loans from related party', 39), (' lease liabilities', 36), (' balance at the end of period', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost , res_fuzz_match = [('current', 43), (' current', 43), (' loans from related party', 43), (' secured long-term bank loans', 39), (' lease liabilities - current', 37), ('bank borrowings', 36), (' utilised – bank borrowings', 33), (' not later than 1 year', 32), (' bank overdraft', 30), (' lease liabilities', 27), (' leases', 25), (' balance at the end of period', 23)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost current , res_fuzz_match = [('current', 100), (' current', 100), (' lease liabilities - current', 56), (' utilised – bank borrowings', 40), (' secured long-term bank loans', 38), ('bank borrowings', 36), (' bank overdraft', 29), (' not later than 1 year', 27), (' lease liabilities', 27), (' leases', 25), (' balance at the end of period', 24), (' loans from related party', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost mizuho bank term loan, secured , res_fuzz_match = [(' not later than 1 year', 58), (' bank overdraft', 57), ('bank borrowings', 55), (' secured long-term bank loans', 54), (' leases', 50), ('current', 43), (' current', 43), (' lease liabilities - current', 42), (' utilised – bank borrowings', 40), (' loans from related party', 39), (' lease liabilities', 36), (' balance at the end of period', 34)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost smbc term loan, secured , res_fuzz_match = [(' not later than 1 year', 53), (' leases', 50), (' secured long-term bank loans', 50), ('current', 43), (' current', 43), (' bank overdraft', 43), ('bank borrowings', 42), (' lease liabilities - current', 42), (' utilised – bank borrowings', 40), (' loans from related party', 39), (' lease liabilities', 36), (' balance at the end of period', 36)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost , res_fuzz_match = [('current', 43), (' current', 43), (' loans from related party', 43), (' secured long-term bank loans', 39), (' lease liabilities - current', 37), ('bank borrowings', 36), (' utilised – bank borrowings', 33), (' not later than 1 year', 32), (' bank overdraft', 30), (' lease liabilities', 27), (' leases', 25), (' balance at the end of period', 23)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost current , res_fuzz_match = [('current', 100), (' current', 100), (' lease liabilities - current', 56), (' utilised – bank borrowings', 40), (' secured long-term bank loans', 38), ('bank borrowings', 36), (' bank overdraft', 29), (' not later than 1 year', 27), (' lease liabilities', 27), (' leases', 25), (' balance at the end of period', 24), (' loans from related party', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 7], 'score': [100, 100], 'value': [15536531.0, 14506615.0], 'label': ['Secured - at amortised cost Current', 'Secured - at amortised cost Current'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' current', 100), (' lease liabilities - current', 100), (' secured long-term bank loans', 57), (' loans from related party', 43), (' bank overdraft', 43), ('bank borrowings', 31), (' utilised – bank borrowings', 31), (' not later than 1 year', 29), (' balance at the end of period', 29), (' leases', 25), (' lease liabilities', 14)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' current', 73), ('bank borrowings', 57), (' utilised – bank borrowings', 57), (' lease liabilities - current', 57), (' secured long-term bank loans', 43), (' bank overdraft', 43), (' not later than 1 year', 31), (' loans from related party', 29), (' balance at the end of period', 29), (' leases', 0), (' lease liabilities', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' current', 100), (' lease liabilities - current', 100), (' secured long-term bank loans', 57), (' loans from related party', 43), (' bank overdraft', 43), ('bank borrowings', 31), (' utilised – bank borrowings', 31), (' not later than 1 year', 29), (' balance at the end of period', 29), (' leases', 25), (' lease liabilities', 14)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' current', 73), ('bank borrowings', 57), (' utilised – bank borrowings', 57), (' lease liabilities - current', 57), (' secured long-term bank loans', 43), (' bank overdraft', 43), (' not later than 1 year', 31), (' loans from related party', 29), (' balance at the end of period', 29), (' leases', 0), (' lease liabilities', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': [100, 100], 'value': [1615671.0, 2719442.0], 'label': [' Current', ' Current'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['current maturities']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other financial liabilities', 46), ('other current liabilities', 46), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('other financial liabilities', 38), ('other current liabilities', 33), ('current maturities', 17), ('current maturities of long-term debt', 16), ('current maturities of longterm debt', 16)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('current maturities of long-term debt', 38), ('current maturities of longterm debt', 38), ('current maturities', 36), ('other financial liabilities', 34)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), ('current maturities', 65), ('other financial liabilities', 53), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other financial liabilities', 23), ('other current liabilities', 23), ('current maturities', 21), ('current maturities of long-term debt', 18), ('current maturities of longterm debt', 18)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), ('other financial liabilities', 70), ('current maturities', 67), ('current maturities of long-term debt', 51), ('current maturities of longterm debt', 51)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 20, 24], 'score': 100, 'value': 5582432.0, 'line_item_label': ['CURRENT LIABILITIES', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 5334394.0, 248038.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other financial liabilities', 46), ('other current liabilities', 46), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('other financial liabilities', 38), ('other current liabilities', 33), ('current maturities', 17), ('current maturities of long-term debt', 16), ('current maturities of longterm debt', 16)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('current maturities of long-term debt', 38), ('current maturities of longterm debt', 38), ('current maturities', 36), ('other financial liabilities', 34)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), ('current maturities', 65), ('other financial liabilities', 53), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other financial liabilities', 23), ('other current liabilities', 23), ('current maturities', 21), ('current maturities of long-term debt', 18), ('current maturities of longterm debt', 18)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), ('other financial liabilities', 70), ('current maturities', 67), ('current maturities of long-term debt', 51), ('current maturities of longterm debt', 51)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 20, 24], 'score': 100, 'value': 39390069.0, 'line_item_label': ['CURRENT LIABILITIES', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 39141813.0, 248256.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('note payable(debt)', 27)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('note payable(debt)', 19)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('note payable(debt)', 41)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('note payable(debt)', 9)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('note payable(debt)', 37)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('note payable(debt)', 22)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('note payable(debt)', 27)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('note payable(debt)', 19)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('note payable(debt)', 41)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('note payable(debt)', 9)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('note payable(debt)', 37)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('note payable(debt)', 22)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('accounts payable', 30), ('small enterprises', 29), ('other trade payables', 25), ('trade and other payables', 21), ('micro enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('total outstanding due of other creditors other than micro and small', 9), ('outstanding dues of creditors other than micro enterprises and small enterprises', 8)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises', 34), ('other trade payables', 31), ('trade and other payables', 28), ('micro enterprises and small enterprises', 24), ('other than micro and small enterprises', 24), ('trade payable', 23), ('outstanding dues of micro enterprises and small enterprises', 23), ('outstanding dues of creditors other than micro enterprises and small enterprises', 22), ('outstanding dues of creditors other than', 22), ('total outstanding due of other creditors other than micro and small', 16)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('total outstanding due of other creditors other than micro and small', 39), ('small enterprises', 38), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36), ('micro enterprises and small enterprises', 35), ('micro enterprises', 32), ('outstanding dues of micro enterprises and small enterprises', 29)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('micro enterprises', 40), ('small enterprises', 40), ('accounts payable', 34), ('trade and other payables', 22), ('trade payable', 22), ('outstanding dues of creditors other than', 21), ('outstanding dues of creditors other than micro enterprises and small enterprises', 17), ('micro enterprises and small enterprises', 16), ('outstanding dues of micro enterprises and small enterprises', 16), ('total outstanding due of other creditors other than micro and small', 16), ('other than micro and small enterprises', 16), ('other trade payables', 12)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('accounts payable', 50), ('other trade payables', 44), ('trade and other payables', 40), ('trade payable', 40), ('small enterprises', 36), ('other than micro and small enterprises', 33), ('micro enterprises', 30), ('outstanding dues of creditors other than micro enterprises and small enterprises', 28), ('outstanding dues of creditors other than', 28), ('micro enterprises and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 24), ('total outstanding due of other creditors other than micro and small', 23)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10), ('total outstanding due of other creditors other than micro and small', 9), ('other trade payables', 8), ('trade and other payables', 7)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('micro enterprises', 29), ('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21), ('small enterprises', 19), ('outstanding dues of creditors other than', 16), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than', 14), ('total outstanding due of other creditors other than micro and small', 14)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('accounts payable', 47), ('other than micro and small enterprises', 39), ('trade payable', 38), ('outstanding dues of creditors other than', 38), ('trade and other payables', 33), ('outstanding dues of creditors other than micro enterprises and small enterprises', 32), ('micro enterprises', 29), ('small enterprises', 29), ('total outstanding due of other creditors other than micro and small', 28), ('other trade payables', 26), ('micro enterprises and small enterprises', 18), ('outstanding dues of micro enterprises and small enterprises', 18)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 8092154.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['16'], 'line_item_value': [8092154.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('accounts payable', 30), ('small enterprises', 29), ('other trade payables', 25), ('trade and other payables', 21), ('micro enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('total outstanding due of other creditors other than micro and small', 9), ('outstanding dues of creditors other than micro enterprises and small enterprises', 8)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises', 34), ('other trade payables', 31), ('trade and other payables', 28), ('micro enterprises and small enterprises', 24), ('other than micro and small enterprises', 24), ('trade payable', 23), ('outstanding dues of micro enterprises and small enterprises', 23), ('outstanding dues of creditors other than micro enterprises and small enterprises', 22), ('outstanding dues of creditors other than', 22), ('total outstanding due of other creditors other than micro and small', 16)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('total outstanding due of other creditors other than micro and small', 39), ('small enterprises', 38), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36), ('micro enterprises and small enterprises', 35), ('micro enterprises', 32), ('outstanding dues of micro enterprises and small enterprises', 29)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('micro enterprises', 40), ('small enterprises', 40), ('accounts payable', 34), ('trade and other payables', 22), ('trade payable', 22), ('outstanding dues of creditors other than', 21), ('outstanding dues of creditors other than micro enterprises and small enterprises', 17), ('micro enterprises and small enterprises', 16), ('outstanding dues of micro enterprises and small enterprises', 16), ('total outstanding due of other creditors other than micro and small', 16), ('other than micro and small enterprises', 16), ('other trade payables', 12)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('accounts payable', 50), ('other trade payables', 44), ('trade and other payables', 40), ('trade payable', 40), ('small enterprises', 36), ('other than micro and small enterprises', 33), ('micro enterprises', 30), ('outstanding dues of creditors other than micro enterprises and small enterprises', 28), ('outstanding dues of creditors other than', 28), ('micro enterprises and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 24), ('total outstanding due of other creditors other than micro and small', 23)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10), ('total outstanding due of other creditors other than micro and small', 9), ('other trade payables', 8), ('trade and other payables', 7)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('micro enterprises', 29), ('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21), ('small enterprises', 19), ('outstanding dues of creditors other than', 16), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than', 14), ('total outstanding due of other creditors other than micro and small', 14)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('accounts payable', 47), ('other than micro and small enterprises', 39), ('trade payable', 38), ('outstanding dues of creditors other than', 38), ('trade and other payables', 33), ('outstanding dues of creditors other than micro enterprises and small enterprises', 32), ('micro enterprises', 29), ('small enterprises', 29), ('total outstanding due of other creditors other than micro and small', 28), ('other trade payables', 26), ('micro enterprises and small enterprises', 18), ('outstanding dues of micro enterprises and small enterprises', 18)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 12878066.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['16'], 'line_item_value': [12878066.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables - other parties', 100), (' trade payables', 100), (' other trade payables', 100), (' trade and other payables', 75), (' related party payables', 70), (' amounts payable to controlling entity', 67), ('trade creditors', 50), ('current', 29)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('trade creditors', 81), (' trade payables - other parties', 64), ('current', 57), (' other trade payables', 57), (' trade and other payables', 46), (' amounts payable to controlling entity', 37), (' trade payables - related parties', 29), (' trade payables', 25), (' trade payables', 25), (' related party payables', 21)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('current', 43), (' amounts payable to controlling entity', 42), ('trade creditors', 33), (' related party payables', 33), (' trade payables', 27), (' trade payables', 27), (' other trade payables', 27), (' trade and other payables', 25), (' trade payables - other parties', 25), (' trade payables - related parties', 17)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), ('trade creditors', 57), (' amounts payable to controlling entity', 57), (' related party payables', 43), (' trade payables - related parties', 43), (' trade payables - other parties', 43), (' other trade payables', 43), (' trade and other payables', 29), (' trade payables', 29), (' trade payables', 29)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' amounts payable to controlling entity', 43), ('trade creditors', 40), (' trade and other payables', 29), (' trade payables - other parties', 29), (' other trade payables', 29), (' related party payables', 14), (' trade payables', 14), (' trade payables - related parties', 14), (' trade payables', 14)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables - other parties', 100), (' trade payables', 100), (' other trade payables', 100), (' trade and other payables', 75), (' related party payables', 70), (' amounts payable to controlling entity', 67), ('trade creditors', 50), ('current', 29)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('trade creditors', 81), (' trade payables - other parties', 64), ('current', 57), (' other trade payables', 57), (' trade and other payables', 46), (' amounts payable to controlling entity', 37), (' trade payables - related parties', 29), (' trade payables', 25), (' trade payables', 25), (' related party payables', 21)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('current', 43), (' amounts payable to controlling entity', 42), ('trade creditors', 33), (' related party payables', 33), (' trade payables', 27), (' trade payables', 27), (' other trade payables', 27), (' trade and other payables', 25), (' trade payables - other parties', 25), (' trade payables - related parties', 17)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), ('trade creditors', 57), (' amounts payable to controlling entity', 57), (' related party payables', 43), (' trade payables - related parties', 43), (' trade payables - other parties', 43), (' other trade payables', 43), (' trade and other payables', 29), (' trade payables', 29), (' trade payables', 29)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' amounts payable to controlling entity', 43), ('trade creditors', 40), (' trade and other payables', 29), (' trade payables - other parties', 29), (' other trade payables', 29), (' related party payables', 14), (' trade payables', 14), (' trade payables - related parties', 14), (' trade payables', 14)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 4, 7, 8, 11], 'score': [100, 81, 100, 100, 81, 100], 'value': [1932688.0, 1415152.0, 12878066.0, 2506637.0, 649702.0, 8092154.0], 'label': ['  Trade payables ', '  Other creditors ', '  Current ', '  Trade payables ', '  Other creditors ', '  Current '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other liabilities', 67), ('other current liabilities', 46), ('other financial liabilities', 46), ('other current financial liabilities', 35), ('trade and other payables', 21)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 28)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other liabilities', 41), ('other financial liabilities', 38), ('other current liabilities', 33), ('other current financial liabilities', 32)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('other financial liabilities', 34), ('other current financial liabilities', 33), ('trade and other payables', 22), ('other liabilities', 22)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), ('other current financial liabilities', 70), ('other financial liabilities', 53), ('other liabilities', 53), ('trade and other payables', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8), ('trade and other payables', 7)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other liabilities', 33), ('other current liabilities', 23), ('other financial liabilities', 23), ('trade and other payables', 21), ('other current financial liabilities', 18)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), ('other current financial liabilities', 83), ('other liabilities', 75), ('other financial liabilities', 70), ('trade and other payables', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18, 20, 24], 'score': 100, 'value': 13674586.0, 'line_item_label': ['CURRENT LIABILITIES', 'Trade and other payables', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '16', '7', nan], 'line_item_value': [0.0, 8092154.0, 5334394.0, 248038.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other liabilities', 67), ('other current liabilities', 46), ('other financial liabilities', 46), ('other current financial liabilities', 35), ('trade and other payables', 21)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 28)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other liabilities', 41), ('other financial liabilities', 38), ('other current liabilities', 33), ('other current financial liabilities', 32)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('other financial liabilities', 34), ('other current financial liabilities', 33), ('trade and other payables', 22), ('other liabilities', 22)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), ('other current financial liabilities', 70), ('other financial liabilities', 53), ('other liabilities', 53), ('trade and other payables', 40)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8), ('trade and other payables', 7)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other liabilities', 33), ('other current liabilities', 23), ('other financial liabilities', 23), ('trade and other payables', 21), ('other current financial liabilities', 18)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), ('other current financial liabilities', 83), ('other liabilities', 75), ('other financial liabilities', 70), ('trade and other payables', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18, 20, 24], 'score': 100, 'value': 52268135.0, 'line_item_label': ['CURRENT LIABILITIES', 'Trade and other payables', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '16', '7', nan], 'line_item_value': [0.0, 12878066.0, 39141813.0, 248256.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [('accrued expenses', 27), ('interest accrued', 25)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 27)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 59)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('accrued expenses', 43), ('interest accrued', 43)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('interest accrued', 33), ('accrued expenses', 22)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [('accrued expenses', 27), ('interest accrued', 25)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 27)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 59)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('accrued expenses', 43), ('interest accrued', 43)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('interest accrued', 33), ('accrued expenses', 22)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 9], 'score': [100, 100], 'value': [9550494.0, 4976574.0], 'label': ['  Accrued expenses ', '  Accrued expenses '], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 55), ('tax', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 65), ('current tax liabilities', 41)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 50), (' income tax payable', 21), ('current tax liabilities', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 60)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 25), ('tax', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('current tax liabilities', 88), (' income tax payable', 38), ('tax', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [16, 20, 24], 'score': 88, 'value': 5582432.0, 'line_item_label': ['LIABILITIES', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 5334394.0, 248038.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 55), ('tax', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 65), ('current tax liabilities', 41)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 50), (' income tax payable', 21), ('current tax liabilities', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 60)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 25), ('tax', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('current tax liabilities', 88), (' income tax payable', 38), ('tax', 33)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [16, 20, 24], 'score': 88, 'value': 39390069.0, 'line_item_label': ['LIABILITIES', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 39141813.0, 248256.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-04-23 13:58:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' other financial liabilities', 47), (' foreign exchange contract liability', 44), (' customer deposits', 36), (' employee benefits', 34), (' deferred revenue', 31), (' trade and other payables', 28), ('provisions', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' other financial liabilities', 38), (' deferred revenue', 35), ('other current liabilities', 33), (' financial liabilities', 33), (' other current liabilities', 33), (' customer deposits', 22), (' foreign exchange contract liability', 19), ('provisions', 14), (' employee benefits', 11)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' other financial liabilities', 34), (' deferred revenue', 30), (' financial liabilities', 28), (' foreign exchange contract liability', 26), (' trade and other payables', 22), (' customer deposits', 21), ('provisions', 19)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 41), (' trade and other payables', 40), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' deferred revenue', 22), ('other current liabilities', 15), (' other current liabilities', 15), (' foreign exchange contract liability', 11), (' financial liabilities', 10), (' employee benefits', 10), (' customer deposits', 10), (' other financial liabilities', 8), (' trade and other payables', 7)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 11), (' financial liabilities', 10)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 38), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), (' other current liabilities', 100), (' other financial liabilities', 70), (' financial liabilities', 47), (' foreign exchange contract liability', 39), (' trade and other payables', 33), (' employee benefits', 29), (' customer deposits', 29), (' deferred revenue', 19), ('provisions', 15)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18, 19, 20, 21, 24], 'score': 100, 'value': 15711294.0, 'line_item_label': ['CURRENT LIABILITIES', 'Trade and other payables', 'Employee benefits', 'Current tax liabilities', 'Provisions', 'Other current liabilities'], 'note_numbers': [nan, '16', '15', '7', '15', nan], 'line_item_value': [0.0, 8092154.0, 1786202.0, 5334394.0, 250506.0, 248038.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' other financial liabilities', 47), (' foreign exchange contract liability', 44), (' customer deposits', 36), (' employee benefits', 34), (' deferred revenue', 31), (' trade and other payables', 28), ('provisions', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' other financial liabilities', 38), (' deferred revenue', 35), ('other current liabilities', 33), (' financial liabilities', 33), (' other current liabilities', 33), (' customer deposits', 22), (' foreign exchange contract liability', 19), ('provisions', 14), (' employee benefits', 11)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' other financial liabilities', 34), (' deferred revenue', 30), (' financial liabilities', 28), (' foreign exchange contract liability', 26), (' trade and other payables', 22), (' customer deposits', 21), ('provisions', 19)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 41), (' trade and other payables', 40), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' deferred revenue', 22), ('other current liabilities', 15), (' other current liabilities', 15), (' foreign exchange contract liability', 11), (' financial liabilities', 10), (' employee benefits', 10), (' customer deposits', 10), (' other financial liabilities', 8), (' trade and other payables', 7)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 11), (' financial liabilities', 10)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 38), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), (' other current liabilities', 100), (' other financial liabilities', 70), (' financial liabilities', 47), (' foreign exchange contract liability', 39), (' trade and other payables', 33), (' employee benefits', 29), (' customer deposits', 29), (' deferred revenue', 19), ('provisions', 15)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18, 19, 20, 21, 24], 'score': 100, 'value': 55808008.0, 'line_item_label': ['CURRENT LIABILITIES', 'Trade and other payables', 'Employee benefits', 'Current tax liabilities', 'Provisions', 'Other current liabilities'], 'note_numbers': [nan, '16', '15', '7', '15', nan], 'line_item_value': [0.0, 12878066.0, 2455852.0, 39141813.0, 1084021.0, 248256.0]}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [(' share of joint venture payables', 76), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 67), (' gst payable and accruals', 67), (' employee benefits - payroll', 60), (' contract liabilites - current', 58), ('other creditors and accruals', 50), (' other related parties', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' loans from related party', 42), (' current - liability for annual and long service leave', 42), (' gst liabilities', 42), (' rebates', 40), (' other', 40), (' arising from service contracts', 35), (' forward exchange contracts', 35), (' ultimate parent entity', 33), (' make good provisions', 33), (' gst', 33), (' total current employee benefits', 33), ('current', 29), (' other creditors', 25), (' other creditors', 25), (' employee benefits - current', 25), (' provision for associate funding', 25), (' other creditors', 25), (' warranty', 25), (' restructuring', 20), (' abandonment and decommissioning costs', 17), (' provisions - current', 15)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' other related parties', 64), (' rebates', 60), ('current', 57), (' employee benefits - current', 50), (' total current employee benefits', 50), (' provisions - current', 48), (' contract liabilites - current', 48), (' restructuring', 47), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' employee benefits - payroll', 43), (' arising from service contracts', 43), (' warranty', 38), (' ultimate parent entity', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' share of joint venture payables', 36), (' provision for associate funding', 36), (' forward exchange contracts', 36), (' current - liability for annual and long service leave', 33), (' gst', 33), (' abandonment and decommissioning costs', 31), (' make good provisions', 26), (' gst payable and accruals', 24), (' gst payables', 20), (' gst liabilities', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('other creditors and accruals', 53), (' gst payable and accruals', 53), (' forward exchange contracts', 50), ('current', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 42), (' total current employee benefits', 42), (' provisions - current', 40), (' contract liabilites - current', 40), (' gst', 40), (' rebates', 40), (' provision for associate funding', 35), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' secured long-term bank loans', 30), (' other creditors', 27), (' other creditors', 27), (' arising from service contracts', 27), (' other creditors', 27), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' warranty', 25), (' other related parties', 22), (' make good provisions', 20), (' restructuring', 20), (' other', 20), (' gst payables', 17), (' gst liabilities', 17)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 67), ('other creditors and accruals', 57), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), (' restructuring', 55), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 29), (' other', 29), (' gst payables', 14), (' make good provisions', 14), (' gst liabilities', 14)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' current - liability for annual and long service leave', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' restructuring', 46), ('other creditors and accruals', 43), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' other', 40), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' loans from related party', 29), (' other creditors', 29), (' make good provisions', 29), (' rebates', 29), (' other creditors', 29), (' warranty', 29), (' provision for associate funding', 22), (' employee benefits - payroll', 20), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [(' share of joint venture payables', 76), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 67), (' gst payable and accruals', 67), (' employee benefits - payroll', 60), (' contract liabilites - current', 58), ('other creditors and accruals', 50), (' other related parties', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' loans from related party', 42), (' current - liability for annual and long service leave', 42), (' gst liabilities', 42), (' rebates', 40), (' other', 40), (' arising from service contracts', 35), (' forward exchange contracts', 35), (' ultimate parent entity', 33), (' make good provisions', 33), (' gst', 33), (' total current employee benefits', 33), ('current', 29), (' other creditors', 25), (' other creditors', 25), (' employee benefits - current', 25), (' provision for associate funding', 25), (' other creditors', 25), (' warranty', 25), (' restructuring', 20), (' abandonment and decommissioning costs', 17), (' provisions - current', 15)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' other related parties', 64), (' rebates', 60), ('current', 57), (' employee benefits - current', 50), (' total current employee benefits', 50), (' provisions - current', 48), (' contract liabilites - current', 48), (' restructuring', 47), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' employee benefits - payroll', 43), (' arising from service contracts', 43), (' warranty', 38), (' ultimate parent entity', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' share of joint venture payables', 36), (' provision for associate funding', 36), (' forward exchange contracts', 36), (' current - liability for annual and long service leave', 33), (' gst', 33), (' abandonment and decommissioning costs', 31), (' make good provisions', 26), (' gst payable and accruals', 24), (' gst payables', 20), (' gst liabilities', 20)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('other creditors and accruals', 53), (' gst payable and accruals', 53), (' forward exchange contracts', 50), ('current', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 42), (' total current employee benefits', 42), (' provisions - current', 40), (' contract liabilites - current', 40), (' gst', 40), (' rebates', 40), (' provision for associate funding', 35), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' secured long-term bank loans', 30), (' other creditors', 27), (' other creditors', 27), (' arising from service contracts', 27), (' other creditors', 27), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' warranty', 25), (' other related parties', 22), (' make good provisions', 20), (' restructuring', 20), (' other', 20), (' gst payables', 17), (' gst liabilities', 17)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 67), ('other creditors and accruals', 57), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), (' restructuring', 55), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 29), (' other', 29), (' gst payables', 14), (' make good provisions', 14), (' gst liabilities', 14)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' current - liability for annual and long service leave', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' restructuring', 46), ('other creditors and accruals', 43), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' other', 40), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' loans from related party', 29), (' other creditors', 29), (' make good provisions', 29), (' rebates', 29), (' other creditors', 29), (' warranty', 29), (' provision for associate funding', 22), (' employee benefits - payroll', 20), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4, 8, 11], 'score': [100, 100, 100, 100], 'value': [1415152.0, 12878066.0, 649702.0, 8092154.0], 'label': ['  Other creditors ', '  Current ', '  Other creditors ', '  Current '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-04-23 13:58:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:18+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' loan payable to relayed party under tax funding agreement', 50), (' other creditors', 48), (' other creditors', 48), (' other creditors', 48), (' ultimate parent entity', 47), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' rebates', 40), (' other', 40), (' contract liabilites - current', 37), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' gst', 33), (' abandonment and decommissioning costs', 29), (' restructuring', 29), (' arising from service contracts', 28), ('other creditors and accruals', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' make good provisions', 27), (' forward exchange contracts', 27), (' warranty', 27), (' other related parties', 21), (' gst payables', 15), (' gst liabilities', 15)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = other provisions , res_fuzz_match = [(' other', 100), (' make good provisions', 73), ('other creditors and accruals', 67), (' other creditors', 67), (' other creditors', 67), (' other creditors', 67), (' other related parties', 58), (' loans from related party', 50), (' provisions - current', 50), (' provision for associate funding', 50), (' employee benefits - payroll', 48), (' secured long-term bank loans', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' share of joint venture payables', 42), (' arising from service contracts', 42), (' gst', 40), (' warranty', 38), (' ultimate parent entity', 33), (' derivative contracts - at fair value', 33), (' loan payable to relayed party under tax funding agreement', 33), (' gst payables', 30), (' forward exchange contracts', 30), ('current', 29), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' abandonment and decommissioning costs', 25), (' total current employee benefits', 25), (' restructuring', 22), (' rebates', 20), (' gst liabilities', 17)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 67), ('other creditors and accruals', 57), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), (' restructuring', 55), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 29), (' other', 29), (' gst payables', 14), (' make good provisions', 14), (' gst liabilities', 14)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' current - liability for annual and long service leave', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' restructuring', 46), ('other creditors and accruals', 43), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' other', 40), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' loans from related party', 29), (' other creditors', 29), (' make good provisions', 29), (' rebates', 29), (' other creditors', 29), (' warranty', 29), (' provision for associate funding', 22), (' employee benefits - payroll', 20), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = balance at beginning of the period , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' loans from related party', 48), (' employee benefits - payroll', 45), ('current', 43), (' other creditors', 42), (' other creditors', 42), (' other creditors', 42), (' gst payables', 40), (' rebates', 40), (' warranty', 38), (' share of joint venture payables', 35), (' total current employee benefits', 34), (' gst', 33), (' forward exchange contracts', 33), (' ultimate parent entity', 32), (' make good provisions', 32), (' secured long-term bank loans', 31), (' employee benefits - current', 31), ('other creditors and accruals', 30), (' loan payable to relayed party under tax funding agreement', 30), (' current - liability for annual and long service leave', 30), (' provisions - current', 30), (' abandonment and decommissioning costs', 30), (' gst liabilities', 30), (' provision for associate funding', 29), (' gst payable and accruals', 28), (' arising from service contracts', 26), (' contract liabilites - current', 22), (' derivative contracts - at fair value', 17), (' restructuring', 14)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = additional provisions recognised , res_fuzz_match = [(' provisions - current', 71), (' make good provisions', 56), (' provision for associate funding', 48), (' arising from service contracts', 48), ('current', 43), (' abandonment and decommissioning costs', 43), (' employee benefits - current', 42), (' contract liabilites - current', 42), (' gst', 40), (' rebates', 40), (' employee benefits - payroll', 39), (' ultimate parent entity', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' forward exchange contracts', 34), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' restructuring', 33), (' total current employee benefits', 33), (' gst payables', 30), (' gst liabilities', 30), (' derivative contracts - at fair value', 29), (' secured long-term bank loans', 29), ('other creditors and accruals', 26), (' gst payable and accruals', 25), (' share of joint venture payables', 24), (' other', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = balance at end of period , res_fuzz_match = [(' current - liability for annual and long service leave', 53), (' abandonment and decommissioning costs', 47), (' make good provisions', 47), (' employee benefits - payroll', 45), ('current', 43), (' loans from related party', 43), (' loan payable to relayed party under tax funding agreement', 41), (' total current employee benefits', 41), (' ultimate parent entity', 40), (' rebates', 40), (' other', 40), (' gst payable and accruals', 39), (' secured long-term bank loans', 38), (' warranty', 38), (' provision for associate funding', 36), (' share of joint venture payables', 35), ('other creditors and accruals', 34), (' contract liabilites - current', 33), (' forward exchange contracts', 33), (' employee benefits - current', 31), (' derivative contracts - at fair value', 29), (' other creditors', 27), (' other creditors', 27), (' other creditors', 27), (' arising from service contracts', 26), (' other related parties', 24), (' gst liabilities', 22), (' provisions - current', 21), (' gst payables', 20), (' restructuring', 14), (' gst', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' loan payable to relayed party under tax funding agreement', 50), (' other creditors', 48), (' other creditors', 48), (' other creditors', 48), (' ultimate parent entity', 47), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' rebates', 40), (' other', 40), (' contract liabilites - current', 37), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' gst', 33), (' abandonment and decommissioning costs', 29), (' restructuring', 29), (' arising from service contracts', 28), ('other creditors and accruals', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' make good provisions', 27), (' forward exchange contracts', 27), (' warranty', 27), (' other related parties', 21), (' gst payables', 15), (' gst liabilities', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other provisions , res_fuzz_match = [(' other', 100), (' make good provisions', 73), ('other creditors and accruals', 67), (' other creditors', 67), (' other creditors', 67), (' other creditors', 67), (' other related parties', 58), (' loans from related party', 50), (' provisions - current', 50), (' provision for associate funding', 50), (' employee benefits - payroll', 48), (' secured long-term bank loans', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' share of joint venture payables', 42), (' arising from service contracts', 42), (' gst', 40), (' warranty', 38), (' ultimate parent entity', 33), (' derivative contracts - at fair value', 33), (' loan payable to relayed party under tax funding agreement', 33), (' gst payables', 30), (' forward exchange contracts', 30), ('current', 29), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' abandonment and decommissioning costs', 25), (' total current employee benefits', 25), (' restructuring', 22), (' rebates', 20), (' gst liabilities', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 67), ('other creditors and accruals', 57), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), (' restructuring', 55), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 29), (' other', 29), (' gst payables', 14), (' make good provisions', 14), (' gst liabilities', 14)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' current - liability for annual and long service leave', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' restructuring', 46), ('other creditors and accruals', 43), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' other', 40), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' loans from related party', 29), (' other creditors', 29), (' make good provisions', 29), (' rebates', 29), (' other creditors', 29), (' warranty', 29), (' provision for associate funding', 22), (' employee benefits - payroll', 20), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = balance at beginning of the period , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' loans from related party', 48), (' employee benefits - payroll', 45), ('current', 43), (' other creditors', 42), (' other creditors', 42), (' other creditors', 42), (' gst payables', 40), (' rebates', 40), (' warranty', 38), (' share of joint venture payables', 35), (' total current employee benefits', 34), (' gst', 33), (' forward exchange contracts', 33), (' ultimate parent entity', 32), (' make good provisions', 32), (' secured long-term bank loans', 31), (' employee benefits - current', 31), ('other creditors and accruals', 30), (' loan payable to relayed party under tax funding agreement', 30), (' current - liability for annual and long service leave', 30), (' provisions - current', 30), (' abandonment and decommissioning costs', 30), (' gst liabilities', 30), (' provision for associate funding', 29), (' gst payable and accruals', 28), (' arising from service contracts', 26), (' contract liabilites - current', 22), (' derivative contracts - at fair value', 17), (' restructuring', 14)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = additional provisions recognised , res_fuzz_match = [(' provisions - current', 71), (' make good provisions', 56), (' provision for associate funding', 48), (' arising from service contracts', 48), ('current', 43), (' abandonment and decommissioning costs', 43), (' employee benefits - current', 42), (' contract liabilites - current', 42), (' gst', 40), (' rebates', 40), (' employee benefits - payroll', 39), (' ultimate parent entity', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' forward exchange contracts', 34), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' restructuring', 33), (' total current employee benefits', 33), (' gst payables', 30), (' gst liabilities', 30), (' derivative contracts - at fair value', 29), (' secured long-term bank loans', 29), ('other creditors and accruals', 26), (' gst payable and accruals', 25), (' share of joint venture payables', 24), (' other', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = balance at end of period , res_fuzz_match = [(' current - liability for annual and long service leave', 53), (' abandonment and decommissioning costs', 47), (' make good provisions', 47), (' employee benefits - payroll', 45), ('current', 43), (' loans from related party', 43), (' loan payable to relayed party under tax funding agreement', 41), (' total current employee benefits', 41), (' ultimate parent entity', 40), (' rebates', 40), (' other', 40), (' gst payable and accruals', 39), (' secured long-term bank loans', 38), (' warranty', 38), (' provision for associate funding', 36), (' share of joint venture payables', 35), ('other creditors and accruals', 34), (' contract liabilites - current', 33), (' forward exchange contracts', 33), (' employee benefits - current', 31), (' derivative contracts - at fair value', 29), (' other creditors', 27), (' other creditors', 27), (' other creditors', 27), (' arising from service contracts', 26), (' other related parties', 24), (' gst liabilities', 22), (' provisions - current', 21), (' gst payables', 20), (' restructuring', 14), (' gst', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 11, 12, 14], 'score': [100, 100, 100, 100, 100, 100], 'value': [2767587.0, 12151482.0, 3539873.0, 2027681.0, 11466220.0, 2036708.0], 'label': ['  Employee benefits', '  Other provisions', '  Current', '  Employee benefits', '  Other provisions', '  Current'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 28)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current liabilities', 88)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current liabilities', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current liabilities', 64)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('current liabilities', 82)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 20, 24], 'score': 82, 'value': 5582432.0, 'line_item_label': ['CURRENT LIABILITIES', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 5334394.0, 248038.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 28)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current liabilities', 88)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current liabilities', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current liabilities', 64)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('current liabilities', 82)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 20, 24], 'score': 82, 'value': 39390069.0, 'line_item_label': ['CURRENT LIABILITIES', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 39141813.0, 248256.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term debt', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term debt', 41)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('long term debt', 30)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('long term debt', 24)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('long term debt', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term debt', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term debt', 41)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('long term debt', 30)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('long term debt', 24)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('long term debt', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 35), (' borrowings', 33)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 53), (' lease liabilities', 48), (' lease liability', 48), ('interest bearing loans and borrowings', 45), (' borrowings', 25)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 40), (' lease liabilities', 36), (' lease liability', 36), (' loans and borrowings', 30), (' borrowings', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), (' loans and borrowings', 40), (' borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 100), (' borrowings', 100), (' loans and borrowings', 100), (' lease liabilities', 22), (' lease liability', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 44), (' loans and borrowings', 29), (' borrowings', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [30, 31], 'score': 100, 'value': 54936678.0, 'line_item_label': ['Borrowings', 'Lease liability'], 'note_numbers': ['14', '22'], 'line_item_value': [48102669.0, 6834009.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 35), (' borrowings', 33)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 53), (' lease liabilities', 48), (' lease liability', 48), ('interest bearing loans and borrowings', 45), (' borrowings', 25)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 40), (' lease liabilities', 36), (' lease liability', 36), (' loans and borrowings', 30), (' borrowings', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), (' loans and borrowings', 40), (' borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 100), (' borrowings', 100), (' loans and borrowings', 100), (' lease liabilities', 22), (' lease liability', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 44), (' loans and borrowings', 29), (' borrowings', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [30, 31], 'score': 100, 'value': 42372893.0, 'line_item_label': ['Borrowings', 'Lease liability'], 'note_numbers': ['14', '22'], 'line_item_value': [36057231.0, 6315662.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost mizuho bank term loan, secured , res_fuzz_match = [('later than 1 year', 60), ('not later than 5 years', 58), (' bank loan', 56), (' non current', 55), ('leases', 50), (' secured finance debt', 47), (' lease liabilities - non-current', 42), (' lease liabilities', 36), (' lease liability', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost smbc term loan, secured , res_fuzz_match = [('later than 1 year', 60), (' bank loan', 56), (' non current', 55), ('not later than 5 years', 53), ('leases', 50), (' secured finance debt', 47), (' lease liabilities - non-current', 42), (' lease liabilities', 36), (' lease liability', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost , res_fuzz_match = [(' secured finance debt', 47), (' non current', 45), (' lease liabilities - non-current', 33), ('later than 1 year', 33), ('not later than 5 years', 32), (' lease liabilities', 27), (' lease liability', 27), ('leases', 25), (' bank loan', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost current , res_fuzz_match = [(' non current', 82), (' secured finance debt', 47), (' lease liabilities - non-current', 42), ('later than 1 year', 33), (' lease liabilities', 27), (' lease liability', 27), ('not later than 5 years', 27), ('leases', 25), (' bank loan', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost mizuho bank term loan, secured , res_fuzz_match = [('later than 1 year', 60), ('not later than 5 years', 58), (' bank loan', 56), (' non current', 55), ('leases', 50), (' secured finance debt', 47), (' lease liabilities - non-current', 42), (' lease liabilities', 36), (' lease liability', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost smbc term loan, secured , res_fuzz_match = [('later than 1 year', 60), (' bank loan', 56), (' non current', 55), ('not later than 5 years', 53), ('leases', 50), (' secured finance debt', 47), (' lease liabilities - non-current', 42), (' lease liabilities', 36), (' lease liability', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost , res_fuzz_match = [(' secured finance debt', 47), (' non current', 45), (' lease liabilities - non-current', 33), ('later than 1 year', 33), ('not later than 5 years', 32), (' lease liabilities', 27), (' lease liability', 27), ('leases', 25), (' bank loan', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost current , res_fuzz_match = [(' non current', 82), (' secured finance debt', 47), (' lease liabilities - non-current', 42), ('later than 1 year', 33), (' lease liabilities', 27), (' lease liability', 27), ('not later than 5 years', 27), ('leases', 25), (' bank loan', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 7], 'score': [82, 82], 'value': [15536531.0, 14506615.0], 'label': ['Secured - at amortised cost Current', 'Secured - at amortised cost Current'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' non current', 100), (' lease liabilities - non-current', 73), (' secured finance debt', 57), ('later than 1 year', 29), ('not later than 5 years', 29), ('leases', 25), (' bank loan', 14), (' lease liabilities', 14), (' lease liability', 14)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [(' lease liabilities - non-current', 100), (' non current', 86), (' secured finance debt', 43), (' bank loan', 43), ('later than 1 year', 31), ('not later than 5 years', 31), ('leases', 0), (' lease liabilities', 0), (' lease liability', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' non current', 100), (' lease liabilities - non-current', 73), (' secured finance debt', 57), ('later than 1 year', 29), ('not later than 5 years', 29), ('leases', 25), (' bank loan', 14), (' lease liabilities', 14), (' lease liability', 14)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [(' lease liabilities - non-current', 100), (' non current', 86), (' secured finance debt', 43), (' bank loan', 43), ('later than 1 year', 31), ('not later than 5 years', 31), ('leases', 0), (' lease liabilities', 0), (' lease liability', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [100, 100, 100, 100], 'value': [1615671.0, 6315662.0, 2719442.0, 6834009.0], 'label': [' Current', ' Non-current', ' Current', ' Non-current'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 23)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 39), ('(bond)', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 21)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('(bond)', 40), ('interest bearing loans and borrowings', 34)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 26), ('(bond)', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 23)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 39), ('(bond)', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 21)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('(bond)', 40), ('interest bearing loans and borrowings', 34)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 26), ('(bond)', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 23)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 39), ('lease liabilities', 30)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('lease liabilities', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 34), ('lease liabilities', 12)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('lease liabilities', 59), ('interest bearing loans and borrowings', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('lease liabilities', 30), ('interest bearing loans and borrowings', 26)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [31], 'score': 100, 'value': 6834009.0, 'line_item_label': ['Lease liability'], 'note_numbers': ['22'], 'line_item_value': [6834009.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 23)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 39), ('lease liabilities', 30)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('lease liabilities', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 34), ('lease liabilities', 12)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('lease liabilities', 59), ('interest bearing loans and borrowings', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('lease liabilities', 30), ('interest bearing loans and borrowings', 26)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [31], 'score': 100, 'value': 6315662.0, 'line_item_label': ['Lease liability'], 'note_numbers': ['22'], 'line_item_value': [6315662.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 45)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 40), ('lease liabilities', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), ('lease liabilities', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 100), ('lease liabilities', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 44)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [30, 31], 'score': 100, 'value': 54936678.0, 'line_item_label': ['Borrowings', 'Lease liability'], 'note_numbers': ['14', '22'], 'line_item_value': [48102669.0, 6834009.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 45)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 40), ('lease liabilities', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), ('lease liabilities', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 100), ('lease liabilities', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 44)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [30, 31], 'score': 100, 'value': 42372893.0, 'line_item_label': ['Borrowings', 'Lease liability'], 'note_numbers': ['14', '22'], 'line_item_value': [36057231.0, 6315662.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost mizuho bank term loan, secured , res_fuzz_match = [('total deferred tax (assets) / liabilities', 36), ('deferred tax liabilities', 31)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost smbc term loan, secured , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 31)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost , res_fuzz_match = [('total deferred tax (assets) / liabilities', 36), ('deferred tax liabilities', 31)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost current , res_fuzz_match = [('deferred tax liabilities', 31), ('total deferred tax (assets) / liabilities', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost mizuho bank term loan, secured , res_fuzz_match = [('total deferred tax (assets) / liabilities', 36), ('deferred tax liabilities', 31)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost smbc term loan, secured , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 31)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost , res_fuzz_match = [('total deferred tax (assets) / liabilities', 36), ('deferred tax liabilities', 31)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost current , res_fuzz_match = [('deferred tax liabilities', 31), ('total deferred tax (assets) / liabilities', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('deferred tax liabilities', 29), ('total deferred tax (assets) / liabilities', 29)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('deferred tax liabilities', 14), ('total deferred tax (assets) / liabilities', 14)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('deferred tax liabilities', 29), ('total deferred tax (assets) / liabilities', 29)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('deferred tax liabilities', 14), ('total deferred tax (assets) / liabilities', 14)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('common stock', 23), ('contributed equity', 20), ('equity share capital', 19), (' issued capital', 17), ('share capital', 16), (' share capital', 16), ('perpetual equity instrument', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('share capital', 30), (' share capital', 30), ('perpetual equity instrument', 21), ('contributed equity', 21), ('equity share capital', 20), (' issued capital', 19), ('common stock', 18)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('contributed equity', 32), ('share capital', 31), (' share capital', 31), ('equity share capital', 30), ('perpetual equity instrument', 30), (' issued capital', 24), ('common stock', 7)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' issued capital', 38), ('share capital', 35), (' share capital', 35), ('equity share capital', 25), ('common stock', 22), ('contributed equity', 18), ('perpetual equity instrument', 13)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('common stock', 22), ('contributed equity', 18), ('perpetual equity instrument', 13), ('share capital', 12), (' share capital', 12), ('equity share capital', 8), (' issued capital', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' issued capital', 29), ('share capital', 27), (' share capital', 27), ('contributed equity', 22), ('equity share capital', 21), ('perpetual equity instrument', 17), ('common stock', 9)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('share capital', 30), (' share capital', 30), ('equity share capital', 24), (' issued capital', 23), ('perpetual equity instrument', 20), ('common stock', 14), ('contributed equity', 6)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('share capital', 40), (' share capital', 40), ('equity share capital', 37), ('contributed equity', 32), (' issued capital', 32), ('perpetual equity instrument', 29), ('common stock', 19)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('common stock', 23), ('contributed equity', 20), ('equity share capital', 19), (' issued capital', 17), ('share capital', 16), (' share capital', 16), ('perpetual equity instrument', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('share capital', 30), (' share capital', 30), ('perpetual equity instrument', 21), ('contributed equity', 21), ('equity share capital', 20), (' issued capital', 19), ('common stock', 18)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('contributed equity', 32), ('share capital', 31), (' share capital', 31), ('equity share capital', 30), ('perpetual equity instrument', 30), (' issued capital', 24), ('common stock', 7)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' issued capital', 38), ('share capital', 35), (' share capital', 35), ('equity share capital', 25), ('common stock', 22), ('contributed equity', 18), ('perpetual equity instrument', 13)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('common stock', 22), ('contributed equity', 18), ('perpetual equity instrument', 13), ('share capital', 12), (' share capital', 12), ('equity share capital', 8), (' issued capital', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' issued capital', 29), ('share capital', 27), (' share capital', 27), ('contributed equity', 22), ('equity share capital', 21), ('perpetual equity instrument', 17), ('common stock', 9)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('share capital', 30), (' share capital', 30), ('equity share capital', 24), (' issued capital', 23), ('perpetual equity instrument', 20), ('common stock', 14), ('contributed equity', 6)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('share capital', 40), (' share capital', 40), ('equity share capital', 37), ('contributed equity', 32), (' issued capital', 32), ('perpetual equity instrument', 29), ('common stock', 19)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('minority interest', 28)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('minority interest', 34)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('minority interest', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('minority interest', 16)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('minority interest', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('minority interest', 28)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('minority interest', 34)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('minority interest', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('minority interest', 16)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('minority interest', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term liabilities', 32)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term liabilities', 32)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('long term liabilities', 27)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('long term liabilities', 44)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('long term liabilities', 50)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term liabilities', 32)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term liabilities', 32)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('long term liabilities', 27)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('long term liabilities', 44)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('long term liabilities', 50)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('share capital', 67), ('equity share capital', 50), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('perpetual equity instrument', 26), ('share capital', 24), ('equity share capital', 17), ('common stock', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('equity share capital', 28), ('share capital', 27), ('common stock', 26), ('perpetual equity instrument', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('share capital', 67), ('equity share capital', 50), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('perpetual equity instrument', 26), ('share capital', 24), ('equity share capital', 17), ('common stock', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('equity share capital', 28), ('share capital', 27), ('common stock', 26), ('perpetual equity instrument', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67), ('reserves and surplus', 52), ('other equity', 33), ('additional paid in capital', 0), ('additional paid up capital', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves and surplus', 36), ('additional paid in capital', 30), ('additional paid up capital', 30), ('other equity', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67), ('reserves and surplus', 52), ('other equity', 33), ('additional paid in capital', 0), ('additional paid up capital', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves and surplus', 36), ('additional paid in capital', 30), ('additional paid up capital', 30), ('other equity', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves surplus', 63), ('other equity', 33), ('retained earnings', 24), (' accumulated losses', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('other equity', 17), ('reserves surplus', 17), (' accumulated losses', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [39], 'score': 100, 'value': 28509330.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [28509330.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves surplus', 63), ('other equity', 33), ('retained earnings', 24), (' accumulated losses', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('other equity', 17), ('reserves surplus', 17), (' accumulated losses', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [39], 'score': 100, 'value': 122111851.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [122111851.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves', 'reserves']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27), ('reserves', 12)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves', 100), ('other reserves', 67)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves', 24)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [38], 'score': 100, 'value': 2011521.0, 'line_item_label': ['Reserves'], 'note_numbers': [nan], 'line_item_value': [2011521.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27), ('reserves', 12)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves', 100), ('other reserves', 67)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves', 24)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [38], 'score': 100, 'value': 3384.0, 'line_item_label': ['Reserves'], 'note_numbers': [nan], 'line_item_value': [3384.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 29)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 29)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 77944930.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [77944930.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 83893305.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [83893305.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['cost', 'gross'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [40, 41, 42, 43, 44, 45, 46, 47, 48, 49], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [15625586.0, 1626478.0, 0.0, -91683.0, 17160381.0, 0.0, 0.0, 0.0, 0.0, 17160381.0], 'label': ['Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 33), ('depreciatio', 25)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 38), ('depreciatio', 24)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 40), ('net value', 36), ('accumulated depreciation', 32)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 50), ('accumulated depreciation', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('government subsidies receivable', 31), ('billed', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('receivable', 50), ('billed', 50), ('trade and other receivables', 48), ('account receivables', 36), ('trade receivables', 35), ('government subsidies receivable', 26)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 61), ('billed', 29), ('unbilled', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('receivable', 50), ('account receivables', 44), ('unbilled', 40), ('trade receivables', 36), ('trade and other receivables', 36), ('government subsidies receivable', 33), ('billed', 25)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('receivable', 100), ('trade receivables', 78), ('account receivables', 64), ('trade and other receivables', 55), ('government subsidies receivable', 50), ('unbilled', 40), ('billed', 29)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('receivable', 36), ('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('billed', 0), ('unbilled', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('trade and other receivables', 67), ('account receivables', 43), ('government subsidies receivable', 42), ('receivable', 33), ('trade receivables', 26), ('billed', 25), ('unbilled', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 5], 'score': 100, 'value': 13983506.0, 'line_item_label': ['Trade and other receivables', 'Current tax receivables'], 'note_numbers': ['10', '7'], 'line_item_value': [13983506.0, 0.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('government subsidies receivable', 31), ('billed', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('receivable', 50), ('billed', 50), ('trade and other receivables', 48), ('account receivables', 36), ('trade receivables', 35), ('government subsidies receivable', 26)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 61), ('billed', 29), ('unbilled', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('receivable', 50), ('account receivables', 44), ('unbilled', 40), ('trade receivables', 36), ('trade and other receivables', 36), ('government subsidies receivable', 33), ('billed', 25)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('receivable', 100), ('trade receivables', 78), ('account receivables', 64), ('trade and other receivables', 55), ('government subsidies receivable', 50), ('unbilled', 40), ('billed', 29)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('receivable', 36), ('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('billed', 0), ('unbilled', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('trade and other receivables', 67), ('account receivables', 43), ('government subsidies receivable', 42), ('receivable', 33), ('trade receivables', 26), ('billed', 25), ('unbilled', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 5], 'score': 100, 'value': 23265701.0, 'line_item_label': ['Trade and other receivables', 'Current tax receivables'], 'note_numbers': ['10', '7'], 'line_item_value': [23265701.0, 0.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 76), (' related party receivables', 70), (' net trade debtors', 58), (' other debtors', 42), ('current', 29)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [('trade receivables', 78), (' share of joint venture receivables', 75), (' related party receivables', 67), (' other debtors', 58), ('current', 43), (' net trade debtors', 29)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 76), (' related party receivables', 70), (' net trade debtors', 58), (' other debtors', 42), ('current', 29)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [('trade receivables', 78), (' share of joint venture receivables', 75), (' related party receivables', 67), (' other debtors', 58), ('current', 43), (' net trade debtors', 29)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': [100, 100], 'value': [20803777.0, 12458361.0], 'label': [' Trade receivables', ' Trade receivables'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('revenue from operations', 43), (' Sale of coal', 38), (' Sales revenue', 35), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 22), (' Revenue', 22), ('net sales', 20), ('sale of products', 17), ('transmission and distribution business', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('sale of products', 22), ('net sales', 14), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Sale of coal', 100), ('net sales', 59), ('sale of products', 57), (' Sales revenue', 50), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('from trading business', 25), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('sale of products', 69), ('from trading business', 38), (' Sale of coal', 38), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('net sales', 32), ('transmission and distribution business', 31), ('revenue from operations', 24), (' Revenue', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Sale of coal', 61), ('sale of products', 46), ('net sales', 36), ('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('transmission and distribution business', 29), ('from trading business', 28), ('revenue from operations', 27), (' Sales revenue', 24), (' Revenue', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('sale of products', 33), ('from trading business', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 19), (' Sales revenue', 17), ('transmission and distribution business', 15), (' Revenue', 11), ('net sales', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 21), ('transmission and distribution business', 21), (' Revenue', 12), ('sale of products', 9), (' Sales revenue', 9)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), (' Revenue', 33), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('from trading business', 22), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), ('transmission and distribution business', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('transmission and distribution business', 53), (' Sales revenue', 44), ('sale of products', 36), ('revenue from operations', 32), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), (' Revenue', 30), ('net sales', 28), ('from trading business', 28), (' Sale of coal', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('transmission and distribution business', 41), (' Sales revenue', 37), (' Revenue', 36), ('revenue from operations', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('from trading business', 26), ('net sales', 25), (' Sale of coal', 24), ('sale of products', 14)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations', 68), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), ('from trading business', 43), ('sale of products', 24), (' Sales revenue', 24), (' Revenue', 21), (' Sale of coal', 19), ('transmission and distribution business', 16), ('net sales', 13)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), (' Sales revenue', 17), ('revenue from contracts with customers', 14), ('Revenue from contract with customers', 14), (' Revenue', 11), ('sale of products', 8)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('sale of products', 35), ('net sales', 32), ('from trading business', 31), (' Sale of coal', 30), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), (' Sales revenue', 18), ('revenue from operations', 15), (' Revenue', 12), ('transmission and distribution business', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal', 42), ('sale of products', 37), ('from trading business', 33), ('net sales', 26), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), ('revenue from operations', 19), ('transmission and distribution business', 19), (' Revenue', 10), (' Sales revenue', 8)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('revenue from operations', 32), (' Revenue', 29), ('from trading business', 27), (' Sale of coal', 25), ('transmission and distribution business', 23), (' Sales revenue', 23), ('net sales', 17), ('sale of products', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('net sales', 35), (' Sales revenue', 30), ('transmission and distribution business', 27), (' Sale of coal', 22), ('sale of products', 19), (' Revenue', 13), ('revenue from contracts with customers', 10), ('Revenue from contract with customers', 10), ('revenue from operations', 8), ('from trading business', 8)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('transmission and distribution business', 32), (' Sale of coal', 32), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('from trading business', 27), ('revenue from operations', 22), (' Revenue', 17), ('net sales', 16), ('sale of products', 15), (' Sales revenue', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('sale of products', 35), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('transmission and distribution business', 28), ('net sales', 27), (' Sales revenue', 24), (' Sale of coal', 19), (' Revenue', 14)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('sale of products', 29), ('transmission and distribution business', 27), (' Revenue', 27), ('net sales', 25), (' Sale of coal', 24), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), ('revenue from operations', 19)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('transmission and distribution business', 33), ('from trading business', 33), ('revenue from operations', 29), ('sale of products', 27), (' Sales revenue', 27), ('revenue from contracts with customers', 25), ('Revenue from contract with customers', 25), ('net sales', 24), (' Revenue', 21), (' Sale of coal', 14)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), (' Sale of coal', 26), ('transmission and distribution business', 16), ('net sales', 13)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('transmission and distribution business', 33), ('sale of products', 27), ('revenue from operations', 25), (' Sales revenue', 24), ('from trading business', 22), ('net sales', 21), (' Sale of coal', 21), (' Revenue', 18)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Sale of coal', 31), ('sale of products', 25), ('net sales', 17), (' Sales revenue', 13), ('transmission and distribution business', 12), ('revenue from contracts with customers', 11), ('from trading business', 11), ('Revenue from contract with customers', 11), ('revenue from operations', 10), (' Revenue', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('net sales', 32), ('transmission and distribution business', 32), ('revenue from operations', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('sale of products', 29), (' Revenue', 23), (' Sales revenue', 20), ('from trading business', 18), (' Sale of coal', 16)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('revenue from contracts with customers', 42), ('Revenue from contract with customers', 42), ('transmission and distribution business', 39), ('from trading business', 37), ('revenue from operations', 28), (' Sales revenue', 27), ('sale of products', 26), (' Sale of coal', 23), (' Revenue', 20), ('net sales', 19)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), (' Sales revenue', 36), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('transmission and distribution business', 32), ('net sales', 28), (' Revenue', 24), (' Sale of coal', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('sale of products', 38), ('from trading business', 36), (' Sales revenue', 35), ('revenue from operations', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('net sales', 28), (' Sale of coal', 27), (' Revenue', 20), ('transmission and distribution business', 19)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 116377997.0, 'line_item_label': ['Revenue', 'Sale of coal'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 116377997.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('revenue from operations', 43), (' Sale of coal', 38), (' Sales revenue', 35), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 22), (' Revenue', 22), ('net sales', 20), ('sale of products', 17), ('transmission and distribution business', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('sale of products', 22), ('net sales', 14), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Sale of coal', 100), ('net sales', 59), ('sale of products', 57), (' Sales revenue', 50), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('from trading business', 25), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('sale of products', 69), ('from trading business', 38), (' Sale of coal', 38), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('net sales', 32), ('transmission and distribution business', 31), ('revenue from operations', 24), (' Revenue', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Sale of coal', 61), ('sale of products', 46), ('net sales', 36), ('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('transmission and distribution business', 29), ('from trading business', 28), ('revenue from operations', 27), (' Sales revenue', 24), (' Revenue', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('sale of products', 33), ('from trading business', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 19), (' Sales revenue', 17), ('transmission and distribution business', 15), (' Revenue', 11), ('net sales', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 21), ('transmission and distribution business', 21), (' Revenue', 12), ('sale of products', 9), (' Sales revenue', 9)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), (' Revenue', 33), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('from trading business', 22), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), ('transmission and distribution business', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('transmission and distribution business', 53), (' Sales revenue', 44), ('sale of products', 36), ('revenue from operations', 32), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), (' Revenue', 30), ('net sales', 28), ('from trading business', 28), (' Sale of coal', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('transmission and distribution business', 41), (' Sales revenue', 37), (' Revenue', 36), ('revenue from operations', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('from trading business', 26), ('net sales', 25), (' Sale of coal', 24), ('sale of products', 14)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations', 68), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), ('from trading business', 43), ('sale of products', 24), (' Sales revenue', 24), (' Revenue', 21), (' Sale of coal', 19), ('transmission and distribution business', 16), ('net sales', 13)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), (' Sales revenue', 17), ('revenue from contracts with customers', 14), ('Revenue from contract with customers', 14), (' Revenue', 11), ('sale of products', 8)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('sale of products', 35), ('net sales', 32), ('from trading business', 31), (' Sale of coal', 30), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), (' Sales revenue', 18), ('revenue from operations', 15), (' Revenue', 12), ('transmission and distribution business', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal', 42), ('sale of products', 37), ('from trading business', 33), ('net sales', 26), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), ('revenue from operations', 19), ('transmission and distribution business', 19), (' Revenue', 10), (' Sales revenue', 8)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('revenue from operations', 32), (' Revenue', 29), ('from trading business', 27), (' Sale of coal', 25), ('transmission and distribution business', 23), (' Sales revenue', 23), ('net sales', 17), ('sale of products', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('net sales', 35), (' Sales revenue', 30), ('transmission and distribution business', 27), (' Sale of coal', 22), ('sale of products', 19), (' Revenue', 13), ('revenue from contracts with customers', 10), ('Revenue from contract with customers', 10), ('revenue from operations', 8), ('from trading business', 8)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('transmission and distribution business', 32), (' Sale of coal', 32), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('from trading business', 27), ('revenue from operations', 22), (' Revenue', 17), ('net sales', 16), ('sale of products', 15), (' Sales revenue', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('sale of products', 35), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('transmission and distribution business', 28), ('net sales', 27), (' Sales revenue', 24), (' Sale of coal', 19), (' Revenue', 14)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('sale of products', 29), ('transmission and distribution business', 27), (' Revenue', 27), ('net sales', 25), (' Sale of coal', 24), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), ('revenue from operations', 19)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('transmission and distribution business', 33), ('from trading business', 33), ('revenue from operations', 29), ('sale of products', 27), (' Sales revenue', 27), ('revenue from contracts with customers', 25), ('Revenue from contract with customers', 25), ('net sales', 24), (' Revenue', 21), (' Sale of coal', 14)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), (' Sale of coal', 26), ('transmission and distribution business', 16), ('net sales', 13)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('transmission and distribution business', 33), ('sale of products', 27), ('revenue from operations', 25), (' Sales revenue', 24), ('from trading business', 22), ('net sales', 21), (' Sale of coal', 21), (' Revenue', 18)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Sale of coal', 31), ('sale of products', 25), ('net sales', 17), (' Sales revenue', 13), ('transmission and distribution business', 12), ('revenue from contracts with customers', 11), ('from trading business', 11), ('Revenue from contract with customers', 11), ('revenue from operations', 10), (' Revenue', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('net sales', 32), ('transmission and distribution business', 32), ('revenue from operations', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('sale of products', 29), (' Revenue', 23), (' Sales revenue', 20), ('from trading business', 18), (' Sale of coal', 16)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('revenue from contracts with customers', 42), ('Revenue from contract with customers', 42), ('transmission and distribution business', 39), ('from trading business', 37), ('revenue from operations', 28), (' Sales revenue', 27), ('sale of products', 26), (' Sale of coal', 23), (' Revenue', 20), ('net sales', 19)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), (' Sales revenue', 36), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('transmission and distribution business', 32), ('net sales', 28), (' Revenue', 24), (' Sale of coal', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('sale of products', 38), ('from trading business', 36), (' Sales revenue', 35), ('revenue from operations', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('net sales', 28), (' Sale of coal', 27), (' Revenue', 20), ('transmission and distribution business', 19)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 256646599.0, 'line_item_label': ['Revenue', 'Sale of coal'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 256646599.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' Cost of goods and services sold', 38), ('purchase of stock-in-trade', 32), (' cost of coal sold', 31), ('expenditure', 27), ('expense', 22), ('total expenditure', 21), ('total expenses', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('cost of sales', 13), ('Cost of sales', 13), ('purchase of stock-in-trade', 8), (' Cost of goods and services sold', 6), (' cost of coal sold', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('cost of sales', 78), ('Cost of sales', 78), (' cost of coal sold', 61), (' Cost of product sold', 38), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), (' Personnel costs', 35), ('total expenses', 29), (' Cost of goods and services sold', 29), ('total expenditure', 24), ('expense', 13), ('expenditure', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' Cost of product sold', 100), (' Personnel costs', 65), (' Cost of goods and services sold', 62), (' Cost of inventory sold', 61), (' cost of coal sold', 58), ('cost of sales', 54), ('Cost of sales', 54), ('purchase of stock-in-trade', 39), ('total expenditure', 36), ('total expenses', 28), ('expenditure', 22), ('expense', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' cost of coal sold', 100), ('cost of sales', 61), ('Cost of sales', 61), (' Cost of product sold', 58), (' Personnel costs', 57), (' Cost of goods and services sold', 56), (' Cost of inventory sold', 55), ('purchase of stock-in-trade', 42), ('total expenses', 23), ('total expenditure', 20), ('expense', 10), ('expenditure', 8)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' cost of coal sold', 23), ('total expenditure', 21), (' Cost of inventory sold', 19), (' Cost of goods and services sold', 16), ('expense', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), ('total expenses', 35), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27), ('expenditure', 19), ('expense', 12)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of inventory sold', 26), (' Personnel costs', 23), (' Cost of product sold', 21), (' cost of coal sold', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('total expenses', 48), (' Personnel costs', 46), ('expense', 44), (' Cost of product sold', 42), (' Cost of inventory sold', 40), ('total expenditure', 38), (' Cost of goods and services sold', 35), ('cost of sales', 33), ('Cost of sales', 33), ('expenditure', 32), (' cost of coal sold', 29), ('purchase of stock-in-trade', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 23)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Personnel costs', 44), (' Cost of goods and services sold', 43), (' Cost of product sold', 36), ('total expenditure', 26), ('cost of sales', 26), ('Cost of sales', 26), ('total expenses', 24), (' cost of coal sold', 22), ('expense', 21), (' Cost of inventory sold', 20), ('expenditure', 19), ('purchase of stock-in-trade', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of inventory sold', 32), (' Cost of goods and services sold', 27), ('total expenses', 25), ('total expenditure', 21), ('purchase of stock-in-trade', 19), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), (' cost of coal sold', 15), (' Personnel costs', 15), (' Cost of product sold', 14), ('expense', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 17), ('total expenditure', 15), ('expense', 12), ('expenditure', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of product sold', 44), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('expenditure', 16), ('total expenses', 15), ('total expenditure', 13), ('expense', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('purchase of stock-in-trade', 41), ('expense', 38), ('expenditure', 32), ('total expenses', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), ('total expenditure', 26), ('cost of sales', 25), ('Cost of sales', 25), (' Cost of goods and services sold', 25), (' Cost of product sold', 19), (' cost of coal sold', 14)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' cost of coal sold', 43), (' Cost of goods and services sold', 35), ('cost of sales', 33), ('Cost of sales', 33), ('expense', 27), (' Personnel costs', 26), ('total expenditure', 24), (' Cost of product sold', 23), ('purchase of stock-in-trade', 21), (' Cost of inventory sold', 21), ('total expenses', 19), ('expenditure', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('total expenses', 34), (' cost of coal sold', 33), ('expenditure', 31), ('expense', 29), (' Personnel costs', 28), ('total expenditure', 27), ('purchase of stock-in-trade', 25), (' Cost of goods and services sold', 22), ('cost of sales', 21), ('Cost of sales', 21), (' Cost of product sold', 17), (' Cost of inventory sold', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), ('total expenditure', 37), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('purchase of stock-in-trade', 29), ('total expenses', 29), (' Cost of inventory sold', 29), ('expenditure', 25), (' Personnel costs', 22), (' Cost of goods and services sold', 21), ('expense', 14)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of inventory sold', 29), (' Cost of goods and services sold', 24), (' cost of coal sold', 20), (' Personnel costs', 20), (' Cost of product sold', 18)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('total expenses', 49), ('total expenditure', 41), (' Cost of product sold', 36), (' Cost of inventory sold', 35), ('expenditure', 33), ('purchase of stock-in-trade', 31), ('expense', 31), (' Cost of goods and services sold', 31), (' Personnel costs', 30), (' cost of coal sold', 26), ('cost of sales', 24), ('Cost of sales', 24)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), ('total expenses', 41), (' Cost of inventory sold', 39), ('expenditure', 38), ('total expenditure', 37), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of product sold', 31), ('expense', 29), (' Cost of goods and services sold', 26)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Cost of product sold', 29), (' Cost of goods and services sold', 28), ('total expenses', 27), (' Cost of inventory sold', 24), (' Personnel costs', 23), ('total expenditure', 22), ('cost of sales', 21), ('Cost of sales', 21), ('expense', 18), ('purchase of stock-in-trade', 17), (' cost of coal sold', 15), ('expenditure', 12)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('cost of sales', 46), ('Cost of sales', 46), (' cost of coal sold', 44), (' Personnel costs', 33), (' Cost of product sold', 29), (' Cost of inventory sold', 26), (' Cost of goods and services sold', 21), ('expense', 20), ('purchase of stock-in-trade', 17), ('total expenses', 12), ('total expenditure', 10), ('expenditure', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' Cost of inventory sold', 38), ('expenditure', 31), ('total expenses', 29), ('total expenditure', 27), (' Cost of goods and services sold', 26), ('expense', 23), (' cost of coal sold', 23), (' Personnel costs', 23), (' Cost of product sold', 22), ('cost of sales', 21), ('Cost of sales', 21), ('purchase of stock-in-trade', 8)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('total expenditure', 44), ('total expenses', 43), ('expenditure', 36), ('expense', 30), (' Cost of goods and services sold', 24), ('cost of sales', 23), ('Cost of sales', 23), (' Cost of inventory sold', 23), (' cost of coal sold', 21), (' Personnel costs', 17), (' Cost of product sold', 16), ('purchase of stock-in-trade', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('total expenditure', 55), ('total expenses', 50), (' Cost of inventory sold', 43), (' Cost of product sold', 40), ('purchase of stock-in-trade', 38), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), (' Cost of goods and services sold', 34), ('expenditure', 32), ('expense', 24), (' cost of coal sold', 19)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' Cost of product sold', 38), (' Cost of inventory sold', 37), ('cost of sales', 36), ('Cost of sales', 36), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 30), (' Personnel costs', 29), ('expenditure', 27), ('expense', 20), (' cost of coal sold', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': -70764509.0, 'line_item_label': ['Cost of product sold', 'Cost of coal sold'], 'note_numbers': [nan, '4'], 'line_item_value': [0.0, -70764509.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' Cost of goods and services sold', 38), ('purchase of stock-in-trade', 32), (' cost of coal sold', 31), ('expenditure', 27), ('expense', 22), ('total expenditure', 21), ('total expenses', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('cost of sales', 13), ('Cost of sales', 13), ('purchase of stock-in-trade', 8), (' Cost of goods and services sold', 6), (' cost of coal sold', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('cost of sales', 78), ('Cost of sales', 78), (' cost of coal sold', 61), (' Cost of product sold', 38), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), (' Personnel costs', 35), ('total expenses', 29), (' Cost of goods and services sold', 29), ('total expenditure', 24), ('expense', 13), ('expenditure', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' Cost of product sold', 100), (' Personnel costs', 65), (' Cost of goods and services sold', 62), (' Cost of inventory sold', 61), (' cost of coal sold', 58), ('cost of sales', 54), ('Cost of sales', 54), ('purchase of stock-in-trade', 39), ('total expenditure', 36), ('total expenses', 28), ('expenditure', 22), ('expense', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' cost of coal sold', 100), ('cost of sales', 61), ('Cost of sales', 61), (' Cost of product sold', 58), (' Personnel costs', 57), (' Cost of goods and services sold', 56), (' Cost of inventory sold', 55), ('purchase of stock-in-trade', 42), ('total expenses', 23), ('total expenditure', 20), ('expense', 10), ('expenditure', 8)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' cost of coal sold', 23), ('total expenditure', 21), (' Cost of inventory sold', 19), (' Cost of goods and services sold', 16), ('expense', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), ('total expenses', 35), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27), ('expenditure', 19), ('expense', 12)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of inventory sold', 26), (' Personnel costs', 23), (' Cost of product sold', 21), (' cost of coal sold', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('total expenses', 48), (' Personnel costs', 46), ('expense', 44), (' Cost of product sold', 42), (' Cost of inventory sold', 40), ('total expenditure', 38), (' Cost of goods and services sold', 35), ('cost of sales', 33), ('Cost of sales', 33), ('expenditure', 32), (' cost of coal sold', 29), ('purchase of stock-in-trade', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 23)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Personnel costs', 44), (' Cost of goods and services sold', 43), (' Cost of product sold', 36), ('total expenditure', 26), ('cost of sales', 26), ('Cost of sales', 26), ('total expenses', 24), (' cost of coal sold', 22), ('expense', 21), (' Cost of inventory sold', 20), ('expenditure', 19), ('purchase of stock-in-trade', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of inventory sold', 32), (' Cost of goods and services sold', 27), ('total expenses', 25), ('total expenditure', 21), ('purchase of stock-in-trade', 19), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), (' cost of coal sold', 15), (' Personnel costs', 15), (' Cost of product sold', 14), ('expense', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 17), ('total expenditure', 15), ('expense', 12), ('expenditure', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of product sold', 44), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('expenditure', 16), ('total expenses', 15), ('total expenditure', 13), ('expense', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('purchase of stock-in-trade', 41), ('expense', 38), ('expenditure', 32), ('total expenses', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), ('total expenditure', 26), ('cost of sales', 25), ('Cost of sales', 25), (' Cost of goods and services sold', 25), (' Cost of product sold', 19), (' cost of coal sold', 14)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' cost of coal sold', 43), (' Cost of goods and services sold', 35), ('cost of sales', 33), ('Cost of sales', 33), ('expense', 27), (' Personnel costs', 26), ('total expenditure', 24), (' Cost of product sold', 23), ('purchase of stock-in-trade', 21), (' Cost of inventory sold', 21), ('total expenses', 19), ('expenditure', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('total expenses', 34), (' cost of coal sold', 33), ('expenditure', 31), ('expense', 29), (' Personnel costs', 28), ('total expenditure', 27), ('purchase of stock-in-trade', 25), (' Cost of goods and services sold', 22), ('cost of sales', 21), ('Cost of sales', 21), (' Cost of product sold', 17), (' Cost of inventory sold', 17)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), ('total expenditure', 37), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('purchase of stock-in-trade', 29), ('total expenses', 29), (' Cost of inventory sold', 29), ('expenditure', 25), (' Personnel costs', 22), (' Cost of goods and services sold', 21), ('expense', 14)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of inventory sold', 29), (' Cost of goods and services sold', 24), (' cost of coal sold', 20), (' Personnel costs', 20), (' Cost of product sold', 18)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('total expenses', 49), ('total expenditure', 41), (' Cost of product sold', 36), (' Cost of inventory sold', 35), ('expenditure', 33), ('purchase of stock-in-trade', 31), ('expense', 31), (' Cost of goods and services sold', 31), (' Personnel costs', 30), (' cost of coal sold', 26), ('cost of sales', 24), ('Cost of sales', 24)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), ('total expenses', 41), (' Cost of inventory sold', 39), ('expenditure', 38), ('total expenditure', 37), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of product sold', 31), ('expense', 29), (' Cost of goods and services sold', 26)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Cost of product sold', 29), (' Cost of goods and services sold', 28), ('total expenses', 27), (' Cost of inventory sold', 24), (' Personnel costs', 23), ('total expenditure', 22), ('cost of sales', 21), ('Cost of sales', 21), ('expense', 18), ('purchase of stock-in-trade', 17), (' cost of coal sold', 15), ('expenditure', 12)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('cost of sales', 46), ('Cost of sales', 46), (' cost of coal sold', 44), (' Personnel costs', 33), (' Cost of product sold', 29), (' Cost of inventory sold', 26), (' Cost of goods and services sold', 21), ('expense', 20), ('purchase of stock-in-trade', 17), ('total expenses', 12), ('total expenditure', 10), ('expenditure', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' Cost of inventory sold', 38), ('expenditure', 31), ('total expenses', 29), ('total expenditure', 27), (' Cost of goods and services sold', 26), ('expense', 23), (' cost of coal sold', 23), (' Personnel costs', 23), (' Cost of product sold', 22), ('cost of sales', 21), ('Cost of sales', 21), ('purchase of stock-in-trade', 8)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('total expenditure', 44), ('total expenses', 43), ('expenditure', 36), ('expense', 30), (' Cost of goods and services sold', 24), ('cost of sales', 23), ('Cost of sales', 23), (' Cost of inventory sold', 23), (' cost of coal sold', 21), (' Personnel costs', 17), (' Cost of product sold', 16), ('purchase of stock-in-trade', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('total expenditure', 55), ('total expenses', 50), (' Cost of inventory sold', 43), (' Cost of product sold', 40), ('purchase of stock-in-trade', 38), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), (' Cost of goods and services sold', 34), ('expenditure', 32), ('expense', 24), (' cost of coal sold', 19)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' Cost of product sold', 38), (' Cost of inventory sold', 37), ('cost of sales', 36), ('Cost of sales', 36), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 30), (' Personnel costs', 29), ('expenditure', 27), ('expense', 20), (' cost of coal sold', 20)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': -86129151.0, 'line_item_label': ['Cost of product sold', 'Cost of coal sold'], 'note_numbers': [nan, '4'], 'line_item_value': [0.0, -86129151.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['Included in cost of sales'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = amortisation & depreciation , res_fuzz_match = [('Included in cost of sales', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = changes in finished products inventory , res_fuzz_match = [('Included in cost of sales', 31)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = contractors , res_fuzz_match = [('Included in cost of sales', 42)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = railing , res_fuzz_match = [('Included in cost of sales', 50)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = equipment leasing - joint venture , res_fuzz_match = [('Included in cost of sales', 38)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = explosives , res_fuzz_match = [('Included in cost of sales', 33)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = fuel and oil , res_fuzz_match = [('Included in cost of sales', 42)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = port charges , res_fuzz_match = [('Included in cost of sales', 42)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = royalties , res_fuzz_match = [('Included in cost of sales', 31)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other cost , res_fuzz_match = [('Included in cost of sales', 50)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = administration expenses , res_fuzz_match = [('Included in cost of sales', 41)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = amortisation & depreciation , res_fuzz_match = [('Included in cost of sales', 22)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = changes in finished products inventory , res_fuzz_match = [('Included in cost of sales', 31)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = contractors , res_fuzz_match = [('Included in cost of sales', 42)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = railing , res_fuzz_match = [('Included in cost of sales', 50)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = equipment leasing - joint venture , res_fuzz_match = [('Included in cost of sales', 38)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = explosives , res_fuzz_match = [('Included in cost of sales', 33)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = fuel and oil , res_fuzz_match = [('Included in cost of sales', 42)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = port charges , res_fuzz_match = [('Included in cost of sales', 42)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = royalties , res_fuzz_match = [('Included in cost of sales', 31)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = other cost , res_fuzz_match = [('Included in cost of sales', 50)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows = administration expenses , res_fuzz_match = [('Included in cost of sales', 41)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:19+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-04-23 13:58:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), (' Depreciation expenses', 38), (' Depreciation expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Administrative and other expenses', 32), (' Selling & distribution expenses', 30), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Sales and marketing', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Occupancy expenses', 17), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Advertising expenses', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15), (' Sales and marketing', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 30), (' Selling Expenses', 30), (' Logistics and distribution', 28), (' Amortisation expenses', 26), (' Administrative expenses', 24), (' Administration expenses', 24), (' Administrative and other expenses', 23), (' Selling & distribution expenses', 20), (' Advertising expenses', 17), ('Distribution expenses', 16), (' Occupancy ', 14), (' depreciation', 12), ('other expenses', 10), (' Occupancy expenses', 10), (' Other expenses', 10), (' Management expenses', 10), (' Other expenses', 10), (' Marketing expenses', 9), (' Depreciation expenses', 9), (' Depreciation expenses', 9)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('Distribution expenses', 42), (' Selling & distribution expenses', 42), (' Logistics and distribution', 38), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Selling Expenses', 29), (' Amortisation expenses', 26), (' depreciation', 25), (' Administrative and other expenses', 23), ('other expenses', 21), (' Occupancy expenses', 21), (' Other expenses', 21), (' Lease expenses', 21), (' Other expenses', 21), (' Advertising expenses', 19), (' Occupancy ', 18), (' Management expenses', 14), (' Marketing expenses', 13)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Sales and marketing', 41), (' Logistics and distribution', 35), (' Administrative expenses', 33), (' Administration expenses', 33), (' Selling Expenses', 32), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), ('Distribution expenses', 27), (' Administrative and other expenses', 25), (' Lease expenses', 24), ('other expenses', 23), (' Occupancy expenses', 23), (' Other expenses', 23), (' Other expenses', 23), (' Occupancy ', 21), (' Marketing expenses', 15), (' Management expenses', 15), (' Advertising expenses', 14), (' depreciation', 10), (' Depreciation expenses', 7), (' Depreciation expenses', 7)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Logistics and distribution', 19), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), ('Distribution expenses', 14), (' Administrative expenses', 14), (' Administration expenses', 14)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Administrative expenses', 30), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Amortisation expenses', 24), (' Sales and marketing', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Selling & distribution expenses', 19), (' Marketing expenses', 17), (' Depreciation expenses', 16), (' Depreciation expenses', 16), (' Advertising expenses', 15), (' Occupancy ', 12), (' Lease expenses', 9), (' Selling Expenses', 9), (' Management expenses', 9)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 25), (' Sales and marketing', 22), (' Occupancy ', 12)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' Selling & distribution expenses', 100), ('Distribution expenses', 86), (' Selling Expenses', 69), (' Administrative expenses', 65), (' Administration expenses', 65), (' Administrative and other expenses', 60), (' Depreciation expenses', 57), (' Depreciation expenses', 57), (' Advertising expenses', 56), (' Logistics and distribution', 54), (' Amortisation expenses', 51), (' Lease expenses', 50), ('other expenses', 48), (' Other expenses', 48), (' Other expenses', 48), (' Marketing expenses', 47), (' Occupancy expenses', 42), (' Management expenses', 42), (' Sales and marketing', 33), (' depreciation', 29), (' Occupancy ', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' depreciation', 35), (' Sales and marketing', 32), (' Occupancy ', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), (' Administrative and other expenses', 29), (' Advertising expenses', 27), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), (' Other expenses', 24), (' Marketing expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Management expenses', 18), (' Occupancy ', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Amortisation expenses', 15), (' Occupancy ', 12)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Distribution expenses', 30), (' Management expenses', 26), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' depreciation', 22), (' Administrative expenses', 22), (' Administrative and other expenses', 22), (' Administration expenses', 22), (' Lease expenses', 18), (' Marketing expenses', 17), (' Occupancy expenses', 17), (' Amortisation expenses', 16), (' Advertising expenses', 15), (' Sales and marketing', 15), (' Logistics and distribution', 13), ('other expenses', 9), (' Other expenses', 9), (' Selling Expenses', 9), (' Other expenses', 9)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses', 34), (' Sales and marketing', 33), (' Marketing expenses', 29), ('Distribution expenses', 26), (' Logistics and distribution', 23), (' Selling & distribution expenses', 22), (' Management expenses', 22), (' Occupancy ', 20), (' Advertising expenses', 20), (' Administrative expenses', 19), (' Administration expenses', 19), ('other expenses', 15), (' Other expenses', 15), (' Other expenses', 15), (' Amortisation expenses', 14), (' depreciation', 9), (' Lease expenses', 8), (' Selling Expenses', 8), (' Occupancy expenses', 7), (' Depreciation expenses', 7), (' Depreciation expenses', 7)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' Management expenses', 37), (' depreciation', 36), (' Depreciation expenses', 34), (' Depreciation expenses', 34), (' Amortisation expenses', 34), (' Sales and marketing', 33), (' Lease expenses', 31), (' Selling Expenses', 31), ('other expenses', 30), (' Occupancy expenses', 30), (' Other expenses', 30), (' Other expenses', 30), (' Marketing expenses', 29), (' Logistics and distribution', 29), (' Advertising expenses', 27), ('Distribution expenses', 26), (' Administrative expenses', 26), (' Administration expenses', 26), (' Administrative and other expenses', 24), (' Selling & distribution expenses', 22), (' Occupancy ', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' Logistics and distribution', 41), (' Administrative expenses', 40), (' Lease expenses', 40), (' Administration expenses', 40), (' Amortisation expenses', 35), (' Advertising expenses', 33), (' Sales and marketing', 33), (' Selling Expenses', 30), (' Administrative and other expenses', 29), (' Depreciation expenses', 26), (' Depreciation expenses', 26), ('Distribution expenses', 24), (' Selling & distribution expenses', 20), ('other expenses', 19), (' Occupancy expenses', 19), (' Other expenses', 19), (' Management expenses', 19), (' Other expenses', 19), (' Marketing expenses', 18), (' Occupancy ', 14), (' depreciation', 12)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' Logistics and distribution', 41), (' Marketing expenses', 38), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 34), (' Other expenses', 34), (' Management expenses', 34), (' Other expenses', 34), (' Amortisation expenses', 33), (' Occupancy expenses', 29), (' Depreciation expenses', 28), (' Selling & distribution expenses', 28), (' Depreciation expenses', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), (' Administrative and other expenses', 25), (' depreciation', 22), ('Distribution expenses', 22), (' Administrative expenses', 22), (' Administration expenses', 22), (' Occupancy ', 6)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Depreciation expenses', 33), (' Depreciation expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), (' Administrative and other expenses', 29), (' Logistics and distribution', 29), (' depreciation', 28), (' Selling & distribution expenses', 28), (' Amortisation expenses', 28), (' Occupancy ', 22), ('other expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Lease expenses', 12), (' Selling Expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Marketing expenses', 11), (' Advertising expenses', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Occupancy ', 10), (' Logistics and distribution', 6), (' Sales and marketing', 6)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Administrative and other expenses', 47), ('other expenses', 44), (' Other expenses', 44), (' Other expenses', 44), (' Marketing expenses', 43), (' Advertising expenses', 42), (' Administrative expenses', 41), (' Selling & distribution expenses', 41), (' Lease expenses', 41), (' Administration expenses', 41), (' Occupancy expenses', 40), (' Management expenses', 40), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Amortisation expenses', 38), ('Distribution expenses', 37), (' Selling Expenses', 36), (' Logistics and distribution', 34), (' Sales and marketing', 33), (' depreciation', 20), (' Occupancy ', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' depreciation', 28), ('Distribution expenses', 26), (' Logistics and distribution', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), (' Occupancy ', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Selling & distribution expenses', 37), (' Logistics and distribution', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Sales and marketing', 30), ('Distribution expenses', 29), (' Selling Expenses', 28), ('other expenses', 27), (' Marketing expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' depreciation', 26), (' Occupancy expenses', 24), (' Lease expenses', 24), (' Administrative and other expenses', 22), (' Management expenses', 20), (' Administrative expenses', 18), (' Administration expenses', 18), (' Amortisation expenses', 15), (' Occupancy ', 14), (' Advertising expenses', 11)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Amortisation expenses', 33), (' Lease expenses', 27), (' Selling Expenses', 27), (' Logistics and distribution', 25), (' Occupancy ', 22), (' Advertising expenses', 21), ('Distribution expenses', 20), (' Administrative expenses', 20), (' Administration expenses', 20), (' Selling & distribution expenses', 16), (' Administrative and other expenses', 13), ('other expenses', 12), (' Marketing expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Depreciation expenses', 11), (' Depreciation expenses', 11), (' Sales and marketing', 11), (' depreciation', 0)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('Distribution expenses', 49), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 44), (' Logistics and distribution', 41), (' Administrative expenses', 40), (' Lease expenses', 40), (' Administration expenses', 40), (' Marketing expenses', 38), (' Advertising expenses', 36), ('other expenses', 34), (' Other expenses', 34), (' Management expenses', 34), (' Other expenses', 34), (' Amortisation expenses', 33), (' Sales and marketing', 32), (' Selling Expenses', 30), (' Occupancy expenses', 29), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' depreciation', 22), (' Occupancy ', 12)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Selling & distribution expenses', 55), ('Distribution expenses', 52), (' Marketing expenses', 47), (' Lease expenses', 44), (' Administrative and other expenses', 43), (' Management expenses', 43), (' Amortisation expenses', 42), (' Advertising expenses', 41), (' Logistics and distribution', 41), (' Administrative expenses', 40), (' Administration expenses', 40), ('other expenses', 39), (' Occupancy expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Selling Expenses', 36), (' Sales and marketing', 24), (' depreciation', 20), (' Occupancy ', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('other expenses', 50), (' Other expenses', 50), (' Other expenses', 50), (' Administrative and other expenses', 44), (' Selling Expenses', 36), (' Management expenses', 35), (' Marketing expenses', 34), (' Selling & distribution expenses', 33), (' Sales and marketing', 33), (' Lease expenses', 31), (' Occupancy expenses', 30), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Administrative expenses', 27), (' Administration expenses', 27), (' depreciation', 23), ('Distribution expenses', 23), (' Advertising expenses', 19), (' Occupancy ', 12), (' Logistics and distribution', 8)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other expenses', 43), (' Other expenses', 43), (' Other expenses', 43), (' Administrative and other expenses', 39), (' Lease expenses', 35), (' Management expenses', 34), (' Marketing expenses', 33), (' Occupancy expenses', 30), (' Selling Expenses', 30), (' Selling & distribution expenses', 29), (' Administrative expenses', 24), (' Depreciation expenses', 24), (' Administration expenses', 24), (' Depreciation expenses', 24), (' Amortisation expenses', 24), ('Distribution expenses', 20), (' depreciation', 19), (' Advertising expenses', 16), (' Sales and marketing', 16), (' Logistics and distribution', 11), (' Occupancy ', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 8, 9], 'score': 100, 'value': -9141972.0, 'line_item_label': ['Other expenses', 'Selling & distribution expenses', 'Administration expenses'], 'note_numbers': [nan, nan, '5'], 'line_item_value': [0.0, -1686525.0, -7455447.0]}
2023-04-23 13:58:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:19+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), (' Depreciation expenses', 38), (' Depreciation expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Administrative and other expenses', 32), (' Selling & distribution expenses', 30), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Sales and marketing', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Occupancy expenses', 17), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Advertising expenses', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15), (' Sales and marketing', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 30), (' Selling Expenses', 30), (' Logistics and distribution', 28), (' Amortisation expenses', 26), (' Administrative expenses', 24), (' Administration expenses', 24), (' Administrative and other expenses', 23), (' Selling & distribution expenses', 20), (' Advertising expenses', 17), ('Distribution expenses', 16), (' Occupancy ', 14), (' depreciation', 12), ('other expenses', 10), (' Occupancy expenses', 10), (' Other expenses', 10), (' Management expenses', 10), (' Other expenses', 10), (' Marketing expenses', 9), (' Depreciation expenses', 9), (' Depreciation expenses', 9)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('Distribution expenses', 42), (' Selling & distribution expenses', 42), (' Logistics and distribution', 38), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Selling Expenses', 29), (' Amortisation expenses', 26), (' depreciation', 25), (' Administrative and other expenses', 23), ('other expenses', 21), (' Occupancy expenses', 21), (' Other expenses', 21), (' Lease expenses', 21), (' Other expenses', 21), (' Advertising expenses', 19), (' Occupancy ', 18), (' Management expenses', 14), (' Marketing expenses', 13)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Sales and marketing', 41), (' Logistics and distribution', 35), (' Administrative expenses', 33), (' Administration expenses', 33), (' Selling Expenses', 32), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), ('Distribution expenses', 27), (' Administrative and other expenses', 25), (' Lease expenses', 24), ('other expenses', 23), (' Occupancy expenses', 23), (' Other expenses', 23), (' Other expenses', 23), (' Occupancy ', 21), (' Marketing expenses', 15), (' Management expenses', 15), (' Advertising expenses', 14), (' depreciation', 10), (' Depreciation expenses', 7), (' Depreciation expenses', 7)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Logistics and distribution', 19), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), ('Distribution expenses', 14), (' Administrative expenses', 14), (' Administration expenses', 14)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Administrative expenses', 30), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Amortisation expenses', 24), (' Sales and marketing', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Selling & distribution expenses', 19), (' Marketing expenses', 17), (' Depreciation expenses', 16), (' Depreciation expenses', 16), (' Advertising expenses', 15), (' Occupancy ', 12), (' Lease expenses', 9), (' Selling Expenses', 9), (' Management expenses', 9)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 25), (' Sales and marketing', 22), (' Occupancy ', 12)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' Selling & distribution expenses', 100), ('Distribution expenses', 86), (' Selling Expenses', 69), (' Administrative expenses', 65), (' Administration expenses', 65), (' Administrative and other expenses', 60), (' Depreciation expenses', 57), (' Depreciation expenses', 57), (' Advertising expenses', 56), (' Logistics and distribution', 54), (' Amortisation expenses', 51), (' Lease expenses', 50), ('other expenses', 48), (' Other expenses', 48), (' Other expenses', 48), (' Marketing expenses', 47), (' Occupancy expenses', 42), (' Management expenses', 42), (' Sales and marketing', 33), (' depreciation', 29), (' Occupancy ', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' depreciation', 35), (' Sales and marketing', 32), (' Occupancy ', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), (' Administrative and other expenses', 29), (' Advertising expenses', 27), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), (' Other expenses', 24), (' Marketing expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Management expenses', 18), (' Occupancy ', 15)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Amortisation expenses', 15), (' Occupancy ', 12)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Distribution expenses', 30), (' Management expenses', 26), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' depreciation', 22), (' Administrative expenses', 22), (' Administrative and other expenses', 22), (' Administration expenses', 22), (' Lease expenses', 18), (' Marketing expenses', 17), (' Occupancy expenses', 17), (' Amortisation expenses', 16), (' Advertising expenses', 15), (' Sales and marketing', 15), (' Logistics and distribution', 13), ('other expenses', 9), (' Other expenses', 9), (' Selling Expenses', 9), (' Other expenses', 9)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses', 34), (' Sales and marketing', 33), (' Marketing expenses', 29), ('Distribution expenses', 26), (' Logistics and distribution', 23), (' Selling & distribution expenses', 22), (' Management expenses', 22), (' Occupancy ', 20), (' Advertising expenses', 20), (' Administrative expenses', 19), (' Administration expenses', 19), ('other expenses', 15), (' Other expenses', 15), (' Other expenses', 15), (' Amortisation expenses', 14), (' depreciation', 9), (' Lease expenses', 8), (' Selling Expenses', 8), (' Occupancy expenses', 7), (' Depreciation expenses', 7), (' Depreciation expenses', 7)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' Management expenses', 37), (' depreciation', 36), (' Depreciation expenses', 34), (' Depreciation expenses', 34), (' Amortisation expenses', 34), (' Sales and marketing', 33), (' Lease expenses', 31), (' Selling Expenses', 31), ('other expenses', 30), (' Occupancy expenses', 30), (' Other expenses', 30), (' Other expenses', 30), (' Marketing expenses', 29), (' Logistics and distribution', 29), (' Advertising expenses', 27), ('Distribution expenses', 26), (' Administrative expenses', 26), (' Administration expenses', 26), (' Administrative and other expenses', 24), (' Selling & distribution expenses', 22), (' Occupancy ', 10)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' Logistics and distribution', 41), (' Administrative expenses', 40), (' Lease expenses', 40), (' Administration expenses', 40), (' Amortisation expenses', 35), (' Advertising expenses', 33), (' Sales and marketing', 33), (' Selling Expenses', 30), (' Administrative and other expenses', 29), (' Depreciation expenses', 26), (' Depreciation expenses', 26), ('Distribution expenses', 24), (' Selling & distribution expenses', 20), ('other expenses', 19), (' Occupancy expenses', 19), (' Other expenses', 19), (' Management expenses', 19), (' Other expenses', 19), (' Marketing expenses', 18), (' Occupancy ', 14), (' depreciation', 12)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' Logistics and distribution', 41), (' Marketing expenses', 38), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 34), (' Other expenses', 34), (' Management expenses', 34), (' Other expenses', 34), (' Amortisation expenses', 33), (' Occupancy expenses', 29), (' Depreciation expenses', 28), (' Selling & distribution expenses', 28), (' Depreciation expenses', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), (' Administrative and other expenses', 25), (' depreciation', 22), ('Distribution expenses', 22), (' Administrative expenses', 22), (' Administration expenses', 22), (' Occupancy ', 6)]
2023-04-23 13:58:19+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Depreciation expenses', 33), (' Depreciation expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), (' Administrative and other expenses', 29), (' Logistics and distribution', 29), (' depreciation', 28), (' Selling & distribution expenses', 28), (' Amortisation expenses', 28), (' Occupancy ', 22), ('other expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Lease expenses', 12), (' Selling Expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Marketing expenses', 11), (' Advertising expenses', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Occupancy ', 10), (' Logistics and distribution', 6), (' Sales and marketing', 6)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Administrative and other expenses', 47), ('other expenses', 44), (' Other expenses', 44), (' Other expenses', 44), (' Marketing expenses', 43), (' Advertising expenses', 42), (' Administrative expenses', 41), (' Selling & distribution expenses', 41), (' Lease expenses', 41), (' Administration expenses', 41), (' Occupancy expenses', 40), (' Management expenses', 40), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Amortisation expenses', 38), ('Distribution expenses', 37), (' Selling Expenses', 36), (' Logistics and distribution', 34), (' Sales and marketing', 33), (' depreciation', 20), (' Occupancy ', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' depreciation', 28), ('Distribution expenses', 26), (' Logistics and distribution', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), (' Occupancy ', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Selling & distribution expenses', 37), (' Logistics and distribution', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Sales and marketing', 30), ('Distribution expenses', 29), (' Selling Expenses', 28), ('other expenses', 27), (' Marketing expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' depreciation', 26), (' Occupancy expenses', 24), (' Lease expenses', 24), (' Administrative and other expenses', 22), (' Management expenses', 20), (' Administrative expenses', 18), (' Administration expenses', 18), (' Amortisation expenses', 15), (' Occupancy ', 14), (' Advertising expenses', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Amortisation expenses', 33), (' Lease expenses', 27), (' Selling Expenses', 27), (' Logistics and distribution', 25), (' Occupancy ', 22), (' Advertising expenses', 21), ('Distribution expenses', 20), (' Administrative expenses', 20), (' Administration expenses', 20), (' Selling & distribution expenses', 16), (' Administrative and other expenses', 13), ('other expenses', 12), (' Marketing expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Depreciation expenses', 11), (' Depreciation expenses', 11), (' Sales and marketing', 11), (' depreciation', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('Distribution expenses', 49), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 44), (' Logistics and distribution', 41), (' Administrative expenses', 40), (' Lease expenses', 40), (' Administration expenses', 40), (' Marketing expenses', 38), (' Advertising expenses', 36), ('other expenses', 34), (' Other expenses', 34), (' Management expenses', 34), (' Other expenses', 34), (' Amortisation expenses', 33), (' Sales and marketing', 32), (' Selling Expenses', 30), (' Occupancy expenses', 29), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' depreciation', 22), (' Occupancy ', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Selling & distribution expenses', 55), ('Distribution expenses', 52), (' Marketing expenses', 47), (' Lease expenses', 44), (' Administrative and other expenses', 43), (' Management expenses', 43), (' Amortisation expenses', 42), (' Advertising expenses', 41), (' Logistics and distribution', 41), (' Administrative expenses', 40), (' Administration expenses', 40), ('other expenses', 39), (' Occupancy expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Selling Expenses', 36), (' Sales and marketing', 24), (' depreciation', 20), (' Occupancy ', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('other expenses', 50), (' Other expenses', 50), (' Other expenses', 50), (' Administrative and other expenses', 44), (' Selling Expenses', 36), (' Management expenses', 35), (' Marketing expenses', 34), (' Selling & distribution expenses', 33), (' Sales and marketing', 33), (' Lease expenses', 31), (' Occupancy expenses', 30), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Administrative expenses', 27), (' Administration expenses', 27), (' depreciation', 23), ('Distribution expenses', 23), (' Advertising expenses', 19), (' Occupancy ', 12), (' Logistics and distribution', 8)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other expenses', 43), (' Other expenses', 43), (' Other expenses', 43), (' Administrative and other expenses', 39), (' Lease expenses', 35), (' Management expenses', 34), (' Marketing expenses', 33), (' Occupancy expenses', 30), (' Selling Expenses', 30), (' Selling & distribution expenses', 29), (' Administrative expenses', 24), (' Depreciation expenses', 24), (' Administration expenses', 24), (' Depreciation expenses', 24), (' Amortisation expenses', 24), ('Distribution expenses', 20), (' depreciation', 19), (' Advertising expenses', 16), (' Sales and marketing', 16), (' Logistics and distribution', 11), (' Occupancy ', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 8, 9], 'score': 100, 'value': -12948940.0, 'line_item_label': ['Other expenses', 'Selling & distribution expenses', 'Administration expenses'], 'note_numbers': [nan, nan, '5'], 'line_item_value': [0.0, -3717145.0, -9231795.0]}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = amortisation & depreciation , res_fuzz_match = [('Included in administrative expenses', 53), (' Administrative expenses', 53), ('research', 50), (' Depreciation – property', 47), (' Depreciation – right-of-use assets', 47), (' Compulsory superannuation contributions', 47), ('equipment', 44), ('miscellaneous', 44), ('power', 40), ('csr', 40), ('social', 40), (' Staff welfare', 38), ('exchange', 36), ('machinery', 33), ('analytical', 33), (' Payroll on-costs (excluding employee benefit provision)', 33), ('loss allowance', 30), (' plant and equipment', 30), ('charges', 29), (' Wages and salaries', 27), ('consum', 25), ('loss on', 25), ('donation', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = stamp duty , res_fuzz_match = [(' plant and equipment', 50), ('equipment', 44), ('donation', 44), (' Compulsory superannuation contributions', 40), (' Payroll on-costs (excluding employee benefit provision)', 40), (' Staff welfare', 40), (' Wages and salaries', 38), ('consum', 33), ('csr', 33), ('social', 33), ('Included in administrative expenses', 30), (' Depreciation – property', 30), (' Administrative expenses', 30), ('machinery', 25), ('research', 25), ('loss on', 25), ('miscellaneous', 25), (' Depreciation – right-of-use assets', 24), ('power', 20), ('charges', 20), ('loss allowance', 20), ('analytical', 17), ('exchange', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = management fees , res_fuzz_match = [('analytical', 50), ('machinery', 44), ('Included in administrative expenses', 44), (' plant and equipment', 44), (' Administrative expenses', 44), ('exchange', 43), ('charges', 40), ('donation', 40), ('research', 36), ('miscellaneous', 33), (' Wages and salaries', 33), (' Compulsory superannuation contributions', 33), (' Payroll on-costs (excluding employee benefit provision)', 33), (' Staff welfare', 33), ('equipment', 29), (' Depreciation – right-of-use assets', 27), (' Depreciation – property', 22), ('power', 20), ('consum', 17), ('social', 17), ('loss allowance', 13), ('loss on', 0), ('csr', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = rent , res_fuzz_match = [('research', 50), ('donation', 50), ('Included in administrative expenses', 50), (' Depreciation – property', 50), (' plant and equipment', 50), (' Depreciation – right-of-use assets', 50), (' Administrative expenses', 50), (' Compulsory superannuation contributions', 50), (' Payroll on-costs (excluding employee benefit provision)', 50), ('power', 40), (' Staff welfare', 40), ('machinery', 33), ('charges', 33), ('csr', 33), (' Wages and salaries', 33), ('miscellaneous', 29), ('consum', 25), ('analytical', 25), ('equipment', 25), ('exchange', 25), ('loss on', 0), ('social', 0), ('loss allowance', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = accountancy fees , res_fuzz_match = [('donation', 60), ('consum', 50), ('Included in administrative expenses', 45), (' plant and equipment', 45), (' Administrative expenses', 45), (' Payroll on-costs (excluding employee benefit provision)', 45), ('research', 36), (' Compulsory superannuation contributions', 36), ('machinery', 33), ('analytical', 33), ('csr', 33), ('equipment', 29), (' Staff welfare', 29), (' Depreciation – property', 27), (' Wages and salaries', 27), ('loss on', 25), (' Depreciation – right-of-use assets', 25), ('exchange', 22), ('miscellaneous', 22), ('loss allowance', 22), ('power', 20), ('charges', 20), ('social', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = consultancy fees , res_fuzz_match = [('consum', 83), (' Payroll on-costs (excluding employee benefit provision)', 55), ('analytical', 50), (' Compulsory superannuation contributions', 50), ('donation', 40), ('research', 36), (' plant and equipment', 36), ('csr', 33), ('social', 33), (' Wages and salaries', 30), ('equipment', 29), (' Depreciation – right-of-use assets', 29), ('Included in administrative expenses', 27), (' Depreciation – property', 27), (' Administrative expenses', 27), (' Staff welfare', 27), ('loss on', 25), ('loss allowance', 25), ('machinery', 22), ('exchange', 22), ('miscellaneous', 22), ('power', 20), ('charges', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = salary and wages , res_fuzz_match = [(' plant and equipment', 55), ('analytical', 50), ('social', 50), (' Compulsory superannuation contributions', 47), ('power', 44), ('miscellaneous', 44), ('exchange', 43), ('charges', 40), ('donation', 40), ('loss allowance', 40), ('Included in administrative expenses', 40), (' Wages and salaries', 40), (' Staff welfare', 40), ('research', 38), ('machinery', 33), ('equipment', 33), ('csr', 33), (' Depreciation – property', 33), (' Depreciation – right-of-use assets', 33), (' Payroll on-costs (excluding employee benefit provision)', 33), (' Administrative expenses', 32), ('loss on', 25), ('consum', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = other costs , res_fuzz_match = [('csr', 67), ('consum', 60), ('power', 60), (' Payroll on-costs (excluding employee benefit provision)', 60), ('loss on', 50), (' Depreciation – property', 50), (' Compulsory superannuation contributions', 50), ('Included in administrative expenses', 42), (' Administrative expenses', 42), ('donation', 40), ('machinery', 33), (' Wages and salaries', 30), ('research', 29), ('exchange', 29), ('loss allowance', 29), ('social', 25), ('charges', 22), ('equipment', 20), (' plant and equipment', 20), (' Depreciation – right-of-use assets', 20), (' Staff welfare', 20), ('analytical', 17), ('miscellaneous', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = finance costs , res_fuzz_match = [('consum', 60), (' Compulsory superannuation contributions', 55), ('loss on', 50), (' Payroll on-costs (excluding employee benefit provision)', 45), ('donation', 40), (' Depreciation – right-of-use assets', 40), ('Included in administrative expenses', 36), (' Depreciation – property', 36), (' Administrative expenses', 36), (' Wages and salaries', 36), ('analytical', 33), ('csr', 33), ('miscellaneous', 33), ('exchange', 29), ('loss allowance', 29), (' plant and equipment', 27), ('social', 25), ('power', 22), ('machinery', 22), ('charges', 20), ('equipment', 20), (' Staff welfare', 18), ('research', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = amortisation & depreciation , res_fuzz_match = [('Included in administrative expenses', 53), (' Administrative expenses', 53), ('research', 50), (' Depreciation – property', 47), (' Depreciation – right-of-use assets', 47), (' Compulsory superannuation contributions', 47), ('equipment', 44), ('miscellaneous', 44), ('power', 40), ('csr', 40), ('social', 40), (' Staff welfare', 38), ('exchange', 36), ('machinery', 33), ('analytical', 33), (' Payroll on-costs (excluding employee benefit provision)', 33), ('loss allowance', 30), (' plant and equipment', 30), ('charges', 29), (' Wages and salaries', 27), ('consum', 25), ('loss on', 25), ('donation', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = stamp duty , res_fuzz_match = [(' plant and equipment', 50), ('equipment', 44), ('donation', 44), (' Compulsory superannuation contributions', 40), (' Payroll on-costs (excluding employee benefit provision)', 40), (' Staff welfare', 40), (' Wages and salaries', 38), ('consum', 33), ('csr', 33), ('social', 33), ('Included in administrative expenses', 30), (' Depreciation – property', 30), (' Administrative expenses', 30), ('machinery', 25), ('research', 25), ('loss on', 25), ('miscellaneous', 25), (' Depreciation – right-of-use assets', 24), ('power', 20), ('charges', 20), ('loss allowance', 20), ('analytical', 17), ('exchange', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = management fees , res_fuzz_match = [('analytical', 50), ('machinery', 44), ('Included in administrative expenses', 44), (' plant and equipment', 44), (' Administrative expenses', 44), ('exchange', 43), ('charges', 40), ('donation', 40), ('research', 36), ('miscellaneous', 33), (' Wages and salaries', 33), (' Compulsory superannuation contributions', 33), (' Payroll on-costs (excluding employee benefit provision)', 33), (' Staff welfare', 33), ('equipment', 29), (' Depreciation – right-of-use assets', 27), (' Depreciation – property', 22), ('power', 20), ('consum', 17), ('social', 17), ('loss allowance', 13), ('loss on', 0), ('csr', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = rent , res_fuzz_match = [('research', 50), ('donation', 50), ('Included in administrative expenses', 50), (' Depreciation – property', 50), (' plant and equipment', 50), (' Depreciation – right-of-use assets', 50), (' Administrative expenses', 50), (' Compulsory superannuation contributions', 50), (' Payroll on-costs (excluding employee benefit provision)', 50), ('power', 40), (' Staff welfare', 40), ('machinery', 33), ('charges', 33), ('csr', 33), (' Wages and salaries', 33), ('miscellaneous', 29), ('consum', 25), ('analytical', 25), ('equipment', 25), ('exchange', 25), ('loss on', 0), ('social', 0), ('loss allowance', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = accountancy fees , res_fuzz_match = [('donation', 60), ('consum', 50), ('Included in administrative expenses', 45), (' plant and equipment', 45), (' Administrative expenses', 45), (' Payroll on-costs (excluding employee benefit provision)', 45), ('research', 36), (' Compulsory superannuation contributions', 36), ('machinery', 33), ('analytical', 33), ('csr', 33), ('equipment', 29), (' Staff welfare', 29), (' Depreciation – property', 27), (' Wages and salaries', 27), ('loss on', 25), (' Depreciation – right-of-use assets', 25), ('exchange', 22), ('miscellaneous', 22), ('loss allowance', 22), ('power', 20), ('charges', 20), ('social', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = consultancy fees , res_fuzz_match = [('consum', 83), (' Payroll on-costs (excluding employee benefit provision)', 55), ('analytical', 50), (' Compulsory superannuation contributions', 50), ('donation', 40), ('research', 36), (' plant and equipment', 36), ('csr', 33), ('social', 33), (' Wages and salaries', 30), ('equipment', 29), (' Depreciation – right-of-use assets', 29), ('Included in administrative expenses', 27), (' Depreciation – property', 27), (' Administrative expenses', 27), (' Staff welfare', 27), ('loss on', 25), ('loss allowance', 25), ('machinery', 22), ('exchange', 22), ('miscellaneous', 22), ('power', 20), ('charges', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = salary and wages , res_fuzz_match = [(' plant and equipment', 55), ('analytical', 50), ('social', 50), (' Compulsory superannuation contributions', 47), ('power', 44), ('miscellaneous', 44), ('exchange', 43), ('charges', 40), ('donation', 40), ('loss allowance', 40), ('Included in administrative expenses', 40), (' Wages and salaries', 40), (' Staff welfare', 40), ('research', 38), ('machinery', 33), ('equipment', 33), ('csr', 33), (' Depreciation – property', 33), (' Depreciation – right-of-use assets', 33), (' Payroll on-costs (excluding employee benefit provision)', 33), (' Administrative expenses', 32), ('loss on', 25), ('consum', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = other costs , res_fuzz_match = [('csr', 67), ('consum', 60), ('power', 60), (' Payroll on-costs (excluding employee benefit provision)', 60), ('loss on', 50), (' Depreciation – property', 50), (' Compulsory superannuation contributions', 50), ('Included in administrative expenses', 42), (' Administrative expenses', 42), ('donation', 40), ('machinery', 33), (' Wages and salaries', 30), ('research', 29), ('exchange', 29), ('loss allowance', 29), ('social', 25), ('charges', 22), ('equipment', 20), (' plant and equipment', 20), (' Depreciation – right-of-use assets', 20), (' Staff welfare', 20), ('analytical', 17), ('miscellaneous', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = finance costs , res_fuzz_match = [('consum', 60), (' Compulsory superannuation contributions', 55), ('loss on', 50), (' Payroll on-costs (excluding employee benefit provision)', 45), ('donation', 40), (' Depreciation – right-of-use assets', 40), ('Included in administrative expenses', 36), (' Depreciation – property', 36), (' Administrative expenses', 36), (' Wages and salaries', 36), ('analytical', 33), ('csr', 33), ('miscellaneous', 33), ('exchange', 29), ('loss allowance', 29), (' plant and equipment', 27), ('social', 25), ('power', 22), ('machinery', 22), ('charges', 20), ('equipment', 20), (' Staff welfare', 18), ('research', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 15], 'score': [83, 83], 'value': [496798.0, 237787.0], 'label': [' Consultancy fees', ' Consultancy fees'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), ('Rent', 25), (' Rental expenses', 24), (' Occupancy expenses', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Administration expenses', 24), (' Rental expenses', 18), ('Rent', 15), (' Occupancy', 14), (' Occupancy expenses', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' Administration expenses', 30), (' Occupancy expenses', 21), (' Rental expenses', 20), ('Rent', 19), (' Occupancy', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Administration expenses', 33), (' Occupancy expenses', 23), (' Occupancy', 21), (' Rental expenses', 15), ('Rent', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), (' Occupancy expenses', 26), (' Rental expenses', 17), ('Rent', 13), (' Occupancy', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' Administration expenses', 65), (' Rental expenses', 53), (' Occupancy expenses', 42), ('Rent', 24), (' Occupancy', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), ('Rent', 12), (' Occupancy', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Occupancy', 25), (' Administration expenses', 22), (' Rental expenses', 17), (' Occupancy expenses', 17), ('Rent', 13)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('Rent', 21), (' Occupancy', 20), (' Administration expenses', 19), (' Rental expenses', 14), (' Occupancy expenses', 7)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' Rental expenses', 50), ('Rent', 32), (' Occupancy expenses', 30), (' Administration expenses', 26), (' Occupancy', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' Administration expenses', 40), (' Occupancy expenses', 19), (' Rental expenses', 18), ('Rent', 15), (' Occupancy', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' Rental expenses', 38), (' Occupancy expenses', 29), ('Rent', 24), (' Administration expenses', 22), (' Occupancy', 6)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Administration expenses', 32), (' Rental expenses', 29), ('Rent', 23), (' Occupancy', 22), (' Occupancy expenses', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Rental expenses', 43), (' Administration expenses', 41), (' Occupancy expenses', 40), ('Rent', 22), (' Occupancy', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Occupancy expenses', 35), (' Rental expenses', 34), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Rental expenses', 27), (' Occupancy expenses', 24), (' Administration expenses', 18), ('Rent', 14), (' Occupancy', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Occupancy', 22), (' Administration expenses', 20), (' Rental expenses', 12), (' Occupancy expenses', 12), ('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' Administration expenses', 40), (' Rental expenses', 38), (' Occupancy expenses', 29), ('Rent', 24), (' Occupancy', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Rental expenses', 47), (' Administration expenses', 40), (' Occupancy expenses', 39), ('Rent', 16), (' Occupancy', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' Rental expenses', 44), (' Occupancy expenses', 30), (' Administration expenses', 27), ('Rent', 25), (' Occupancy', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 30), (' Administration expenses', 24), ('Rent', 21), (' Occupancy', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -7455447.0, 'line_item_label': ['Administration expenses'], 'note_numbers': ['5'], 'line_item_value': [-7455447.0]}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), ('Rent', 25), (' Rental expenses', 24), (' Occupancy expenses', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Administration expenses', 24), (' Rental expenses', 18), ('Rent', 15), (' Occupancy', 14), (' Occupancy expenses', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' Administration expenses', 30), (' Occupancy expenses', 21), (' Rental expenses', 20), ('Rent', 19), (' Occupancy', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Administration expenses', 33), (' Occupancy expenses', 23), (' Occupancy', 21), (' Rental expenses', 15), ('Rent', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), (' Occupancy expenses', 26), (' Rental expenses', 17), ('Rent', 13), (' Occupancy', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' Administration expenses', 65), (' Rental expenses', 53), (' Occupancy expenses', 42), ('Rent', 24), (' Occupancy', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), ('Rent', 12), (' Occupancy', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Occupancy', 25), (' Administration expenses', 22), (' Rental expenses', 17), (' Occupancy expenses', 17), ('Rent', 13)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('Rent', 21), (' Occupancy', 20), (' Administration expenses', 19), (' Rental expenses', 14), (' Occupancy expenses', 7)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' Rental expenses', 50), ('Rent', 32), (' Occupancy expenses', 30), (' Administration expenses', 26), (' Occupancy', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' Administration expenses', 40), (' Occupancy expenses', 19), (' Rental expenses', 18), ('Rent', 15), (' Occupancy', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' Rental expenses', 38), (' Occupancy expenses', 29), ('Rent', 24), (' Administration expenses', 22), (' Occupancy', 6)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Administration expenses', 32), (' Rental expenses', 29), ('Rent', 23), (' Occupancy', 22), (' Occupancy expenses', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Rental expenses', 43), (' Administration expenses', 41), (' Occupancy expenses', 40), ('Rent', 22), (' Occupancy', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Occupancy expenses', 35), (' Rental expenses', 34), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Rental expenses', 27), (' Occupancy expenses', 24), (' Administration expenses', 18), ('Rent', 14), (' Occupancy', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Occupancy', 22), (' Administration expenses', 20), (' Rental expenses', 12), (' Occupancy expenses', 12), ('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' Administration expenses', 40), (' Rental expenses', 38), (' Occupancy expenses', 29), ('Rent', 24), (' Occupancy', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Rental expenses', 47), (' Administration expenses', 40), (' Occupancy expenses', 39), ('Rent', 16), (' Occupancy', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' Rental expenses', 44), (' Occupancy expenses', 30), (' Administration expenses', 27), ('Rent', 25), (' Occupancy', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 30), (' Administration expenses', 24), ('Rent', 21), (' Occupancy', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -9231795.0, 'line_item_label': ['Administration expenses'], 'note_numbers': ['5'], 'line_item_value': [-9231795.0]}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['Rent'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = amortisation & depreciation , res_fuzz_match = [('Rent', 50)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = stamp duty , res_fuzz_match = [('Rent', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = management fees , res_fuzz_match = [('Rent', 29)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = rent , res_fuzz_match = [('Rent', 100)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = accountancy fees , res_fuzz_match = [('Rent', 50)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = consultancy fees , res_fuzz_match = [('Rent', 29)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = salary and wages , res_fuzz_match = [('Rent', 33)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = other costs , res_fuzz_match = [('Rent', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = finance costs , res_fuzz_match = [('Rent', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = amortisation & depreciation , res_fuzz_match = [('Rent', 50)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = stamp duty , res_fuzz_match = [('Rent', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = management fees , res_fuzz_match = [('Rent', 29)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = rent , res_fuzz_match = [('Rent', 100)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = accountancy fees , res_fuzz_match = [('Rent', 50)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = consultancy fees , res_fuzz_match = [('Rent', 29)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = salary and wages , res_fuzz_match = [('Rent', 33)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = other costs , res_fuzz_match = [('Rent', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = finance costs , res_fuzz_match = [('Rent', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Rent', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 13], 'score': [100, 100], 'value': [4668.0, 22674.0], 'label': [' Rent', ' Rent'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 36), ('Other revenue', 33)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Other income', 40), ('other operating', 21), ('Other revenue', 19)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('other operating', 37), (' Other income', 36), ('Other revenue', 28)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Other income', 40), ('other operating', 33), ('Other revenue', 23)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), ('Other revenue', 17), (' Other income', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 9), ('Other revenue', 8)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('other operating', 24), ('Other revenue', 22)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('Other revenue', 30), ('other operating', 16), (' Other income', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' Other income', 30), ('other operating', 11), ('Other revenue', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Other income', 48), ('other operating', 31), ('Other revenue', 24)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Other income', 36), ('Other revenue', 31), ('other operating', 28)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('Other revenue', 27), (' Other income', 24), ('other operating', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('other operating', 14), (' Other income', 13), ('Other revenue', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('Other revenue', 39), (' Other income', 30), ('other operating', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Other income', 31), ('Other revenue', 26), ('other operating', 23)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' Other income', 56), ('other operating', 47), ('Other revenue', 30)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 21)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': 143754.0, 'line_item_label': ['Other income'], 'note_numbers': [nan], 'line_item_value': [143754.0]}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 36), ('Other revenue', 33)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Other income', 40), ('other operating', 21), ('Other revenue', 19)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('other operating', 37), (' Other income', 36), ('Other revenue', 28)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Other income', 40), ('other operating', 33), ('Other revenue', 23)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), ('Other revenue', 17), (' Other income', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 9), ('Other revenue', 8)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('other operating', 24), ('Other revenue', 22)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('Other revenue', 30), ('other operating', 16), (' Other income', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' Other income', 30), ('other operating', 11), ('Other revenue', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Other income', 48), ('other operating', 31), ('Other revenue', 24)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Other income', 36), ('Other revenue', 31), ('other operating', 28)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('Other revenue', 27), (' Other income', 24), ('other operating', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('other operating', 14), (' Other income', 13), ('Other revenue', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('Other revenue', 39), (' Other income', 30), ('other operating', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Other income', 31), ('Other revenue', 26), ('other operating', 23)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' Other income', 56), ('other operating', 47), ('Other revenue', 30)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 21)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': 152362.0, 'line_item_label': ['Other income'], 'note_numbers': [nan], 'line_item_value': [152362.0]}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Net finance costs', 42), ('other income', 40), (' Finance income and costs', 27), (' Finance income and finance costs', 22), ('finance income', 19), ('Finance income', 19), (' Interest revenue', 8)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 42), ('other income', 36), (' Finance income and finance costs', 36), (' Interest revenue', 31), ('finance income', 14), ('Finance income', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Finance income and costs', 46), ('other income', 40), (' Finance income and finance costs', 38), (' Net finance costs', 34), (' Interest revenue', 21), ('finance income', 15), ('Finance income', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 30), (' Finance income and finance costs', 25), ('other income', 17), ('finance income', 17), ('Finance income', 17), (' Interest revenue', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Finance income and costs', 31), (' Net finance costs', 31), (' Finance income and finance costs', 26)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' Interest revenue', 39), (' Net finance costs', 33), (' Finance income and costs', 29), ('other income', 25), (' Finance income and finance costs', 24), ('finance income', 18), ('Finance income', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), ('other income', 30), (' Finance income and finance costs', 27), (' Net finance costs', 26), ('finance income', 21), ('Finance income', 21)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Net finance costs', 38), (' Finance income and costs', 33), (' Interest revenue', 32), (' Finance income and finance costs', 28), ('finance income', 18), ('Finance income', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs', 100), (' Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('Finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('finance income', 37), ('Finance income', 37), (' Finance income and costs', 33), (' Net finance costs', 33), (' Finance income and finance costs', 28), (' Interest revenue', 27), ('other income', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('finance income', 38), ('Finance income', 38), (' Finance income and costs', 33), ('other income', 30), (' Finance income and finance costs', 27), (' Interest revenue', 25), (' Net finance costs', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' Net finance costs', 32), ('other income', 25), (' Finance income and costs', 24), (' Finance income and finance costs', 21), ('finance income', 20), ('Finance income', 20), (' Interest revenue', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('other income', 48), ('finance income', 41), ('Finance income', 41), (' Finance income and costs', 33), (' Finance income and finance costs', 28), (' Interest revenue', 27), (' Net finance costs', 27)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Net finance costs', 26), (' Interest revenue', 19)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('other income', 36), ('finance income', 36), ('Finance income', 36), (' Finance income and costs', 33), (' Interest revenue', 33), (' Finance income and finance costs', 30), (' Net finance costs', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Interest revenue', 37), (' Finance income and costs', 27), (' Net finance costs', 26), ('other income', 24), (' Finance income and finance costs', 24), ('finance income', 16), ('Finance income', 16)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Net finance costs', 21), (' Finance income and costs', 16), ('other income', 13), ('finance income', 12), ('Finance income', 12), (' Finance income and finance costs', 12), (' Interest revenue', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' Interest revenue', 41), ('other income', 30), ('finance income', 24), ('Finance income', 24), (' Finance income and costs', 24), (' Finance income and finance costs', 21), (' Net finance costs', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Finance income and costs', 36), ('finance income', 35), ('Finance income', 35), (' Finance income and finance costs', 32), ('other income', 31), (' Interest revenue', 29), (' Net finance costs', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('other income', 56), (' Finance income and costs', 37), ('finance income', 35), ('Finance income', 35), (' Net finance costs', 33), (' Finance income and finance costs', 32), (' Interest revenue', 28)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other income', 43), (' Net finance costs', 40), (' Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 11, 12, 13], 'score': 100, 'value': -5949157.0, 'line_item_label': ['Other income', 'Finance income', 'Finance costs', 'Net finance costs'], 'note_numbers': [nan, nan, '6', nan], 'line_item_value': [143754.0, 25598.0, -3072053.0, -3046456.0]}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Net finance costs', 42), ('other income', 40), (' Finance income and costs', 27), (' Finance income and finance costs', 22), ('finance income', 19), ('Finance income', 19), (' Interest revenue', 8)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 42), ('other income', 36), (' Finance income and finance costs', 36), (' Interest revenue', 31), ('finance income', 14), ('Finance income', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Finance income and costs', 46), ('other income', 40), (' Finance income and finance costs', 38), (' Net finance costs', 34), (' Interest revenue', 21), ('finance income', 15), ('Finance income', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 30), (' Finance income and finance costs', 25), ('other income', 17), ('finance income', 17), ('Finance income', 17), (' Interest revenue', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Finance income and costs', 31), (' Net finance costs', 31), (' Finance income and finance costs', 26)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' Interest revenue', 39), (' Net finance costs', 33), (' Finance income and costs', 29), ('other income', 25), (' Finance income and finance costs', 24), ('finance income', 18), ('Finance income', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), ('other income', 30), (' Finance income and finance costs', 27), (' Net finance costs', 26), ('finance income', 21), ('Finance income', 21)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Net finance costs', 38), (' Finance income and costs', 33), (' Interest revenue', 32), (' Finance income and finance costs', 28), ('finance income', 18), ('Finance income', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs', 100), (' Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('Finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('finance income', 37), ('Finance income', 37), (' Finance income and costs', 33), (' Net finance costs', 33), (' Finance income and finance costs', 28), (' Interest revenue', 27), ('other income', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('finance income', 38), ('Finance income', 38), (' Finance income and costs', 33), ('other income', 30), (' Finance income and finance costs', 27), (' Interest revenue', 25), (' Net finance costs', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' Net finance costs', 32), ('other income', 25), (' Finance income and costs', 24), (' Finance income and finance costs', 21), ('finance income', 20), ('Finance income', 20), (' Interest revenue', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('other income', 48), ('finance income', 41), ('Finance income', 41), (' Finance income and costs', 33), (' Finance income and finance costs', 28), (' Interest revenue', 27), (' Net finance costs', 27)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Net finance costs', 26), (' Interest revenue', 19)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('other income', 36), ('finance income', 36), ('Finance income', 36), (' Finance income and costs', 33), (' Interest revenue', 33), (' Finance income and finance costs', 30), (' Net finance costs', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Interest revenue', 37), (' Finance income and costs', 27), (' Net finance costs', 26), ('other income', 24), (' Finance income and finance costs', 24), ('finance income', 16), ('Finance income', 16)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Net finance costs', 21), (' Finance income and costs', 16), ('other income', 13), ('finance income', 12), ('Finance income', 12), (' Finance income and finance costs', 12), (' Interest revenue', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' Interest revenue', 41), ('other income', 30), ('finance income', 24), ('Finance income', 24), (' Finance income and costs', 24), (' Finance income and finance costs', 21), (' Net finance costs', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Finance income and costs', 36), ('finance income', 35), ('Finance income', 35), (' Finance income and finance costs', 32), ('other income', 31), (' Interest revenue', 29), (' Net finance costs', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('other income', 56), (' Finance income and costs', 37), ('finance income', 35), ('Finance income', 35), (' Net finance costs', 33), (' Finance income and finance costs', 32), (' Interest revenue', 28)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other income', 43), (' Net finance costs', 40), (' Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 11, 12, 13], 'score': 100, 'value': -4789408.0, 'line_item_label': ['Other income', 'Finance income', 'Finance costs', 'Net finance costs'], 'note_numbers': [nan, nan, '6', nan], 'line_item_value': [152362.0, 478743.0, -2949628.0, -2470885.0]}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans (other than those from related parties) , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), ('Bank interest', 62), (' Interest received - Loan', 55), (' Sublease interest income', 50), (' Bank Deposits - cash and cash equivalents', 47), (' Share of JV interest received/(paid)', 46), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 32)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans interest on leases , res_fuzz_match = [('interest', 100), ('Bank interest', 85), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), (' Share of JV interest received/(paid)', 58), (' Sublease interest income', 56), (' Interest received - Loan', 55), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 48), (' Bank Deposits - cash and cash equivalents', 47)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans other interest expense , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), ('Bank interest', 69), (' Interest received - Bank', 65), (' Interest received - Loan', 60), (' Share of JV interest received/(paid)', 60), (' Sublease interest income', 57), (' Bank Deposits - cash and cash equivalents', 47), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 37)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), ('Bank interest', 62), (' Interest received - Loan', 55), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 53), (' Sublease interest income', 50), (' Share of JV interest received/(paid)', 46), (' Bank Deposits - cash and cash equivalents', 41)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans taxation , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), ('Bank interest', 62), (' Interest received - Loan', 55), (' Sublease interest income', 50), (' Bank Deposits - cash and cash equivalents', 48), (' Share of JV interest received/(paid)', 46), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 42)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans (other than those from related parties) , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), ('Bank interest', 62), (' Interest received - Loan', 55), (' Sublease interest income', 50), (' Bank Deposits - cash and cash equivalents', 47), (' Share of JV interest received/(paid)', 46), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 32)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans interest on leases , res_fuzz_match = [('interest', 100), ('Bank interest', 85), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), (' Share of JV interest received/(paid)', 58), (' Sublease interest income', 56), (' Interest received - Loan', 55), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 48), (' Bank Deposits - cash and cash equivalents', 47)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans other interest expense , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), ('Bank interest', 69), (' Interest received - Bank', 65), (' Interest received - Loan', 60), (' Share of JV interest received/(paid)', 60), (' Sublease interest income', 57), (' Bank Deposits - cash and cash equivalents', 47), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 37)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), ('Bank interest', 62), (' Interest received - Loan', 55), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 53), (' Sublease interest income', 50), (' Share of JV interest received/(paid)', 46), (' Bank Deposits - cash and cash equivalents', 41)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans taxation , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), ('Bank interest', 62), (' Interest received - Loan', 55), (' Sublease interest income', 50), (' Bank Deposits - cash and cash equivalents', 48), (' Share of JV interest received/(paid)', 46), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 42)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [2211657.0, 197276.0, 540695.0, 2949628.0, 2022.0, 2601186.0, 102990.0, 367877.0, 3072053.0, 2021.0], 'label': ['Interest on bank overdrafts and loans (other than those from related parties)', 'Interest on bank overdrafts and loans Interest on leases', 'Interest on bank overdrafts and loans Other interest expense', 'Interest on bank overdrafts and loans ', 'Interest on bank overdrafts and loans Taxation', 'Interest on bank overdrafts and loans (other than those from related parties)', 'Interest on bank overdrafts and loans Interest on leases', 'Interest on bank overdrafts and loans Other interest expense', 'Interest on bank overdrafts and loans ', 'Interest on bank overdrafts and loans Taxation'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 9)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 13)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('finance cost', 40), ('finance costs', 40), (' net finance costs ', 34), (' finance expenses', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' finance expenses', 50), ('finance cost', 38), ('finance costs', 38), (' net finance costs ', 33)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('finance cost', 20), ('finance costs', 20), (' finance expenses', 18), (' net finance costs ', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' finance expenses', 33), (' net finance costs ', 32), ('finance cost', 20), ('finance costs', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('finance cost', 30), ('finance costs', 30), (' finance expenses', 29), (' net finance costs ', 27)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 32), ('finance costs', 32), (' net finance costs ', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' net finance costs ', 26), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 19)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' net finance costs ', 21), (' finance expenses', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' finance expenses', 29), ('finance cost', 20), ('finance costs', 20), (' net finance costs ', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' finance expenses', 39), ('finance cost', 36), ('finance costs', 36), (' net finance costs ', 33)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13], 'score': 100, 'value': -6118509.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [-3072053.0, -3046456.0]}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 9)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 13)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('finance cost', 40), ('finance costs', 40), (' net finance costs ', 34), (' finance expenses', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' finance expenses', 50), ('finance cost', 38), ('finance costs', 38), (' net finance costs ', 33)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('finance cost', 20), ('finance costs', 20), (' finance expenses', 18), (' net finance costs ', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' finance expenses', 33), (' net finance costs ', 32), ('finance cost', 20), ('finance costs', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('finance cost', 30), ('finance costs', 30), (' finance expenses', 29), (' net finance costs ', 27)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 32), ('finance costs', 32), (' net finance costs ', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' net finance costs ', 26), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 19)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' net finance costs ', 21), (' finance expenses', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' finance expenses', 29), ('finance cost', 20), ('finance costs', 20), (' net finance costs ', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' finance expenses', 39), ('finance cost', 36), ('finance costs', 36), (' net finance costs ', 33)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13], 'score': 100, 'value': -5420513.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [-2949628.0, -2470885.0]}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans (other than those from related parties) , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 100), (' Interest on leases', 77), (' Interest income', 71), ('Interest expenses', 67), (' Interest accrued on loans', 58), ('debt', 50), ('bank facilities', 50), ('bonds', 50), (' Interest accrued on lease liabilities', 50), (' Lease interest expense', 50), ('  Other interest expense', 48), (' Lease liabilities interest expense', 41), (' Interest expense on financial liabilities using the effective interest rate method - other', 40), ('debenture', 38), ('cash credit', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 38), (' Discount unwind on the provision for asset retirement obligation', 35), ('borrowings', 33)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans interest on leases , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on leases', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 83), (' Lease interest expense', 74), ('Interest expenses', 73), (' Interest income', 71), ('  Other interest expense', 67), (' Lease liabilities interest expense', 64), (' Interest accrued on loans', 58), (' Interest accrued on lease liabilities', 58), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 54), ('debt', 50), ('bank facilities', 50), ('bonds', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 39), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 35), ('borrowings', 33), ('cash credit', 29)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans other interest expense , res_fuzz_match = [('loan', 100), ('interest', 100), ('Interest expenses', 100), ('  Other interest expense', 100), (' Lease interest expense', 87), (' Interest on bank overdrafts and loans (other than those from related parties)', 80), (' Interest on leases', 77), (' Interest income', 71), (' Lease liabilities interest expense', 70), (' Interest accrued on loans', 58), ('bank facilities', 50), ('bonds', 50), (' Interest accrued on lease liabilities', 50), ('debenture', 43), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 36), ('borrowings', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 30), ('debt', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 100), (' Interest on leases', 77), (' Interest income', 71), ('Interest expenses', 67), (' Interest accrued on loans', 58), ('bank facilities', 50), ('bonds', 50), (' Interest accrued on lease liabilities', 50), (' Lease interest expense', 50), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 50), ('  Other interest expense', 48), (' Interest expense on financial liabilities using the effective interest rate method - other', 44), (' Lease liabilities interest expense', 41), ('debenture', 38), ('cash credit', 36), ('borrowings', 33), (' Discount unwind on the provision for asset retirement obligation', 31), ('debt', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans taxation , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 89), (' Interest on leases', 77), (' Interest income', 71), ('Interest expenses', 67), (' Interest accrued on loans', 58), ('bank facilities', 50), ('bonds', 50), (' Interest accrued on lease liabilities', 50), (' Lease interest expense', 50), ('  Other interest expense', 48), (' Interest expense on financial liabilities using the effective interest rate method - other', 42), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 42), (' Lease liabilities interest expense', 41), ('debenture', 38), ('cash credit', 36), ('borrowings', 33), (' Discount unwind on the provision for asset retirement obligation', 29), ('debt', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans (other than those from related parties) , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 100), (' Interest on leases', 77), (' Interest income', 71), ('Interest expenses', 67), (' Interest accrued on loans', 58), ('debt', 50), ('bank facilities', 50), ('bonds', 50), (' Interest accrued on lease liabilities', 50), (' Lease interest expense', 50), ('  Other interest expense', 48), (' Lease liabilities interest expense', 41), (' Interest expense on financial liabilities using the effective interest rate method - other', 40), ('debenture', 38), ('cash credit', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 38), (' Discount unwind on the provision for asset retirement obligation', 35), ('borrowings', 33)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans interest on leases , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on leases', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 83), (' Lease interest expense', 74), ('Interest expenses', 73), (' Interest income', 71), ('  Other interest expense', 67), (' Lease liabilities interest expense', 64), (' Interest accrued on loans', 58), (' Interest accrued on lease liabilities', 58), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 54), ('debt', 50), ('bank facilities', 50), ('bonds', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 39), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 35), ('borrowings', 33), ('cash credit', 29)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans other interest expense , res_fuzz_match = [('loan', 100), ('interest', 100), ('Interest expenses', 100), ('  Other interest expense', 100), (' Lease interest expense', 87), (' Interest on bank overdrafts and loans (other than those from related parties)', 80), (' Interest on leases', 77), (' Interest income', 71), (' Lease liabilities interest expense', 70), (' Interest accrued on loans', 58), ('bank facilities', 50), ('bonds', 50), (' Interest accrued on lease liabilities', 50), ('debenture', 43), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 36), ('borrowings', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 30), ('debt', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 100), (' Interest on leases', 77), (' Interest income', 71), ('Interest expenses', 67), (' Interest accrued on loans', 58), ('bank facilities', 50), ('bonds', 50), (' Interest accrued on lease liabilities', 50), (' Lease interest expense', 50), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 50), ('  Other interest expense', 48), (' Interest expense on financial liabilities using the effective interest rate method - other', 44), (' Lease liabilities interest expense', 41), ('debenture', 38), ('cash credit', 36), ('borrowings', 33), (' Discount unwind on the provision for asset retirement obligation', 31), ('debt', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans taxation , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 89), (' Interest on leases', 77), (' Interest income', 71), ('Interest expenses', 67), (' Interest accrued on loans', 58), ('bank facilities', 50), ('bonds', 50), (' Interest accrued on lease liabilities', 50), (' Lease interest expense', 50), ('  Other interest expense', 48), (' Interest expense on financial liabilities using the effective interest rate method - other', 42), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 42), (' Lease liabilities interest expense', 41), ('debenture', 38), ('cash credit', 36), ('borrowings', 33), (' Discount unwind on the provision for asset retirement obligation', 29), ('debt', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [2211657.0, 197276.0, 540695.0, 2949628.0, 2022.0, 2601186.0, 102990.0, 367877.0, 3072053.0, 2021.0], 'label': ['Interest on bank overdrafts and loans (other than those from related parties)', 'Interest on bank overdrafts and loans Interest on leases', 'Interest on bank overdrafts and loans Other interest expense', 'Interest on bank overdrafts and loans ', 'Interest on bank overdrafts and loans Taxation', 'Interest on bank overdrafts and loans (other than those from related parties)', 'Interest on bank overdrafts and loans Interest on leases', 'Interest on bank overdrafts and loans Other interest expense', 'Interest on bank overdrafts and loans ', 'Interest on bank overdrafts and loans Taxation'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 9)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 13)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('finance cost', 40), ('finance costs', 40), (' net finance costs ', 34), (' finance expenses', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' finance expenses', 50), ('finance cost', 38), ('finance costs', 38), (' net finance costs ', 33)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('finance cost', 20), ('finance costs', 20), (' finance expenses', 18), (' net finance costs ', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' finance expenses', 33), (' net finance costs ', 32), ('finance cost', 20), ('finance costs', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('finance cost', 30), ('finance costs', 30), (' finance expenses', 29), (' net finance costs ', 27)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 32), ('finance costs', 32), (' net finance costs ', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' net finance costs ', 26), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 19)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' net finance costs ', 21), (' finance expenses', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' finance expenses', 29), ('finance cost', 20), ('finance costs', 20), (' net finance costs ', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' finance expenses', 39), ('finance cost', 36), ('finance costs', 36), (' net finance costs ', 33)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13], 'score': 100, 'value': -6118509.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [-3072053.0, -3046456.0]}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 9)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 13)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('finance cost', 40), ('finance costs', 40), (' net finance costs ', 34), (' finance expenses', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' finance expenses', 50), ('finance cost', 38), ('finance costs', 38), (' net finance costs ', 33)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('finance cost', 20), ('finance costs', 20), (' finance expenses', 18), (' net finance costs ', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' finance expenses', 33), (' net finance costs ', 32), ('finance cost', 20), ('finance costs', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('finance cost', 30), ('finance costs', 30), (' finance expenses', 29), (' net finance costs ', 27)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 32), ('finance costs', 32), (' net finance costs ', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' net finance costs ', 26), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 19)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' net finance costs ', 21), (' finance expenses', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [(' finance expenses', 29), ('finance cost', 20), ('finance costs', 20), (' net finance costs ', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' finance expenses', 39), ('finance cost', 36), ('finance costs', 36), (' net finance costs ', 33)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13], 'score': 100, 'value': -5420513.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [-2949628.0, -2470885.0]}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans (other than those from related parties) , res_fuzz_match = [(' other', 100), (' other income', 64), ('other revenue', 58), ('  government grants', 58), (' net of tax', 57), (' dividend from other parties', 56), (' japan recoveries', 50), (' net other foreign exchange (losses)/gains', 49), (' secondment income (tw recovery)', 48), (' other miscellaneous - net (loss)/gain', 48), (' insurance proceeds', 45), (' net foreign exchange (loss)/gain', 45), (' net foreign exchange gain', 42), (' sundry income', 42), (' net foreign exchange gains/(losses)', 41), (' foreign exchange gain', 40), (' profit from discontinued operation', 38), (' paid by customers - at amortised cost', 38), (' commission revenue', 36), (' share of jv income', 36), (' net (loss)/profit on disposal of non-current assets', 33), (' effective portion of changes in fair value of cash flow', 32), (' quota lease income', 31), (' net ppe disposal (loss)/gain', 29), (' margin charge income', 26)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans interest on leases , res_fuzz_match = [(' other', 60), ('  government grants', 58), (' net of tax', 57), (' japan recoveries', 50), (' quota lease income', 50), (' net ppe disposal (loss)/gain', 46), (' net other foreign exchange (losses)/gains', 46), (' other income', 45), ('other revenue', 42), (' dividend from other parties', 42), (' sundry income', 42), (' profit from discontinued operation', 41), (' net foreign exchange gains/(losses)', 41), (' net foreign exchange (loss)/gain', 41), (' other miscellaneous - net (loss)/gain', 41), (' margin charge income', 39), (' secondment income (tw recovery)', 38), (' insurance proceeds', 36), (' share of jv income', 36), (' foreign exchange gain', 35), (' paid by customers - at amortised cost', 35), (' effective portion of changes in fair value of cash flow', 34), (' net foreign exchange gain', 33), (' commission revenue', 29), (' net (loss)/profit on disposal of non-current assets', 28)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans other interest expense , res_fuzz_match = [(' other', 100), (' other income', 73), ('other revenue', 67), ('  government grants', 58), (' net of tax', 57), (' dividend from other parties', 52), (' net other foreign exchange (losses)/gains', 52), (' japan recoveries', 50), (' share of jv income', 45), (' margin charge income', 44), (' other miscellaneous - net (loss)/gain', 44), (' sundry income', 42), (' net foreign exchange gains/(losses)', 41), (' net foreign exchange gain', 39), (' net foreign exchange (loss)/gain', 39), (' secondment income (tw recovery)', 38), (' net ppe disposal (loss)/gain', 38), (' quota lease income', 38), (' insurance proceeds', 36), (' foreign exchange gain', 35), (' effective portion of changes in fair value of cash flow', 32), (' net (loss)/profit on disposal of non-current assets', 31), (' profit from discontinued operation', 30), (' commission revenue', 29), (' paid by customers - at amortised cost', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans , res_fuzz_match = [(' other', 60), ('  government grants', 58), (' net of tax', 57), (' japan recoveries', 50), (' quota lease income', 46), (' other income', 45), (' share of jv income', 45), (' net ppe disposal (loss)/gain', 45), ('other revenue', 42), (' net foreign exchange (loss)/gain', 42), (' other miscellaneous - net (loss)/gain', 42), (' net foreign exchange gains/(losses)', 41), (' net foreign exchange gain', 38), (' secondment income (tw recovery)', 38), (' sundry income', 38), (' net other foreign exchange (losses)/gains', 38), (' insurance proceeds', 36), (' effective portion of changes in fair value of cash flow', 36), (' foreign exchange gain', 35), (' dividend from other parties', 31), (' profit from discontinued operation', 30), (' paid by customers - at amortised cost', 30), (' commission revenue', 29), (' margin charge income', 28), (' net (loss)/profit on disposal of non-current assets', 28)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans taxation , res_fuzz_match = [(' net of tax', 71), (' other', 60), ('  government grants', 58), (' japan recoveries', 50), (' other income', 45), (' share of jv income', 45), (' net other foreign exchange (losses)/gains', 43), ('other revenue', 42), (' net foreign exchange gains/(losses)', 41), (' other miscellaneous - net (loss)/gain', 41), (' dividend from other parties', 40), (' net ppe disposal (loss)/gain', 39), (' secondment income (tw recovery)', 38), (' net foreign exchange (loss)/gain', 38), (' net foreign exchange gain', 37), (' insurance proceeds', 36), (' foreign exchange gain', 35), (' effective portion of changes in fair value of cash flow', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 32), (' paid by customers - at amortised cost', 31), (' quota lease income', 31), (' profit from discontinued operation', 30), (' commission revenue', 29), (' margin charge income', 28)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans (other than those from related parties) , res_fuzz_match = [(' other', 100), (' other income', 64), ('other revenue', 58), ('  government grants', 58), (' net of tax', 57), (' dividend from other parties', 56), (' japan recoveries', 50), (' net other foreign exchange (losses)/gains', 49), (' secondment income (tw recovery)', 48), (' other miscellaneous - net (loss)/gain', 48), (' insurance proceeds', 45), (' net foreign exchange (loss)/gain', 45), (' net foreign exchange gain', 42), (' sundry income', 42), (' net foreign exchange gains/(losses)', 41), (' foreign exchange gain', 40), (' profit from discontinued operation', 38), (' paid by customers - at amortised cost', 38), (' commission revenue', 36), (' share of jv income', 36), (' net (loss)/profit on disposal of non-current assets', 33), (' effective portion of changes in fair value of cash flow', 32), (' quota lease income', 31), (' net ppe disposal (loss)/gain', 29), (' margin charge income', 26)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans interest on leases , res_fuzz_match = [(' other', 60), ('  government grants', 58), (' net of tax', 57), (' japan recoveries', 50), (' quota lease income', 50), (' net ppe disposal (loss)/gain', 46), (' net other foreign exchange (losses)/gains', 46), (' other income', 45), ('other revenue', 42), (' dividend from other parties', 42), (' sundry income', 42), (' profit from discontinued operation', 41), (' net foreign exchange gains/(losses)', 41), (' net foreign exchange (loss)/gain', 41), (' other miscellaneous - net (loss)/gain', 41), (' margin charge income', 39), (' secondment income (tw recovery)', 38), (' insurance proceeds', 36), (' share of jv income', 36), (' foreign exchange gain', 35), (' paid by customers - at amortised cost', 35), (' effective portion of changes in fair value of cash flow', 34), (' net foreign exchange gain', 33), (' commission revenue', 29), (' net (loss)/profit on disposal of non-current assets', 28)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans other interest expense , res_fuzz_match = [(' other', 100), (' other income', 73), ('other revenue', 67), ('  government grants', 58), (' net of tax', 57), (' dividend from other parties', 52), (' net other foreign exchange (losses)/gains', 52), (' japan recoveries', 50), (' share of jv income', 45), (' margin charge income', 44), (' other miscellaneous - net (loss)/gain', 44), (' sundry income', 42), (' net foreign exchange gains/(losses)', 41), (' net foreign exchange gain', 39), (' net foreign exchange (loss)/gain', 39), (' secondment income (tw recovery)', 38), (' net ppe disposal (loss)/gain', 38), (' quota lease income', 38), (' insurance proceeds', 36), (' foreign exchange gain', 35), (' effective portion of changes in fair value of cash flow', 32), (' net (loss)/profit on disposal of non-current assets', 31), (' profit from discontinued operation', 30), (' commission revenue', 29), (' paid by customers - at amortised cost', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans , res_fuzz_match = [(' other', 60), ('  government grants', 58), (' net of tax', 57), (' japan recoveries', 50), (' quota lease income', 46), (' other income', 45), (' share of jv income', 45), (' net ppe disposal (loss)/gain', 45), ('other revenue', 42), (' net foreign exchange (loss)/gain', 42), (' other miscellaneous - net (loss)/gain', 42), (' net foreign exchange gains/(losses)', 41), (' net foreign exchange gain', 38), (' secondment income (tw recovery)', 38), (' sundry income', 38), (' net other foreign exchange (losses)/gains', 38), (' insurance proceeds', 36), (' effective portion of changes in fair value of cash flow', 36), (' foreign exchange gain', 35), (' dividend from other parties', 31), (' profit from discontinued operation', 30), (' paid by customers - at amortised cost', 30), (' commission revenue', 29), (' margin charge income', 28), (' net (loss)/profit on disposal of non-current assets', 28)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans taxation , res_fuzz_match = [(' net of tax', 71), (' other', 60), ('  government grants', 58), (' japan recoveries', 50), (' other income', 45), (' share of jv income', 45), (' net other foreign exchange (losses)/gains', 43), ('other revenue', 42), (' net foreign exchange gains/(losses)', 41), (' other miscellaneous - net (loss)/gain', 41), (' dividend from other parties', 40), (' net ppe disposal (loss)/gain', 39), (' secondment income (tw recovery)', 38), (' net foreign exchange (loss)/gain', 38), (' net foreign exchange gain', 37), (' insurance proceeds', 36), (' foreign exchange gain', 35), (' effective portion of changes in fair value of cash flow', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 32), (' paid by customers - at amortised cost', 31), (' quota lease income', 31), (' profit from discontinued operation', 30), (' commission revenue', 29), (' margin charge income', 28)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 5, 7], 'score': [100, 100, 100, 100], 'value': [2211657.0, 540695.0, 2601186.0, 367877.0], 'label': ['Interest on bank overdrafts and loans (other than those from related parties)', 'Interest on bank overdrafts and loans Other interest expense', 'Interest on bank overdrafts and loans (other than those from related parties)', 'Interest on bank overdrafts and loans Other interest expense'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('NULL', 31)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('NULL', 19)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('NULL', 22)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('NULL', 24)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('NULL', 31)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('NULL', 5)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('NULL', 5)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('NULL', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('NULL', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('NULL', 31)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('NULL', 19)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('NULL', 22)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('NULL', 24)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('NULL', 31)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('NULL', 5)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('NULL', 5)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('NULL', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('NULL', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('current tax', 35), (' income tax benefit', 34), (' tax (expense)/benefit', 33), ('provision for taxation previous year', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 19), ('prior year ', 18), (' income tax expense', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), ('prior year ', 25), ('provision for taxation previous year', 23), ('earlier year', 22), ('amount transferred to retained earnings', 18), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax', 13), (' income tax benefit/(expense)', 13)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' income tax', 44), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' income tax benefit/(expense)', 24), ('current tax', 20), ('amount transferred to retained earnings', 17), ('provision for taxation previous year', 16), ('minimum alternate tax credit entitlement', 15), ('deferred tax', 11), ('earlier year', 10), (' tax (expense)/benefit', 7)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' income tax', 31), ('provision for taxation previous year', 30), ('prior year ', 30), ('current tax', 29), ('amount transferred to retained earnings', 27), (' income tax expense', 24), (' income tax benefit', 24), (' income tax benefit/(expense)', 24), (' tax (expense)/benefit', 23), ('minimum alternate tax credit entitlement', 20), ('deferred tax', 15), ('earlier year', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' income tax', 35), ('minimum alternate tax credit entitlement', 30), ('provision for taxation previous year', 28), (' income tax expense', 27), ('current tax', 24), ('amount transferred to retained earnings', 24), ('earlier year', 23), (' income tax benefit/(expense)', 21), (' income tax benefit', 19), (' tax (expense)/benefit', 19), ('prior year ', 17), ('deferred tax', 9)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 34), (' income tax expense', 29), ('prior year ', 27), ('current tax', 26), ('minimum alternate tax credit entitlement', 23), (' income tax benefit', 21), (' tax (expense)/benefit', 20), ('deferred tax', 19), (' income tax', 19), ('earlier year', 17), (' income tax benefit/(expense)', 17), ('amount transferred to retained earnings', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), (' income tax benefit/(expense)', 40), ('amount transferred to retained earnings', 32), ('earlier year', 26), ('deferred tax', 20), ('current tax', 18), ('minimum alternate tax credit entitlement', 14), ('provision for taxation previous year', 10), ('prior year ', 10), (' tax (expense)/benefit', 7)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('provision for taxation previous year', 34), ('amount transferred to retained earnings', 31), ('deferred tax', 29), (' income tax', 29), ('current tax', 26), ('earlier year', 25), (' income tax benefit', 21), ('prior year ', 18), ('minimum alternate tax credit entitlement', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' tax (expense)/benefit', 51), (' income tax benefit/(expense)', 44), (' income tax expense', 38), ('amount transferred to retained earnings', 33), ('deferred tax', 27), ('minimum alternate tax credit entitlement', 26), ('prior year ', 26), ('current tax', 25), ('provision for taxation previous year', 24), (' income tax benefit', 21), (' income tax', 20), ('earlier year', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 22), ('provision for taxation previous year', 22), (' income tax benefit', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('earlier year', 35), ('deferred tax', 32), (' income tax', 32), ('provision for taxation previous year', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit', 26), ('prior year ', 25), (' income tax benefit/(expense)', 22), ('minimum alternate tax credit entitlement', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), (' tax (expense)/benefit', 27), ('amount transferred to retained earnings', 21), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 18), ('prior year ', 18), ('current tax', 17), ('earlier year', 17), ('provision for taxation previous year', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax', 30), (' income tax benefit', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('prior year ', 19), ('earlier year', 9)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax', 42), ('amount transferred to retained earnings', 38), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), ('prior year ', 24), ('provision for taxation previous year', 23), (' income tax benefit', 19), (' tax (expense)/benefit', 18), ('deferred tax', 17), (' income tax benefit/(expense)', 15), ('earlier year', 7)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('current tax', 31), (' income tax benefit', 31), ('minimum alternate tax credit entitlement', 30), ('earlier year', 30), ('amount transferred to retained earnings', 29), (' income tax expense', 26), ('deferred tax', 25), ('prior year ', 24), (' tax (expense)/benefit', 24), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 21), (' income tax', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' income tax', 33), ('amount transferred to retained earnings', 28), (' income tax expense', 24), (' income tax benefit', 23), (' tax (expense)/benefit', 22), ('prior year ', 21), ('current tax', 20), ('minimum alternate tax credit entitlement', 20), ('earlier year', 19), (' income tax benefit/(expense)', 18), ('deferred tax', 11), ('provision for taxation previous year', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('amount transferred to retained earnings', 36), (' income tax expense', 36), ('provision for taxation previous year', 31), ('deferred tax', 26), ('minimum alternate tax credit entitlement', 26), (' income tax', 26), ('current tax', 25), ('earlier year', 24), ('prior year ', 21), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax benefit/(expense)', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' income tax benefit', 67), ('provision for taxation previous year', 59), (' income tax expense', 58), (' income tax', 58), (' income tax benefit/(expense)', 57), (' tax (expense)/benefit', 50), ('deferred tax', 45), ('current tax', 42), ('minimum alternate tax credit entitlement', 41), ('prior year ', 25), ('amount transferred to retained earnings', 24), ('earlier year', 24)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('provision for taxation previous year', 22), ('amount transferred to retained earnings', 19), ('earlier year', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' income tax expense', 65), (' income tax benefit/(expense)', 63), ('provision for taxation previous year', 52), (' income tax benefit', 48), (' tax (expense)/benefit', 47), ('minimum alternate tax credit entitlement', 43), (' income tax', 43), ('current tax', 36), ('deferred tax', 33), ('amount transferred to retained earnings', 30), ('earlier year', 27), ('prior year ', 23)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('prior year ', 31), ('current tax', 30), (' tax (expense)/benefit', 30), ('earlier year', 24), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('minimum alternate tax credit entitlement', 37), (' tax (expense)/benefit', 35), ('amount transferred to retained earnings', 33), ('provision for taxation previous year', 32), (' income tax benefit', 32), (' income tax benefit/(expense)', 32), ('earlier year', 31), ('prior year ', 29), ('deferred tax', 25), ('current tax', 24), (' income tax', 21), (' income tax expense', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' income tax', 15), ('prior year ', 14), ('amount transferred to retained earnings', 13), ('provision for taxation previous year', 12), ('earlier year', 12), (' income tax expense', 10), (' income tax benefit', 10), (' tax (expense)/benefit', 9), (' income tax benefit/(expense)', 7), ('minimum alternate tax credit entitlement', 6), ('current tax', 0), ('deferred tax', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('minimum alternate tax credit entitlement', 36), ('amount transferred to retained earnings', 32), ('prior year ', 31), (' income tax expense', 31), ('current tax', 30), (' income tax benefit', 30), (' tax (expense)/benefit', 30), (' income tax', 26), (' income tax benefit/(expense)', 26), ('provision for taxation previous year', 24), ('deferred tax', 21), ('earlier year', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' income tax benefit/(expense)', 66), (' income tax expense', 64), ('minimum alternate tax credit entitlement', 52), (' income tax benefit', 51), (' tax (expense)/benefit', 50), (' income tax', 42), ('amount transferred to retained earnings', 36), ('deferred tax', 33), ('provision for taxation previous year', 32), ('current tax', 31), ('prior year ', 27), ('earlier year', 22)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' income tax expense', 59), (' income tax benefit/(expense)', 50), (' income tax benefit', 49), (' income tax', 43), ('current tax', 41), ('prior year ', 37), ('deferred tax', 32), ('earlier year', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 28), ('amount transferred to retained earnings', 18), ('minimum alternate tax credit entitlement', 7)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), (' income tax benefit', 46), ('provision for taxation previous year', 44), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('earlier year', 34), ('current tax', 30), ('deferred tax', 27), (' tax (expense)/benefit', 26), ('amount transferred to retained earnings', 16)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': -9664765.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['7'], 'line_item_value': [-9664765.0]}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('current tax', 35), (' income tax benefit', 34), (' tax (expense)/benefit', 33), ('provision for taxation previous year', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 19), ('prior year ', 18), (' income tax expense', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), ('prior year ', 25), ('provision for taxation previous year', 23), ('earlier year', 22), ('amount transferred to retained earnings', 18), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax', 13), (' income tax benefit/(expense)', 13)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' income tax', 44), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' income tax benefit/(expense)', 24), ('current tax', 20), ('amount transferred to retained earnings', 17), ('provision for taxation previous year', 16), ('minimum alternate tax credit entitlement', 15), ('deferred tax', 11), ('earlier year', 10), (' tax (expense)/benefit', 7)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' income tax', 31), ('provision for taxation previous year', 30), ('prior year ', 30), ('current tax', 29), ('amount transferred to retained earnings', 27), (' income tax expense', 24), (' income tax benefit', 24), (' income tax benefit/(expense)', 24), (' tax (expense)/benefit', 23), ('minimum alternate tax credit entitlement', 20), ('deferred tax', 15), ('earlier year', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' income tax', 35), ('minimum alternate tax credit entitlement', 30), ('provision for taxation previous year', 28), (' income tax expense', 27), ('current tax', 24), ('amount transferred to retained earnings', 24), ('earlier year', 23), (' income tax benefit/(expense)', 21), (' income tax benefit', 19), (' tax (expense)/benefit', 19), ('prior year ', 17), ('deferred tax', 9)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 34), (' income tax expense', 29), ('prior year ', 27), ('current tax', 26), ('minimum alternate tax credit entitlement', 23), (' income tax benefit', 21), (' tax (expense)/benefit', 20), ('deferred tax', 19), (' income tax', 19), ('earlier year', 17), (' income tax benefit/(expense)', 17), ('amount transferred to retained earnings', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), (' income tax benefit/(expense)', 40), ('amount transferred to retained earnings', 32), ('earlier year', 26), ('deferred tax', 20), ('current tax', 18), ('minimum alternate tax credit entitlement', 14), ('provision for taxation previous year', 10), ('prior year ', 10), (' tax (expense)/benefit', 7)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('provision for taxation previous year', 34), ('amount transferred to retained earnings', 31), ('deferred tax', 29), (' income tax', 29), ('current tax', 26), ('earlier year', 25), (' income tax benefit', 21), ('prior year ', 18), ('minimum alternate tax credit entitlement', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' tax (expense)/benefit', 51), (' income tax benefit/(expense)', 44), (' income tax expense', 38), ('amount transferred to retained earnings', 33), ('deferred tax', 27), ('minimum alternate tax credit entitlement', 26), ('prior year ', 26), ('current tax', 25), ('provision for taxation previous year', 24), (' income tax benefit', 21), (' income tax', 20), ('earlier year', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 22), ('provision for taxation previous year', 22), (' income tax benefit', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('earlier year', 35), ('deferred tax', 32), (' income tax', 32), ('provision for taxation previous year', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit', 26), ('prior year ', 25), (' income tax benefit/(expense)', 22), ('minimum alternate tax credit entitlement', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), (' tax (expense)/benefit', 27), ('amount transferred to retained earnings', 21), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 18), ('prior year ', 18), ('current tax', 17), ('earlier year', 17), ('provision for taxation previous year', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax', 30), (' income tax benefit', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('prior year ', 19), ('earlier year', 9)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax', 42), ('amount transferred to retained earnings', 38), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), ('prior year ', 24), ('provision for taxation previous year', 23), (' income tax benefit', 19), (' tax (expense)/benefit', 18), ('deferred tax', 17), (' income tax benefit/(expense)', 15), ('earlier year', 7)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('current tax', 31), (' income tax benefit', 31), ('minimum alternate tax credit entitlement', 30), ('earlier year', 30), ('amount transferred to retained earnings', 29), (' income tax expense', 26), ('deferred tax', 25), ('prior year ', 24), (' tax (expense)/benefit', 24), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 21), (' income tax', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' income tax', 33), ('amount transferred to retained earnings', 28), (' income tax expense', 24), (' income tax benefit', 23), (' tax (expense)/benefit', 22), ('prior year ', 21), ('current tax', 20), ('minimum alternate tax credit entitlement', 20), ('earlier year', 19), (' income tax benefit/(expense)', 18), ('deferred tax', 11), ('provision for taxation previous year', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('amount transferred to retained earnings', 36), (' income tax expense', 36), ('provision for taxation previous year', 31), ('deferred tax', 26), ('minimum alternate tax credit entitlement', 26), (' income tax', 26), ('current tax', 25), ('earlier year', 24), ('prior year ', 21), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax benefit/(expense)', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' income tax benefit', 67), ('provision for taxation previous year', 59), (' income tax expense', 58), (' income tax', 58), (' income tax benefit/(expense)', 57), (' tax (expense)/benefit', 50), ('deferred tax', 45), ('current tax', 42), ('minimum alternate tax credit entitlement', 41), ('prior year ', 25), ('amount transferred to retained earnings', 24), ('earlier year', 24)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('provision for taxation previous year', 22), ('amount transferred to retained earnings', 19), ('earlier year', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' income tax expense', 65), (' income tax benefit/(expense)', 63), ('provision for taxation previous year', 52), (' income tax benefit', 48), (' tax (expense)/benefit', 47), ('minimum alternate tax credit entitlement', 43), (' income tax', 43), ('current tax', 36), ('deferred tax', 33), ('amount transferred to retained earnings', 30), ('earlier year', 27), ('prior year ', 23)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('prior year ', 31), ('current tax', 30), (' tax (expense)/benefit', 30), ('earlier year', 24), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('minimum alternate tax credit entitlement', 37), (' tax (expense)/benefit', 35), ('amount transferred to retained earnings', 33), ('provision for taxation previous year', 32), (' income tax benefit', 32), (' income tax benefit/(expense)', 32), ('earlier year', 31), ('prior year ', 29), ('deferred tax', 25), ('current tax', 24), (' income tax', 21), (' income tax expense', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' income tax', 15), ('prior year ', 14), ('amount transferred to retained earnings', 13), ('provision for taxation previous year', 12), ('earlier year', 12), (' income tax expense', 10), (' income tax benefit', 10), (' tax (expense)/benefit', 9), (' income tax benefit/(expense)', 7), ('minimum alternate tax credit entitlement', 6), ('current tax', 0), ('deferred tax', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('minimum alternate tax credit entitlement', 36), ('amount transferred to retained earnings', 32), ('prior year ', 31), (' income tax expense', 31), ('current tax', 30), (' income tax benefit', 30), (' tax (expense)/benefit', 30), (' income tax', 26), (' income tax benefit/(expense)', 26), ('provision for taxation previous year', 24), ('deferred tax', 21), ('earlier year', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' income tax benefit/(expense)', 66), (' income tax expense', 64), ('minimum alternate tax credit entitlement', 52), (' income tax benefit', 51), (' tax (expense)/benefit', 50), (' income tax', 42), ('amount transferred to retained earnings', 36), ('deferred tax', 33), ('provision for taxation previous year', 32), ('current tax', 31), ('prior year ', 27), ('earlier year', 22)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' income tax expense', 59), (' income tax benefit/(expense)', 50), (' income tax benefit', 49), (' income tax', 43), ('current tax', 41), ('prior year ', 37), ('deferred tax', 32), ('earlier year', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 28), ('amount transferred to retained earnings', 18), ('minimum alternate tax credit entitlement', 7)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), (' income tax benefit', 46), ('provision for taxation previous year', 44), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('earlier year', 34), ('current tax', 30), ('deferred tax', 27), (' tax (expense)/benefit', 26), ('amount transferred to retained earnings', 16)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': -47777896.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['7'], 'line_item_value': [-47777896.0]}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('share of', 40), ('share in', 40)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('share of', 40), ('share in', 40)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 25), ('exceptional', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('exceptional', 13), ('prior period', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('prior period', 34), ('exceptional', 26)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('exceptional', 20), ('prior period', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 17), ('exceptional', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('exceptional', 22), ('prior period', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 17), ('exceptional', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('exceptional', 24), ('prior period', 9)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('exceptional', 19), ('prior period', 7)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('exceptional', 38), ('prior period', 30)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('prior period', 19), ('exceptional', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('exceptional', 29), ('prior period', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('prior period', 47), ('exceptional', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('prior period', 36), ('exceptional', 31)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('exceptional', 21), ('prior period', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('prior period', 24), ('exceptional', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('prior period', 12), ('exceptional', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('prior period', 29), ('exceptional', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('exceptional', 25), ('prior period', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('exceptional', 24), ('prior period', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('prior period', 21), ('exceptional', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 25), ('exceptional', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('exceptional', 13), ('prior period', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('prior period', 34), ('exceptional', 26)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('exceptional', 20), ('prior period', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 17), ('exceptional', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('exceptional', 22), ('prior period', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 17), ('exceptional', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('exceptional', 24), ('prior period', 9)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('exceptional', 19), ('prior period', 7)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('exceptional', 38), ('prior period', 30)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('prior period', 19), ('exceptional', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('exceptional', 29), ('prior period', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('prior period', 47), ('exceptional', 14)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('prior period', 36), ('exceptional', 31)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('exceptional', 21), ('prior period', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('prior period', 24), ('exceptional', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('prior period', 12), ('exceptional', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('prior period', 29), ('exceptional', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('exceptional', 25), ('prior period', 17)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('exceptional', 24), ('prior period', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('prior period', 21), ('exceptional', 20)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:58:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-04-23 13:58:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('NULL', 31)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('NULL', 19)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('NULL', 22)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('NULL', 24)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('NULL', 31)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('NULL', 5)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('NULL', 5)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('NULL', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('NULL', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:58:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:58:20+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('NULL', 31)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('NULL', 19)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('NULL', 22)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('NULL', 24)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('NULL', 31)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('NULL', 5)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('NULL', 5)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('NULL', 25)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = loss on remeasurement of hedged instrument , res_fuzz_match = [('NULL', 18)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:58:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:34+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-04-23 13:59:34+0530 - sLogger - DEBUG - process_main_pages started
2023-04-23 13:59:34+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-04-23 13:59:34+0530 - sLogger - DEBUG - start_refactoring started
2023-04-23 13:59:34+0530 - sLogger - DEBUG - start_refactoring completed
2023-04-23 13:59:34+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-04-23 13:59:34+0530 - sLogger - DEBUG - start_refactoring started
2023-04-23 13:59:34+0530 - sLogger - DEBUG - start_refactoring completed
2023-04-23 13:59:34+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-04-23 13:59:34+0530 - sLogger - DEBUG - start_refactoring started
2023-04-23 13:59:34+0530 - sLogger - DEBUG - start_refactoring completed
2023-04-23 13:59:34+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-04-23 13:59:34+0530 - sLogger - DEBUG - set_section_details started
2023-04-23 13:59:34+0530 - sLogger - DEBUG - ASSETS | [('assets', 100), ('current assets', 56), ('noncurrent assets', 56), ('equity', 36), ('equity and liabilities', 27), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD current assets | score 90
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD current liabilities | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrent assets | score 90
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrent liabilities | score 31
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD non current assets | score 90
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD non current liabilities | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD equity and liabilities | score 28
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD equity | score 33
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Current assets | [('current assets', 100), ('noncurrent assets', 77), ('assets', 56), ('current liabilities', 52), ('noncurrent liabilities', 44), ('equity', 32), ('equity liabilities', 23), ('equity and liabilities', 20), ('liabilities', 11)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current assets | score 100
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current liabilities | score 67
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent assets | score 90
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent liabilities | score 61
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current assets | score 95
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current liabilities | score 86
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity and liabilities | score 33
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity | score 31
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 47), ('assets', 31), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('current liabilities', 17), ('liabilities', 7), ('noncurrent liabilities', 6)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 29
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 36
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 33
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 46
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Trade and other receivables | [('equity and liabilities', 41), ('current assets', 34), ('current liabilities', 28), ('noncurrent assets', 23), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('liabilities', 14), ('noncurrent liabilities', 11)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 39
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 35
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 34
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Inventories | [('noncurrent assets', 36), ('current liabilities', 35), ('assets', 29), ('current assets', 27), ('liabilities', 27), ('equity', 27), ('equity and liabilities', 23), ('equity liabilities', 18), ('noncurrent liabilities', 17)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 32
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 40
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 40
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 45
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Other current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 48), ('assets', 42), ('noncurrent liabilities', 36), ('equity liabilities', 25), ('equity', 24), ('equity and liabilities', 22), ('liabilities', 8)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD current assets | score 95
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD current liabilities | score 56
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrent assets | score 81
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrent liabilities | score 57
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD non current assets | score 84
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD non current liabilities | score 60
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD equity and liabilities | score 33
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Deferred operating expenditure | [('current assets', 29), ('noncurrent assets', 29), ('equity and liabilities', 26), ('equity liabilities', 24), ('noncurrent liabilities', 23), ('equity', 22), ('current liabilities', 17), ('assets', 15), ('liabilities', 7)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Deferred operating expenditure | MATCH WORD current assets | score 37
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Deferred operating expenditure | MATCH WORD current liabilities | score 38
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Deferred operating expenditure | MATCH WORD noncurrent assets | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Deferred operating expenditure | MATCH WORD noncurrent liabilities | score 31
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Deferred operating expenditure | MATCH WORD non current assets | score 33
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Deferred operating expenditure | MATCH WORD non current liabilities | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Deferred operating expenditure | MATCH WORD equity and liabilities | score 33
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Deferred operating expenditure | MATCH WORD equity | score 45
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 55), ('assets', 42), ('noncurrent liabilities', 36), ('equity liabilities', 31), ('equity and liabilities', 28), ('equity', 24), ('liabilities', 8)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 29
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Noncurrent assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('current liabilities', 30), ('equity', 21), ('equity and liabilities', 20), ('equity liabilities', 15), ('liabilities', 11)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current assets | score 90
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current liabilities | score 61
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent assets | score 100
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent liabilities | score 72
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current assets | score 97
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current liabilities | score 70
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity | score 31
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Loan receivables | [('equity and liabilities', 36), ('current assets', 33), ('assets', 25), ('noncurrent assets', 25), ('liabilities', 24), ('equity', 24), ('current liabilities', 24), ('equity liabilities', 17), ('noncurrent liabilities', 16)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Loan receivables | MATCH WORD current assets | score 27
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Loan receivables | MATCH WORD current liabilities | score 46
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Loan receivables | MATCH WORD noncurrent assets | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Loan receivables | MATCH WORD noncurrent liabilities | score 47
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Loan receivables | MATCH WORD non current assets | score 41
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Loan receivables | MATCH WORD non current liabilities | score 56
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Loan receivables | MATCH WORD equity and liabilities | score 50
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Loan receivables | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Investments accounted for using the equity method | [('equity and liabilities', 39), ('equity liabilities', 30), ('equity', 26), ('current liabilities', 26), ('noncurrent liabilities', 22), ('assets', 18), ('current assets', 15), ('noncurrent assets', 15), ('liabilities', 9)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Investments accounted for using the equity method | MATCH WORD current assets | score 43
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Investments accounted for using the equity method | MATCH WORD current liabilities | score 33
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Investments accounted for using the equity method | MATCH WORD noncurrent assets | score 35
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Investments accounted for using the equity method | MATCH WORD noncurrent liabilities | score 32
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Investments accounted for using the equity method | MATCH WORD non current assets | score 38
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Investments accounted for using the equity method | MATCH WORD non current liabilities | score 33
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Investments accounted for using the equity method | MATCH WORD equity and liabilities | score 86
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Investments accounted for using the equity method | MATCH WORD equity | score 60
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Exploration and evaluation assets | [('current assets', 46), ('noncurrent assets', 46), ('equity and liabilities', 41), ('assets', 37), ('current liabilities', 28), ('equity liabilities', 23), ('noncurrent liabilities', 22), ('liabilities', 14), ('equity', 14)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Exploration and evaluation assets | MATCH WORD current assets | score 86
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Exploration and evaluation assets | MATCH WORD current liabilities | score 29
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Exploration and evaluation assets | MATCH WORD noncurrent assets | score 86
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Exploration and evaluation assets | MATCH WORD noncurrent liabilities | score 33
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Exploration and evaluation assets | MATCH WORD non current assets | score 86
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Exploration and evaluation assets | MATCH WORD non current liabilities | score 32
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Exploration and evaluation assets | MATCH WORD equity and liabilities | score 86
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Exploration and evaluation assets | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Oil and gas properties | [('equity and liabilities', 39), ('noncurrent liabilities', 36), ('current liabilities', 30), ('assets', 25), ('liabilities', 24), ('equity', 24), ('current assets', 19), ('noncurrent assets', 19), ('equity liabilities', 19)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Oil and gas properties | MATCH WORD current assets | score 29
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Oil and gas properties | MATCH WORD current liabilities | score 42
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Oil and gas properties | MATCH WORD noncurrent assets | score 26
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Oil and gas properties | MATCH WORD noncurrent liabilities | score 32
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Oil and gas properties | MATCH WORD non current assets | score 25
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Oil and gas properties | MATCH WORD non current liabilities | score 38
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Oil and gas properties | MATCH WORD equity and liabilities | score 50
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Oil and gas properties | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 49), ('equity', 40), ('current assets', 38), ('noncurrent assets', 32), ('equity liabilities', 32), ('current liabilities', 26), ('assets', 21), ('liabilities', 13), ('noncurrent liabilities', 11)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 36
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 24
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 33
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 40
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equity', 33), ('equity liabilities', 32), ('current liabilities', 31), ('noncurrent liabilities', 23), ('liabilities', 22), ('equity and liabilities', 14)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current assets | score 58
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current liabilities | score 33
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent assets | score 53
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent liabilities | score 31
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current assets | score 54
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current liabilities | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity and liabilities | score 26
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Other noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 30), ('equity', 24), ('equity and liabilities', 22), ('equity liabilities', 19), ('liabilities', 8)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD current assets | score 90
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD current liabilities | score 52
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD non current assets | score 83
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD non current liabilities | score 61
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Leased assets | [('assets', 67), ('current assets', 61), ('noncurrent assets', 52), ('equity and liabilities', 44), ('equity liabilities', 43), ('current liabilities', 42), ('liabilities', 25), ('equity', 25), ('noncurrent liabilities', 17)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Leased assets | MATCH WORD current assets | score 60
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Leased assets | MATCH WORD current liabilities | score 36
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Leased assets | MATCH WORD noncurrent assets | score 60
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Leased assets | MATCH WORD noncurrent liabilities | score 27
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Leased assets | MATCH WORD non current assets | score 60
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Leased assets | MATCH WORD non current liabilities | score 27
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Leased assets | MATCH WORD equity and liabilities | score 34
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Leased assets | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 36), ('equity and liabilities', 28), ('equity liabilities', 25), ('equity', 24), ('liabilities', 8)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 27
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('equity liabilities', 33), ('current liabilities', 32), ('equity and liabilities', 29), ('equity', 24), ('liabilities', 12), ('noncurrent liabilities', 8)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 22
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 40
2023-04-23 13:59:34+0530 - sLogger - DEBUG - LIABILITIES | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equity', 33), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD current assets | score 16
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD current liabilities | score 90
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrent assets | score 29
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrent liabilities | score 90
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD non current assets | score 29
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD non current liabilities | score 90
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD equity and liabilities | score 90
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Current liabilities | [('current liabilities', 100), ('equity liabilities', 67), ('liabilities', 60), ('equity and liabilities', 58), ('current assets', 52), ('noncurrent liabilities', 43), ('noncurrent assets', 30), ('equity', 30), ('assets', 11)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current assets | score 64
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current liabilities | score 100
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent assets | score 56
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent liabilities | score 93
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current assets | score 54
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current liabilities | score 95
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity and liabilities | score 69
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current assets', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('noncurrent assets', 23), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 39
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 37
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 28
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 39
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 28
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 34
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 22
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 26
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 36
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 22
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Other current liabilities | [('current liabilities', 82), ('equity liabilities', 55), ('noncurrent liabilities', 53), ('equity and liabilities', 49), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD current assets | score 86
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD current liabilities | score 95
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD noncurrent assets | score 52
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD non current assets | score 57
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD non current liabilities | score 88
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD equity and liabilities | score 64
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 26
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 24
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 23
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('equity liabilities', 55), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 52
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 57
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Noncurrent liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('assets', 11), ('equity', 10)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current assets | score 61
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current liabilities | score 93
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent assets | score 70
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent liabilities | score 100
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current assets | score 65
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current liabilities | score 98
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity and liabilities | score 65
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrent assets', 32), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Deferred tax liabilities | [('liabilities', 55), ('equity and liabilities', 55), ('equity liabilities', 55), ('current liabilities', 53), ('noncurrent liabilities', 47), ('equity', 27), ('assets', 19), ('current assets', 14), ('noncurrent assets', 14)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD current assets | score 39
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD current liabilities | score 74
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrent assets | score 34
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrent liabilities | score 70
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD non current assets | score 33
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD non current liabilities | score 68
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equity and liabilities | score 65
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 22
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 26
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 36
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 22
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Other noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrent assets', 55), ('liabilities', 46), ('current assets', 42), ('equity liabilities', 36), ('current liabilities', 35), ('equity and liabilities', 32), ('assets', 16), ('equity', 8)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other noncurrent liabilities | MATCH WORD current assets | score 61
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other noncurrent liabilities | MATCH WORD non current assets | score 60
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Other noncurrent liabilities | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 26
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 24
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 23
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Provision for associate funding | [('current assets', 34), ('noncurrent assets', 34), ('equity and liabilities', 26), ('assets', 22), ('current liabilities', 22), ('equity liabilities', 17), ('liabilities', 14), ('equity', 14), ('noncurrent liabilities', 11)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provision for associate funding | MATCH WORD current assets | score 39
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provision for associate funding | MATCH WORD current liabilities | score 22
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provision for associate funding | MATCH WORD noncurrent assets | score 42
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provision for associate funding | MATCH WORD noncurrent liabilities | score 25
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provision for associate funding | MATCH WORD non current assets | score 45
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provision for associate funding | MATCH WORD non current liabilities | score 28
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provision for associate funding | MATCH WORD equity and liabilities | score 23
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Provision for associate funding | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrent assets', 55), ('liabilities', 46), ('current assets', 42), ('equity liabilities', 36), ('current liabilities', 35), ('equity and liabilities', 32), ('assets', 16), ('equity', 15)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 60
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 22)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 33
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 32
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('equity and liabilities', 31), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('liabilities', 13)]
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-04-23 13:59:34+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-04-23 13:59:34+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-04-23 13:59:34+0530 - sLogger - DEBUG - set_section_details started
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from operating activities | operating cash flow before working capital changes
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | adiustments for movements in working capital
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income taxes paid | changes in working capital
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash inflow from operating activities | operating cash flow before working capital changes
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from investing activities | operating cash flow before working capital changes
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments for property, plant and equipment | changes in operating assets and liabilities
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from sale of property, plant and equipment | changes in operating assets and liabilities
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayments of loans by associates | changes in assets liabilities
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received on loans to associates | changes in assets liabilities
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts/Payments) from financial assets | operating profit before changes in assets and liabilities
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments for intangible assets | operating profit before changes in assets and liabilities
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments of oil and gas properties | changes in operating assets and liabilities
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments of exploration and evaluation assets | operating profit before changes in assets and liabilities
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment for acquisition of interest in Barossa | adjustments for increase decrease in operating assets
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Return of capital/dividend received from Investment | movements in working capital
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Loans to associates | changes in assets liabilities
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Loan to related party | operating profit before working capital changes
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash (outflow) from investing activities | operating cash flow before working capital changes
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from financing activities | operating cash flow before working capital changes
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from issues of shares and other equity securities | operating profit loss before working capital changes
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from borrowings | operating profit before working capital changes
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Finance lease payments | operating profit loss before working capital changes
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash inflow (outflow) from financing activities | operating cash flow before working capital changes
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the financial year | operating cash flow before working capital changes
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Effects of exchange rate changes on cash and cash equivalents | changes in operating assets and liabilities
2023-04-23 13:59:34+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at end of year | changes in operating assets and liabilities
2023-04-23 13:59:38+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 13:59:38+0530 - sLogger - ERROR - error occured: 'year'
2023-04-23 13:59:38+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 13:59:38+0530 - sLogger - ERROR - error occured: 'value'
2023-04-23 13:59:38+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 13:59:38+0530 - sLogger - ERROR - error occured: 'value'
2023-04-23 13:59:38+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 13:59:38+0530 - sLogger - ERROR - error occured: 'value'
2023-04-23 13:59:38+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 13:59:38+0530 - sLogger - ERROR - error occured: 'year'
2023-04-23 13:59:38+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 13:59:38+0530 - sLogger - ERROR - error occured: list index out of range
2023-04-23 13:59:38+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 13:59:38+0530 - sLogger - ERROR - error occured: list index out of range
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 13:59:39+0530 - sLogger - ERROR - error occured: 'value'
2023-04-23 13:59:39+0530 - sLogger - DEBUG - process_main_pages completed
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('other bank balances', 18), ('cash and bank balances', 16), ('bank balances other than above', 12)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 25), ('cash and cash equivalents', 24), (' cash and cash equivalents', 24), ('bank balances other than above', 20), ('other bank balances', 20), ('bank balances other than cash and cash equivalents', 18), ('cash and bank balances', 18)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and short term deposits', 54), ('cash and bank balances', 39), ('bank balances other than above', 17), ('other bank balances', 11)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('bank balances other than above', 45), ('cash and cash equivalents', 42), (' cash and cash equivalents', 42), ('other bank balances', 41), ('bank balances other than cash and cash equivalents', 36), ('cash and short term deposits', 33), ('cash and bank balances', 24)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('cash and bank balances', 14), ('bank balances other than cash and cash equivalents', 11), ('bank balances other than above', 11)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other bank balances', 44), ('bank balances other than above', 39), ('cash and short term deposits', 39), ('bank balances other than cash and cash equivalents', 32), ('cash and cash equivalents', 25), (' cash and cash equivalents', 25), ('cash and bank balances', 21)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = deferred operating expenditure , res_fuzz_match = [('cash and short term deposits', 33), ('other bank balances', 26), ('cash and cash equivalents', 19), (' cash and cash equivalents', 19), ('bank balances other than cash and cash equivalents', 18), ('bank balances other than above', 17), ('cash and bank balances', 15)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 90865.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['3'], 'line_item_value': [90865.0]}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('other bank balances', 18), ('cash and bank balances', 16), ('bank balances other than above', 12)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 25), ('cash and cash equivalents', 24), (' cash and cash equivalents', 24), ('bank balances other than above', 20), ('other bank balances', 20), ('bank balances other than cash and cash equivalents', 18), ('cash and bank balances', 18)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and short term deposits', 54), ('cash and bank balances', 39), ('bank balances other than above', 17), ('other bank balances', 11)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('bank balances other than above', 45), ('cash and cash equivalents', 42), (' cash and cash equivalents', 42), ('other bank balances', 41), ('bank balances other than cash and cash equivalents', 36), ('cash and short term deposits', 33), ('cash and bank balances', 24)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('cash and bank balances', 14), ('bank balances other than cash and cash equivalents', 11), ('bank balances other than above', 11)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other bank balances', 44), ('bank balances other than above', 39), ('cash and short term deposits', 39), ('bank balances other than cash and cash equivalents', 32), ('cash and cash equivalents', 25), (' cash and cash equivalents', 25), ('cash and bank balances', 21)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = deferred operating expenditure , res_fuzz_match = [('cash and short term deposits', 33), ('other bank balances', 26), ('cash and cash equivalents', 19), (' cash and cash equivalents', 19), ('bank balances other than cash and cash equivalents', 18), ('bank balances other than above', 17), ('cash and bank balances', 15)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 136874.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['3'], 'line_item_value': [136874.0]}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets cash and cash equivalents , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' short term deposits', 31), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 31)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' cash at bank', 33), (' short term deposits', 33), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 33), (' cash and cash equivalents', 33), (' cash on hand and at bank', 33), ('cash on hand', 29), (' cash at bank and on hand', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets cash and cash equivalents , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' short term deposits', 31), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 31)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' cash at bank', 33), (' short term deposits', 33), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 33), (' cash and cash equivalents', 33), (' cash on hand and at bank', 33), ('cash on hand', 29), (' cash at bank and on hand', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [136874.0, 90865.0], 'label': ['Current assets Cash and cash equivalents', 'Current assets Cash and cash equivalents'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 31)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 36)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('inventories', 33)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = deferred operating expenditure , res_fuzz_match = [('inventories', 47)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 2269.0, 'line_item_label': ['Inventories'], 'note_numbers': ['4'], 'line_item_value': [2269.0]}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 31)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 36)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('inventories', 33)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = deferred operating expenditure , res_fuzz_match = [('inventories', 47)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 2364.0, 'line_item_label': ['Inventories'], 'note_numbers': ['4'], 'line_item_value': [2364.0]}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = inventories , res_fuzz_match = [(' provision for inventory obsolescence', 100), (' inventories', 100), ('raw materials', 40), (' raw materials', 40), (' goods in transit', 36), (' cranes - in transit', 36), (' finished goods', 33), (' finished goods at cost', 33), (' stores and other consumables at cost', 33), (' finished goods', 33), (' spare parts', 27), (' cranes', 25), (' work in progress', 22)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' provision for inventory obsolescence', 44), (' cranes', 44), (' finished goods at cost', 33), (' stores and other consumables at cost', 33), (' finished goods', 29), (' finished goods', 29), ('raw materials', 20), (' raw materials', 20), (' work in progress', 20), (' goods in transit', 17), (' inventories', 17), (' cranes - in transit', 17), (' spare parts', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = inventories , res_fuzz_match = [(' provision for inventory obsolescence', 100), (' inventories', 100), ('raw materials', 40), (' raw materials', 40), (' goods in transit', 36), (' cranes - in transit', 36), (' finished goods', 33), (' finished goods at cost', 33), (' stores and other consumables at cost', 33), (' finished goods', 33), (' spare parts', 27), (' cranes', 25), (' work in progress', 22)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' provision for inventory obsolescence', 44), (' cranes', 44), (' finished goods at cost', 33), (' stores and other consumables at cost', 33), (' finished goods', 29), (' finished goods', 29), ('raw materials', 20), (' raw materials', 20), (' work in progress', 20), (' goods in transit', 17), (' inventories', 17), (' cranes - in transit', 17), (' spare parts', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [2364.0, 2269.0], 'label': [' Inventories', ' Inventories'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other financial assets', 30), ('other current financial assets', 29), ('other current assets', 25), ('other assets', 25), ('prepayments', 15)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current assets', 39), ('other financial assets', 39), ('other current financial assets', 33), ('prepayments', 21)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 29), ('other current financial assets', 22), ('prepayments', 13)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), ('other current financial assets', 83), ('other assets', 73), ('other financial assets', 68), ('prepayments', 16)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = deferred operating expenditure , res_fuzz_match = [('other current assets', 40), ('other assets', 38), ('other current financial assets', 33), ('other financial assets', 30), ('prepayments', 22)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': 100, 'value': 188453.0, 'line_item_label': ['Current assets', 'Other current assets'], 'note_numbers': [nan, '5'], 'line_item_value': [0.0, 188453.0]}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other financial assets', 30), ('other current financial assets', 29), ('other current assets', 25), ('other assets', 25), ('prepayments', 15)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current assets', 39), ('other financial assets', 39), ('other current financial assets', 33), ('prepayments', 21)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 29), ('other current financial assets', 22), ('prepayments', 13)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), ('other current financial assets', 83), ('other assets', 73), ('other financial assets', 68), ('prepayments', 16)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = deferred operating expenditure , res_fuzz_match = [('other current assets', 40), ('other assets', 38), ('other current financial assets', 33), ('other financial assets', 30), ('prepayments', 22)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': 100, 'value': 252815.0, 'line_item_label': ['Current assets', 'Other current assets'], 'note_numbers': [nan, '5'], 'line_item_value': [0.0, 252815.0]}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = lng , res_fuzz_match = [('prepaid expense', 33), ('prepaid expenditure', 33), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = condensate , res_fuzz_match = [('prepaid expense', 43), ('prepaid expenditure', 29), ('other prepayments', 29), ('prepayments', 18), ('prepaid', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = lng , res_fuzz_match = [('prepaid expense', 33), ('prepaid expenditure', 33), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = condensate , res_fuzz_match = [('prepaid expense', 43), ('prepaid expenditure', 29), ('other prepayments', 29), ('prepayments', 18), ('prepaid', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('prepaid', 43), ('other prepayments', 42), ('prepaid expense', 33), ('prepayments', 33), ('prepaid expenditure', 25)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = share of joint venture receivables , res_fuzz_match = [('prepaid expenditure', 50), ('other prepayments', 50), ('prepaid expense', 43), ('prepaid', 43), ('prepayments', 33)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [('other prepayments', 67), ('prepaid', 43), ('prepaid expense', 33), ('prepayments', 33), ('prepaid expenditure', 25)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('prepaid', 43), ('other prepayments', 42), ('prepaid expense', 33), ('prepayments', 33), ('prepaid expenditure', 25)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = share of joint venture receivables , res_fuzz_match = [('prepaid expenditure', 50), ('other prepayments', 50), ('prepaid expense', 43), ('prepaid', 43), ('prepayments', 33)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [('other prepayments', 67), ('prepaid', 43), ('prepaid expense', 33), ('prepayments', 33), ('prepaid expenditure', 25)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets prepayments , res_fuzz_match = [('prepayments', 100), ('prepaid', 77), ('other prepayments', 67), ('prepaid expense', 50), ('prepaid expenditure', 42)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets interest receivable , res_fuzz_match = [('other prepayments', 50), ('prepaid', 43), ('prepaid expense', 36), ('prepaid expenditure', 33), ('prepayments', 33)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets bank guarantee , res_fuzz_match = [('prepaid', 43), ('prepayments', 33), ('other prepayments', 33), ('prepaid expense', 29), ('prepaid expenditure', 28)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets rental bond , res_fuzz_match = [('prepaid', 43), ('prepaid expenditure', 39), ('prepaid expense', 36), ('prepayments', 33), ('other prepayments', 33)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets related party receivable , res_fuzz_match = [('prepaid expenditure', 50), ('prepaid', 43), ('other prepayments', 42), ('prepaid expense', 36), ('prepayments', 33)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets share of jv prepayments , res_fuzz_match = [('prepayments', 100), ('other prepayments', 78), ('prepaid', 77), ('prepaid expense', 50), ('prepaid expenditure', 42)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets current investments , res_fuzz_match = [('prepaid', 43), ('prepaid expense', 36), ('prepaid expenditure', 33), ('prepayments', 33), ('other prepayments', 33)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets , res_fuzz_match = [('prepaid', 43), ('prepayments', 33), ('other prepayments', 33), ('prepaid expense', 31), ('prepaid expenditure', 25)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets prepayments , res_fuzz_match = [('prepayments', 100), ('prepaid', 77), ('other prepayments', 67), ('prepaid expense', 50), ('prepaid expenditure', 42)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets interest receivable , res_fuzz_match = [('other prepayments', 50), ('prepaid', 43), ('prepaid expense', 36), ('prepaid expenditure', 33), ('prepayments', 33)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets bank guarantee , res_fuzz_match = [('prepaid', 43), ('prepayments', 33), ('other prepayments', 33), ('prepaid expense', 29), ('prepaid expenditure', 28)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets rental bond , res_fuzz_match = [('prepaid', 43), ('prepaid expenditure', 39), ('prepaid expense', 36), ('prepayments', 33), ('other prepayments', 33)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets related party receivable , res_fuzz_match = [('prepaid expenditure', 50), ('prepaid', 43), ('other prepayments', 42), ('prepaid expense', 36), ('prepayments', 33)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets share of jv prepayments , res_fuzz_match = [('prepayments', 100), ('other prepayments', 78), ('prepaid', 77), ('prepaid expense', 50), ('prepaid expenditure', 42)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets current investments , res_fuzz_match = [('prepaid', 43), ('prepaid expense', 36), ('prepaid expenditure', 33), ('prepayments', 33), ('other prepayments', 33)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets , res_fuzz_match = [('prepaid', 43), ('prepayments', 33), ('other prepayments', 33), ('prepaid expense', 31), ('prepaid expenditure', 25)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 50), ('prepaid', 29), ('prepayments', 17), ('other prepayments', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 5, 8, 13], 'score': [100, 100, 100, 100], 'value': [314.0, 1758.0, 175.0, 431.0], 'label': ['Current assets Prepayments', 'Current assets Share of JV prepayments', 'Current assets Prepayments', 'Current assets Share of JV prepayments'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' deferred operating expenditure', 15), (' trade and other receivables', 15), (' income tax receivable from related parties', 11)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' deferred operating expenditure', 29), (' income tax receivable from related parties', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 42), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), (' other financial assets', 30), ('other current assets', 25), ('other assets', 25), (' other current assets', 25), (' deferred operating expenditure', 19)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets', 42), (' income tax receivable from related parties', 40), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' deferred operating expenditure', 37), (' financial assets', 23), (' biological assets', 18)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' biological assets', 29), (' other financial assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24), (' deferred operating expenditure', 20)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), (' other current assets', 100), ('other assets', 73), (' other financial assets', 68), (' biological assets', 45), (' financial assets', 44), (' trade and other receivables', 39), (' income tax receivable from related parties', 23), (' deferred operating expenditure', 15)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = deferred operating expenditure , res_fuzz_match = [(' deferred operating expenditure', 100), ('other current assets', 40), (' other current assets', 40), ('other assets', 38), (' trade and other receivables', 33), (' other financial assets', 30), (' biological assets', 24), (' income tax receivable from related parties', 19), (' financial assets', 18)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5, 6], 'score': 100, 'value': 195846.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other current assets', 'Deferred operating expenditure'], 'note_numbers': [nan, '7(a)', '5', '6'], 'line_item_value': [0.0, 4556.0, 188453.0, 2837.0]}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' deferred operating expenditure', 15), (' trade and other receivables', 15), (' income tax receivable from related parties', 11)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' deferred operating expenditure', 29), (' income tax receivable from related parties', 17)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 42), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), (' other financial assets', 30), ('other current assets', 25), ('other assets', 25), (' other current assets', 25), (' deferred operating expenditure', 19)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets', 42), (' income tax receivable from related parties', 40), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' deferred operating expenditure', 37), (' financial assets', 23), (' biological assets', 18)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' biological assets', 29), (' other financial assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24), (' deferred operating expenditure', 20)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), (' other current assets', 100), ('other assets', 73), (' other financial assets', 68), (' biological assets', 45), (' financial assets', 44), (' trade and other receivables', 39), (' income tax receivable from related parties', 23), (' deferred operating expenditure', 15)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = deferred operating expenditure , res_fuzz_match = [(' deferred operating expenditure', 100), ('other current assets', 40), (' other current assets', 40), ('other assets', 38), (' trade and other receivables', 33), (' other financial assets', 30), (' biological assets', 24), (' income tax receivable from related parties', 19), (' financial assets', 18)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5, 6], 'score': 100, 'value': 261107.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other current assets', 'Deferred operating expenditure'], 'note_numbers': [nan, '7(a)', '5', '6'], 'line_item_value': [0.0, 5895.0, 252815.0, 2397.0]}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 70), (' related party receivable', 70), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 50), (' foreign exchange forward contracts', 47), (' forward exchange contracts', 47), (' accrued interest', 44), (' other', 40), (' accrued rebates', 38), ('other assets', 36), (' bank guarantee', 35), (' share of jv prepayments', 35), (' current investments', 33), ('current', 29), (' deposits', 29), (' condensate', 29), (' related party disclosures', 25), (' rental bond', 24), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = share of joint venture receivables , res_fuzz_match = [(' interest receivable', 74), (' long service leave receivable', 59), (' related party receivable', 59), (' accrued interest', 57), (' deposits', 57), (' other receivables - related party', 52), (' share of jv prepayments', 50), (' current investments', 50), ('other assets', 45), (' rental bond', 45), (' amount receivable from controlling entity', 44), ('current', 43), (' other deposits receivable - related party', 43), (' condensate', 43), (' other', 40), (' income tax receivable from related parties', 40), (' bank guarantee', 38), (' foreign exchange forward contracts', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 35), (' electricity derivatives at fair value', 35), (' other debtors and prepayments', 34), (' related party disclosures', 33), (' lng', 33), (' forward exchange contracts', 33), (' derivative contracts - fair value', 21)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [(' other', 100), (' other receivables - related party', 100), (' other deposits receivable - related party', 75), (' amount receivable from controlling entity', 75), (' interest receivable', 75), (' income tax receivable from related parties', 67), (' long service leave receivable', 67), (' related party receivable', 67), ('other assets', 64), (' other debtors and prepayments', 58), ('current', 43), ('foreign exchange derivatives at fair value', 42), (' electricity derivatives at fair value', 42), (' accrued interest', 42), (' forward exchange contracts', 40), (' condensate', 36), (' accrued rebates', 36), (' share of jv prepayments', 35), (' derivative contracts - fair value', 33), (' current investments', 33), (' foreign exchange forward contracts', 33), (' deposits', 29), (' bank guarantee', 27), (' related party disclosures', 25), (' rental bond', 24), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 70), (' related party receivable', 70), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 50), (' foreign exchange forward contracts', 47), (' forward exchange contracts', 47), (' accrued interest', 44), (' other', 40), (' accrued rebates', 38), ('other assets', 36), (' bank guarantee', 35), (' share of jv prepayments', 35), (' current investments', 33), ('current', 29), (' deposits', 29), (' condensate', 29), (' related party disclosures', 25), (' rental bond', 24), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = share of joint venture receivables , res_fuzz_match = [(' interest receivable', 74), (' long service leave receivable', 59), (' related party receivable', 59), (' accrued interest', 57), (' deposits', 57), (' other receivables - related party', 52), (' share of jv prepayments', 50), (' current investments', 50), ('other assets', 45), (' rental bond', 45), (' amount receivable from controlling entity', 44), ('current', 43), (' other deposits receivable - related party', 43), (' condensate', 43), (' other', 40), (' income tax receivable from related parties', 40), (' bank guarantee', 38), (' foreign exchange forward contracts', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 35), (' electricity derivatives at fair value', 35), (' other debtors and prepayments', 34), (' related party disclosures', 33), (' lng', 33), (' forward exchange contracts', 33), (' derivative contracts - fair value', 21)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [(' other', 100), (' other receivables - related party', 100), (' other deposits receivable - related party', 75), (' amount receivable from controlling entity', 75), (' interest receivable', 75), (' income tax receivable from related parties', 67), (' long service leave receivable', 67), (' related party receivable', 67), ('other assets', 64), (' other debtors and prepayments', 58), ('current', 43), ('foreign exchange derivatives at fair value', 42), (' electricity derivatives at fair value', 42), (' accrued interest', 42), (' forward exchange contracts', 40), (' condensate', 36), (' accrued rebates', 36), (' share of jv prepayments', 35), (' derivative contracts - fair value', 33), (' current investments', 33), (' foreign exchange forward contracts', 33), (' deposits', 29), (' bank guarantee', 27), (' related party disclosures', 25), (' rental bond', 24), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 8], 'score': [100, 100], 'value': [1645.0, 589.0], 'label': [' Other receivables', ' Other receivables'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = lng , res_fuzz_match = [(' lng', 100), ('foreign exchange derivatives at fair value', 67), (' long service leave receivable', 67), (' foreign exchange forward contracts', 67), (' forward exchange contracts', 67), (' derivative contracts - fair value', 40), ('current', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' income tax receivable from related parties', 33), (' other receivables - related party', 33), (' other deposits receivable - related party', 33), (' amount receivable from controlling entity', 33), (' interest receivable', 33), (' bank guarantee', 33), (' rental bond', 33), (' related party receivable', 33), (' current investments', 33), (' condensate', 33), (' other debtors and prepayments', 33), ('other assets', 0), (' other', 0), (' deposits', 0), (' share of jv prepayments', 0), (' accrued rebates', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = condensate , res_fuzz_match = [(' condensate', 100), (' deposits', 55), (' rental bond', 55), (' related party disclosures', 46), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' electricity derivatives at fair value', 43), (' accrued interest', 43), (' derivative contracts - fair value', 43), (' long service leave receivable', 43), (' other deposits receivable - related party', 43), (' amount receivable from controlling entity', 43), (' current investments', 43), (' foreign exchange forward contracts', 43), (' forward exchange contracts', 43), (' other', 40), (' interest receivable', 36), (' related party receivable', 36), (' bank guarantee', 33), (' lng', 33), ('other assets', 29), (' income tax receivable from related parties', 29), (' other receivables - related party', 29), (' accrued rebates', 29), (' other debtors and prepayments', 29), (' share of jv prepayments', 14)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = lng , res_fuzz_match = [(' lng', 100), ('foreign exchange derivatives at fair value', 67), (' long service leave receivable', 67), (' foreign exchange forward contracts', 67), (' forward exchange contracts', 67), (' derivative contracts - fair value', 40), ('current', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' income tax receivable from related parties', 33), (' other receivables - related party', 33), (' other deposits receivable - related party', 33), (' amount receivable from controlling entity', 33), (' interest receivable', 33), (' bank guarantee', 33), (' rental bond', 33), (' related party receivable', 33), (' current investments', 33), (' condensate', 33), (' other debtors and prepayments', 33), ('other assets', 0), (' other', 0), (' deposits', 0), (' share of jv prepayments', 0), (' accrued rebates', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = condensate , res_fuzz_match = [(' condensate', 100), (' deposits', 55), (' rental bond', 55), (' related party disclosures', 46), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' electricity derivatives at fair value', 43), (' accrued interest', 43), (' derivative contracts - fair value', 43), (' long service leave receivable', 43), (' other deposits receivable - related party', 43), (' amount receivable from controlling entity', 43), (' current investments', 43), (' foreign exchange forward contracts', 43), (' forward exchange contracts', 43), (' other', 40), (' interest receivable', 36), (' related party receivable', 36), (' bank guarantee', 33), (' lng', 33), ('other assets', 29), (' income tax receivable from related parties', 29), (' other receivables - related party', 29), (' accrued rebates', 29), (' other debtors and prepayments', 29), (' share of jv prepayments', 14)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [100, 100, 100, 100], 'value': [2234.0, 163.0, 2813.0, 24.0], 'label': [' LNG', ' Condensate', ' LNG', ' Condensate'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets prepayments , res_fuzz_match = [('current', 100), (' share of jv prepayments', 75), (' current investments', 71), ('other assets', 64), (' other debtors and prepayments', 57), (' rental bond', 55), (' related party receivable', 46), (' other receivables - related party', 45), (' accrued rebates', 45), (' income tax receivable from related parties', 44), (' other deposits receivable - related party', 44), (' accrued interest', 43), (' condensate', 43), (' derivative contracts - fair value', 42), (' other', 40), (' bank guarantee', 38), ('foreign exchange derivatives at fair value', 35), (' related party disclosures', 35), (' amount receivable from controlling entity', 35), (' foreign exchange forward contracts', 35), (' deposits', 33), (' interest receivable', 33), (' lng', 33), (' forward exchange contracts', 32), (' long service leave receivable', 24), (' electricity derivatives at fair value', 10)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets interest receivable , res_fuzz_match = [('current', 100), (' interest receivable', 100), (' accrued interest', 71), (' current investments', 71), ('other assets', 64), (' other', 60), (' related party receivable', 57), (' rental bond', 55), (' long service leave receivable', 54), (' other receivables - related party', 51), (' other deposits receivable - related party', 45), (' related party disclosures', 43), (' deposits', 43), (' condensate', 43), (' share of jv prepayments', 42), (' bank guarantee', 38), (' electricity derivatives at fair value', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 34), (' income tax receivable from related parties', 34), (' amount receivable from controlling entity', 34), (' lng', 33), (' other debtors and prepayments', 32), (' forward exchange contracts', 29), (' foreign exchange forward contracts', 25), (' derivative contracts - fair value', 22)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets bank guarantee , res_fuzz_match = [('current', 100), (' bank guarantee', 100), (' current investments', 71), ('other assets', 64), (' rental bond', 55), (' accrued interest', 45), (' accrued rebates', 45), (' condensate', 43), (' foreign exchange forward contracts', 41), (' other', 40), (' related party receivable', 39), ('foreign exchange derivatives at fair value', 37), (' income tax receivable from related parties', 35), (' other deposits receivable - related party', 35), (' lng', 33), (' interest receivable', 32), (' other debtors and prepayments', 31), (' share of jv prepayments', 30), (' related party disclosures', 29), (' other receivables - related party', 29), (' deposits', 29), (' amount receivable from controlling entity', 29), (' forward exchange contracts', 29), (' long service leave receivable', 27), (' derivative contracts - fair value', 25), (' electricity derivatives at fair value', 23)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets rental bond , res_fuzz_match = [('current', 100), (' rental bond', 100), (' current investments', 71), ('other assets', 64), (' condensate', 55), (' related party receivable', 50), (' interest receivable', 47), (' accrued rebates', 45), (' accrued interest', 43), (' related party disclosures', 43), (' amount receivable from controlling entity', 40), (' bank guarantee', 38), (' other deposits receivable - related party', 36), (' foreign exchange forward contracts', 36), (' electricity derivatives at fair value', 33), (' long service leave receivable', 33), (' share of jv prepayments', 33), (' lng', 33), ('foreign exchange derivatives at fair value', 32), (' income tax receivable from related parties', 30), (' other debtors and prepayments', 30), (' forward exchange contracts', 28), (' other receivables - related party', 27), (' other', 25), (' deposits', 25), (' derivative contracts - fair value', 24)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets related party receivable , res_fuzz_match = [('current', 100), (' related party receivable', 100), (' current investments', 71), (' related party disclosures', 67), (' other receivables - related party', 67), ('other assets', 64), (' long service leave receivable', 55), (' rental bond', 55), (' accrued rebates', 55), (' income tax receivable from related parties', 54), (' interest receivable', 53), (' other deposits receivable - related party', 51), (' bank guarantee', 46), (' accrued interest', 43), (' condensate', 43), (' share of jv prepayments', 42), (' other', 40), (' derivative contracts - fair value', 38), (' electricity derivatives at fair value', 36), (' foreign exchange forward contracts', 36), ('foreign exchange derivatives at fair value', 35), (' lng', 33), (' amount receivable from controlling entity', 32), (' other debtors and prepayments', 30), (' deposits', 29), (' forward exchange contracts', 27)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets share of jv prepayments , res_fuzz_match = [('current', 100), (' share of jv prepayments', 100), (' current investments', 71), ('other assets', 64), (' rental bond', 55), (' accrued rebates', 45), (' other debtors and prepayments', 45), (' related party receivable', 44), (' accrued interest', 43), (' derivative contracts - fair value', 43), (' condensate', 43), (' other receivables - related party', 42), (' interest receivable', 41), (' other', 40), ('foreign exchange derivatives at fair value', 38), (' related party disclosures', 38), (' bank guarantee', 38), (' foreign exchange forward contracts', 35), (' deposits', 33), (' lng', 33), (' electricity derivatives at fair value', 32), (' income tax receivable from related parties', 31), (' other deposits receivable - related party', 31), (' long service leave receivable', 30), (' amount receivable from controlling entity', 30), (' forward exchange contracts', 28)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets current investments , res_fuzz_match = [('current', 100), (' current investments', 100), ('other assets', 64), (' accrued interest', 57), (' rental bond', 55), (' related party disclosures', 48), (' interest receivable', 48), (' accrued rebates', 45), (' related party receivable', 44), (' deposits', 43), (' condensate', 43), (' other', 40), (' other receivables - related party', 38), (' bank guarantee', 38), ('foreign exchange derivatives at fair value', 36), (' income tax receivable from related parties', 35), (' long service leave receivable', 35), (' other deposits receivable - related party', 35), (' derivative contracts - fair value', 33), (' amount receivable from controlling entity', 33), (' share of jv prepayments', 33), (' lng', 33), (' forward exchange contracts', 29), (' electricity derivatives at fair value', 27), (' foreign exchange forward contracts', 26), (' other debtors and prepayments', 26)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets , res_fuzz_match = [('current', 100), ('other assets', 74), (' current investments', 69), (' income tax receivable from related parties', 48), (' other receivables - related party', 48), (' other deposits receivable - related party', 48), (' rental bond', 48), (' amount receivable from controlling entity', 46), (' related party receivable', 46), (' accrued rebates', 45), (' condensate', 43), (' foreign exchange forward contracts', 42), (' forward exchange contracts', 42), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' accrued interest', 38), (' derivative contracts - fair value', 38), (' interest receivable', 38), (' bank guarantee', 38), (' share of jv prepayments', 36), (' lng', 33), (' related party disclosures', 32), (' long service leave receivable', 31), (' other debtors and prepayments', 31), (' deposits', 29), (' other', 20)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets prepayments , res_fuzz_match = [('current', 100), (' share of jv prepayments', 75), (' current investments', 71), ('other assets', 64), (' other debtors and prepayments', 57), (' rental bond', 55), (' related party receivable', 46), (' other receivables - related party', 45), (' accrued rebates', 45), (' income tax receivable from related parties', 44), (' other deposits receivable - related party', 44), (' accrued interest', 43), (' condensate', 43), (' derivative contracts - fair value', 42), (' other', 40), (' bank guarantee', 38), ('foreign exchange derivatives at fair value', 35), (' related party disclosures', 35), (' amount receivable from controlling entity', 35), (' foreign exchange forward contracts', 35), (' deposits', 33), (' interest receivable', 33), (' lng', 33), (' forward exchange contracts', 32), (' long service leave receivable', 24), (' electricity derivatives at fair value', 10)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets interest receivable , res_fuzz_match = [('current', 100), (' interest receivable', 100), (' accrued interest', 71), (' current investments', 71), ('other assets', 64), (' other', 60), (' related party receivable', 57), (' rental bond', 55), (' long service leave receivable', 54), (' other receivables - related party', 51), (' other deposits receivable - related party', 45), (' related party disclosures', 43), (' deposits', 43), (' condensate', 43), (' share of jv prepayments', 42), (' bank guarantee', 38), (' electricity derivatives at fair value', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 34), (' income tax receivable from related parties', 34), (' amount receivable from controlling entity', 34), (' lng', 33), (' other debtors and prepayments', 32), (' forward exchange contracts', 29), (' foreign exchange forward contracts', 25), (' derivative contracts - fair value', 22)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets bank guarantee , res_fuzz_match = [('current', 100), (' bank guarantee', 100), (' current investments', 71), ('other assets', 64), (' rental bond', 55), (' accrued interest', 45), (' accrued rebates', 45), (' condensate', 43), (' foreign exchange forward contracts', 41), (' other', 40), (' related party receivable', 39), ('foreign exchange derivatives at fair value', 37), (' income tax receivable from related parties', 35), (' other deposits receivable - related party', 35), (' lng', 33), (' interest receivable', 32), (' other debtors and prepayments', 31), (' share of jv prepayments', 30), (' related party disclosures', 29), (' other receivables - related party', 29), (' deposits', 29), (' amount receivable from controlling entity', 29), (' forward exchange contracts', 29), (' long service leave receivable', 27), (' derivative contracts - fair value', 25), (' electricity derivatives at fair value', 23)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets rental bond , res_fuzz_match = [('current', 100), (' rental bond', 100), (' current investments', 71), ('other assets', 64), (' condensate', 55), (' related party receivable', 50), (' interest receivable', 47), (' accrued rebates', 45), (' accrued interest', 43), (' related party disclosures', 43), (' amount receivable from controlling entity', 40), (' bank guarantee', 38), (' other deposits receivable - related party', 36), (' foreign exchange forward contracts', 36), (' electricity derivatives at fair value', 33), (' long service leave receivable', 33), (' share of jv prepayments', 33), (' lng', 33), ('foreign exchange derivatives at fair value', 32), (' income tax receivable from related parties', 30), (' other debtors and prepayments', 30), (' forward exchange contracts', 28), (' other receivables - related party', 27), (' other', 25), (' deposits', 25), (' derivative contracts - fair value', 24)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets related party receivable , res_fuzz_match = [('current', 100), (' related party receivable', 100), (' current investments', 71), (' related party disclosures', 67), (' other receivables - related party', 67), ('other assets', 64), (' long service leave receivable', 55), (' rental bond', 55), (' accrued rebates', 55), (' income tax receivable from related parties', 54), (' interest receivable', 53), (' other deposits receivable - related party', 51), (' bank guarantee', 46), (' accrued interest', 43), (' condensate', 43), (' share of jv prepayments', 42), (' other', 40), (' derivative contracts - fair value', 38), (' electricity derivatives at fair value', 36), (' foreign exchange forward contracts', 36), ('foreign exchange derivatives at fair value', 35), (' lng', 33), (' amount receivable from controlling entity', 32), (' other debtors and prepayments', 30), (' deposits', 29), (' forward exchange contracts', 27)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets share of jv prepayments , res_fuzz_match = [('current', 100), (' share of jv prepayments', 100), (' current investments', 71), ('other assets', 64), (' rental bond', 55), (' accrued rebates', 45), (' other debtors and prepayments', 45), (' related party receivable', 44), (' accrued interest', 43), (' derivative contracts - fair value', 43), (' condensate', 43), (' other receivables - related party', 42), (' interest receivable', 41), (' other', 40), ('foreign exchange derivatives at fair value', 38), (' related party disclosures', 38), (' bank guarantee', 38), (' foreign exchange forward contracts', 35), (' deposits', 33), (' lng', 33), (' electricity derivatives at fair value', 32), (' income tax receivable from related parties', 31), (' other deposits receivable - related party', 31), (' long service leave receivable', 30), (' amount receivable from controlling entity', 30), (' forward exchange contracts', 28)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets current investments , res_fuzz_match = [('current', 100), (' current investments', 100), ('other assets', 64), (' accrued interest', 57), (' rental bond', 55), (' related party disclosures', 48), (' interest receivable', 48), (' accrued rebates', 45), (' related party receivable', 44), (' deposits', 43), (' condensate', 43), (' other', 40), (' other receivables - related party', 38), (' bank guarantee', 38), ('foreign exchange derivatives at fair value', 36), (' income tax receivable from related parties', 35), (' long service leave receivable', 35), (' other deposits receivable - related party', 35), (' derivative contracts - fair value', 33), (' amount receivable from controlling entity', 33), (' share of jv prepayments', 33), (' lng', 33), (' forward exchange contracts', 29), (' electricity derivatives at fair value', 27), (' foreign exchange forward contracts', 26), (' other debtors and prepayments', 26)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = current assets , res_fuzz_match = [('current', 100), ('other assets', 74), (' current investments', 69), (' income tax receivable from related parties', 48), (' other receivables - related party', 48), (' other deposits receivable - related party', 48), (' rental bond', 48), (' amount receivable from controlling entity', 46), (' related party receivable', 46), (' accrued rebates', 45), (' condensate', 43), (' foreign exchange forward contracts', 42), (' forward exchange contracts', 42), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' accrued interest', 38), (' derivative contracts - fair value', 38), (' interest receivable', 38), (' bank guarantee', 38), (' share of jv prepayments', 36), (' lng', 33), (' related party disclosures', 32), (' long service leave receivable', 31), (' other debtors and prepayments', 31), (' deposits', 29), (' other', 20)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' related party receivable', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' condensate', 40), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' derivative contracts - fair value', 33), (' deposits', 33), (' share of jv prepayments', 33), (' foreign exchange forward contracts', 33), (' rental bond', 29), (' bank guarantee', 25), ('current', 20), (' other', 20), ('other assets', 18), (' current investments', 17), (' lng', 0)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [314.0, 90.0, 0.0, 27.0, 250000.0, 1758.0, 626.0, 252815.0, 175.0, 38.0, 116.0, 27.0, 95000.0, 431.0, 92666.0, 188453.0], 'label': ['Current assets Prepayments', 'Current assets Interest receivable', 'Current assets Bank guarantee', 'Current assets Rental bond', 'Current assets Related party receivable', 'Current assets Share of JV prepayments', 'Current assets Current investments', 'Current assets ', 'Current assets Prepayments', 'Current assets Interest receivable', 'Current assets Bank guarantee', 'Current assets Rental bond', 'Current assets Related party receivable', 'Current assets Share of JV prepayments', 'Current assets Current investments', 'Current assets '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('current assets', 81)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = deferred operating expenditure , res_fuzz_match = [('current assets', 29)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': 81, 'value': 188453.0, 'line_item_label': ['Current assets', 'Other current assets'], 'note_numbers': [nan, '5'], 'line_item_value': [0.0, 188453.0]}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('current assets', 81)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = deferred operating expenditure , res_fuzz_match = [('current assets', 29)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': 81, 'value': 252815.0, 'line_item_label': ['Current assets', 'Other current assets'], 'note_numbers': [nan, '5'], 'line_item_value': [0.0, 252815.0]}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('plant property equipment', 45), ('property plant equipment', 45)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('plant property equipment', 33), ('property plant equipment', 33)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('plant property equipment', 56), ('property plant equipment', 56)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('plant property equipment', 27), ('property plant equipment', 27)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 91, 'value': 150.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': [nan], 'line_item_value': [150.0]}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:39+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('plant property equipment', 45), ('property plant equipment', 45)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('plant property equipment', 33), ('property plant equipment', 33)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('plant property equipment', 56), ('property plant equipment', 56)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('plant property equipment', 27), ('property plant equipment', 27)]
2023-04-23 13:59:39+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 91, 'value': 184.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': [nan], 'line_item_value': [184.0]}
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-04-23 13:59:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('plant property equipment', 45), ('property plant equipment', 45)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('plant property equipment', 33), ('property plant equipment', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('plant property equipment', 56), ('property plant equipment', 56)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('plant property equipment', 27), ('property plant equipment', 27)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 91, 'value': 150.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': [nan], 'line_item_value': [150.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('plant property equipment', 45), ('property plant equipment', 45)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('plant property equipment', 33), ('property plant equipment', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('plant property equipment', 56), ('property plant equipment', 56)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('plant property equipment', 27), ('property plant equipment', 27)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 91, 'value': 184.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': [nan], 'line_item_value': [184.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('right of use', 47), ('right to use', 47), ('capital work-in-progress', 45), ('capital workinprogress', 45), ('capital work in progress', 38), ('work in progress', 38), ('tangible', 25), ('rightofuse', 24), ('righttouse', 24)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('capital work in progress', 36), ('work in progress', 36), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('tangible', 29), ('rightofuse', 27), ('righttouse', 27), ('right of use', 27), ('right to use', 27)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('right of use', 56), ('right to use', 56), ('capital work in progress', 37), ('rightofuse', 33), ('righttouse', 33), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('tangible', 29)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('capital work in progress', 37), ('capital work-in-progress', 35), ('capital workinprogress', 35), ('right of use', 33), ('right to use', 33), ('work in progress', 31), ('tangible', 29), ('rightofuse', 14), ('righttouse', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('capital work-in-progress', 44), ('capital workinprogress', 44), ('tangible', 43), ('capital work in progress', 40), ('work in progress', 40), ('rightofuse', 25), ('righttouse', 25), ('right of use', 25), ('right to use', 25)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('work in progress', 31), ('capital work in progress', 26), ('capital work-in-progress', 25), ('capital workinprogress', 25), ('rightofuse', 22), ('righttouse', 22)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible', 57), ('capital work-in-progress', 45), ('capital workinprogress', 45), ('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('capital work in progress', 27), ('work in progress', 27)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('capital work-in-progress', 32), ('capital workinprogress', 32), ('tangible', 29), ('capital work in progress', 28)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('capital work-in-progress', 43), ('capital workinprogress', 43), ('capital work in progress', 43), ('work in progress', 43), ('right of use', 33), ('right to use', 33), ('tangible', 25), ('rightofuse', 14), ('righttouse', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('right of use', 47), ('right to use', 47), ('capital work-in-progress', 45), ('capital workinprogress', 45), ('capital work in progress', 38), ('work in progress', 38), ('tangible', 25), ('rightofuse', 24), ('righttouse', 24)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('capital work in progress', 36), ('work in progress', 36), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('tangible', 29), ('rightofuse', 27), ('righttouse', 27), ('right of use', 27), ('right to use', 27)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('right of use', 56), ('right to use', 56), ('capital work in progress', 37), ('rightofuse', 33), ('righttouse', 33), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('tangible', 29)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('capital work in progress', 37), ('capital work-in-progress', 35), ('capital workinprogress', 35), ('right of use', 33), ('right to use', 33), ('work in progress', 31), ('tangible', 29), ('rightofuse', 14), ('righttouse', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('capital work-in-progress', 44), ('capital workinprogress', 44), ('tangible', 43), ('capital work in progress', 40), ('work in progress', 40), ('rightofuse', 25), ('righttouse', 25), ('right of use', 25), ('right to use', 25)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('work in progress', 31), ('capital work in progress', 26), ('capital work-in-progress', 25), ('capital workinprogress', 25), ('rightofuse', 22), ('righttouse', 22)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible', 57), ('capital work-in-progress', 45), ('capital workinprogress', 45), ('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('capital work in progress', 27), ('work in progress', 27)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('capital work-in-progress', 32), ('capital workinprogress', 32), ('tangible', 29), ('capital work in progress', 28)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('capital work-in-progress', 43), ('capital workinprogress', 43), ('capital work in progress', 43), ('work in progress', 43), ('right of use', 33), ('right to use', 33), ('tangible', 25), ('rightofuse', 14), ('righttouse', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('tangible assets', 25)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('tangible assets', 15)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('tangible assets', 46)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('tangible assets', 31)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('tangible assets', 44)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('tangible assets', 61)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 80, 'value': 40.0, 'line_item_label': ['Intangible assets'], 'note_numbers': [nan], 'line_item_value': [40.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('tangible assets', 25)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('tangible assets', 15)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('tangible assets', 46)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('tangible assets', 31)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('tangible assets', 44)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('tangible assets', 61)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 80, 'value': 25.0, 'line_item_label': ['Intangible assets'], 'note_numbers': [nan], 'line_item_value': [25.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('goodwill', 36), ('goodwill on consolidatio', 25)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 29)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('goodwill', 43), ('goodwill on consolidatio', 37)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill', 29), ('goodwill on consolidatio', 15)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('goodwill', 36), ('goodwill on consolidatio', 25)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 29)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('goodwill', 43), ('goodwill on consolidatio', 37)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill', 29), ('goodwill on consolidatio', 15)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('intangible', 33), ('intangible under development', 29), ('intangible assets under development', 29)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('intangible', 50), ('intangible under development', 40), ('intangible assets under development', 35)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('intangible assets under development', 36), ('intangible', 33), ('intangible under development', 32)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('intangible', 50), ('intangible assets under development', 37), ('intangible under development', 35)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 44), ('intangible assets under development', 18)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('intangible assets under development', 42), ('intangible', 33), ('intangible under development', 26)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('intangible assets under development', 70), ('intangible', 22), ('intangible under development', 15)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 40.0, 'line_item_label': ['Intangible assets'], 'note_numbers': [nan], 'line_item_value': [40.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('intangible', 33), ('intangible under development', 29), ('intangible assets under development', 29)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('intangible', 50), ('intangible under development', 40), ('intangible assets under development', 35)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('intangible assets under development', 36), ('intangible', 33), ('intangible under development', 32)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('intangible', 50), ('intangible assets under development', 37), ('intangible under development', 35)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 44), ('intangible assets under development', 18)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('intangible assets under development', 42), ('intangible', 33), ('intangible under development', 26)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('intangible assets under development', 70), ('intangible', 22), ('intangible under development', 15)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 25.0, 'line_item_label': ['Intangible assets'], 'note_numbers': [nan], 'line_item_value': [25.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('donations', 25)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('donations', 9)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('donations', 15)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('donations', 25)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('donations', 25)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('donations', 27)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('donations', 25)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('donations', 9)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('donations', 15)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('donations', 25)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('donations', 25)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('donations', 27)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), (' investment in associate', 40), ('investment', 36), (' investment in joint venture', 33), ('derivative financial instruments', 31)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('investment', 50), ('joint ventures and associates', 48), (' investment in associate', 40), ('derivative financial instruments', 36), (' investment in joint venture', 36), (' investments accounted for using the equity method', 36)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('investment', 100), (' investments accounted for using the equity method', 100), (' investment in associate', 69), (' investment in joint venture', 63), ('joint ventures and associates', 35), ('derivative financial instruments', 34)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 46), (' investments accounted for using the equity method', 41), ('investment', 36), ('derivative financial instruments', 32), (' investment in joint venture', 24)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('joint ventures and associates', 48), ('derivative financial instruments', 38), (' investments accounted for using the equity method', 37), ('investment', 33), (' investment in associate', 31), (' investment in joint venture', 21)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 44), (' investment in joint venture', 39), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33), ('derivative financial instruments', 32)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investments accounted for using the equity method', 50), (' investment in joint venture', 45)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('joint ventures and associates', 53), (' investments accounted for using the equity method', 43), (' investment in associate', 40), ('derivative financial instruments', 37), ('investment', 36), (' investment in joint venture', 30)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [(' investment in associate', 60), ('joint ventures and associates', 50), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 20)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 1773.0, 'line_item_label': ['Investments accounted for using the equity method'], 'note_numbers': ['17'], 'line_item_value': [1773.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), (' investment in associate', 40), ('investment', 36), (' investment in joint venture', 33), ('derivative financial instruments', 31)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('investment', 50), ('joint ventures and associates', 48), (' investment in associate', 40), ('derivative financial instruments', 36), (' investment in joint venture', 36), (' investments accounted for using the equity method', 36)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('investment', 100), (' investments accounted for using the equity method', 100), (' investment in associate', 69), (' investment in joint venture', 63), ('joint ventures and associates', 35), ('derivative financial instruments', 34)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 46), (' investments accounted for using the equity method', 41), ('investment', 36), ('derivative financial instruments', 32), (' investment in joint venture', 24)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('joint ventures and associates', 48), ('derivative financial instruments', 38), (' investments accounted for using the equity method', 37), ('investment', 33), (' investment in associate', 31), (' investment in joint venture', 21)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 44), (' investment in joint venture', 39), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33), ('derivative financial instruments', 32)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investments accounted for using the equity method', 50), (' investment in joint venture', 45)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('joint ventures and associates', 53), (' investments accounted for using the equity method', 43), (' investment in associate', 40), ('derivative financial instruments', 37), ('investment', 36), (' investment in joint venture', 30)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [(' investment in associate', 60), ('joint ventures and associates', 50), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 20)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 3893.0, 'line_item_label': ['Investments accounted for using the equity method'], 'note_numbers': ['17'], 'line_item_value': [3893.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = carrying amount at the beginning of the financial year , res_fuzz_match = [(' carrying amount at the end of the financial year', 92), ('investment in joint venture', 47), (' investment in associate', 46)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 33), (' investment in associate', 20), ('investment in joint venture', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = share of profits/(loss) after income tax , res_fuzz_match = [(' investment in associate', 36), (' carrying amount at the end of the financial year', 30), ('investment in joint venture', 21)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 33), (' investment in associate', 20), ('investment in joint venture', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = dividend income , res_fuzz_match = [(' carrying amount at the end of the financial year', 50), ('investment in joint venture', 33), (' investment in associate', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 33), (' investment in associate', 20), ('investment in joint venture', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = carrying amount at the end of the financial year , res_fuzz_match = [(' carrying amount at the end of the financial year', 100), ('investment in joint venture', 47), (' investment in associate', 42)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 33), (' investment in associate', 20), ('investment in joint venture', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = carrying amount at the beginning of the financial year , res_fuzz_match = [(' carrying amount at the end of the financial year', 92), ('investment in joint venture', 47), (' investment in associate', 46)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 33), (' investment in associate', 20), ('investment in joint venture', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = share of profits/(loss) after income tax , res_fuzz_match = [(' investment in associate', 36), (' carrying amount at the end of the financial year', 30), ('investment in joint venture', 21)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 33), (' investment in associate', 20), ('investment in joint venture', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = dividend income , res_fuzz_match = [(' carrying amount at the end of the financial year', 50), ('investment in joint venture', 33), (' investment in associate', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 33), (' investment in associate', 20), ('investment in joint venture', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = carrying amount at the end of the financial year , res_fuzz_match = [(' carrying amount at the end of the financial year', 100), ('investment in joint venture', 47), (' investment in associate', 42)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 33), (' investment in associate', 20), ('investment in joint venture', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 4, 7], 'score': [92, 100, 92, 100], 'value': [1773.0, 3893.0, 2475.0, 1773.0], 'label': [' Carrying amount at the beginning of the financial year', ' Carrying amount at the end of the financial year', ' Carrying amount at the beginning of the financial year', ' Carrying amount at the end of the financial year'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('deferred tax assets', 23), ('deferred tax', 20), ('deferred charges', 18)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('deferred charges', 20), ('deferred tax', 20), ('deferred tax assets', 15)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('deferred tax assets', 49), ('deferred tax', 26), ('deferred charges', 12)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('deferred tax', 29), ('deferred tax assets', 29), ('deferred charges', 27)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 23)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('deferred tax assets', 47), ('deferred charges', 27), ('deferred tax', 21)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('deferred tax assets', 64), ('deferred tax', 32), ('deferred charges', 29)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('deferred tax assets', 23), ('deferred tax', 20), ('deferred charges', 18)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('deferred charges', 20), ('deferred tax', 20), ('deferred tax assets', 15)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('deferred tax assets', 49), ('deferred tax', 26), ('deferred charges', 12)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('deferred tax', 29), ('deferred tax assets', 29), ('deferred charges', 27)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 23)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('deferred tax assets', 47), ('deferred charges', 27), ('deferred tax', 21)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('deferred tax assets', 64), ('deferred tax', 32), ('deferred charges', 29)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 30), (' loan receivables', 25), (' leases', 24)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [(' loan receivables', 100), (' financial assets', 33), (' leased assets', 29), ('other assets', 27), (' other non-current assets', 27), (' other assets', 27), (' other non-current assets', 27), (' leases', 27), (' exploration and evaluation expenditure', 26), ('non-current', 22)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('other assets', 31), (' other assets', 31), (' other non-current assets', 27), (' other non-current assets', 27), (' loan receivables', 24), (' exploration and evaluation expenditure', 21), ('non-current', 17), (' leased assets', 16), (' financial assets', 15), (' leases', 9)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [(' exploration and evaluation expenditure', 65), (' leased assets', 50), ('other assets', 48), (' other assets', 48), (' financial assets', 40), (' other non-current assets', 39), (' other non-current assets', 39), ('non-current', 21), (' loan receivables', 18), (' leases', 15)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [(' exploration and evaluation expenditure', 43), (' loan receivables', 40), ('other assets', 33), (' other assets', 33), (' other non-current assets', 32), (' other non-current assets', 32), ('non-current', 31), (' leased assets', 21), (' financial assets', 19), (' leases', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other assets', 40), (' other assets', 40), (' exploration and evaluation expenditure', 39), (' loan receivables', 34), (' other non-current assets', 33), (' other non-current assets', 33), (' leased assets', 29), (' financial assets', 27), ('non-current', 19), (' leases', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' leases', 25), ('non-current', 21), (' loan receivables', 17), (' exploration and evaluation expenditure', 10)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [(' other non-current assets', 100), (' other non-current assets', 100), ('other assets', 73), (' other assets', 73), (' financial assets', 56), ('non-current', 54), (' leased assets', 48), (' exploration and evaluation expenditure', 35), (' loan receivables', 27), (' leases', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [(' leased assets', 100), ('other assets', 67), (' other assets', 67), (' financial assets', 61), (' leases', 57), (' other non-current assets', 48), (' other non-current assets', 48), (' exploration and evaluation expenditure', 22), (' loan receivables', 19), ('non-current', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9, 14, 15, 16], 'score': 100, 'value': 131541.0, 'line_item_label': ['Non-current assets', 'Loan receivables', 'Intangible assets', 'Other non-current assets', 'Leased assets'], 'note_numbers': [nan, '7(b)', nan, nan, '8(b)'], 'line_item_value': [0.0, 127400.0, 40.0, 2421.0, 1680.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 30), (' loan receivables', 25), (' leases', 24)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [(' loan receivables', 100), (' financial assets', 33), (' leased assets', 29), ('other assets', 27), (' other non-current assets', 27), (' other assets', 27), (' other non-current assets', 27), (' leases', 27), (' exploration and evaluation expenditure', 26), ('non-current', 22)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('other assets', 31), (' other assets', 31), (' other non-current assets', 27), (' other non-current assets', 27), (' loan receivables', 24), (' exploration and evaluation expenditure', 21), ('non-current', 17), (' leased assets', 16), (' financial assets', 15), (' leases', 9)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [(' exploration and evaluation expenditure', 65), (' leased assets', 50), ('other assets', 48), (' other assets', 48), (' financial assets', 40), (' other non-current assets', 39), (' other non-current assets', 39), ('non-current', 21), (' loan receivables', 18), (' leases', 15)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [(' exploration and evaluation expenditure', 43), (' loan receivables', 40), ('other assets', 33), (' other assets', 33), (' other non-current assets', 32), (' other non-current assets', 32), ('non-current', 31), (' leased assets', 21), (' financial assets', 19), (' leases', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other assets', 40), (' other assets', 40), (' exploration and evaluation expenditure', 39), (' loan receivables', 34), (' other non-current assets', 33), (' other non-current assets', 33), (' leased assets', 29), (' financial assets', 27), ('non-current', 19), (' leases', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' leases', 25), ('non-current', 21), (' loan receivables', 17), (' exploration and evaluation expenditure', 10)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [(' other non-current assets', 100), (' other non-current assets', 100), ('other assets', 73), (' other assets', 73), (' financial assets', 56), ('non-current', 54), (' leased assets', 48), (' exploration and evaluation expenditure', 35), (' loan receivables', 27), (' leases', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [(' leased assets', 100), ('other assets', 67), (' other assets', 67), (' financial assets', 61), (' leases', 57), (' other non-current assets', 48), (' other non-current assets', 48), (' exploration and evaluation expenditure', 22), (' loan receivables', 19), ('non-current', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9, 14, 15, 16], 'score': 100, 'value': 109994.0, 'line_item_label': ['Non-current assets', 'Loan receivables', 'Intangible assets', 'Other non-current assets', 'Leased assets'], 'note_numbers': [nan, '7(b)', nan, nan, '8(b)'], 'line_item_value': [0.0, 107503.0, 25.0, 671.0, 1795.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('non-current assets total', 20)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('non-current assets total', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('non-current assets total', 39)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('non-current assets total', 16)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('non-current assets total', 58)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('non-current assets total', 84)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('non-current assets total', 48)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 15], 'score': 84, 'value': 2421.0, 'line_item_label': ['Non-current assets', 'Other non-current assets'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 2421.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('non-current assets total', 20)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('non-current assets total', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('non-current assets total', 39)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('non-current assets total', 16)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('non-current assets total', 58)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('non-current assets total', 84)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('non-current assets total', 48)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 15], 'score': 84, 'value': 671.0, 'line_item_label': ['Non-current assets', 'Other non-current assets'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 671.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), ('borrowings', 20), ('shortterm borrowings', 20), (' bank overdraft', 7)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' bank overdraft', 44), (' loans and borrowings', 38), ('lease liabilities', 30), ('shortterm borrowings', 21), (' leases', 15), ('borrowings', 14), ('short term debt', 11), ('short-term debt', 11), ('shortterm debt', 11)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('lease liabilities', 52), ('short-term debt', 35), ('shortterm debt', 35), ('short term debt', 34), ('shortterm borrowings', 33), (' loans and borrowings', 29), (' bank overdraft', 29), ('borrowings', 23), (' leases', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), ('short-term debt', 16), ('shortterm debt', 16), ('short term debt', 15), ('borrowings', 12), (' bank overdraft', 8), ('shortterm borrowings', 7)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [24], 'score': 100, 'value': 1170.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['8(b)'], 'line_item_value': [1170.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), ('borrowings', 20), ('shortterm borrowings', 20), (' bank overdraft', 7)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' bank overdraft', 44), (' loans and borrowings', 38), ('lease liabilities', 30), ('shortterm borrowings', 21), (' leases', 15), ('borrowings', 14), ('short term debt', 11), ('short-term debt', 11), ('shortterm debt', 11)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('lease liabilities', 52), ('short-term debt', 35), ('shortterm debt', 35), ('short term debt', 34), ('shortterm borrowings', 33), (' loans and borrowings', 29), (' bank overdraft', 29), ('borrowings', 23), (' leases', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), ('short-term debt', 16), ('shortterm debt', 16), ('short term debt', 15), ('borrowings', 12), (' bank overdraft', 8), ('shortterm borrowings', 7)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [24], 'score': 100, 'value': 1277.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['8(b)'], 'line_item_value': [1277.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['current maturities']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other financial liabilities', 46), ('other current liabilities', 46), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('other financial liabilities', 38), ('other current liabilities', 33), ('current maturities', 17), ('current maturities of long-term debt', 16), ('current maturities of longterm debt', 16)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), ('other financial liabilities', 70), ('current maturities', 67), ('current maturities of long-term debt', 51), ('current maturities of longterm debt', 51)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [20, 23], 'score': 100, 'value': 905.0, 'line_item_label': ['Current liabilities', 'Other current liabilities'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 905.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other financial liabilities', 46), ('other current liabilities', 46), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('other financial liabilities', 38), ('other current liabilities', 33), ('current maturities', 17), ('current maturities of long-term debt', 16), ('current maturities of longterm debt', 16)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), ('other financial liabilities', 70), ('current maturities', 67), ('current maturities of long-term debt', 51), ('current maturities of longterm debt', 51)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [20, 23], 'score': 100, 'value': 2514.0, 'line_item_label': ['Current liabilities', 'Other current liabilities'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 2514.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('note payable(debt)', 27)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('note payable(debt)', 22)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('note payable(debt)', 27)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('note payable(debt)', 22)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('accounts payable', 30), ('small enterprises', 29), ('other trade payables', 25), ('trade and other payables', 21), ('micro enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('total outstanding due of other creditors other than micro and small', 9), ('outstanding dues of creditors other than micro enterprises and small enterprises', 8)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises', 34), ('other trade payables', 31), ('trade and other payables', 28), ('micro enterprises and small enterprises', 24), ('other than micro and small enterprises', 24), ('trade payable', 23), ('outstanding dues of micro enterprises and small enterprises', 23), ('outstanding dues of creditors other than micro enterprises and small enterprises', 22), ('outstanding dues of creditors other than', 22), ('total outstanding due of other creditors other than micro and small', 16)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('total outstanding due of other creditors other than micro and small', 39), ('small enterprises', 38), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36), ('micro enterprises and small enterprises', 35), ('micro enterprises', 32), ('outstanding dues of micro enterprises and small enterprises', 29)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10), ('total outstanding due of other creditors other than micro and small', 9), ('other trade payables', 8), ('trade and other payables', 7)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('accounts payable', 47), ('other than micro and small enterprises', 39), ('trade payable', 38), ('outstanding dues of creditors other than', 38), ('trade and other payables', 33), ('outstanding dues of creditors other than micro enterprises and small enterprises', 32), ('micro enterprises', 29), ('small enterprises', 29), ('total outstanding due of other creditors other than micro and small', 28), ('other trade payables', 26), ('micro enterprises and small enterprises', 18), ('outstanding dues of micro enterprises and small enterprises', 18)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than', 14), ('total outstanding due of other creditors other than micro and small', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [21], 'score': 100, 'value': 4198.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['7(c)'], 'line_item_value': [4198.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('accounts payable', 30), ('small enterprises', 29), ('other trade payables', 25), ('trade and other payables', 21), ('micro enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('total outstanding due of other creditors other than micro and small', 9), ('outstanding dues of creditors other than micro enterprises and small enterprises', 8)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises', 34), ('other trade payables', 31), ('trade and other payables', 28), ('micro enterprises and small enterprises', 24), ('other than micro and small enterprises', 24), ('trade payable', 23), ('outstanding dues of micro enterprises and small enterprises', 23), ('outstanding dues of creditors other than micro enterprises and small enterprises', 22), ('outstanding dues of creditors other than', 22), ('total outstanding due of other creditors other than micro and small', 16)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('total outstanding due of other creditors other than micro and small', 39), ('small enterprises', 38), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36), ('micro enterprises and small enterprises', 35), ('micro enterprises', 32), ('outstanding dues of micro enterprises and small enterprises', 29)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10), ('total outstanding due of other creditors other than micro and small', 9), ('other trade payables', 8), ('trade and other payables', 7)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('accounts payable', 47), ('other than micro and small enterprises', 39), ('trade payable', 38), ('outstanding dues of creditors other than', 38), ('trade and other payables', 33), ('outstanding dues of creditors other than micro enterprises and small enterprises', 32), ('micro enterprises', 29), ('small enterprises', 29), ('total outstanding due of other creditors other than micro and small', 28), ('other trade payables', 26), ('micro enterprises and small enterprises', 18), ('outstanding dues of micro enterprises and small enterprises', 18)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than', 14), ('total outstanding due of other creditors other than micro and small', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [21], 'score': 100, 'value': 12160.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['7(c)'], 'line_item_value': [12160.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities trade payables , res_fuzz_match = [('current', 100), (' trade payables', 100), (' trade payables', 100), (' other trade payables', 72), (' trade and other payables', 71), (' trade payables - related parties', 67), (' trade payables - other parties', 67), (' related party payables', 50), ('trade creditors', 46), (' amounts payable to controlling entity', 38)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('trade creditors', 67), (' trade and other payables', 33), (' trade payables', 33), (' trade payables - related parties', 33), (' trade payables - other parties', 33), (' trade payables', 33), (' other trade payables', 33), ('current', 20), (' related party payables', 17), (' amounts payable to controlling entity', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities share of joint venture payables , res_fuzz_match = [('current', 100), (' trade payables', 75), (' trade payables', 75), (' trade and other payables', 64), (' other trade payables', 61), (' related party payables', 56), (' trade payables - related parties', 50), (' trade payables - other parties', 50), (' amounts payable to controlling entity', 46), ('trade creditors', 36)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('trade creditors', 67), (' trade and other payables', 33), (' trade payables', 33), (' trade payables - related parties', 33), (' trade payables - other parties', 33), (' trade payables', 33), (' other trade payables', 33), ('current', 20), (' related party payables', 17), (' amounts payable to controlling entity', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities gst payables , res_fuzz_match = [('current', 100), (' trade payables', 67), (' trade payables', 67), (' related party payables', 57), (' trade and other payables', 54), (' other trade payables', 50), (' trade payables - related parties', 44), (' trade payables - other parties', 44), (' amounts payable to controlling entity', 40), ('trade creditors', 29)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('trade creditors', 67), (' trade and other payables', 33), (' trade payables', 33), (' trade payables - related parties', 33), (' trade payables - other parties', 33), (' trade payables', 33), (' other trade payables', 33), ('current', 20), (' related party payables', 17), (' amounts payable to controlling entity', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities , res_fuzz_match = [('current', 100), (' trade payables', 50), (' trade payables', 50), (' amounts payable to controlling entity', 50), (' other trade payables', 50), (' related party payables', 44), (' trade payables - related parties', 43), (' trade payables - other parties', 43), (' trade and other payables', 40), ('trade creditors', 30)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('trade creditors', 67), (' trade and other payables', 33), (' trade payables', 33), (' trade payables - related parties', 33), (' trade payables - other parties', 33), (' trade payables', 33), (' other trade payables', 33), ('current', 20), (' related party payables', 17), (' amounts payable to controlling entity', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities trade payables , res_fuzz_match = [('current', 100), (' trade payables', 100), (' trade payables', 100), (' other trade payables', 72), (' trade and other payables', 71), (' trade payables - related parties', 67), (' trade payables - other parties', 67), (' related party payables', 50), ('trade creditors', 46), (' amounts payable to controlling entity', 38)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('trade creditors', 67), (' trade and other payables', 33), (' trade payables', 33), (' trade payables - related parties', 33), (' trade payables - other parties', 33), (' trade payables', 33), (' other trade payables', 33), ('current', 20), (' related party payables', 17), (' amounts payable to controlling entity', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities share of joint venture payables , res_fuzz_match = [('current', 100), (' trade payables', 75), (' trade payables', 75), (' trade and other payables', 64), (' other trade payables', 61), (' related party payables', 56), (' trade payables - related parties', 50), (' trade payables - other parties', 50), (' amounts payable to controlling entity', 46), ('trade creditors', 36)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('trade creditors', 67), (' trade and other payables', 33), (' trade payables', 33), (' trade payables - related parties', 33), (' trade payables - other parties', 33), (' trade payables', 33), (' other trade payables', 33), ('current', 20), (' related party payables', 17), (' amounts payable to controlling entity', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities gst payables , res_fuzz_match = [('current', 100), (' trade payables', 67), (' trade payables', 67), (' related party payables', 57), (' trade and other payables', 54), (' other trade payables', 50), (' trade payables - related parties', 44), (' trade payables - other parties', 44), (' amounts payable to controlling entity', 40), ('trade creditors', 29)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('trade creditors', 67), (' trade and other payables', 33), (' trade payables', 33), (' trade payables - related parties', 33), (' trade payables - other parties', 33), (' trade payables', 33), (' other trade payables', 33), ('current', 20), (' related party payables', 17), (' amounts payable to controlling entity', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities , res_fuzz_match = [('current', 100), (' trade payables', 50), (' trade payables', 50), (' amounts payable to controlling entity', 50), (' other trade payables', 50), (' related party payables', 44), (' trade payables - related parties', 43), (' trade payables - other parties', 43), (' trade and other payables', 40), ('trade creditors', 30)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('trade creditors', 67), (' trade and other payables', 33), (' trade payables', 33), (' trade payables - related parties', 33), (' trade payables - other parties', 33), (' trade payables', 33), (' other trade payables', 33), ('current', 20), (' related party payables', 17), (' amounts payable to controlling entity', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [964.0, 10505.0, 691.0, 12160.0, 304.0, 3196.0, 698.0, 4198.0], 'label': ['Current liabilities Trade payables', 'Current liabilities Share of joint venture payables', 'Current liabilities GST payables', 'Current liabilities ', 'Current liabilities Trade payables', 'Current liabilities Share of joint venture payables', 'Current liabilities GST payables', 'Current liabilities '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other liabilities', 67), ('other current liabilities', 46), ('other financial liabilities', 46), ('other current financial liabilities', 35), ('trade and other payables', 21)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 28)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other liabilities', 41), ('other financial liabilities', 38), ('other current liabilities', 33), ('other current financial liabilities', 32)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8), ('trade and other payables', 7)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), ('other current financial liabilities', 83), ('other liabilities', 75), ('other financial liabilities', 70), ('trade and other payables', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [20, 21, 23], 'score': 100, 'value': 5103.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Other current liabilities'], 'note_numbers': [nan, '7(c)', nan], 'line_item_value': [0.0, 4198.0, 905.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other liabilities', 67), ('other current liabilities', 46), ('other financial liabilities', 46), ('other current financial liabilities', 35), ('trade and other payables', 21)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 28)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other liabilities', 41), ('other financial liabilities', 38), ('other current liabilities', 33), ('other current financial liabilities', 32)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8), ('trade and other payables', 7)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), ('other current financial liabilities', 83), ('other liabilities', 75), ('other financial liabilities', 70), ('trade and other payables', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [20, 21, 23], 'score': 100, 'value': 14674.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Other current liabilities'], 'note_numbers': [nan, '7(c)', nan], 'line_item_value': [0.0, 12160.0, 2514.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities trade payables , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('accrued expenses', 33), ('interest accrued', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities share of joint venture payables , res_fuzz_match = [('interest accrued', 50), ('accrued expenses', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('accrued expenses', 33), ('interest accrued', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities gst payables , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('accrued expenses', 33), ('interest accrued', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities , res_fuzz_match = [('accrued expenses', 33), ('interest accrued', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('accrued expenses', 33), ('interest accrued', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities trade payables , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('accrued expenses', 33), ('interest accrued', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities share of joint venture payables , res_fuzz_match = [('interest accrued', 50), ('accrued expenses', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('accrued expenses', 33), ('interest accrued', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities gst payables , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('accrued expenses', 33), ('interest accrued', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities , res_fuzz_match = [('accrued expenses', 33), ('interest accrued', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('accrued expenses', 33), ('interest accrued', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 55), ('tax', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 65), ('current tax liabilities', 41)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('current tax liabilities', 88), (' income tax payable', 38), ('tax', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 23], 'score': 88, 'value': 905.0, 'line_item_label': ['LIABILITIES', 'Other current liabilities'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 905.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 55), ('tax', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 65), ('current tax liabilities', 41)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('current tax liabilities', 88), (' income tax payable', 38), ('tax', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 23], 'score': 88, 'value': 2514.0, 'line_item_label': ['LIABILITIES', 'Other current liabilities'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 2514.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-04-23 13:59:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' other financial liabilities', 47), (' foreign exchange contract liability', 44), (' customer deposits', 36), (' employee benefits', 34), (' deferred revenue', 31), (' trade and other payables', 28), ('provisions', 20)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' other financial liabilities', 38), (' deferred revenue', 35), ('other current liabilities', 33), (' financial liabilities', 33), (' other current liabilities', 33), (' customer deposits', 22), (' foreign exchange contract liability', 19), ('provisions', 14), (' employee benefits', 11)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' deferred revenue', 22), ('other current liabilities', 15), (' other current liabilities', 15), (' foreign exchange contract liability', 11), (' financial liabilities', 10), (' employee benefits', 10), (' customer deposits', 10), (' other financial liabilities', 8), (' trade and other payables', 7)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), (' other current liabilities', 100), (' other financial liabilities', 70), (' financial liabilities', 47), (' foreign exchange contract liability', 39), (' trade and other payables', 33), (' employee benefits', 29), (' customer deposits', 29), (' deferred revenue', 19), ('provisions', 15)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 38), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [20, 21, 22, 23], 'score': 100, 'value': 5473.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions', 'Other current liabilities'], 'note_numbers': [nan, '7(c)', '8(d)', nan], 'line_item_value': [0.0, 4198.0, 370.0, 905.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' other financial liabilities', 47), (' foreign exchange contract liability', 44), (' customer deposits', 36), (' employee benefits', 34), (' deferred revenue', 31), (' trade and other payables', 28), ('provisions', 20)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' other financial liabilities', 38), (' deferred revenue', 35), ('other current liabilities', 33), (' financial liabilities', 33), (' other current liabilities', 33), (' customer deposits', 22), (' foreign exchange contract liability', 19), ('provisions', 14), (' employee benefits', 11)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' deferred revenue', 22), ('other current liabilities', 15), (' other current liabilities', 15), (' foreign exchange contract liability', 11), (' financial liabilities', 10), (' employee benefits', 10), (' customer deposits', 10), (' other financial liabilities', 8), (' trade and other payables', 7)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), (' other current liabilities', 100), (' other financial liabilities', 70), (' financial liabilities', 47), (' foreign exchange contract liability', 39), (' trade and other payables', 33), (' employee benefits', 29), (' customer deposits', 29), (' deferred revenue', 19), ('provisions', 15)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 38), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [20, 21, 22, 23], 'score': 100, 'value': 15244.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions', 'Other current liabilities'], 'note_numbers': [nan, '7(c)', '8(d)', nan], 'line_item_value': [0.0, 12160.0, 570.0, 2514.0]}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities trade payables , res_fuzz_match = [('current', 100), (' gst liabilities', 80), (' current - liability for annual and long service leave', 70), (' gst payables', 70), (' warranty', 62), (' rebates', 60), (' share of joint venture payables', 52), (' provisions - current', 50), (' contract liabilites - current', 48), (' total current employee benefits', 48), (' gst payable and accruals', 44), (' derivative contracts - at fair value', 43), (' other related parties', 41), (' secured long-term bank loans', 38), (' loans from related party', 38), (' ultimate parent entity', 37), (' gst', 33), ('other creditors and accruals', 31), (' loan payable to relayed party under tax funding agreement', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' employee benefits - payroll', 29), (' arising from service contracts', 29), (' other creditors', 29), (' abandonment and decommissioning costs', 28), (' forward exchange contracts', 25), (' other', 20), (' provision for associate funding', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities share of joint venture payables , res_fuzz_match = [('current', 100), (' share of joint venture payables', 100), (' gst payables', 80), (' gst liabilities', 80), (' rebates', 60), (' contract liabilites - current', 56), (' current - liability for annual and long service leave', 52), (' gst payable and accruals', 50), (' provisions - current', 50), (' ultimate parent entity', 47), (' employee benefits - payroll', 47), (' other related parties', 41), (' total current employee benefits', 41), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' make good provisions', 38), (' warranty', 38), ('other creditors and accruals', 36), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' employee benefits - current', 35), (' loans from related party', 33), (' gst', 33), (' forward exchange contracts', 33), (' arising from service contracts', 29), (' abandonment and decommissioning costs', 27), (' provision for associate funding', 27), (' secured long-term bank loans', 25), (' loan payable to relayed party under tax funding agreement', 20)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities gst payables , res_fuzz_match = [('current', 100), (' gst payables', 100), (' gst', 100), (' gst liabilities', 80), (' current - liability for annual and long service leave', 76), (' gst payable and accruals', 62), (' warranty', 62), (' rebates', 60), (' share of joint venture payables', 54), (' provisions - current', 50), (' contract liabilites - current', 48), (' total current employee benefits', 46), (' loans from related party', 43), (' other related parties', 41), (' employee benefits - payroll', 41), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 38), (' ultimate parent entity', 37), (' loan payable to relayed party under tax funding agreement', 32), (' make good provisions', 32), (' employee benefits - current', 30), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 29), (' forward exchange contracts', 29), (' other creditors', 29), ('other creditors and accruals', 27), (' abandonment and decommissioning costs', 20), (' other', 20), (' provision for associate funding', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities , res_fuzz_match = [('current', 100), (' current - liability for annual and long service leave', 100), (' gst liabilities', 80), (' employee benefits - current', 67), (' contract liabilites - current', 64), (' total current employee benefits', 64), (' warranty', 62), (' rebates', 60), (' ultimate parent entity', 54), (' share of joint venture payables', 52), (' provisions - current', 50), (' gst payables', 50), (' other related parties', 44), ('other creditors and accruals', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' loan payable to relayed party under tax funding agreement', 38), (' derivative contracts - at fair value', 36), (' gst payable and accruals', 36), (' employee benefits - payroll', 36), (' arising from service contracts', 33), (' gst', 33), (' forward exchange contracts', 32), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' provision for associate funding', 29), (' other creditors', 29), (' other', 20), (' make good provisions', 19), (' abandonment and decommissioning costs', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities trade payables , res_fuzz_match = [('current', 100), (' gst liabilities', 80), (' current - liability for annual and long service leave', 70), (' gst payables', 70), (' warranty', 62), (' rebates', 60), (' share of joint venture payables', 52), (' provisions - current', 50), (' contract liabilites - current', 48), (' total current employee benefits', 48), (' gst payable and accruals', 44), (' derivative contracts - at fair value', 43), (' other related parties', 41), (' secured long-term bank loans', 38), (' loans from related party', 38), (' ultimate parent entity', 37), (' gst', 33), ('other creditors and accruals', 31), (' loan payable to relayed party under tax funding agreement', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' employee benefits - payroll', 29), (' arising from service contracts', 29), (' other creditors', 29), (' abandonment and decommissioning costs', 28), (' forward exchange contracts', 25), (' other', 20), (' provision for associate funding', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities share of joint venture payables , res_fuzz_match = [('current', 100), (' share of joint venture payables', 100), (' gst payables', 80), (' gst liabilities', 80), (' rebates', 60), (' contract liabilites - current', 56), (' current - liability for annual and long service leave', 52), (' gst payable and accruals', 50), (' provisions - current', 50), (' ultimate parent entity', 47), (' employee benefits - payroll', 47), (' other related parties', 41), (' total current employee benefits', 41), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' make good provisions', 38), (' warranty', 38), ('other creditors and accruals', 36), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' employee benefits - current', 35), (' loans from related party', 33), (' gst', 33), (' forward exchange contracts', 33), (' arising from service contracts', 29), (' abandonment and decommissioning costs', 27), (' provision for associate funding', 27), (' secured long-term bank loans', 25), (' loan payable to relayed party under tax funding agreement', 20)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities gst payables , res_fuzz_match = [('current', 100), (' gst payables', 100), (' gst', 100), (' gst liabilities', 80), (' current - liability for annual and long service leave', 76), (' gst payable and accruals', 62), (' warranty', 62), (' rebates', 60), (' share of joint venture payables', 54), (' provisions - current', 50), (' contract liabilites - current', 48), (' total current employee benefits', 46), (' loans from related party', 43), (' other related parties', 41), (' employee benefits - payroll', 41), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 38), (' ultimate parent entity', 37), (' loan payable to relayed party under tax funding agreement', 32), (' make good provisions', 32), (' employee benefits - current', 30), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 29), (' forward exchange contracts', 29), (' other creditors', 29), ('other creditors and accruals', 27), (' abandonment and decommissioning costs', 20), (' other', 20), (' provision for associate funding', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = current liabilities , res_fuzz_match = [('current', 100), (' current - liability for annual and long service leave', 100), (' gst liabilities', 80), (' employee benefits - current', 67), (' contract liabilites - current', 64), (' total current employee benefits', 64), (' warranty', 62), (' rebates', 60), (' ultimate parent entity', 54), (' share of joint venture payables', 52), (' provisions - current', 50), (' gst payables', 50), (' other related parties', 44), ('other creditors and accruals', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' loan payable to relayed party under tax funding agreement', 38), (' derivative contracts - at fair value', 36), (' gst payable and accruals', 36), (' employee benefits - payroll', 36), (' arising from service contracts', 33), (' gst', 33), (' forward exchange contracts', 32), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' provision for associate funding', 29), (' other creditors', 29), (' other', 20), (' make good provisions', 19), (' abandonment and decommissioning costs', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [964.0, 10505.0, 691.0, 12160.0, 304.0, 3196.0, 698.0, 4198.0], 'label': ['Current liabilities Trade payables', 'Current liabilities Share of joint venture payables', 'Current liabilities GST payables', 'Current liabilities ', 'Current liabilities Trade payables', 'Current liabilities Share of joint venture payables', 'Current liabilities GST payables', 'Current liabilities '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-04-23 13:59:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:40+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = ordinary shares fully paid , res_fuzz_match = [(' ultimate parent entity', 50), (' gst liabilities', 50), (' share of joint venture payables', 49), (' other related parties', 48), (' loans from related party', 44), (' loan payable to relayed party under tax funding agreement', 40), (' make good provisions', 40), (' rebates', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' forward exchange contracts', 38), (' warranty', 38), ('other creditors and accruals', 36), (' provisions - current', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' employee benefits - payroll', 35), (' gst payables', 33), (' gst', 33), (' current - liability for annual and long service leave', 32), (' restructuring', 30), ('current', 29), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' total current employee benefits', 28), (' gst payable and accruals', 27), (' employee benefits - current', 26), (' secured long-term bank loans', 25), (' abandonment and decommissioning costs', 22)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = movements in ordinary share capital , res_fuzz_match = [(' rebates', 60), (' other creditors', 50), (' other creditors', 50), (' gst liabilities', 50), (' other creditors', 50), (' other related parties', 47), (' arising from service contracts', 45), (' forward exchange contracts', 45), (' share of joint venture payables', 44), ('current', 43), (' ultimate parent entity', 43), (' provisions - current', 43), (' other', 40), (' make good provisions', 38), (' warranty', 38), (' provision for associate funding', 36), (' total current employee benefits', 34), ('other creditors and accruals', 33), (' loans from related party', 33), (' gst', 33), (' restructuring', 33), (' gst payables', 30), (' derivative contracts - at fair value', 29), (' abandonment and decommissioning costs', 29), (' loan payable to relayed party under tax funding agreement', 28), (' current - liability for annual and long service leave', 24), (' secured long-term bank loans', 23), (' employee benefits - payroll', 23), (' employee benefits - current', 22), (' contract liabilites - current', 16), (' gst payable and accruals', 14)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = movements in ordinary share capital details , res_fuzz_match = [(' share of joint venture payables', 60), (' rebates', 60), (' ultimate parent entity', 53), (' gst liabilities', 50), (' other related parties', 47), (' forward exchange contracts', 46), (' gst payables', 44), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' arising from service contracts', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 40), (' other', 40), (' warranty', 38), (' provisions - current', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' total current employee benefits', 34), (' employee benefits - current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' loan payable to relayed party under tax funding agreement', 31), (' make good provisions', 31), (' restructuring', 30), (' current - liability for annual and long service leave', 28), (' gst payable and accruals', 27), (' secured long-term bank loans', 24)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = movements in ordinary share capital opening balance 1 january 2021 , res_fuzz_match = [(' rebates', 60), (' share of joint venture payables', 56), (' gst payable and accruals', 51), ('other creditors and accruals', 50), (' other creditors', 50), (' secured long-term bank loans', 50), (' other creditors', 50), (' other creditors', 50), (' loans from related party', 48), (' other related parties', 47), (' arising from service contracts', 44), ('current', 43), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' gst liabilities', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' total current employee benefits', 34), (' current - liability for annual and long service leave', 33), (' gst', 33), (' make good provisions', 31), (' employee benefits - current', 30), (' gst payables', 30), (' restructuring', 30), (' abandonment and decommissioning costs', 29), (' loan payable to relayed party under tax funding agreement', 12)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = movements in ordinary share capital balance 31 december 2021 , res_fuzz_match = [(' rebates', 60), (' other related parties', 47), (' forward exchange contracts', 46), (' abandonment and decommissioning costs', 45), ('other creditors and accruals', 44), (' share of joint venture payables', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' secured long-term bank loans', 42), (' gst payable and accruals', 41), (' gst payables', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' current - liability for annual and long service leave', 35), (' total current employee benefits', 35), (' gst', 33), (' employee benefits - payroll', 32), (' loans from related party', 31), (' make good provisions', 31), (' employee benefits - current', 30), (' restructuring', 30), (' loan payable to relayed party under tax funding agreement', 23), (' derivative contracts - at fair value', 20)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = movements in ordinary share capital share issue , res_fuzz_match = [(' rebates', 60), (' gst liabilities', 50), (' other related parties', 47), (' share of joint venture payables', 47), (' forward exchange contracts', 46), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' arising from service contracts', 40), (' restructuring', 40), (' other', 40), (' make good provisions', 38), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' abandonment and decommissioning costs', 35), ('other creditors and accruals', 34), (' total current employee benefits', 34), (' gst', 33), (' employee benefits - payroll', 32), (' employee benefits - current', 30), (' current - liability for annual and long service leave', 30), (' gst payables', 30), (' gst payable and accruals', 29), (' loan payable to relayed party under tax funding agreement', 25), (' secured long-term bank loans', 17)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = movements in ordinary share capital balance 31 december 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 47), (' forward exchange contracts', 46), (' abandonment and decommissioning costs', 45), ('other creditors and accruals', 44), (' share of joint venture payables', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' secured long-term bank loans', 42), (' gst payable and accruals', 41), (' gst payables', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' current - liability for annual and long service leave', 35), (' total current employee benefits', 35), (' gst', 33), (' employee benefits - payroll', 32), (' loans from related party', 31), (' make good provisions', 31), (' employee benefits - current', 30), (' restructuring', 30), (' loan payable to relayed party under tax funding agreement', 23), (' derivative contracts - at fair value', 20)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows = ordinary shares fully paid , res_fuzz_match = [(' ultimate parent entity', 50), (' gst liabilities', 50), (' share of joint venture payables', 49), (' other related parties', 48), (' loans from related party', 44), (' loan payable to relayed party under tax funding agreement', 40), (' make good provisions', 40), (' rebates', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' forward exchange contracts', 38), (' warranty', 38), ('other creditors and accruals', 36), (' provisions - current', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' employee benefits - payroll', 35), (' gst payables', 33), (' gst', 33), (' current - liability for annual and long service leave', 32), (' restructuring', 30), ('current', 29), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' total current employee benefits', 28), (' gst payable and accruals', 27), (' employee benefits - current', 26), (' secured long-term bank loans', 25), (' abandonment and decommissioning costs', 22)]
2023-04-23 13:59:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = movements in ordinary share capital , res_fuzz_match = [(' rebates', 60), (' other creditors', 50), (' other creditors', 50), (' gst liabilities', 50), (' other creditors', 50), (' other related parties', 47), (' arising from service contracts', 45), (' forward exchange contracts', 45), (' share of joint venture payables', 44), ('current', 43), (' ultimate parent entity', 43), (' provisions - current', 43), (' other', 40), (' make good provisions', 38), (' warranty', 38), (' provision for associate funding', 36), (' total current employee benefits', 34), ('other creditors and accruals', 33), (' loans from related party', 33), (' gst', 33), (' restructuring', 33), (' gst payables', 30), (' derivative contracts - at fair value', 29), (' abandonment and decommissioning costs', 29), (' loan payable to relayed party under tax funding agreement', 28), (' current - liability for annual and long service leave', 24), (' secured long-term bank loans', 23), (' employee benefits - payroll', 23), (' employee benefits - current', 22), (' contract liabilites - current', 16), (' gst payable and accruals', 14)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = movements in ordinary share capital details , res_fuzz_match = [(' share of joint venture payables', 60), (' rebates', 60), (' ultimate parent entity', 53), (' gst liabilities', 50), (' other related parties', 47), (' forward exchange contracts', 46), (' gst payables', 44), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' arising from service contracts', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 40), (' other', 40), (' warranty', 38), (' provisions - current', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' total current employee benefits', 34), (' employee benefits - current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' loan payable to relayed party under tax funding agreement', 31), (' make good provisions', 31), (' restructuring', 30), (' current - liability for annual and long service leave', 28), (' gst payable and accruals', 27), (' secured long-term bank loans', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = movements in ordinary share capital opening balance 1 january 2021 , res_fuzz_match = [(' rebates', 60), (' share of joint venture payables', 56), (' gst payable and accruals', 51), ('other creditors and accruals', 50), (' other creditors', 50), (' secured long-term bank loans', 50), (' other creditors', 50), (' other creditors', 50), (' loans from related party', 48), (' other related parties', 47), (' arising from service contracts', 44), ('current', 43), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' gst liabilities', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' total current employee benefits', 34), (' current - liability for annual and long service leave', 33), (' gst', 33), (' make good provisions', 31), (' employee benefits - current', 30), (' gst payables', 30), (' restructuring', 30), (' abandonment and decommissioning costs', 29), (' loan payable to relayed party under tax funding agreement', 12)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = movements in ordinary share capital balance 31 december 2021 , res_fuzz_match = [(' rebates', 60), (' other related parties', 47), (' forward exchange contracts', 46), (' abandonment and decommissioning costs', 45), ('other creditors and accruals', 44), (' share of joint venture payables', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' secured long-term bank loans', 42), (' gst payable and accruals', 41), (' gst payables', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' current - liability for annual and long service leave', 35), (' total current employee benefits', 35), (' gst', 33), (' employee benefits - payroll', 32), (' loans from related party', 31), (' make good provisions', 31), (' employee benefits - current', 30), (' restructuring', 30), (' loan payable to relayed party under tax funding agreement', 23), (' derivative contracts - at fair value', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = movements in ordinary share capital share issue , res_fuzz_match = [(' rebates', 60), (' gst liabilities', 50), (' other related parties', 47), (' share of joint venture payables', 47), (' forward exchange contracts', 46), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' arising from service contracts', 40), (' restructuring', 40), (' other', 40), (' make good provisions', 38), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' abandonment and decommissioning costs', 35), ('other creditors and accruals', 34), (' total current employee benefits', 34), (' gst', 33), (' employee benefits - payroll', 32), (' employee benefits - current', 30), (' current - liability for annual and long service leave', 30), (' gst payables', 30), (' gst payable and accruals', 29), (' loan payable to relayed party under tax funding agreement', 25), (' secured long-term bank loans', 17)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = movements in ordinary share capital balance 31 december 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 47), (' forward exchange contracts', 46), (' abandonment and decommissioning costs', 45), ('other creditors and accruals', 44), (' share of joint venture payables', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' secured long-term bank loans', 42), (' gst payable and accruals', 41), (' gst payables', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' current - liability for annual and long service leave', 35), (' total current employee benefits', 35), (' gst', 33), (' employee benefits - payroll', 32), (' loans from related party', 31), (' make good provisions', 31), (' employee benefits - current', 30), (' restructuring', 30), (' loan payable to relayed party under tax funding agreement', 23), (' derivative contracts - at fair value', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = ordinary shares fully paid , res_fuzz_match = [(' ultimate parent entity', 50), (' gst liabilities', 50), (' share of joint venture payables', 49), (' other related parties', 48), (' loans from related party', 44), (' loan payable to relayed party under tax funding agreement', 40), (' make good provisions', 40), (' rebates', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' forward exchange contracts', 38), (' warranty', 38), ('other creditors and accruals', 36), (' provisions - current', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' employee benefits - payroll', 35), (' gst payables', 33), (' gst', 33), (' current - liability for annual and long service leave', 32), (' restructuring', 30), ('current', 29), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' total current employee benefits', 28), (' gst payable and accruals', 27), (' employee benefits - current', 26), (' secured long-term bank loans', 25), (' abandonment and decommissioning costs', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = movements in ordinary share capital , res_fuzz_match = [(' rebates', 60), (' other creditors', 50), (' other creditors', 50), (' gst liabilities', 50), (' other creditors', 50), (' other related parties', 47), (' arising from service contracts', 45), (' forward exchange contracts', 45), (' share of joint venture payables', 44), ('current', 43), (' ultimate parent entity', 43), (' provisions - current', 43), (' other', 40), (' make good provisions', 38), (' warranty', 38), (' provision for associate funding', 36), (' total current employee benefits', 34), ('other creditors and accruals', 33), (' loans from related party', 33), (' gst', 33), (' restructuring', 33), (' gst payables', 30), (' derivative contracts - at fair value', 29), (' abandonment and decommissioning costs', 29), (' loan payable to relayed party under tax funding agreement', 28), (' current - liability for annual and long service leave', 24), (' secured long-term bank loans', 23), (' employee benefits - payroll', 23), (' employee benefits - current', 22), (' contract liabilites - current', 16), (' gst payable and accruals', 14)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = movements in ordinary share capital details , res_fuzz_match = [(' share of joint venture payables', 60), (' rebates', 60), (' ultimate parent entity', 53), (' gst liabilities', 50), (' other related parties', 47), (' forward exchange contracts', 46), (' gst payables', 44), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' arising from service contracts', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 40), (' other', 40), (' warranty', 38), (' provisions - current', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' total current employee benefits', 34), (' employee benefits - current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' loan payable to relayed party under tax funding agreement', 31), (' make good provisions', 31), (' restructuring', 30), (' current - liability for annual and long service leave', 28), (' gst payable and accruals', 27), (' secured long-term bank loans', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = movements in ordinary share capital opening balance 1 january 2021 , res_fuzz_match = [(' rebates', 60), (' share of joint venture payables', 56), (' gst payable and accruals', 51), ('other creditors and accruals', 50), (' other creditors', 50), (' secured long-term bank loans', 50), (' other creditors', 50), (' other creditors', 50), (' loans from related party', 48), (' other related parties', 47), (' arising from service contracts', 44), ('current', 43), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' gst liabilities', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' total current employee benefits', 34), (' current - liability for annual and long service leave', 33), (' gst', 33), (' make good provisions', 31), (' employee benefits - current', 30), (' gst payables', 30), (' restructuring', 30), (' abandonment and decommissioning costs', 29), (' loan payable to relayed party under tax funding agreement', 12)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = movements in ordinary share capital balance 31 december 2021 , res_fuzz_match = [(' rebates', 60), (' other related parties', 47), (' forward exchange contracts', 46), (' abandonment and decommissioning costs', 45), ('other creditors and accruals', 44), (' share of joint venture payables', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' secured long-term bank loans', 42), (' gst payable and accruals', 41), (' gst payables', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' current - liability for annual and long service leave', 35), (' total current employee benefits', 35), (' gst', 33), (' employee benefits - payroll', 32), (' loans from related party', 31), (' make good provisions', 31), (' employee benefits - current', 30), (' restructuring', 30), (' loan payable to relayed party under tax funding agreement', 23), (' derivative contracts - at fair value', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = movements in ordinary share capital share issue , res_fuzz_match = [(' rebates', 60), (' gst liabilities', 50), (' other related parties', 47), (' share of joint venture payables', 47), (' forward exchange contracts', 46), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' arising from service contracts', 40), (' restructuring', 40), (' other', 40), (' make good provisions', 38), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' abandonment and decommissioning costs', 35), ('other creditors and accruals', 34), (' total current employee benefits', 34), (' gst', 33), (' employee benefits - payroll', 32), (' employee benefits - current', 30), (' current - liability for annual and long service leave', 30), (' gst payables', 30), (' gst payable and accruals', 29), (' loan payable to relayed party under tax funding agreement', 25), (' secured long-term bank loans', 17)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = movements in ordinary share capital balance 31 december 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 47), (' forward exchange contracts', 46), (' abandonment and decommissioning costs', 45), ('other creditors and accruals', 44), (' share of joint venture payables', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' secured long-term bank loans', 42), (' gst payable and accruals', 41), (' gst payables', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' current - liability for annual and long service leave', 35), (' total current employee benefits', 35), (' gst', 33), (' employee benefits - payroll', 32), (' loans from related party', 31), (' make good provisions', 31), (' employee benefits - current', 30), (' restructuring', 30), (' loan payable to relayed party under tax funding agreement', 23), (' derivative contracts - at fair value', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:41+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = hedging reserve opening balance , res_fuzz_match = [(' arising from service contracts', 50), (' current - liability for annual and long service leave', 49), (' secured long-term bank loans', 48), ('other creditors and accruals', 43), (' other creditors', 43), (' derivative contracts - at fair value', 43), (' other creditors', 43), (' gst payable and accruals', 43), (' other creditors', 43), (' warranty', 43), (' other related parties', 41), (' rebates', 40), (' restructuring', 40), (' other', 40), (' share of joint venture payables', 39), (' employee benefits - current', 37), (' loan payable to relayed party under tax funding agreement', 35), (' total current employee benefits', 35), (' gst liabilities', 33), (' gst', 33), (' forward exchange contracts', 33), (' ultimate parent entity', 32), (' employee benefits - payroll', 32), (' gst payables', 30), (' abandonment and decommissioning costs', 30), ('current', 29), (' provisions - current', 29), (' contract liabilites - current', 25), (' provision for associate funding', 25), (' loans from related party', 24), (' make good provisions', 9)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = hedging reserve hedging reserve movement , res_fuzz_match = [('current', 43), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' arising from service contracts', 39), (' secured long-term bank loans', 38), (' derivative contracts - at fair value', 37), (' employee benefits - payroll', 37), (' loan payable to relayed party under tax funding agreement', 36), (' employee benefits - current', 36), (' other related parties', 35), (' gst', 33), (' gst payables', 30), (' gst liabilities', 30), (' forward exchange contracts', 29), ('other creditors and accruals', 27), (' warranty', 27), (' ultimate parent entity', 26), (' make good provisions', 25), (' loans from related party', 24), (' contract liabilites - current', 24), (' gst payable and accruals', 23), (' total current employee benefits', 22), (' provision for associate funding', 19), (' abandonment and decommissioning costs', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = hedging reserve balance 31 december , res_fuzz_match = [(' current - liability for annual and long service leave', 47), (' other creditors', 43), (' secured long-term bank loans', 43), (' other creditors', 43), (' other creditors', 43), (' other related parties', 41), (' gst payable and accruals', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 37), (' abandonment and decommissioning costs', 36), (' total current employee benefits', 36), (' arising from service contracts', 35), (' gst', 33), (' share of joint venture payables', 32), (' forward exchange contracts', 30), ('current', 29), (' loan payable to relayed party under tax funding agreement', 29), (' loans from related party', 29), (' provisions - current', 29), (' ultimate parent entity', 26), (' provision for associate funding', 26), (' employee benefits - payroll', 24), (' employee benefits - current', 23), (' derivative contracts - at fair value', 20), (' contract liabilites - current', 16), (' make good provisions', 11)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = opening balance transfer to profit reserve 16 , res_fuzz_match = [(' provisions - current', 52), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' restructuring', 50), (' warranty', 50), (' loans from related party', 44), (' arising from service contracts', 44), (' make good provisions', 44), ('current', 43), (' other related parties', 41), (' contract liabilites - current', 41), (' total current employee benefits', 41), (' employee benefits - current', 40), (' rebates', 40), (' other', 40), (' current - liability for annual and long service leave', 39), (' derivative contracts - at fair value', 38), (' employee benefits - payroll', 36), (' loan payable to relayed party under tax funding agreement', 35), (' abandonment and decommissioning costs', 35), (' secured long-term bank loans', 33), (' gst', 33), (' forward exchange contracts', 33), (' ultimate parent entity', 32), (' gst payables', 30), ('other creditors and accruals', 29), (' share of joint venture payables', 28), (' provision for associate funding', 23), (' gst payable and accruals', 20), (' gst liabilities', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = opening balance balance 31 december , res_fuzz_match = [(' abandonment and decommissioning costs', 43), (' other related parties', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' warranty', 38), (' loans from related party', 36), (' gst payable and accruals', 36), (' secured long-term bank loans', 33), (' current - liability for annual and long service leave', 32), (' share of joint venture payables', 32), (' provision for associate funding', 32), ('current', 29), (' other creditors', 29), (' other creditors', 29), (' forward exchange contracts', 29), (' other creditors', 29), ('other creditors and accruals', 28), (' loan payable to relayed party under tax funding agreement', 28), (' total current employee benefits', 28), (' ultimate parent entity', 26), (' employee benefits - payroll', 24), (' employee benefits - current', 23), (' arising from service contracts', 23), (' provisions - current', 21), (' derivative contracts - at fair value', 20), (' restructuring', 20), (' contract liabilites - current', 12), (' make good provisions', 11), (' gst', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = foreign currency translation balance , res_fuzz_match = [('current', 86), (' provisions - current', 64), (' secured long-term bank loans', 50), (' gst payables', 50), (' gst liabilities', 50), (' forward exchange contracts', 50), (' restructuring', 50), (' warranty', 50), (' gst payable and accruals', 47), ('other creditors and accruals', 46), (' current - liability for annual and long service leave', 45), (' arising from service contracts', 44), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' contract liabilites - current', 40), (' rebates', 40), (' other', 40), (' total current employee benefits', 40), (' loans from related party', 39), (' gst', 33), (' ultimate parent entity', 32), (' loan payable to relayed party under tax funding agreement', 32), (' share of joint venture payables', 32), (' abandonment and decommissioning costs', 32), (' employee benefits - payroll', 27), (' provision for associate funding', 27), (' make good provisions', 15)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = foreign currency translation balance 31 december , res_fuzz_match = [('current', 86), (' provisions - current', 64), (' secured long-term bank loans', 50), (' gst payables', 50), (' gst liabilities', 50), (' forward exchange contracts', 50), (' restructuring', 50), (' warranty', 50), ('other creditors and accruals', 46), (' abandonment and decommissioning costs', 45), (' gst payable and accruals', 44), (' arising from service contracts', 44), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' current - liability for annual and long service leave', 42), (' other related parties', 41), (' contract liabilites - current', 40), (' rebates', 40), (' other', 40), (' total current employee benefits', 38), (' loans from related party', 33), (' gst', 33), (' ultimate parent entity', 32), (' share of joint venture payables', 32), (' loan payable to relayed party under tax funding agreement', 29), (' provision for associate funding', 27), (' employee benefits - payroll', 24), (' make good provisions', 11)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = hedging reserve opening balance , res_fuzz_match = [(' arising from service contracts', 50), (' current - liability for annual and long service leave', 49), (' secured long-term bank loans', 48), ('other creditors and accruals', 43), (' other creditors', 43), (' derivative contracts - at fair value', 43), (' other creditors', 43), (' gst payable and accruals', 43), (' other creditors', 43), (' warranty', 43), (' other related parties', 41), (' rebates', 40), (' restructuring', 40), (' other', 40), (' share of joint venture payables', 39), (' employee benefits - current', 37), (' loan payable to relayed party under tax funding agreement', 35), (' total current employee benefits', 35), (' gst liabilities', 33), (' gst', 33), (' forward exchange contracts', 33), (' ultimate parent entity', 32), (' employee benefits - payroll', 32), (' gst payables', 30), (' abandonment and decommissioning costs', 30), ('current', 29), (' provisions - current', 29), (' contract liabilites - current', 25), (' provision for associate funding', 25), (' loans from related party', 24), (' make good provisions', 9)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = hedging reserve hedging reserve movement , res_fuzz_match = [('current', 43), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' arising from service contracts', 39), (' secured long-term bank loans', 38), (' derivative contracts - at fair value', 37), (' employee benefits - payroll', 37), (' loan payable to relayed party under tax funding agreement', 36), (' employee benefits - current', 36), (' other related parties', 35), (' gst', 33), (' gst payables', 30), (' gst liabilities', 30), (' forward exchange contracts', 29), ('other creditors and accruals', 27), (' warranty', 27), (' ultimate parent entity', 26), (' make good provisions', 25), (' loans from related party', 24), (' contract liabilites - current', 24), (' gst payable and accruals', 23), (' total current employee benefits', 22), (' provision for associate funding', 19), (' abandonment and decommissioning costs', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = hedging reserve balance 31 december , res_fuzz_match = [(' current - liability for annual and long service leave', 47), (' other creditors', 43), (' secured long-term bank loans', 43), (' other creditors', 43), (' other creditors', 43), (' other related parties', 41), (' gst payable and accruals', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 37), (' abandonment and decommissioning costs', 36), (' total current employee benefits', 36), (' arising from service contracts', 35), (' gst', 33), (' share of joint venture payables', 32), (' forward exchange contracts', 30), ('current', 29), (' loan payable to relayed party under tax funding agreement', 29), (' loans from related party', 29), (' provisions - current', 29), (' ultimate parent entity', 26), (' provision for associate funding', 26), (' employee benefits - payroll', 24), (' employee benefits - current', 23), (' derivative contracts - at fair value', 20), (' contract liabilites - current', 16), (' make good provisions', 11)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = opening balance transfer to profit reserve 16 , res_fuzz_match = [(' provisions - current', 52), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' restructuring', 50), (' warranty', 50), (' loans from related party', 44), (' arising from service contracts', 44), (' make good provisions', 44), ('current', 43), (' other related parties', 41), (' contract liabilites - current', 41), (' total current employee benefits', 41), (' employee benefits - current', 40), (' rebates', 40), (' other', 40), (' current - liability for annual and long service leave', 39), (' derivative contracts - at fair value', 38), (' employee benefits - payroll', 36), (' loan payable to relayed party under tax funding agreement', 35), (' abandonment and decommissioning costs', 35), (' secured long-term bank loans', 33), (' gst', 33), (' forward exchange contracts', 33), (' ultimate parent entity', 32), (' gst payables', 30), ('other creditors and accruals', 29), (' share of joint venture payables', 28), (' provision for associate funding', 23), (' gst payable and accruals', 20), (' gst liabilities', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = opening balance balance 31 december , res_fuzz_match = [(' abandonment and decommissioning costs', 43), (' other related parties', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' warranty', 38), (' loans from related party', 36), (' gst payable and accruals', 36), (' secured long-term bank loans', 33), (' current - liability for annual and long service leave', 32), (' share of joint venture payables', 32), (' provision for associate funding', 32), ('current', 29), (' other creditors', 29), (' other creditors', 29), (' forward exchange contracts', 29), (' other creditors', 29), ('other creditors and accruals', 28), (' loan payable to relayed party under tax funding agreement', 28), (' total current employee benefits', 28), (' ultimate parent entity', 26), (' employee benefits - payroll', 24), (' employee benefits - current', 23), (' arising from service contracts', 23), (' provisions - current', 21), (' derivative contracts - at fair value', 20), (' restructuring', 20), (' contract liabilites - current', 12), (' make good provisions', 11), (' gst', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = foreign currency translation balance , res_fuzz_match = [('current', 86), (' provisions - current', 64), (' secured long-term bank loans', 50), (' gst payables', 50), (' gst liabilities', 50), (' forward exchange contracts', 50), (' restructuring', 50), (' warranty', 50), (' gst payable and accruals', 47), ('other creditors and accruals', 46), (' current - liability for annual and long service leave', 45), (' arising from service contracts', 44), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' contract liabilites - current', 40), (' rebates', 40), (' other', 40), (' total current employee benefits', 40), (' loans from related party', 39), (' gst', 33), (' ultimate parent entity', 32), (' loan payable to relayed party under tax funding agreement', 32), (' share of joint venture payables', 32), (' abandonment and decommissioning costs', 32), (' employee benefits - payroll', 27), (' provision for associate funding', 27), (' make good provisions', 15)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = foreign currency translation balance 31 december , res_fuzz_match = [('current', 86), (' provisions - current', 64), (' secured long-term bank loans', 50), (' gst payables', 50), (' gst liabilities', 50), (' forward exchange contracts', 50), (' restructuring', 50), (' warranty', 50), ('other creditors and accruals', 46), (' abandonment and decommissioning costs', 45), (' gst payable and accruals', 44), (' arising from service contracts', 44), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' current - liability for annual and long service leave', 42), (' other related parties', 41), (' contract liabilites - current', 40), (' rebates', 40), (' other', 40), (' total current employee benefits', 38), (' loans from related party', 33), (' gst', 33), (' ultimate parent entity', 32), (' share of joint venture payables', 32), (' loan payable to relayed party under tax funding agreement', 29), (' provision for associate funding', 27), (' employee benefits - payroll', 24), (' make good provisions', 11)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' rebates', 50), (' forward exchange contracts', 50), (' ultimate parent entity', 33), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' provision for associate funding', 29), ('current', 20), (' provisions - current', 20), (' contract liabilites - current', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' other creditors', 18), ('other creditors and accruals', 17), (' loans from related party', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 12, 13], 'score': [86, 86, 86, 86], 'value': [-77490.0, -77490.0, -77490.0, -77490.0], 'label': ['Foreign currency translation Balance ', 'Foreign currency translation Balance 31 December ', 'Foreign currency translation Balance ', 'Foreign currency translation Balance 31 December '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:41+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-04-23 13:59:41+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:41+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-04-23 13:59:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:41+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-04-23 13:59:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:41+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 28)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('current liabilities', 82)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - best_match = {'data_index': [20, 23], 'score': 82, 'value': 905.0, 'line_item_label': ['Current liabilities', 'Other current liabilities'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 905.0]}
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:41+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 28)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('current liabilities', 82)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - best_match = {'data_index': [20, 23], 'score': 82, 'value': 2514.0, 'line_item_label': ['Current liabilities', 'Other current liabilities'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 2514.0]}
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:41+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-04-23 13:59:41+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:41+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-04-23 13:59:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:41+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-04-23 13:59:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:41+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('long term debt', 30)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term debt', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = other non-current liabilities , res_fuzz_match = [('long term debt', 47)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provision for associate funding , res_fuzz_match = [('long term debt', 17)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:41+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('long term debt', 30)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term debt', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = other non-current liabilities , res_fuzz_match = [('long term debt', 47)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provision for associate funding , res_fuzz_match = [('long term debt', 17)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:41+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-04-23 13:59:41+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:41+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-04-23 13:59:41+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:41+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-04-23 13:59:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:41+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 35), (' borrowings', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 100), (' borrowings', 100), (' loans and borrowings', 100), (' lease liabilities', 22), (' lease liability', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 44), (' loans and borrowings', 29), (' borrowings', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), (' loans and borrowings', 40), (' borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = other non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 40), (' borrowings', 33), (' loans and borrowings', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provision for associate funding , res_fuzz_match = [(' loans and borrowings', 35), (' borrowings', 33), (' lease liabilities', 27), (' lease liability', 27), ('interest bearing loans and borrowings', 15)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - best_match = {'data_index': [27, 31], 'score': 100, 'value': 1167.0, 'line_item_label': ['Borrowings', 'Lease liabilities'], 'note_numbers': ['7(d)', '8(b)'], 'line_item_value': [0.0, 1167.0]}
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:41+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 35), (' borrowings', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 100), (' borrowings', 100), (' loans and borrowings', 100), (' lease liabilities', 22), (' lease liability', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 44), (' loans and borrowings', 29), (' borrowings', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), (' loans and borrowings', 40), (' borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = other non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 40), (' borrowings', 33), (' loans and borrowings', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provision for associate funding , res_fuzz_match = [(' loans and borrowings', 35), (' borrowings', 33), (' lease liabilities', 27), (' lease liability', 27), ('interest bearing loans and borrowings', 15)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - best_match = {'data_index': [27, 31], 'score': 100, 'value': 428276.0, 'line_item_label': ['Borrowings', 'Lease liabilities'], 'note_numbers': ['7(d)', '8(b)'], 'line_item_value': [427376.0, 900.0]}
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:41+0530 - sLogger - DEBUG - keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 cost or fair value , res_fuzz_match = [('not later than 5 years', 44), ('later than 1 year', 40), (' non current', 36), ('leases', 33), (' bank loan', 33), (' secured finance debt', 28), (' lease liabilities - non-current', 19), (' lease liabilities', 15), (' lease liability', 15)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' bank loan', 56), ('later than 1 year', 55), ('not later than 5 years', 53), ('leases', 50), (' lease liabilities - non-current', 33), (' non current', 27), (' secured finance debt', 24), (' lease liabilities', 24), (' lease liability', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated depreciation , res_fuzz_match = [('leases', 50), (' bank loan', 44), ('later than 1 year', 40), (' non current', 36), (' lease liabilities - non-current', 32), ('not later than 5 years', 32), (' secured finance debt', 31), (' lease liabilities', 30), (' lease liability', 30)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' bank loan', 56), ('later than 1 year', 55), ('not later than 5 years', 53), ('leases', 50), (' lease liabilities - non-current', 33), (' non current', 27), (' secured finance debt', 24), (' lease liabilities', 24), (' lease liability', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated impairment , res_fuzz_match = [(' bank loan', 44), ('later than 1 year', 40), (' non current', 36), (' lease liabilities', 32), (' lease liability', 32), (' lease liabilities - non-current', 32), ('not later than 5 years', 32), ('leases', 25), (' secured finance debt', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' bank loan', 56), ('later than 1 year', 55), ('not later than 5 years', 53), ('leases', 50), (' lease liabilities - non-current', 33), (' non current', 27), (' secured finance debt', 24), (' lease liabilities', 24), (' lease liability', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 net book amount , res_fuzz_match = [(' non current', 48), (' bank loan', 44), ('later than 1 year', 40), (' lease liabilities - non-current', 32), (' secured finance debt', 29), ('not later than 5 years', 29), ('leases', 25), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' bank loan', 56), ('later than 1 year', 55), ('not later than 5 years', 53), ('leases', 50), (' lease liabilities - non-current', 33), (' non current', 27), (' secured finance debt', 24), (' lease liabilities', 24), (' lease liability', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = year ended 31 december 2022 opening net book amount , res_fuzz_match = [('leases', 50), (' secured finance debt', 47), (' non current', 45), (' bank loan', 44), (' lease liabilities - non-current', 32), (' lease liabilities', 27), (' lease liability', 27), ('later than 1 year', 27), ('not later than 5 years', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' bank loan', 56), ('later than 1 year', 55), ('not later than 5 years', 53), ('leases', 50), (' lease liabilities - non-current', 33), (' non current', 27), (' secured finance debt', 24), (' lease liabilities', 24), (' lease liability', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa project note 13 , res_fuzz_match = [('leases', 50), (' non current', 40), ('later than 1 year', 40), (' secured finance debt', 38), ('not later than 5 years', 35), (' bank loan', 33), (' lease liabilities', 27), (' lease liability', 27), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' bank loan', 56), ('later than 1 year', 55), ('not later than 5 years', 53), ('leases', 50), (' lease liabilities - non-current', 33), (' non current', 27), (' secured finance debt', 24), (' lease liabilities', 24), (' lease liability', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa additions , res_fuzz_match = [('leases', 50), (' bank loan', 44), ('not later than 5 years', 42), ('later than 1 year', 40), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' secured finance debt', 35), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' bank loan', 56), ('later than 1 year', 55), ('not later than 5 years', 53), ('leases', 50), (' lease liabilities - non-current', 33), (' non current', 27), (' secured finance debt', 24), (' lease liabilities', 24), (' lease liability', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa depreciation charge , res_fuzz_match = [('leases', 50), ('later than 1 year', 47), ('not later than 5 years', 42), (' non current', 36), (' secured finance debt', 35), (' bank loan', 33), (' lease liabilities - non-current', 26), (' lease liabilities', 19), (' lease liability', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' bank loan', 56), ('later than 1 year', 55), ('not later than 5 years', 53), ('leases', 50), (' lease liabilities - non-current', 33), (' non current', 27), (' secured finance debt', 24), (' lease liabilities', 24), (' lease liability', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa disposals , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), ('later than 1 year', 40), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' secured finance debt', 35), (' bank loan', 35), (' lease liabilities - non-current', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' bank loan', 56), ('later than 1 year', 55), ('not later than 5 years', 53), ('leases', 50), (' lease liabilities - non-current', 33), (' non current', 27), (' secured finance debt', 24), (' lease liabilities', 24), (' lease liability', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa transferred from wip , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), ('later than 1 year', 40), (' secured finance debt', 39), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' bank loan', 33), (' lease liabilities - non-current', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' bank loan', 56), ('later than 1 year', 55), ('not later than 5 years', 53), ('leases', 50), (' lease liabilities - non-current', 33), (' non current', 27), (' secured finance debt', 24), (' lease liabilities', 24), (' lease liability', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset retirement obligation , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), ('later than 1 year', 33), (' secured finance debt', 31), (' bank loan', 31), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' bank loan', 56), ('later than 1 year', 55), ('not later than 5 years', 53), ('leases', 50), (' lease liabilities - non-current', 33), (' non current', 27), (' secured finance debt', 24), (' lease liabilities', 24), (' lease liability', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset closing net book amount , res_fuzz_match = [('leases', 50), (' non current', 45), (' bank loan', 44), (' secured finance debt', 41), (' lease liabilities - non-current', 37), (' lease liabilities', 36), (' lease liability', 36), ('not later than 5 years', 26), ('later than 1 year', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' bank loan', 56), ('later than 1 year', 55), ('not later than 5 years', 53), ('leases', 50), (' lease liabilities - non-current', 33), (' non current', 27), (' secured finance debt', 24), (' lease liabilities', 24), (' lease liability', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 cost , res_fuzz_match = [(' secured finance debt', 55), (' bank loan', 40), (' non current', 32), ('later than 1 year', 29), ('not later than 5 years', 29), ('leases', 25), (' lease liabilities - non-current', 21), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' bank loan', 56), ('later than 1 year', 55), ('not later than 5 years', 53), ('leases', 50), (' lease liabilities - non-current', 33), (' non current', 27), (' secured finance debt', 24), (' lease liabilities', 24), (' lease liability', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated depreciation , res_fuzz_match = [('leases', 50), (' bank loan', 33), ('later than 1 year', 33), (' lease liabilities', 30), (' lease liability', 30), (' secured finance debt', 29), (' non current', 27), (' lease liabilities - non-current', 26), ('not later than 5 years', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' bank loan', 56), ('later than 1 year', 55), ('not later than 5 years', 53), ('leases', 50), (' lease liabilities - non-current', 33), (' non current', 27), (' secured finance debt', 24), (' lease liabilities', 24), (' lease liability', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated impairment , res_fuzz_match = [(' bank loan', 33), ('later than 1 year', 33), (' lease liabilities', 32), (' lease liability', 32), (' secured finance debt', 29), (' lease liabilities - non-current', 27), (' non current', 27), ('leases', 25), ('not later than 5 years', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' bank loan', 56), ('later than 1 year', 55), ('not later than 5 years', 53), ('leases', 50), (' lease liabilities - non-current', 33), (' non current', 27), (' secured finance debt', 24), (' lease liabilities', 24), (' lease liability', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 net book amount , res_fuzz_match = [(' non current', 48), (' bank loan', 44), ('later than 1 year', 40), (' secured finance debt', 35), (' lease liabilities - non-current', 32), ('not later than 5 years', 26), ('leases', 25), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' bank loan', 56), ('later than 1 year', 55), ('not later than 5 years', 53), ('leases', 50), (' lease liabilities - non-current', 33), (' non current', 27), (' secured finance debt', 24), (' lease liabilities', 24), (' lease liability', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 cost or fair value , res_fuzz_match = [('not later than 5 years', 44), ('later than 1 year', 40), (' non current', 36), ('leases', 33), (' bank loan', 33), (' secured finance debt', 28), (' lease liabilities - non-current', 19), (' lease liabilities', 15), (' lease liability', 15)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [(' lease liabilities', 75), (' lease liability', 75), (' lease liabilities - non-current', 60), ('leases', 33), (' secured finance debt', 29), (' bank loan', 20), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated depreciation , res_fuzz_match = [('leases', 50), (' bank loan', 44), ('later than 1 year', 40), (' non current', 36), (' lease liabilities - non-current', 32), ('not later than 5 years', 32), (' secured finance debt', 31), (' lease liabilities', 30), (' lease liability', 30)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [(' lease liabilities', 75), (' lease liability', 75), (' lease liabilities - non-current', 60), ('leases', 33), (' secured finance debt', 29), (' bank loan', 20), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated impairment , res_fuzz_match = [(' bank loan', 44), ('later than 1 year', 40), (' non current', 36), (' lease liabilities', 32), (' lease liability', 32), (' lease liabilities - non-current', 32), ('not later than 5 years', 32), ('leases', 25), (' secured finance debt', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [(' lease liabilities', 75), (' lease liability', 75), (' lease liabilities - non-current', 60), ('leases', 33), (' secured finance debt', 29), (' bank loan', 20), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 net book amount , res_fuzz_match = [(' non current', 48), (' bank loan', 44), ('later than 1 year', 40), (' lease liabilities - non-current', 32), (' secured finance debt', 29), ('not later than 5 years', 29), ('leases', 25), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [(' lease liabilities', 75), (' lease liability', 75), (' lease liabilities - non-current', 60), ('leases', 33), (' secured finance debt', 29), (' bank loan', 20), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = year ended 31 december 2022 opening net book amount , res_fuzz_match = [('leases', 50), (' secured finance debt', 47), (' non current', 45), (' bank loan', 44), (' lease liabilities - non-current', 32), (' lease liabilities', 27), (' lease liability', 27), ('later than 1 year', 27), ('not later than 5 years', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [(' lease liabilities', 75), (' lease liability', 75), (' lease liabilities - non-current', 60), ('leases', 33), (' secured finance debt', 29), (' bank loan', 20), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa project note 13 , res_fuzz_match = [('leases', 50), (' non current', 40), ('later than 1 year', 40), (' secured finance debt', 38), ('not later than 5 years', 35), (' bank loan', 33), (' lease liabilities', 27), (' lease liability', 27), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [(' lease liabilities', 75), (' lease liability', 75), (' lease liabilities - non-current', 60), ('leases', 33), (' secured finance debt', 29), (' bank loan', 20), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa additions , res_fuzz_match = [('leases', 50), (' bank loan', 44), ('not later than 5 years', 42), ('later than 1 year', 40), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' secured finance debt', 35), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [(' lease liabilities', 75), (' lease liability', 75), (' lease liabilities - non-current', 60), ('leases', 33), (' secured finance debt', 29), (' bank loan', 20), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa depreciation charge , res_fuzz_match = [('leases', 50), ('later than 1 year', 47), ('not later than 5 years', 42), (' non current', 36), (' secured finance debt', 35), (' bank loan', 33), (' lease liabilities - non-current', 26), (' lease liabilities', 19), (' lease liability', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [(' lease liabilities', 75), (' lease liability', 75), (' lease liabilities - non-current', 60), ('leases', 33), (' secured finance debt', 29), (' bank loan', 20), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa disposals , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), ('later than 1 year', 40), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' secured finance debt', 35), (' bank loan', 35), (' lease liabilities - non-current', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [(' lease liabilities', 75), (' lease liability', 75), (' lease liabilities - non-current', 60), ('leases', 33), (' secured finance debt', 29), (' bank loan', 20), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa transferred from wip , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), ('later than 1 year', 40), (' secured finance debt', 39), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' bank loan', 33), (' lease liabilities - non-current', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [(' lease liabilities', 75), (' lease liability', 75), (' lease liabilities - non-current', 60), ('leases', 33), (' secured finance debt', 29), (' bank loan', 20), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset retirement obligation , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), ('later than 1 year', 33), (' secured finance debt', 31), (' bank loan', 31), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [(' lease liabilities', 75), (' lease liability', 75), (' lease liabilities - non-current', 60), ('leases', 33), (' secured finance debt', 29), (' bank loan', 20), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset closing net book amount , res_fuzz_match = [('leases', 50), (' non current', 45), (' bank loan', 44), (' secured finance debt', 41), (' lease liabilities - non-current', 37), (' lease liabilities', 36), (' lease liability', 36), ('not later than 5 years', 26), ('later than 1 year', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [(' lease liabilities', 75), (' lease liability', 75), (' lease liabilities - non-current', 60), ('leases', 33), (' secured finance debt', 29), (' bank loan', 20), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 cost , res_fuzz_match = [(' secured finance debt', 55), (' bank loan', 40), (' non current', 32), ('later than 1 year', 29), ('not later than 5 years', 29), ('leases', 25), (' lease liabilities - non-current', 21), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [(' lease liabilities', 75), (' lease liability', 75), (' lease liabilities - non-current', 60), ('leases', 33), (' secured finance debt', 29), (' bank loan', 20), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated depreciation , res_fuzz_match = [('leases', 50), (' bank loan', 33), ('later than 1 year', 33), (' lease liabilities', 30), (' lease liability', 30), (' secured finance debt', 29), (' non current', 27), (' lease liabilities - non-current', 26), ('not later than 5 years', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [(' lease liabilities', 75), (' lease liability', 75), (' lease liabilities - non-current', 60), ('leases', 33), (' secured finance debt', 29), (' bank loan', 20), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated impairment , res_fuzz_match = [(' bank loan', 33), ('later than 1 year', 33), (' lease liabilities', 32), (' lease liability', 32), (' secured finance debt', 29), (' lease liabilities - non-current', 27), (' non current', 27), ('leases', 25), ('not later than 5 years', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [(' lease liabilities', 75), (' lease liability', 75), (' lease liabilities - non-current', 60), ('leases', 33), (' secured finance debt', 29), (' bank loan', 20), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 net book amount , res_fuzz_match = [(' non current', 48), (' bank loan', 44), ('later than 1 year', 40), (' secured finance debt', 35), (' lease liabilities - non-current', 32), ('not later than 5 years', 26), ('leases', 25), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [(' lease liabilities', 75), (' lease liability', 75), (' lease liabilities - non-current', 60), ('leases', 33), (' secured finance debt', 29), (' bank loan', 20), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 cost or fair value , res_fuzz_match = [('not later than 5 years', 44), ('later than 1 year', 40), (' non current', 36), ('leases', 33), (' bank loan', 33), (' secured finance debt', 28), (' lease liabilities - non-current', 19), (' lease liabilities', 15), (' lease liability', 15)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('leases', 57), (' secured finance debt', 33), (' bank loan', 33), (' lease liabilities', 33), (' lease liability', 33), (' lease liabilities - non-current', 33), (' non current', 33), ('later than 1 year', 33), ('not later than 5 years', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated depreciation , res_fuzz_match = [('leases', 50), (' bank loan', 44), ('later than 1 year', 40), (' non current', 36), (' lease liabilities - non-current', 32), ('not later than 5 years', 32), (' secured finance debt', 31), (' lease liabilities', 30), (' lease liability', 30)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('leases', 57), (' secured finance debt', 33), (' bank loan', 33), (' lease liabilities', 33), (' lease liability', 33), (' lease liabilities - non-current', 33), (' non current', 33), ('later than 1 year', 33), ('not later than 5 years', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated impairment , res_fuzz_match = [(' bank loan', 44), ('later than 1 year', 40), (' non current', 36), (' lease liabilities', 32), (' lease liability', 32), (' lease liabilities - non-current', 32), ('not later than 5 years', 32), ('leases', 25), (' secured finance debt', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('leases', 57), (' secured finance debt', 33), (' bank loan', 33), (' lease liabilities', 33), (' lease liability', 33), (' lease liabilities - non-current', 33), (' non current', 33), ('later than 1 year', 33), ('not later than 5 years', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 net book amount , res_fuzz_match = [(' non current', 48), (' bank loan', 44), ('later than 1 year', 40), (' lease liabilities - non-current', 32), (' secured finance debt', 29), ('not later than 5 years', 29), ('leases', 25), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('leases', 57), (' secured finance debt', 33), (' bank loan', 33), (' lease liabilities', 33), (' lease liability', 33), (' lease liabilities - non-current', 33), (' non current', 33), ('later than 1 year', 33), ('not later than 5 years', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = year ended 31 december 2022 opening net book amount , res_fuzz_match = [('leases', 50), (' secured finance debt', 47), (' non current', 45), (' bank loan', 44), (' lease liabilities - non-current', 32), (' lease liabilities', 27), (' lease liability', 27), ('later than 1 year', 27), ('not later than 5 years', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('leases', 57), (' secured finance debt', 33), (' bank loan', 33), (' lease liabilities', 33), (' lease liability', 33), (' lease liabilities - non-current', 33), (' non current', 33), ('later than 1 year', 33), ('not later than 5 years', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa project note 13 , res_fuzz_match = [('leases', 50), (' non current', 40), ('later than 1 year', 40), (' secured finance debt', 38), ('not later than 5 years', 35), (' bank loan', 33), (' lease liabilities', 27), (' lease liability', 27), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('leases', 57), (' secured finance debt', 33), (' bank loan', 33), (' lease liabilities', 33), (' lease liability', 33), (' lease liabilities - non-current', 33), (' non current', 33), ('later than 1 year', 33), ('not later than 5 years', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa additions , res_fuzz_match = [('leases', 50), (' bank loan', 44), ('not later than 5 years', 42), ('later than 1 year', 40), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' secured finance debt', 35), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('leases', 57), (' secured finance debt', 33), (' bank loan', 33), (' lease liabilities', 33), (' lease liability', 33), (' lease liabilities - non-current', 33), (' non current', 33), ('later than 1 year', 33), ('not later than 5 years', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa depreciation charge , res_fuzz_match = [('leases', 50), ('later than 1 year', 47), ('not later than 5 years', 42), (' non current', 36), (' secured finance debt', 35), (' bank loan', 33), (' lease liabilities - non-current', 26), (' lease liabilities', 19), (' lease liability', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('leases', 57), (' secured finance debt', 33), (' bank loan', 33), (' lease liabilities', 33), (' lease liability', 33), (' lease liabilities - non-current', 33), (' non current', 33), ('later than 1 year', 33), ('not later than 5 years', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa disposals , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), ('later than 1 year', 40), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' secured finance debt', 35), (' bank loan', 35), (' lease liabilities - non-current', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('leases', 57), (' secured finance debt', 33), (' bank loan', 33), (' lease liabilities', 33), (' lease liability', 33), (' lease liabilities - non-current', 33), (' non current', 33), ('later than 1 year', 33), ('not later than 5 years', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa transferred from wip , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), ('later than 1 year', 40), (' secured finance debt', 39), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' bank loan', 33), (' lease liabilities - non-current', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('leases', 57), (' secured finance debt', 33), (' bank loan', 33), (' lease liabilities', 33), (' lease liability', 33), (' lease liabilities - non-current', 33), (' non current', 33), ('later than 1 year', 33), ('not later than 5 years', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset retirement obligation , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), ('later than 1 year', 33), (' secured finance debt', 31), (' bank loan', 31), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('leases', 57), (' secured finance debt', 33), (' bank loan', 33), (' lease liabilities', 33), (' lease liability', 33), (' lease liabilities - non-current', 33), (' non current', 33), ('later than 1 year', 33), ('not later than 5 years', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset closing net book amount , res_fuzz_match = [('leases', 50), (' non current', 45), (' bank loan', 44), (' secured finance debt', 41), (' lease liabilities - non-current', 37), (' lease liabilities', 36), (' lease liability', 36), ('not later than 5 years', 26), ('later than 1 year', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('leases', 57), (' secured finance debt', 33), (' bank loan', 33), (' lease liabilities', 33), (' lease liability', 33), (' lease liabilities - non-current', 33), (' non current', 33), ('later than 1 year', 33), ('not later than 5 years', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 cost , res_fuzz_match = [(' secured finance debt', 55), (' bank loan', 40), (' non current', 32), ('later than 1 year', 29), ('not later than 5 years', 29), ('leases', 25), (' lease liabilities - non-current', 21), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('leases', 57), (' secured finance debt', 33), (' bank loan', 33), (' lease liabilities', 33), (' lease liability', 33), (' lease liabilities - non-current', 33), (' non current', 33), ('later than 1 year', 33), ('not later than 5 years', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated depreciation , res_fuzz_match = [('leases', 50), (' bank loan', 33), ('later than 1 year', 33), (' lease liabilities', 30), (' lease liability', 30), (' secured finance debt', 29), (' non current', 27), (' lease liabilities - non-current', 26), ('not later than 5 years', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('leases', 57), (' secured finance debt', 33), (' bank loan', 33), (' lease liabilities', 33), (' lease liability', 33), (' lease liabilities - non-current', 33), (' non current', 33), ('later than 1 year', 33), ('not later than 5 years', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated impairment , res_fuzz_match = [(' bank loan', 33), ('later than 1 year', 33), (' lease liabilities', 32), (' lease liability', 32), (' secured finance debt', 29), (' lease liabilities - non-current', 27), (' non current', 27), ('leases', 25), ('not later than 5 years', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('leases', 57), (' secured finance debt', 33), (' bank loan', 33), (' lease liabilities', 33), (' lease liability', 33), (' lease liabilities - non-current', 33), (' non current', 33), ('later than 1 year', 33), ('not later than 5 years', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 net book amount , res_fuzz_match = [(' non current', 48), (' bank loan', 44), ('later than 1 year', 40), (' secured finance debt', 35), (' lease liabilities - non-current', 32), ('not later than 5 years', 26), ('leases', 25), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('leases', 57), (' secured finance debt', 33), (' bank loan', 33), (' lease liabilities', 33), (' lease liability', 33), (' lease liabilities - non-current', 33), (' non current', 33), ('later than 1 year', 33), ('not later than 5 years', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 cost or fair value , res_fuzz_match = [('not later than 5 years', 44), ('later than 1 year', 40), (' non current', 36), ('leases', 33), (' bank loan', 33), (' secured finance debt', 28), (' lease liabilities - non-current', 19), (' lease liabilities', 15), (' lease liability', 15)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [(' secured finance debt', 60), ('later than 1 year', 50), ('not later than 5 years', 50), (' bank loan', 40), (' lease liabilities', 40), (' lease liability', 40), (' non current', 40), ('leases', 25), (' lease liabilities - non-current', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated depreciation , res_fuzz_match = [('leases', 50), (' bank loan', 44), ('later than 1 year', 40), (' non current', 36), (' lease liabilities - non-current', 32), ('not later than 5 years', 32), (' secured finance debt', 31), (' lease liabilities', 30), (' lease liability', 30)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [(' secured finance debt', 60), ('later than 1 year', 50), ('not later than 5 years', 50), (' bank loan', 40), (' lease liabilities', 40), (' lease liability', 40), (' non current', 40), ('leases', 25), (' lease liabilities - non-current', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated impairment , res_fuzz_match = [(' bank loan', 44), ('later than 1 year', 40), (' non current', 36), (' lease liabilities', 32), (' lease liability', 32), (' lease liabilities - non-current', 32), ('not later than 5 years', 32), ('leases', 25), (' secured finance debt', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [(' secured finance debt', 60), ('later than 1 year', 50), ('not later than 5 years', 50), (' bank loan', 40), (' lease liabilities', 40), (' lease liability', 40), (' non current', 40), ('leases', 25), (' lease liabilities - non-current', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 net book amount , res_fuzz_match = [(' non current', 48), (' bank loan', 44), ('later than 1 year', 40), (' lease liabilities - non-current', 32), (' secured finance debt', 29), ('not later than 5 years', 29), ('leases', 25), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [(' secured finance debt', 60), ('later than 1 year', 50), ('not later than 5 years', 50), (' bank loan', 40), (' lease liabilities', 40), (' lease liability', 40), (' non current', 40), ('leases', 25), (' lease liabilities - non-current', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = year ended 31 december 2022 opening net book amount , res_fuzz_match = [('leases', 50), (' secured finance debt', 47), (' non current', 45), (' bank loan', 44), (' lease liabilities - non-current', 32), (' lease liabilities', 27), (' lease liability', 27), ('later than 1 year', 27), ('not later than 5 years', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [(' secured finance debt', 60), ('later than 1 year', 50), ('not later than 5 years', 50), (' bank loan', 40), (' lease liabilities', 40), (' lease liability', 40), (' non current', 40), ('leases', 25), (' lease liabilities - non-current', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa project note 13 , res_fuzz_match = [('leases', 50), (' non current', 40), ('later than 1 year', 40), (' secured finance debt', 38), ('not later than 5 years', 35), (' bank loan', 33), (' lease liabilities', 27), (' lease liability', 27), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [(' secured finance debt', 60), ('later than 1 year', 50), ('not later than 5 years', 50), (' bank loan', 40), (' lease liabilities', 40), (' lease liability', 40), (' non current', 40), ('leases', 25), (' lease liabilities - non-current', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa additions , res_fuzz_match = [('leases', 50), (' bank loan', 44), ('not later than 5 years', 42), ('later than 1 year', 40), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' secured finance debt', 35), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [(' secured finance debt', 60), ('later than 1 year', 50), ('not later than 5 years', 50), (' bank loan', 40), (' lease liabilities', 40), (' lease liability', 40), (' non current', 40), ('leases', 25), (' lease liabilities - non-current', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa depreciation charge , res_fuzz_match = [('leases', 50), ('later than 1 year', 47), ('not later than 5 years', 42), (' non current', 36), (' secured finance debt', 35), (' bank loan', 33), (' lease liabilities - non-current', 26), (' lease liabilities', 19), (' lease liability', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [(' secured finance debt', 60), ('later than 1 year', 50), ('not later than 5 years', 50), (' bank loan', 40), (' lease liabilities', 40), (' lease liability', 40), (' non current', 40), ('leases', 25), (' lease liabilities - non-current', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa disposals , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), ('later than 1 year', 40), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' secured finance debt', 35), (' bank loan', 35), (' lease liabilities - non-current', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [(' secured finance debt', 60), ('later than 1 year', 50), ('not later than 5 years', 50), (' bank loan', 40), (' lease liabilities', 40), (' lease liability', 40), (' non current', 40), ('leases', 25), (' lease liabilities - non-current', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa transferred from wip , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), ('later than 1 year', 40), (' secured finance debt', 39), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' bank loan', 33), (' lease liabilities - non-current', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [(' secured finance debt', 60), ('later than 1 year', 50), ('not later than 5 years', 50), (' bank loan', 40), (' lease liabilities', 40), (' lease liability', 40), (' non current', 40), ('leases', 25), (' lease liabilities - non-current', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset retirement obligation , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), ('later than 1 year', 33), (' secured finance debt', 31), (' bank loan', 31), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [(' secured finance debt', 60), ('later than 1 year', 50), ('not later than 5 years', 50), (' bank loan', 40), (' lease liabilities', 40), (' lease liability', 40), (' non current', 40), ('leases', 25), (' lease liabilities - non-current', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset closing net book amount , res_fuzz_match = [('leases', 50), (' non current', 45), (' bank loan', 44), (' secured finance debt', 41), (' lease liabilities - non-current', 37), (' lease liabilities', 36), (' lease liability', 36), ('not later than 5 years', 26), ('later than 1 year', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [(' secured finance debt', 60), ('later than 1 year', 50), ('not later than 5 years', 50), (' bank loan', 40), (' lease liabilities', 40), (' lease liability', 40), (' non current', 40), ('leases', 25), (' lease liabilities - non-current', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 cost , res_fuzz_match = [(' secured finance debt', 55), (' bank loan', 40), (' non current', 32), ('later than 1 year', 29), ('not later than 5 years', 29), ('leases', 25), (' lease liabilities - non-current', 21), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [(' secured finance debt', 60), ('later than 1 year', 50), ('not later than 5 years', 50), (' bank loan', 40), (' lease liabilities', 40), (' lease liability', 40), (' non current', 40), ('leases', 25), (' lease liabilities - non-current', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated depreciation , res_fuzz_match = [('leases', 50), (' bank loan', 33), ('later than 1 year', 33), (' lease liabilities', 30), (' lease liability', 30), (' secured finance debt', 29), (' non current', 27), (' lease liabilities - non-current', 26), ('not later than 5 years', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [(' secured finance debt', 60), ('later than 1 year', 50), ('not later than 5 years', 50), (' bank loan', 40), (' lease liabilities', 40), (' lease liability', 40), (' non current', 40), ('leases', 25), (' lease liabilities - non-current', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated impairment , res_fuzz_match = [(' bank loan', 33), ('later than 1 year', 33), (' lease liabilities', 32), (' lease liability', 32), (' secured finance debt', 29), (' lease liabilities - non-current', 27), (' non current', 27), ('leases', 25), ('not later than 5 years', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [(' secured finance debt', 60), ('later than 1 year', 50), ('not later than 5 years', 50), (' bank loan', 40), (' lease liabilities', 40), (' lease liability', 40), (' non current', 40), ('leases', 25), (' lease liabilities - non-current', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 net book amount , res_fuzz_match = [(' non current', 48), (' bank loan', 44), ('later than 1 year', 40), (' secured finance debt', 35), (' lease liabilities - non-current', 32), ('not later than 5 years', 26), ('leases', 25), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [(' secured finance debt', 60), ('later than 1 year', 50), ('not later than 5 years', 50), (' bank loan', 40), (' lease liabilities', 40), (' lease liability', 40), (' non current', 40), ('leases', 25), (' lease liabilities - non-current', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 cost or fair value , res_fuzz_match = [('not later than 5 years', 44), ('later than 1 year', 40), (' non current', 36), ('leases', 33), (' bank loan', 33), (' secured finance debt', 28), (' lease liabilities - non-current', 19), (' lease liabilities', 15), (' lease liability', 15)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [(' non current', 45), (' secured finance debt', 30), (' lease liabilities - non-current', 30), ('later than 1 year', 30), ('leases', 25), (' lease liabilities', 25), (' lease liability', 25), ('not later than 5 years', 25), (' bank loan', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated depreciation , res_fuzz_match = [('leases', 50), (' bank loan', 44), ('later than 1 year', 40), (' non current', 36), (' lease liabilities - non-current', 32), ('not later than 5 years', 32), (' secured finance debt', 31), (' lease liabilities', 30), (' lease liability', 30)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [(' non current', 45), (' secured finance debt', 30), (' lease liabilities - non-current', 30), ('later than 1 year', 30), ('leases', 25), (' lease liabilities', 25), (' lease liability', 25), ('not later than 5 years', 25), (' bank loan', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated impairment , res_fuzz_match = [(' bank loan', 44), ('later than 1 year', 40), (' non current', 36), (' lease liabilities', 32), (' lease liability', 32), (' lease liabilities - non-current', 32), ('not later than 5 years', 32), ('leases', 25), (' secured finance debt', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [(' non current', 45), (' secured finance debt', 30), (' lease liabilities - non-current', 30), ('later than 1 year', 30), ('leases', 25), (' lease liabilities', 25), (' lease liability', 25), ('not later than 5 years', 25), (' bank loan', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 net book amount , res_fuzz_match = [(' non current', 48), (' bank loan', 44), ('later than 1 year', 40), (' lease liabilities - non-current', 32), (' secured finance debt', 29), ('not later than 5 years', 29), ('leases', 25), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [(' non current', 45), (' secured finance debt', 30), (' lease liabilities - non-current', 30), ('later than 1 year', 30), ('leases', 25), (' lease liabilities', 25), (' lease liability', 25), ('not later than 5 years', 25), (' bank loan', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = year ended 31 december 2022 opening net book amount , res_fuzz_match = [('leases', 50), (' secured finance debt', 47), (' non current', 45), (' bank loan', 44), (' lease liabilities - non-current', 32), (' lease liabilities', 27), (' lease liability', 27), ('later than 1 year', 27), ('not later than 5 years', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [(' non current', 45), (' secured finance debt', 30), (' lease liabilities - non-current', 30), ('later than 1 year', 30), ('leases', 25), (' lease liabilities', 25), (' lease liability', 25), ('not later than 5 years', 25), (' bank loan', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa project note 13 , res_fuzz_match = [('leases', 50), (' non current', 40), ('later than 1 year', 40), (' secured finance debt', 38), ('not later than 5 years', 35), (' bank loan', 33), (' lease liabilities', 27), (' lease liability', 27), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [(' non current', 45), (' secured finance debt', 30), (' lease liabilities - non-current', 30), ('later than 1 year', 30), ('leases', 25), (' lease liabilities', 25), (' lease liability', 25), ('not later than 5 years', 25), (' bank loan', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa additions , res_fuzz_match = [('leases', 50), (' bank loan', 44), ('not later than 5 years', 42), ('later than 1 year', 40), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' secured finance debt', 35), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [(' non current', 45), (' secured finance debt', 30), (' lease liabilities - non-current', 30), ('later than 1 year', 30), ('leases', 25), (' lease liabilities', 25), (' lease liability', 25), ('not later than 5 years', 25), (' bank loan', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa depreciation charge , res_fuzz_match = [('leases', 50), ('later than 1 year', 47), ('not later than 5 years', 42), (' non current', 36), (' secured finance debt', 35), (' bank loan', 33), (' lease liabilities - non-current', 26), (' lease liabilities', 19), (' lease liability', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [(' non current', 45), (' secured finance debt', 30), (' lease liabilities - non-current', 30), ('later than 1 year', 30), ('leases', 25), (' lease liabilities', 25), (' lease liability', 25), ('not later than 5 years', 25), (' bank loan', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa disposals , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), ('later than 1 year', 40), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' secured finance debt', 35), (' bank loan', 35), (' lease liabilities - non-current', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [(' non current', 45), (' secured finance debt', 30), (' lease liabilities - non-current', 30), ('later than 1 year', 30), ('leases', 25), (' lease liabilities', 25), (' lease liability', 25), ('not later than 5 years', 25), (' bank loan', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa transferred from wip , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), ('later than 1 year', 40), (' secured finance debt', 39), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' bank loan', 33), (' lease liabilities - non-current', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [(' non current', 45), (' secured finance debt', 30), (' lease liabilities - non-current', 30), ('later than 1 year', 30), ('leases', 25), (' lease liabilities', 25), (' lease liability', 25), ('not later than 5 years', 25), (' bank loan', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset retirement obligation , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), ('later than 1 year', 33), (' secured finance debt', 31), (' bank loan', 31), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [(' non current', 45), (' secured finance debt', 30), (' lease liabilities - non-current', 30), ('later than 1 year', 30), ('leases', 25), (' lease liabilities', 25), (' lease liability', 25), ('not later than 5 years', 25), (' bank loan', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset closing net book amount , res_fuzz_match = [('leases', 50), (' non current', 45), (' bank loan', 44), (' secured finance debt', 41), (' lease liabilities - non-current', 37), (' lease liabilities', 36), (' lease liability', 36), ('not later than 5 years', 26), ('later than 1 year', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [(' non current', 45), (' secured finance debt', 30), (' lease liabilities - non-current', 30), ('later than 1 year', 30), ('leases', 25), (' lease liabilities', 25), (' lease liability', 25), ('not later than 5 years', 25), (' bank loan', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 cost , res_fuzz_match = [(' secured finance debt', 55), (' bank loan', 40), (' non current', 32), ('later than 1 year', 29), ('not later than 5 years', 29), ('leases', 25), (' lease liabilities - non-current', 21), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [(' non current', 45), (' secured finance debt', 30), (' lease liabilities - non-current', 30), ('later than 1 year', 30), ('leases', 25), (' lease liabilities', 25), (' lease liability', 25), ('not later than 5 years', 25), (' bank loan', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated depreciation , res_fuzz_match = [('leases', 50), (' bank loan', 33), ('later than 1 year', 33), (' lease liabilities', 30), (' lease liability', 30), (' secured finance debt', 29), (' non current', 27), (' lease liabilities - non-current', 26), ('not later than 5 years', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [(' non current', 45), (' secured finance debt', 30), (' lease liabilities - non-current', 30), ('later than 1 year', 30), ('leases', 25), (' lease liabilities', 25), (' lease liability', 25), ('not later than 5 years', 25), (' bank loan', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated impairment , res_fuzz_match = [(' bank loan', 33), ('later than 1 year', 33), (' lease liabilities', 32), (' lease liability', 32), (' secured finance debt', 29), (' lease liabilities - non-current', 27), (' non current', 27), ('leases', 25), ('not later than 5 years', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [(' non current', 45), (' secured finance debt', 30), (' lease liabilities - non-current', 30), ('later than 1 year', 30), ('leases', 25), (' lease liabilities', 25), (' lease liability', 25), ('not later than 5 years', 25), (' bank loan', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 net book amount , res_fuzz_match = [(' non current', 48), (' bank loan', 44), ('later than 1 year', 40), (' secured finance debt', 35), (' lease liabilities - non-current', 32), ('not later than 5 years', 26), ('leases', 25), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [(' non current', 45), (' secured finance debt', 30), (' lease liabilities - non-current', 30), ('later than 1 year', 30), ('leases', 25), (' lease liabilities', 25), (' lease liability', 25), ('not later than 5 years', 25), (' bank loan', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 cost or fair value , res_fuzz_match = [('not later than 5 years', 44), ('later than 1 year', 40), (' non current', 36), ('leases', 33), (' bank loan', 33), (' secured finance debt', 28), (' lease liabilities - non-current', 19), (' lease liabilities', 15), (' lease liability', 15)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('leases', 50), (' secured finance debt', 40), (' non current', 40), ('later than 1 year', 32), ('not later than 5 years', 32), (' lease liabilities - non-current', 31), (' lease liabilities', 30), (' lease liability', 30), (' bank loan', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated depreciation , res_fuzz_match = [('leases', 50), (' bank loan', 44), ('later than 1 year', 40), (' non current', 36), (' lease liabilities - non-current', 32), ('not later than 5 years', 32), (' secured finance debt', 31), (' lease liabilities', 30), (' lease liability', 30)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('leases', 50), (' secured finance debt', 40), (' non current', 40), ('later than 1 year', 32), ('not later than 5 years', 32), (' lease liabilities - non-current', 31), (' lease liabilities', 30), (' lease liability', 30), (' bank loan', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated impairment , res_fuzz_match = [(' bank loan', 44), ('later than 1 year', 40), (' non current', 36), (' lease liabilities', 32), (' lease liability', 32), (' lease liabilities - non-current', 32), ('not later than 5 years', 32), ('leases', 25), (' secured finance debt', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('leases', 50), (' secured finance debt', 40), (' non current', 40), ('later than 1 year', 32), ('not later than 5 years', 32), (' lease liabilities - non-current', 31), (' lease liabilities', 30), (' lease liability', 30), (' bank loan', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 net book amount , res_fuzz_match = [(' non current', 48), (' bank loan', 44), ('later than 1 year', 40), (' lease liabilities - non-current', 32), (' secured finance debt', 29), ('not later than 5 years', 29), ('leases', 25), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('leases', 50), (' secured finance debt', 40), (' non current', 40), ('later than 1 year', 32), ('not later than 5 years', 32), (' lease liabilities - non-current', 31), (' lease liabilities', 30), (' lease liability', 30), (' bank loan', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = year ended 31 december 2022 opening net book amount , res_fuzz_match = [('leases', 50), (' secured finance debt', 47), (' non current', 45), (' bank loan', 44), (' lease liabilities - non-current', 32), (' lease liabilities', 27), (' lease liability', 27), ('later than 1 year', 27), ('not later than 5 years', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('leases', 50), (' secured finance debt', 40), (' non current', 40), ('later than 1 year', 32), ('not later than 5 years', 32), (' lease liabilities - non-current', 31), (' lease liabilities', 30), (' lease liability', 30), (' bank loan', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa project note 13 , res_fuzz_match = [('leases', 50), (' non current', 40), ('later than 1 year', 40), (' secured finance debt', 38), ('not later than 5 years', 35), (' bank loan', 33), (' lease liabilities', 27), (' lease liability', 27), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('leases', 50), (' secured finance debt', 40), (' non current', 40), ('later than 1 year', 32), ('not later than 5 years', 32), (' lease liabilities - non-current', 31), (' lease liabilities', 30), (' lease liability', 30), (' bank loan', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa additions , res_fuzz_match = [('leases', 50), (' bank loan', 44), ('not later than 5 years', 42), ('later than 1 year', 40), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' secured finance debt', 35), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('leases', 50), (' secured finance debt', 40), (' non current', 40), ('later than 1 year', 32), ('not later than 5 years', 32), (' lease liabilities - non-current', 31), (' lease liabilities', 30), (' lease liability', 30), (' bank loan', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa depreciation charge , res_fuzz_match = [('leases', 50), ('later than 1 year', 47), ('not later than 5 years', 42), (' non current', 36), (' secured finance debt', 35), (' bank loan', 33), (' lease liabilities - non-current', 26), (' lease liabilities', 19), (' lease liability', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('leases', 50), (' secured finance debt', 40), (' non current', 40), ('later than 1 year', 32), ('not later than 5 years', 32), (' lease liabilities - non-current', 31), (' lease liabilities', 30), (' lease liability', 30), (' bank loan', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa disposals , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), ('later than 1 year', 40), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' secured finance debt', 35), (' bank loan', 35), (' lease liabilities - non-current', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('leases', 50), (' secured finance debt', 40), (' non current', 40), ('later than 1 year', 32), ('not later than 5 years', 32), (' lease liabilities - non-current', 31), (' lease liabilities', 30), (' lease liability', 30), (' bank loan', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa transferred from wip , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), ('later than 1 year', 40), (' secured finance debt', 39), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' bank loan', 33), (' lease liabilities - non-current', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('leases', 50), (' secured finance debt', 40), (' non current', 40), ('later than 1 year', 32), ('not later than 5 years', 32), (' lease liabilities - non-current', 31), (' lease liabilities', 30), (' lease liability', 30), (' bank loan', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset retirement obligation , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), ('later than 1 year', 33), (' secured finance debt', 31), (' bank loan', 31), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('leases', 50), (' secured finance debt', 40), (' non current', 40), ('later than 1 year', 32), ('not later than 5 years', 32), (' lease liabilities - non-current', 31), (' lease liabilities', 30), (' lease liability', 30), (' bank loan', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset closing net book amount , res_fuzz_match = [('leases', 50), (' non current', 45), (' bank loan', 44), (' secured finance debt', 41), (' lease liabilities - non-current', 37), (' lease liabilities', 36), (' lease liability', 36), ('not later than 5 years', 26), ('later than 1 year', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('leases', 50), (' secured finance debt', 40), (' non current', 40), ('later than 1 year', 32), ('not later than 5 years', 32), (' lease liabilities - non-current', 31), (' lease liabilities', 30), (' lease liability', 30), (' bank loan', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 cost , res_fuzz_match = [(' secured finance debt', 55), (' bank loan', 40), (' non current', 32), ('later than 1 year', 29), ('not later than 5 years', 29), ('leases', 25), (' lease liabilities - non-current', 21), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('leases', 50), (' secured finance debt', 40), (' non current', 40), ('later than 1 year', 32), ('not later than 5 years', 32), (' lease liabilities - non-current', 31), (' lease liabilities', 30), (' lease liability', 30), (' bank loan', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated depreciation , res_fuzz_match = [('leases', 50), (' bank loan', 33), ('later than 1 year', 33), (' lease liabilities', 30), (' lease liability', 30), (' secured finance debt', 29), (' non current', 27), (' lease liabilities - non-current', 26), ('not later than 5 years', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('leases', 50), (' secured finance debt', 40), (' non current', 40), ('later than 1 year', 32), ('not later than 5 years', 32), (' lease liabilities - non-current', 31), (' lease liabilities', 30), (' lease liability', 30), (' bank loan', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated impairment , res_fuzz_match = [(' bank loan', 33), ('later than 1 year', 33), (' lease liabilities', 32), (' lease liability', 32), (' secured finance debt', 29), (' lease liabilities - non-current', 27), (' non current', 27), ('leases', 25), ('not later than 5 years', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('leases', 50), (' secured finance debt', 40), (' non current', 40), ('later than 1 year', 32), ('not later than 5 years', 32), (' lease liabilities - non-current', 31), (' lease liabilities', 30), (' lease liability', 30), (' bank loan', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 net book amount , res_fuzz_match = [(' non current', 48), (' bank loan', 44), ('later than 1 year', 40), (' secured finance debt', 35), (' lease liabilities - non-current', 32), ('not later than 5 years', 26), ('leases', 25), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('leases', 50), (' secured finance debt', 40), (' non current', 40), ('later than 1 year', 32), ('not later than 5 years', 32), (' lease liabilities - non-current', 31), (' lease liabilities', 30), (' lease liability', 30), (' bank loan', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 cost or fair value , res_fuzz_match = [('not later than 5 years', 44), ('later than 1 year', 40), (' non current', 36), ('leases', 33), (' bank loan', 33), (' secured finance debt', 28), (' lease liabilities - non-current', 19), (' lease liabilities', 15), (' lease liability', 15)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [(' lease liabilities', 60), (' lease liability', 60), (' lease liabilities - non-current', 60), ('leases', 40), (' secured finance debt', 40), (' bank loan', 40), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated depreciation , res_fuzz_match = [('leases', 50), (' bank loan', 44), ('later than 1 year', 40), (' non current', 36), (' lease liabilities - non-current', 32), ('not later than 5 years', 32), (' secured finance debt', 31), (' lease liabilities', 30), (' lease liability', 30)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [(' lease liabilities', 60), (' lease liability', 60), (' lease liabilities - non-current', 60), ('leases', 40), (' secured finance debt', 40), (' bank loan', 40), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated impairment , res_fuzz_match = [(' bank loan', 44), ('later than 1 year', 40), (' non current', 36), (' lease liabilities', 32), (' lease liability', 32), (' lease liabilities - non-current', 32), ('not later than 5 years', 32), ('leases', 25), (' secured finance debt', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [(' lease liabilities', 60), (' lease liability', 60), (' lease liabilities - non-current', 60), ('leases', 40), (' secured finance debt', 40), (' bank loan', 40), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 net book amount , res_fuzz_match = [(' non current', 48), (' bank loan', 44), ('later than 1 year', 40), (' lease liabilities - non-current', 32), (' secured finance debt', 29), ('not later than 5 years', 29), ('leases', 25), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [(' lease liabilities', 60), (' lease liability', 60), (' lease liabilities - non-current', 60), ('leases', 40), (' secured finance debt', 40), (' bank loan', 40), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = year ended 31 december 2022 opening net book amount , res_fuzz_match = [('leases', 50), (' secured finance debt', 47), (' non current', 45), (' bank loan', 44), (' lease liabilities - non-current', 32), (' lease liabilities', 27), (' lease liability', 27), ('later than 1 year', 27), ('not later than 5 years', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [(' lease liabilities', 60), (' lease liability', 60), (' lease liabilities - non-current', 60), ('leases', 40), (' secured finance debt', 40), (' bank loan', 40), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa project note 13 , res_fuzz_match = [('leases', 50), (' non current', 40), ('later than 1 year', 40), (' secured finance debt', 38), ('not later than 5 years', 35), (' bank loan', 33), (' lease liabilities', 27), (' lease liability', 27), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [(' lease liabilities', 60), (' lease liability', 60), (' lease liabilities - non-current', 60), ('leases', 40), (' secured finance debt', 40), (' bank loan', 40), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa additions , res_fuzz_match = [('leases', 50), (' bank loan', 44), ('not later than 5 years', 42), ('later than 1 year', 40), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' secured finance debt', 35), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [(' lease liabilities', 60), (' lease liability', 60), (' lease liabilities - non-current', 60), ('leases', 40), (' secured finance debt', 40), (' bank loan', 40), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa depreciation charge , res_fuzz_match = [('leases', 50), ('later than 1 year', 47), ('not later than 5 years', 42), (' non current', 36), (' secured finance debt', 35), (' bank loan', 33), (' lease liabilities - non-current', 26), (' lease liabilities', 19), (' lease liability', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [(' lease liabilities', 60), (' lease liability', 60), (' lease liabilities - non-current', 60), ('leases', 40), (' secured finance debt', 40), (' bank loan', 40), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa disposals , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), ('later than 1 year', 40), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' secured finance debt', 35), (' bank loan', 35), (' lease liabilities - non-current', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [(' lease liabilities', 60), (' lease liability', 60), (' lease liabilities - non-current', 60), ('leases', 40), (' secured finance debt', 40), (' bank loan', 40), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa transferred from wip , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), ('later than 1 year', 40), (' secured finance debt', 39), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' bank loan', 33), (' lease liabilities - non-current', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [(' lease liabilities', 60), (' lease liability', 60), (' lease liabilities - non-current', 60), ('leases', 40), (' secured finance debt', 40), (' bank loan', 40), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset retirement obligation , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), ('later than 1 year', 33), (' secured finance debt', 31), (' bank loan', 31), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [(' lease liabilities', 60), (' lease liability', 60), (' lease liabilities - non-current', 60), ('leases', 40), (' secured finance debt', 40), (' bank loan', 40), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset closing net book amount , res_fuzz_match = [('leases', 50), (' non current', 45), (' bank loan', 44), (' secured finance debt', 41), (' lease liabilities - non-current', 37), (' lease liabilities', 36), (' lease liability', 36), ('not later than 5 years', 26), ('later than 1 year', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [(' lease liabilities', 60), (' lease liability', 60), (' lease liabilities - non-current', 60), ('leases', 40), (' secured finance debt', 40), (' bank loan', 40), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 cost , res_fuzz_match = [(' secured finance debt', 55), (' bank loan', 40), (' non current', 32), ('later than 1 year', 29), ('not later than 5 years', 29), ('leases', 25), (' lease liabilities - non-current', 21), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [(' lease liabilities', 60), (' lease liability', 60), (' lease liabilities - non-current', 60), ('leases', 40), (' secured finance debt', 40), (' bank loan', 40), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated depreciation , res_fuzz_match = [('leases', 50), (' bank loan', 33), ('later than 1 year', 33), (' lease liabilities', 30), (' lease liability', 30), (' secured finance debt', 29), (' non current', 27), (' lease liabilities - non-current', 26), ('not later than 5 years', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [(' lease liabilities', 60), (' lease liability', 60), (' lease liabilities - non-current', 60), ('leases', 40), (' secured finance debt', 40), (' bank loan', 40), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated impairment , res_fuzz_match = [(' bank loan', 33), ('later than 1 year', 33), (' lease liabilities', 32), (' lease liability', 32), (' secured finance debt', 29), (' lease liabilities - non-current', 27), (' non current', 27), ('leases', 25), ('not later than 5 years', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [(' lease liabilities', 60), (' lease liability', 60), (' lease liabilities - non-current', 60), ('leases', 40), (' secured finance debt', 40), (' bank loan', 40), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 net book amount , res_fuzz_match = [(' non current', 48), (' bank loan', 44), ('later than 1 year', 40), (' secured finance debt', 35), (' lease liabilities - non-current', 32), ('not later than 5 years', 26), ('leases', 25), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [(' lease liabilities', 60), (' lease liability', 60), (' lease liabilities - non-current', 60), ('leases', 40), (' secured finance debt', 40), (' bank loan', 40), (' non current', 20), ('later than 1 year', 20), ('not later than 5 years', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 cost or fair value , res_fuzz_match = [('not later than 5 years', 44), ('later than 1 year', 40), (' non current', 36), ('leases', 33), (' bank loan', 33), (' secured finance debt', 28), (' lease liabilities - non-current', 19), (' lease liabilities', 15), (' lease liability', 15)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('not later than 5 years', 60), (' bank loan', 44), ('leases', 40), (' lease liabilities', 40), (' lease liability', 40), ('later than 1 year', 40), (' secured finance debt', 33), (' non current', 33), (' lease liabilities - non-current', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated depreciation , res_fuzz_match = [('leases', 50), (' bank loan', 44), ('later than 1 year', 40), (' non current', 36), (' lease liabilities - non-current', 32), ('not later than 5 years', 32), (' secured finance debt', 31), (' lease liabilities', 30), (' lease liability', 30)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('not later than 5 years', 60), (' bank loan', 44), ('leases', 40), (' lease liabilities', 40), (' lease liability', 40), ('later than 1 year', 40), (' secured finance debt', 33), (' non current', 33), (' lease liabilities - non-current', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated impairment , res_fuzz_match = [(' bank loan', 44), ('later than 1 year', 40), (' non current', 36), (' lease liabilities', 32), (' lease liability', 32), (' lease liabilities - non-current', 32), ('not later than 5 years', 32), ('leases', 25), (' secured finance debt', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('not later than 5 years', 60), (' bank loan', 44), ('leases', 40), (' lease liabilities', 40), (' lease liability', 40), ('later than 1 year', 40), (' secured finance debt', 33), (' non current', 33), (' lease liabilities - non-current', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 net book amount , res_fuzz_match = [(' non current', 48), (' bank loan', 44), ('later than 1 year', 40), (' lease liabilities - non-current', 32), (' secured finance debt', 29), ('not later than 5 years', 29), ('leases', 25), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('not later than 5 years', 60), (' bank loan', 44), ('leases', 40), (' lease liabilities', 40), (' lease liability', 40), ('later than 1 year', 40), (' secured finance debt', 33), (' non current', 33), (' lease liabilities - non-current', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = year ended 31 december 2022 opening net book amount , res_fuzz_match = [('leases', 50), (' secured finance debt', 47), (' non current', 45), (' bank loan', 44), (' lease liabilities - non-current', 32), (' lease liabilities', 27), (' lease liability', 27), ('later than 1 year', 27), ('not later than 5 years', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('not later than 5 years', 60), (' bank loan', 44), ('leases', 40), (' lease liabilities', 40), (' lease liability', 40), ('later than 1 year', 40), (' secured finance debt', 33), (' non current', 33), (' lease liabilities - non-current', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa project note 13 , res_fuzz_match = [('leases', 50), (' non current', 40), ('later than 1 year', 40), (' secured finance debt', 38), ('not later than 5 years', 35), (' bank loan', 33), (' lease liabilities', 27), (' lease liability', 27), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('not later than 5 years', 60), (' bank loan', 44), ('leases', 40), (' lease liabilities', 40), (' lease liability', 40), ('later than 1 year', 40), (' secured finance debt', 33), (' non current', 33), (' lease liabilities - non-current', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa additions , res_fuzz_match = [('leases', 50), (' bank loan', 44), ('not later than 5 years', 42), ('later than 1 year', 40), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' secured finance debt', 35), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('not later than 5 years', 60), (' bank loan', 44), ('leases', 40), (' lease liabilities', 40), (' lease liability', 40), ('later than 1 year', 40), (' secured finance debt', 33), (' non current', 33), (' lease liabilities - non-current', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa depreciation charge , res_fuzz_match = [('leases', 50), ('later than 1 year', 47), ('not later than 5 years', 42), (' non current', 36), (' secured finance debt', 35), (' bank loan', 33), (' lease liabilities - non-current', 26), (' lease liabilities', 19), (' lease liability', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('not later than 5 years', 60), (' bank loan', 44), ('leases', 40), (' lease liabilities', 40), (' lease liability', 40), ('later than 1 year', 40), (' secured finance debt', 33), (' non current', 33), (' lease liabilities - non-current', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa disposals , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), ('later than 1 year', 40), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' secured finance debt', 35), (' bank loan', 35), (' lease liabilities - non-current', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('not later than 5 years', 60), (' bank loan', 44), ('leases', 40), (' lease liabilities', 40), (' lease liability', 40), ('later than 1 year', 40), (' secured finance debt', 33), (' non current', 33), (' lease liabilities - non-current', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa transferred from wip , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), ('later than 1 year', 40), (' secured finance debt', 39), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), (' bank loan', 33), (' lease liabilities - non-current', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('not later than 5 years', 60), (' bank loan', 44), ('leases', 40), (' lease liabilities', 40), (' lease liability', 40), ('later than 1 year', 40), (' secured finance debt', 33), (' non current', 33), (' lease liabilities - non-current', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset retirement obligation , res_fuzz_match = [('leases', 50), ('not later than 5 years', 42), (' lease liabilities', 36), (' lease liability', 36), (' non current', 36), ('later than 1 year', 33), (' secured finance debt', 31), (' bank loan', 31), (' lease liabilities - non-current', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('not later than 5 years', 60), (' bank loan', 44), ('leases', 40), (' lease liabilities', 40), (' lease liability', 40), ('later than 1 year', 40), (' secured finance debt', 33), (' non current', 33), (' lease liabilities - non-current', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset closing net book amount , res_fuzz_match = [('leases', 50), (' non current', 45), (' bank loan', 44), (' secured finance debt', 41), (' lease liabilities - non-current', 37), (' lease liabilities', 36), (' lease liability', 36), ('not later than 5 years', 26), ('later than 1 year', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('not later than 5 years', 60), (' bank loan', 44), ('leases', 40), (' lease liabilities', 40), (' lease liability', 40), ('later than 1 year', 40), (' secured finance debt', 33), (' non current', 33), (' lease liabilities - non-current', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 cost , res_fuzz_match = [(' secured finance debt', 55), (' bank loan', 40), (' non current', 32), ('later than 1 year', 29), ('not later than 5 years', 29), ('leases', 25), (' lease liabilities - non-current', 21), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('not later than 5 years', 60), (' bank loan', 44), ('leases', 40), (' lease liabilities', 40), (' lease liability', 40), ('later than 1 year', 40), (' secured finance debt', 33), (' non current', 33), (' lease liabilities - non-current', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated depreciation , res_fuzz_match = [('leases', 50), (' bank loan', 33), ('later than 1 year', 33), (' lease liabilities', 30), (' lease liability', 30), (' secured finance debt', 29), (' non current', 27), (' lease liabilities - non-current', 26), ('not later than 5 years', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('not later than 5 years', 60), (' bank loan', 44), ('leases', 40), (' lease liabilities', 40), (' lease liability', 40), ('later than 1 year', 40), (' secured finance debt', 33), (' non current', 33), (' lease liabilities - non-current', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated impairment , res_fuzz_match = [(' bank loan', 33), ('later than 1 year', 33), (' lease liabilities', 32), (' lease liability', 32), (' secured finance debt', 29), (' lease liabilities - non-current', 27), (' non current', 27), ('leases', 25), ('not later than 5 years', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('not later than 5 years', 60), (' bank loan', 44), ('leases', 40), (' lease liabilities', 40), (' lease liability', 40), ('later than 1 year', 40), (' secured finance debt', 33), (' non current', 33), (' lease liabilities - non-current', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 net book amount , res_fuzz_match = [(' non current', 48), (' bank loan', 44), ('later than 1 year', 40), (' secured finance debt', 35), (' lease liabilities - non-current', 32), ('not later than 5 years', 26), ('leases', 25), (' lease liabilities', 18), (' lease liability', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('not later than 5 years', 60), (' bank loan', 44), ('leases', 40), (' lease liabilities', 40), (' lease liability', 40), ('later than 1 year', 40), (' secured finance debt', 33), (' non current', 33), (' lease liabilities - non-current', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:41+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-04-23 13:59:41+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:41+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-04-23 13:59:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:41+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-04-23 13:59:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:41+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 23)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('(bond)', 40), ('interest bearing loans and borrowings', 34)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = other non-current liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('(bond)', 25)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provision for associate funding , res_fuzz_match = [('interest bearing loans and borrowings', 31), ('(bond)', 23)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 26), ('(bond)', 15)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:41+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 23)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('(bond)', 40), ('interest bearing loans and borrowings', 34)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = other non-current liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('(bond)', 25)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provision for associate funding , res_fuzz_match = [('interest bearing loans and borrowings', 31), ('(bond)', 23)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 26), ('(bond)', 15)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:41+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-04-23 13:59:41+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:41+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-04-23 13:59:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:41+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-04-23 13:59:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:41+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 23)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 34), ('lease liabilities', 12)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 59), ('interest bearing loans and borrowings', 36)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = other non-current liabilities , res_fuzz_match = [('lease liabilities', 39), ('interest bearing loans and borrowings', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provision for associate funding , res_fuzz_match = [('interest bearing loans and borrowings', 31), ('lease liabilities', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('lease liabilities', 30), ('interest bearing loans and borrowings', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - best_match = {'data_index': [31], 'score': 100, 'value': 1167.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['8(b)'], 'line_item_value': [1167.0]}
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:41+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 23)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 34), ('lease liabilities', 12)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 59), ('interest bearing loans and borrowings', 36)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = other non-current liabilities , res_fuzz_match = [('lease liabilities', 39), ('interest bearing loans and borrowings', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provision for associate funding , res_fuzz_match = [('interest bearing loans and borrowings', 31), ('lease liabilities', 24)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('lease liabilities', 30), ('interest bearing loans and borrowings', 26)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - best_match = {'data_index': [31], 'score': 100, 'value': 900.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['8(b)'], 'line_item_value': [900.0]}
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:41+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-04-23 13:59:41+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:41+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-04-23 13:59:41+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:41+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-04-23 13:59:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:41+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 100), ('lease liabilities', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 44)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), ('lease liabilities', 17)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = other non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provision for associate funding , res_fuzz_match = [('lease liabilities', 27), ('interest bearing loans and borrowings', 15)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - best_match = {'data_index': [27, 31], 'score': 100, 'value': 1167.0, 'line_item_label': ['Borrowings', 'Lease liabilities'], 'note_numbers': ['7(d)', '8(b)'], 'line_item_value': [0.0, 1167.0]}
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:41+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 100), ('lease liabilities', 22)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 44)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), ('lease liabilities', 17)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = other non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = provision for associate funding , res_fuzz_match = [('lease liabilities', 27), ('interest bearing loans and borrowings', 15)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - best_match = {'data_index': [27, 31], 'score': 100, 'value': 428276.0, 'line_item_label': ['Borrowings', 'Lease liabilities'], 'note_numbers': ['7(d)', '8(b)'], 'line_item_value': [427376.0, 900.0]}
2023-04-23 13:59:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:41+0530 - sLogger - DEBUG - keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 cost or fair value , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 37), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated depreciation , res_fuzz_match = [('deferred tax liabilities', 35), ('total deferred tax (assets) / liabilities', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 37), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated impairment , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 37), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 32), ('deferred tax liabilities', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 37), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = year ended 31 december 2022 opening net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 37), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa project note 13 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 37), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa additions , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 35)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 37), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa depreciation charge , res_fuzz_match = [('total deferred tax (assets) / liabilities', 30), ('deferred tax liabilities', 28)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 37), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa disposals , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 37), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa transferred from wip , res_fuzz_match = [('deferred tax liabilities', 41), ('total deferred tax (assets) / liabilities', 36)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 37), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset retirement obligation , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 37), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset closing net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 37), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 cost , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 37), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated depreciation , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 37), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated impairment , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 44)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 37), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 net book amount , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 37), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 cost or fair value , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [('deferred tax liabilities', 75), ('total deferred tax (assets) / liabilities', 75)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated depreciation , res_fuzz_match = [('deferred tax liabilities', 35), ('total deferred tax (assets) / liabilities', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [('deferred tax liabilities', 75), ('total deferred tax (assets) / liabilities', 75)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated impairment , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [('deferred tax liabilities', 75), ('total deferred tax (assets) / liabilities', 75)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 32), ('deferred tax liabilities', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [('deferred tax liabilities', 75), ('total deferred tax (assets) / liabilities', 75)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = year ended 31 december 2022 opening net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [('deferred tax liabilities', 75), ('total deferred tax (assets) / liabilities', 75)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa project note 13 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [('deferred tax liabilities', 75), ('total deferred tax (assets) / liabilities', 75)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa additions , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 35)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [('deferred tax liabilities', 75), ('total deferred tax (assets) / liabilities', 75)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa depreciation charge , res_fuzz_match = [('total deferred tax (assets) / liabilities', 30), ('deferred tax liabilities', 28)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [('deferred tax liabilities', 75), ('total deferred tax (assets) / liabilities', 75)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa disposals , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [('deferred tax liabilities', 75), ('total deferred tax (assets) / liabilities', 75)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa transferred from wip , res_fuzz_match = [('deferred tax liabilities', 41), ('total deferred tax (assets) / liabilities', 36)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [('deferred tax liabilities', 75), ('total deferred tax (assets) / liabilities', 75)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset retirement obligation , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [('deferred tax liabilities', 75), ('total deferred tax (assets) / liabilities', 75)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset closing net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [('deferred tax liabilities', 75), ('total deferred tax (assets) / liabilities', 75)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 cost , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [('deferred tax liabilities', 75), ('total deferred tax (assets) / liabilities', 75)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated depreciation , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [('deferred tax liabilities', 75), ('total deferred tax (assets) / liabilities', 75)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated impairment , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 44)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [('deferred tax liabilities', 75), ('total deferred tax (assets) / liabilities', 75)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 net book amount , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = buildings $'000 , res_fuzz_match = [('deferred tax liabilities', 75), ('total deferred tax (assets) / liabilities', 75)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 cost or fair value , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated depreciation , res_fuzz_match = [('deferred tax liabilities', 35), ('total deferred tax (assets) / liabilities', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated impairment , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 32), ('deferred tax liabilities', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = year ended 31 december 2022 opening net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa project note 13 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa additions , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 35)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa depreciation charge , res_fuzz_match = [('total deferred tax (assets) / liabilities', 30), ('deferred tax liabilities', 28)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa disposals , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa transferred from wip , res_fuzz_match = [('deferred tax liabilities', 41), ('total deferred tax (assets) / liabilities', 36)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset retirement obligation , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset closing net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 cost , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated depreciation , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated impairment , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 44)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 net book amount , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = subsea $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 18)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 cost or fair value , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [('deferred tax liabilities', 40), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated depreciation , res_fuzz_match = [('deferred tax liabilities', 35), ('total deferred tax (assets) / liabilities', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [('deferred tax liabilities', 40), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated impairment , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [('deferred tax liabilities', 40), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 32), ('deferred tax liabilities', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [('deferred tax liabilities', 40), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = year ended 31 december 2022 opening net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [('deferred tax liabilities', 40), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa project note 13 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [('deferred tax liabilities', 40), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa additions , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 35)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [('deferred tax liabilities', 40), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa depreciation charge , res_fuzz_match = [('total deferred tax (assets) / liabilities', 30), ('deferred tax liabilities', 28)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [('deferred tax liabilities', 40), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa disposals , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [('deferred tax liabilities', 40), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa transferred from wip , res_fuzz_match = [('deferred tax liabilities', 41), ('total deferred tax (assets) / liabilities', 36)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [('deferred tax liabilities', 40), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset retirement obligation , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [('deferred tax liabilities', 40), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset closing net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [('deferred tax liabilities', 40), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 cost , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [('deferred tax liabilities', 40), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated depreciation , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [('deferred tax liabilities', 40), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated impairment , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 44)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [('deferred tax liabilities', 40), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 net book amount , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = marine $'000 , res_fuzz_match = [('deferred tax liabilities', 40), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 cost or fair value , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated depreciation , res_fuzz_match = [('deferred tax liabilities', 35), ('total deferred tax (assets) / liabilities', 32)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated impairment , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at1january 2022 net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 32), ('deferred tax liabilities', 19)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = year ended 31 december 2022 opening net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa project note 13 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa additions , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 35)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa depreciation charge , res_fuzz_match = [('total deferred tax (assets) / liabilities', 30), ('deferred tax liabilities', 28)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa disposals , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa transferred from wip , res_fuzz_match = [('deferred tax liabilities', 41), ('total deferred tax (assets) / liabilities', 36)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset retirement obligation , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset closing net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 38)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 cost , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 29)]
2023-04-23 13:59:41+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated depreciation , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 32)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated impairment , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 44)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 net book amount , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = development properties $'000 , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at1january 2022 cost or fair value , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 38)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 54), ('deferred tax liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated depreciation , res_fuzz_match = [('deferred tax liabilities', 35), ('total deferred tax (assets) / liabilities', 32)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 54), ('deferred tax liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated impairment , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 38)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 54), ('deferred tax liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at1january 2022 net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 32), ('deferred tax liabilities', 19)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 54), ('deferred tax liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = year ended 31 december 2022 opening net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 38)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 54), ('deferred tax liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa project note 13 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 54), ('deferred tax liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa additions , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 35)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 54), ('deferred tax liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa depreciation charge , res_fuzz_match = [('total deferred tax (assets) / liabilities', 30), ('deferred tax liabilities', 28)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 54), ('deferred tax liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa disposals , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 54), ('deferred tax liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa transferred from wip , res_fuzz_match = [('deferred tax liabilities', 41), ('total deferred tax (assets) / liabilities', 36)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 54), ('deferred tax liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset retirement obligation , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 38)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 54), ('deferred tax liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset closing net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 38)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 54), ('deferred tax liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 cost , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 29)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 54), ('deferred tax liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated depreciation , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 32)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 54), ('deferred tax liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated impairment , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 44)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 54), ('deferred tax liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 net book amount , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = pipeline asset $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 54), ('deferred tax liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at1january 2022 cost or fair value , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 38)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [('deferred tax liabilities', 60), ('total deferred tax (assets) / liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated depreciation , res_fuzz_match = [('deferred tax liabilities', 35), ('total deferred tax (assets) / liabilities', 32)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [('deferred tax liabilities', 60), ('total deferred tax (assets) / liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated impairment , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 38)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [('deferred tax liabilities', 60), ('total deferred tax (assets) / liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at1january 2022 net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 32), ('deferred tax liabilities', 19)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [('deferred tax liabilities', 60), ('total deferred tax (assets) / liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = year ended 31 december 2022 opening net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 38)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [('deferred tax liabilities', 60), ('total deferred tax (assets) / liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa project note 13 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [('deferred tax liabilities', 60), ('total deferred tax (assets) / liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa additions , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 35)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [('deferred tax liabilities', 60), ('total deferred tax (assets) / liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa depreciation charge , res_fuzz_match = [('total deferred tax (assets) / liabilities', 30), ('deferred tax liabilities', 28)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [('deferred tax liabilities', 60), ('total deferred tax (assets) / liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa disposals , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [('deferred tax liabilities', 60), ('total deferred tax (assets) / liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa transferred from wip , res_fuzz_match = [('deferred tax liabilities', 41), ('total deferred tax (assets) / liabilities', 36)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [('deferred tax liabilities', 60), ('total deferred tax (assets) / liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset retirement obligation , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 38)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [('deferred tax liabilities', 60), ('total deferred tax (assets) / liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset closing net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 38)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [('deferred tax liabilities', 60), ('total deferred tax (assets) / liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 cost , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 29)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [('deferred tax liabilities', 60), ('total deferred tax (assets) / liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated depreciation , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 32)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [('deferred tax liabilities', 60), ('total deferred tax (assets) / liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated impairment , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 44)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [('deferred tax liabilities', 60), ('total deferred tax (assets) / liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 net book amount , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = facilities $'000 , res_fuzz_match = [('deferred tax liabilities', 60), ('total deferred tax (assets) / liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at1january 2022 cost or fair value , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 38)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 100), ('deferred tax liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated depreciation , res_fuzz_match = [('deferred tax liabilities', 35), ('total deferred tax (assets) / liabilities', 32)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 100), ('deferred tax liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at1january 2022 accumulated impairment , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 38)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 100), ('deferred tax liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at1january 2022 net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 32), ('deferred tax liabilities', 19)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 100), ('deferred tax liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = year ended 31 december 2022 opening net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 38)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 100), ('deferred tax liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa project note 13 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 100), ('deferred tax liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa additions , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 35)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 100), ('deferred tax liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa depreciation charge , res_fuzz_match = [('total deferred tax (assets) / liabilities', 30), ('deferred tax liabilities', 28)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 100), ('deferred tax liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa disposals , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 100), ('deferred tax liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = acquisition of interest in barossa transferred from wip , res_fuzz_match = [('deferred tax liabilities', 41), ('total deferred tax (assets) / liabilities', 36)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 100), ('deferred tax liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset retirement obligation , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 38)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 100), ('deferred tax liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = effect of movement in asset closing net book amount , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 38)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 100), ('deferred tax liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 cost , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 29)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 100), ('deferred tax liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated depreciation , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 32)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 100), ('deferred tax liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 accumulated impairment , res_fuzz_match = [('total deferred tax (assets) / liabilities', 46), ('deferred tax liabilities', 44)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 100), ('deferred tax liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = at31 december 2022 net book amount , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 40)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('total deferred tax (assets) / liabilities', 100), ('deferred tax liabilities', 60)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [473288.0, -111079.0, -49132.0, 313077.0, 313077.0, 212500.0, 207502.0, -21517.0, -133.0, 0.0, -8607.0, 702822.0, 884683.0, -132729.0, -49132.0, 702822.0], 'label': ["Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000"], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('common stock', 23), ('contributed equity', 20), ('equity share capital', 19), (' issued capital', 17), ('share capital', 16), (' share capital', 16), ('perpetual equity instrument', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('common stock', 22), ('contributed equity', 18), ('perpetual equity instrument', 13), ('share capital', 12), (' share capital', 12), ('equity share capital', 8), (' issued capital', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('share capital', 30), (' share capital', 30), ('equity share capital', 24), (' issued capital', 23), ('perpetual equity instrument', 20), ('common stock', 14), ('contributed equity', 6)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' issued capital', 38), ('share capital', 35), (' share capital', 35), ('equity share capital', 25), ('common stock', 22), ('contributed equity', 18), ('perpetual equity instrument', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other non-current liabilities , res_fuzz_match = [('share capital', 26), (' share capital', 26), ('common stock', 25), ('contributed equity', 22), ('equity share capital', 21), ('perpetual equity instrument', 18), (' issued capital', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' issued capital', 29), ('share capital', 27), (' share capital', 27), ('contributed equity', 22), ('equity share capital', 21), ('perpetual equity instrument', 17), ('common stock', 9)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = provision for associate funding , res_fuzz_match = [('perpetual equity instrument', 26), ('contributed equity', 26), (' issued capital', 25), ('share capital', 24), (' share capital', 24), ('equity share capital', 20), ('common stock', 18)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('share capital', 40), (' share capital', 40), ('equity share capital', 37), ('contributed equity', 32), (' issued capital', 32), ('perpetual equity instrument', 29), ('common stock', 19)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('common stock', 23), ('contributed equity', 20), ('equity share capital', 19), (' issued capital', 17), ('share capital', 16), (' share capital', 16), ('perpetual equity instrument', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('common stock', 22), ('contributed equity', 18), ('perpetual equity instrument', 13), ('share capital', 12), (' share capital', 12), ('equity share capital', 8), (' issued capital', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('share capital', 30), (' share capital', 30), ('equity share capital', 24), (' issued capital', 23), ('perpetual equity instrument', 20), ('common stock', 14), ('contributed equity', 6)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' issued capital', 38), ('share capital', 35), (' share capital', 35), ('equity share capital', 25), ('common stock', 22), ('contributed equity', 18), ('perpetual equity instrument', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other non-current liabilities , res_fuzz_match = [('share capital', 26), (' share capital', 26), ('common stock', 25), ('contributed equity', 22), ('equity share capital', 21), ('perpetual equity instrument', 18), (' issued capital', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' issued capital', 29), ('share capital', 27), (' share capital', 27), ('contributed equity', 22), ('equity share capital', 21), ('perpetual equity instrument', 17), ('common stock', 9)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = provision for associate funding , res_fuzz_match = [('perpetual equity instrument', 26), ('contributed equity', 26), (' issued capital', 25), ('share capital', 24), (' share capital', 24), ('equity share capital', 20), ('common stock', 18)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('share capital', 40), (' share capital', 40), ('equity share capital', 37), ('contributed equity', 32), (' issued capital', 32), ('perpetual equity instrument', 29), ('common stock', 19)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('minority interest', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('minority interest', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other non-current liabilities , res_fuzz_match = [('minority interest', 29)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 16)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = provision for associate funding , res_fuzz_match = [('minority interest', 22)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('minority interest', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('minority interest', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other non-current liabilities , res_fuzz_match = [('minority interest', 29)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 16)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = provision for associate funding , res_fuzz_match = [('minority interest', 22)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('long term liabilities', 27)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term liabilities', 50)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other non-current liabilities , res_fuzz_match = [('long term liabilities', 72)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = provision for associate funding , res_fuzz_match = [('long term liabilities', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('long term liabilities', 27)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term liabilities', 50)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other non-current liabilities , res_fuzz_match = [('long term liabilities', 72)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = provision for associate funding , res_fuzz_match = [('long term liabilities', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves', 'reserves']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('plant property equipment', 45), ('property plant equipment', 45)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('plant property equipment', 33), ('property plant equipment', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('plant property equipment', 56), ('property plant equipment', 56)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('plant property equipment', 27), ('property plant equipment', 27)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 91, 'value': 150.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': [nan], 'line_item_value': [150.0]}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = loan receivables , res_fuzz_match = [('plant property equipment', 45), ('property plant equipment', 45)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = investments accounted for using the equity method , res_fuzz_match = [('plant property equipment', 33), ('property plant equipment', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = oil and gas properties , res_fuzz_match = [('plant property equipment', 56), ('property plant equipment', 56)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = leased assets , res_fuzz_match = [('plant property equipment', 27), ('property plant equipment', 27)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 91, 'value': 184.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': [nan], 'line_item_value': [184.0]}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('government subsidies receivable', 31), ('billed', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('receivable', 50), ('billed', 50), ('trade and other receivables', 48), ('account receivables', 36), ('trade receivables', 35), ('government subsidies receivable', 26)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 61), ('billed', 29), ('unbilled', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('receivable', 50), ('account receivables', 44), ('unbilled', 40), ('trade receivables', 36), ('trade and other receivables', 36), ('government subsidies receivable', 33), ('billed', 25)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('trade and other receivables', 58), ('account receivables', 44), ('trade receivables', 42), ('government subsidies receivable', 42), ('unbilled', 40), ('receivable', 33), ('billed', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = deferred operating expenditure , res_fuzz_match = [('trade receivables', 42), ('trade and other receivables', 40), ('government subsidies receivable', 38), ('receivable', 33), ('unbilled', 29), ('billed', 25), ('account receivables', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 4556.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['7(a)'], 'line_item_value': [4556.0]}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('government subsidies receivable', 31), ('billed', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('receivable', 50), ('billed', 50), ('trade and other receivables', 48), ('account receivables', 36), ('trade receivables', 35), ('government subsidies receivable', 26)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 61), ('billed', 29), ('unbilled', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('receivable', 50), ('account receivables', 44), ('unbilled', 40), ('trade receivables', 36), ('trade and other receivables', 36), ('government subsidies receivable', 33), ('billed', 25)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('trade and other receivables', 58), ('account receivables', 44), ('trade receivables', 42), ('government subsidies receivable', 42), ('unbilled', 40), ('receivable', 33), ('billed', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = deferred operating expenditure , res_fuzz_match = [('trade receivables', 42), ('trade and other receivables', 40), ('government subsidies receivable', 38), ('receivable', 33), ('unbilled', 29), ('billed', 25), ('account receivables', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 5895.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['7(a)'], 'line_item_value': [5895.0]}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 76), (' related party receivables', 70), (' net trade debtors', 58), (' other debtors', 42), ('current', 29)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' net trade debtors', 67), ('trade receivables', 50), (' related party receivables', 50), (' other debtors', 50), (' share of joint venture receivables', 50), ('current', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = share of joint venture receivables , res_fuzz_match = [(' share of joint venture receivables', 100), ('trade receivables', 76), (' related party receivables', 59), (' net trade debtors', 44), ('current', 43), (' other debtors', 42)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' net trade debtors', 67), ('trade receivables', 50), (' related party receivables', 50), (' other debtors', 50), (' share of joint venture receivables', 50), ('current', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' net trade debtors', 67), ('trade receivables', 50), (' related party receivables', 50), (' other debtors', 50), (' share of joint venture receivables', 50), ('current', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [('trade receivables', 78), (' share of joint venture receivables', 75), (' related party receivables', 67), (' other debtors', 58), ('current', 43), (' net trade debtors', 29)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' net trade debtors', 67), ('trade receivables', 50), (' related party receivables', 50), (' other debtors', 50), (' share of joint venture receivables', 50), ('current', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' net trade debtors', 67), ('trade receivables', 50), (' related party receivables', 50), (' other debtors', 50), (' share of joint venture receivables', 50), ('current', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 76), (' related party receivables', 70), (' net trade debtors', 58), (' other debtors', 42), ('current', 29)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' net trade debtors', 67), ('trade receivables', 50), (' related party receivables', 50), (' other debtors', 50), (' share of joint venture receivables', 50), ('current', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = share of joint venture receivables , res_fuzz_match = [(' share of joint venture receivables', 100), ('trade receivables', 76), (' related party receivables', 59), (' net trade debtors', 44), ('current', 43), (' other debtors', 42)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' net trade debtors', 67), ('trade receivables', 50), (' related party receivables', 50), (' other debtors', 50), (' share of joint venture receivables', 50), ('current', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' net trade debtors', 67), ('trade receivables', 50), (' related party receivables', 50), (' other debtors', 50), (' share of joint venture receivables', 50), ('current', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [('trade receivables', 78), (' share of joint venture receivables', 75), (' related party receivables', 67), (' other debtors', 58), ('current', 43), (' net trade debtors', 29)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' net trade debtors', 67), ('trade receivables', 50), (' related party receivables', 50), (' other debtors', 50), (' share of joint venture receivables', 50), ('current', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' net trade debtors', 67), ('trade receivables', 50), (' related party receivables', 50), (' other debtors', 50), (' share of joint venture receivables', 50), ('current', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 5, 6], 'score': [100, 100, 100, 100], 'value': [4090.0, 160.0, 3917.0, 50.0], 'label': [' Trade receivables', ' Share of joint venture receivables', ' Trade receivables', ' Share of joint venture receivables'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('revenue from operations', 43), (' Sale of coal', 38), (' Sales revenue', 35), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 22), (' Revenue', 22), ('net sales', 20), ('sale of products', 17), ('transmission and distribution business', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('revenue from contracts with customers', 100), ('Revenue from contract with customers', 100), ('revenue from operations', 46), ('from trading business', 38), (' Sales revenue', 33), (' Revenue', 32), (' Sale of coal', 29), ('sale of products', 27), ('net sales', 25), ('transmission and distribution business', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [('transmission and distribution business', 38), ('net sales', 30), ('revenue from operations', 29), (' Sale of coal', 29), ('sale of products', 27), ('revenue from contracts with customers', 25), ('from trading business', 25), ('Revenue from contract with customers', 25), (' Sales revenue', 22), (' Revenue', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('sale of products', 33), ('from trading business', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 19), (' Sales revenue', 17), ('transmission and distribution business', 15), (' Revenue', 11), ('net sales', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('revenue from operations', 19), (' Revenue', 18), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 14), ('sale of products', 12), (' Sales revenue', 12), ('from trading business', 10), ('transmission and distribution business', 6), ('net sales', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('transmission and distribution business', 41), (' Sales revenue', 37), (' Revenue', 36), ('revenue from operations', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('from trading business', 26), ('net sales', 25), (' Sale of coal', 24), ('sale of products', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), (' Revenue', 33), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('from trading business', 22), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), ('transmission and distribution business', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [('net sales', 45), ('transmission and distribution business', 33), ('revenue from operations', 27), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), ('sale of products', 23), ('from trading business', 21), (' Sale of coal', 17), (' Revenue', 10), (' Sales revenue', 8)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('revenue from operations', 44), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 31), ('net sales', 21), (' Sale of coal', 20), (' Sales revenue', 18), ('transmission and distribution business', 15), (' Revenue', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), (' Sales revenue', 17), ('revenue from contracts with customers', 14), ('Revenue from contract with customers', 14), (' Revenue', 11), ('sale of products', 8)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Sales revenue', 42), (' Revenue', 32), ('net sales', 29), ('from trading business', 29), ('revenue from operations', 28), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), ('sale of products', 16), ('transmission and distribution business', 10), (' Sale of coal', 9)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [('from trading business', 42), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 31), ('transmission and distribution business', 30), (' Sale of coal', 30), ('revenue from operations', 29), (' Sales revenue', 28), ('sale of products', 27), (' Revenue', 8)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [('transmission and distribution business', 44), ('sale of products', 34), ('net sales', 33), ('from trading business', 32), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), (' Sale of coal', 27), ('revenue from operations', 20), (' Revenue', 10), (' Sales revenue', 9)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('sale of products', 35), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('transmission and distribution business', 28), ('net sales', 27), (' Sales revenue', 24), (' Sale of coal', 19), (' Revenue', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('from trading business', 41), ('net sales', 38), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sales revenue', 29), ('transmission and distribution business', 27), ('sale of products', 22), ('revenue from operations', 20), (' Sale of coal', 18), (' Revenue', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('sale of products', 39), ('from trading business', 35), ('revenue from operations', 34), (' Sales revenue', 27), ('transmission and distribution business', 26), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('sale of products', 29), ('transmission and distribution business', 25), ('from trading business', 24), ('net sales', 23), ('revenue from operations', 19), (' Sale of coal', 18), (' Sales revenue', 17), (' Revenue', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 33), ('revenue from operations', 25), ('from trading business', 25), (' Sales revenue', 24), ('sale of products', 23), ('net sales', 22), (' Sale of coal', 21), (' Revenue', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('revenue from operations', 31), (' Sales revenue', 27), ('from trading business', 25), ('sale of products', 23), ('net sales', 21), ('transmission and distribution business', 21), (' Sale of coal', 17), (' Revenue', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [(' Sales revenue', 35), ('sale of products', 30), ('from trading business', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('revenue from operations', 25), ('net sales', 24), (' Sale of coal', 24), ('transmission and distribution business', 23), (' Revenue', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [('transmission and distribution business', 42), ('from trading business', 40), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), (' Sales revenue', 26), ('sale of products', 25), ('net sales', 21), (' Revenue', 15), (' Sale of coal', 14), ('revenue from operations', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('transmission and distribution business', 39), ('from trading business', 33), (' Sale of coal', 32), ('revenue from operations', 27), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), (' Sales revenue', 21), ('sale of products', 20), (' Revenue', 18), ('net sales', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [('transmission and distribution business', 33), ('from trading business', 31), (' Sales revenue', 30), ('sale of products', 26), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), ('revenue from operations', 21), ('net sales', 21), (' Sale of coal', 20), (' Revenue', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('transmission and distribution business', 39), ('from trading business', 33), (' Sale of coal', 32), ('revenue from operations', 27), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), (' Sales revenue', 21), ('sale of products', 20), (' Revenue', 18), ('net sales', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 53634.0, 'line_item_label': ['Revenue from contracts with customers'], 'note_numbers': ['1(a)'], 'line_item_value': [53634.0]}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('revenue from operations', 43), (' Sale of coal', 38), (' Sales revenue', 35), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 22), (' Revenue', 22), ('net sales', 20), ('sale of products', 17), ('transmission and distribution business', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('revenue from contracts with customers', 100), ('Revenue from contract with customers', 100), ('revenue from operations', 46), ('from trading business', 38), (' Sales revenue', 33), (' Revenue', 32), (' Sale of coal', 29), ('sale of products', 27), ('net sales', 25), ('transmission and distribution business', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [('transmission and distribution business', 38), ('net sales', 30), ('revenue from operations', 29), (' Sale of coal', 29), ('sale of products', 27), ('revenue from contracts with customers', 25), ('from trading business', 25), ('Revenue from contract with customers', 25), (' Sales revenue', 22), (' Revenue', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('sale of products', 33), ('from trading business', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 19), (' Sales revenue', 17), ('transmission and distribution business', 15), (' Revenue', 11), ('net sales', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('revenue from operations', 19), (' Revenue', 18), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 14), ('sale of products', 12), (' Sales revenue', 12), ('from trading business', 10), ('transmission and distribution business', 6), ('net sales', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('transmission and distribution business', 41), (' Sales revenue', 37), (' Revenue', 36), ('revenue from operations', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('from trading business', 26), ('net sales', 25), (' Sale of coal', 24), ('sale of products', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), (' Revenue', 33), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('from trading business', 22), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), ('transmission and distribution business', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [('net sales', 45), ('transmission and distribution business', 33), ('revenue from operations', 27), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), ('sale of products', 23), ('from trading business', 21), (' Sale of coal', 17), (' Revenue', 10), (' Sales revenue', 8)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('revenue from operations', 44), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 31), ('net sales', 21), (' Sale of coal', 20), (' Sales revenue', 18), ('transmission and distribution business', 15), (' Revenue', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), (' Sales revenue', 17), ('revenue from contracts with customers', 14), ('Revenue from contract with customers', 14), (' Revenue', 11), ('sale of products', 8)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Sales revenue', 42), (' Revenue', 32), ('net sales', 29), ('from trading business', 29), ('revenue from operations', 28), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), ('sale of products', 16), ('transmission and distribution business', 10), (' Sale of coal', 9)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [('from trading business', 42), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 31), ('transmission and distribution business', 30), (' Sale of coal', 30), ('revenue from operations', 29), (' Sales revenue', 28), ('sale of products', 27), (' Revenue', 8)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [('transmission and distribution business', 44), ('sale of products', 34), ('net sales', 33), ('from trading business', 32), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), (' Sale of coal', 27), ('revenue from operations', 20), (' Revenue', 10), (' Sales revenue', 9)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('sale of products', 35), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('transmission and distribution business', 28), ('net sales', 27), (' Sales revenue', 24), (' Sale of coal', 19), (' Revenue', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('from trading business', 41), ('net sales', 38), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sales revenue', 29), ('transmission and distribution business', 27), ('sale of products', 22), ('revenue from operations', 20), (' Sale of coal', 18), (' Revenue', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('sale of products', 39), ('from trading business', 35), ('revenue from operations', 34), (' Sales revenue', 27), ('transmission and distribution business', 26), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('sale of products', 29), ('transmission and distribution business', 25), ('from trading business', 24), ('net sales', 23), ('revenue from operations', 19), (' Sale of coal', 18), (' Sales revenue', 17), (' Revenue', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 33), ('revenue from operations', 25), ('from trading business', 25), (' Sales revenue', 24), ('sale of products', 23), ('net sales', 22), (' Sale of coal', 21), (' Revenue', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('revenue from operations', 31), (' Sales revenue', 27), ('from trading business', 25), ('sale of products', 23), ('net sales', 21), ('transmission and distribution business', 21), (' Sale of coal', 17), (' Revenue', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [(' Sales revenue', 35), ('sale of products', 30), ('from trading business', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('revenue from operations', 25), ('net sales', 24), (' Sale of coal', 24), ('transmission and distribution business', 23), (' Revenue', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [('transmission and distribution business', 42), ('from trading business', 40), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), (' Sales revenue', 26), ('sale of products', 25), ('net sales', 21), (' Revenue', 15), (' Sale of coal', 14), ('revenue from operations', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('transmission and distribution business', 39), ('from trading business', 33), (' Sale of coal', 32), ('revenue from operations', 27), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), (' Sales revenue', 21), ('sale of products', 20), (' Revenue', 18), ('net sales', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [('transmission and distribution business', 33), ('from trading business', 31), (' Sales revenue', 30), ('sale of products', 26), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), ('revenue from operations', 21), ('net sales', 21), (' Sale of coal', 20), (' Revenue', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('transmission and distribution business', 39), ('from trading business', 33), (' Sale of coal', 32), ('revenue from operations', 27), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), (' Sales revenue', 21), ('sale of products', 20), (' Revenue', 18), ('net sales', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 88032.0, 'line_item_label': ['Revenue from contracts with customers'], 'note_numbers': ['1(a)'], 'line_item_value': [88032.0]}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' Cost of goods and services sold', 38), ('purchase of stock-in-trade', 32), (' cost of coal sold', 31), ('expenditure', 27), ('expense', 22), ('total expenditure', 21), ('total expenses', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 24), ('expenditure', 24), ('total expenses', 23), ('total expenditure', 21), ('expense', 16)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [(' Cost of goods and services sold', 100), (' Cost of product sold', 62), (' cost of coal sold', 56), (' Personnel costs', 51), (' Cost of inventory sold', 50), ('cost of sales', 41), ('Cost of sales', 41), ('total expenditure', 29), ('purchase of stock-in-trade', 27), ('total expenses', 22), ('expenditure', 17), ('expense', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' cost of coal sold', 23), ('total expenditure', 21), (' Cost of inventory sold', 19), (' Cost of goods and services sold', 16), ('expense', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [(' cost of coal sold', 21), (' Personnel costs', 21), ('expense', 18), (' Cost of product sold', 18), ('purchase of stock-in-trade', 17), ('cost of sales', 14), ('Cost of sales', 14), ('expenditure', 13), (' Cost of goods and services sold', 13), ('total expenses', 12), ('total expenditure', 10), (' Cost of inventory sold', 8)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 23)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of inventory sold', 26), (' Personnel costs', 23), (' Cost of product sold', 21), (' cost of coal sold', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [(' Cost of goods and services sold', 41), (' cost of coal sold', 36), ('total expenditure', 33), ('total expenses', 31), ('purchase of stock-in-trade', 30), (' Personnel costs', 29), ('cost of sales', 26), ('Cost of sales', 26), ('expenditure', 25), (' Cost of inventory sold', 24), ('expense', 20), (' Cost of product sold', 19)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Cost of product sold', 43), (' Personnel costs', 40), ('expenditure', 38), ('total expenses', 35), (' cost of coal sold', 32), ('total expenditure', 30), ('purchase of stock-in-trade', 27), ('expense', 24), (' Cost of goods and services sold', 22), ('cost of sales', 20), ('Cost of sales', 20), (' Cost of inventory sold', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of inventory sold', 32), (' Cost of goods and services sold', 27), ('total expenses', 25), ('total expenditure', 21), ('purchase of stock-in-trade', 19), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), (' cost of coal sold', 15), (' Personnel costs', 15), (' Cost of product sold', 14), ('expense', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('purchase of stock-in-trade', 38), (' Personnel costs', 37), (' Cost of inventory sold', 31), (' Cost of goods and services sold', 16), ('cost of sales', 9), ('Cost of sales', 9), (' Cost of product sold', 7), (' cost of coal sold', 7)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [('total expenses', 47), ('total expenditure', 47), (' Cost of inventory sold', 38), ('cost of sales', 37), ('Cost of sales', 37), (' Cost of goods and services sold', 37), (' Cost of product sold', 34), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' cost of coal sold', 25), ('expenditure', 21), ('expense', 8)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [(' Cost of inventory sold', 48), (' Cost of product sold', 42), ('cost of sales', 36), ('Cost of sales', 36), (' Cost of goods and services sold', 33), (' cost of coal sold', 29), (' Personnel costs', 29), ('total expenditure', 24), ('purchase of stock-in-trade', 19), ('expenditure', 18), ('expense', 15), ('total expenses', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), ('total expenditure', 37), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('purchase of stock-in-trade', 29), ('total expenses', 29), (' Cost of inventory sold', 29), ('expenditure', 25), (' Personnel costs', 22), (' Cost of goods and services sold', 21), ('expense', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('total expenses', 56), ('total expenditure', 45), ('expenditure', 41), ('expense', 40), ('purchase of stock-in-trade', 33), ('cost of sales', 24), ('Cost of sales', 24), (' Cost of inventory sold', 23), (' Cost of goods and services sold', 20), (' cost of coal sold', 16), (' Personnel costs', 16), (' Cost of product sold', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), ('total expenditure', 34), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 26), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [(' Cost of product sold', 34), ('cost of sales', 27), ('Cost of sales', 27), ('total expenses', 25), (' Cost of inventory sold', 25), (' cost of coal sold', 24), (' Personnel costs', 24), ('total expenditure', 23), ('purchase of stock-in-trade', 22), (' Cost of goods and services sold', 20), ('expense', 19), ('expenditure', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [(' Cost of inventory sold', 39), (' Cost of goods and services sold', 32), (' Cost of product sold', 30), ('total expenses', 26), ('total expenditure', 25), (' cost of coal sold', 25), ('cost of sales', 24), ('Cost of sales', 24), (' Personnel costs', 20), ('expenditure', 18), ('purchase of stock-in-trade', 16), ('expense', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('purchase of stock-in-trade', 32), ('total expenses', 30), (' Cost of product sold', 30), (' Personnel costs', 29), ('total expenditure', 28), (' Cost of goods and services sold', 27), (' cost of coal sold', 25), ('cost of sales', 24), ('Cost of sales', 24), (' Cost of inventory sold', 24), ('expenditure', 20), ('expense', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [('total expenditure', 39), ('total expenses', 38), (' Cost of product sold', 38), ('purchase of stock-in-trade', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of inventory sold', 30), (' Cost of goods and services sold', 27), (' Personnel costs', 25), ('expenditure', 24), (' cost of coal sold', 18), ('expense', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [(' Cost of product sold', 38), (' Personnel costs', 35), (' cost of coal sold', 29), (' Cost of goods and services sold', 22), ('purchase of stock-in-trade', 21), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 20), ('total expenses', 19), ('total expenditure', 17), (' Cost of inventory sold', 15), ('expense', 8)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('cost of sales', 27), ('Cost of sales', 27), ('purchase of stock-in-trade', 26), (' Cost of goods and services sold', 26), (' cost of coal sold', 24), ('total expenditure', 23), (' Cost of product sold', 22), ('total expenses', 20), (' Personnel costs', 19), (' Cost of inventory sold', 17), ('expenditure', 16), ('expense', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [('total expenditure', 33), (' Cost of product sold', 33), ('total expenses', 32), ('purchase of stock-in-trade', 29), (' Cost of goods and services sold', 29), ('cost of sales', 27), ('Cost of sales', 27), (' Cost of inventory sold', 26), (' Personnel costs', 22), ('expenditure', 20), (' cost of coal sold', 16), ('expense', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('cost of sales', 27), ('Cost of sales', 27), ('purchase of stock-in-trade', 26), (' Cost of goods and services sold', 26), (' cost of coal sold', 24), ('total expenditure', 23), (' Cost of product sold', 22), ('total expenses', 20), (' Personnel costs', 19), (' Cost of inventory sold', 17), ('expenditure', 16), ('expense', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': -34620.0, 'line_item_label': ['Cost of goods and services sold'], 'note_numbers': [nan], 'line_item_value': [-34620.0]}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' Cost of goods and services sold', 38), ('purchase of stock-in-trade', 32), (' cost of coal sold', 31), ('expenditure', 27), ('expense', 22), ('total expenditure', 21), ('total expenses', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 24), ('expenditure', 24), ('total expenses', 23), ('total expenditure', 21), ('expense', 16)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [(' Cost of goods and services sold', 100), (' Cost of product sold', 62), (' cost of coal sold', 56), (' Personnel costs', 51), (' Cost of inventory sold', 50), ('cost of sales', 41), ('Cost of sales', 41), ('total expenditure', 29), ('purchase of stock-in-trade', 27), ('total expenses', 22), ('expenditure', 17), ('expense', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' cost of coal sold', 23), ('total expenditure', 21), (' Cost of inventory sold', 19), (' Cost of goods and services sold', 16), ('expense', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [(' cost of coal sold', 21), (' Personnel costs', 21), ('expense', 18), (' Cost of product sold', 18), ('purchase of stock-in-trade', 17), ('cost of sales', 14), ('Cost of sales', 14), ('expenditure', 13), (' Cost of goods and services sold', 13), ('total expenses', 12), ('total expenditure', 10), (' Cost of inventory sold', 8)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 23)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of inventory sold', 26), (' Personnel costs', 23), (' Cost of product sold', 21), (' cost of coal sold', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [(' Cost of goods and services sold', 41), (' cost of coal sold', 36), ('total expenditure', 33), ('total expenses', 31), ('purchase of stock-in-trade', 30), (' Personnel costs', 29), ('cost of sales', 26), ('Cost of sales', 26), ('expenditure', 25), (' Cost of inventory sold', 24), ('expense', 20), (' Cost of product sold', 19)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Cost of product sold', 43), (' Personnel costs', 40), ('expenditure', 38), ('total expenses', 35), (' cost of coal sold', 32), ('total expenditure', 30), ('purchase of stock-in-trade', 27), ('expense', 24), (' Cost of goods and services sold', 22), ('cost of sales', 20), ('Cost of sales', 20), (' Cost of inventory sold', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of inventory sold', 32), (' Cost of goods and services sold', 27), ('total expenses', 25), ('total expenditure', 21), ('purchase of stock-in-trade', 19), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), (' cost of coal sold', 15), (' Personnel costs', 15), (' Cost of product sold', 14), ('expense', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('purchase of stock-in-trade', 38), (' Personnel costs', 37), (' Cost of inventory sold', 31), (' Cost of goods and services sold', 16), ('cost of sales', 9), ('Cost of sales', 9), (' Cost of product sold', 7), (' cost of coal sold', 7)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [('total expenses', 47), ('total expenditure', 47), (' Cost of inventory sold', 38), ('cost of sales', 37), ('Cost of sales', 37), (' Cost of goods and services sold', 37), (' Cost of product sold', 34), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' cost of coal sold', 25), ('expenditure', 21), ('expense', 8)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [(' Cost of inventory sold', 48), (' Cost of product sold', 42), ('cost of sales', 36), ('Cost of sales', 36), (' Cost of goods and services sold', 33), (' cost of coal sold', 29), (' Personnel costs', 29), ('total expenditure', 24), ('purchase of stock-in-trade', 19), ('expenditure', 18), ('expense', 15), ('total expenses', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), ('total expenditure', 37), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('purchase of stock-in-trade', 29), ('total expenses', 29), (' Cost of inventory sold', 29), ('expenditure', 25), (' Personnel costs', 22), (' Cost of goods and services sold', 21), ('expense', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('total expenses', 56), ('total expenditure', 45), ('expenditure', 41), ('expense', 40), ('purchase of stock-in-trade', 33), ('cost of sales', 24), ('Cost of sales', 24), (' Cost of inventory sold', 23), (' Cost of goods and services sold', 20), (' cost of coal sold', 16), (' Personnel costs', 16), (' Cost of product sold', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), ('total expenditure', 34), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 26), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [(' Cost of product sold', 34), ('cost of sales', 27), ('Cost of sales', 27), ('total expenses', 25), (' Cost of inventory sold', 25), (' cost of coal sold', 24), (' Personnel costs', 24), ('total expenditure', 23), ('purchase of stock-in-trade', 22), (' Cost of goods and services sold', 20), ('expense', 19), ('expenditure', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [(' Cost of inventory sold', 39), (' Cost of goods and services sold', 32), (' Cost of product sold', 30), ('total expenses', 26), ('total expenditure', 25), (' cost of coal sold', 25), ('cost of sales', 24), ('Cost of sales', 24), (' Personnel costs', 20), ('expenditure', 18), ('purchase of stock-in-trade', 16), ('expense', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('purchase of stock-in-trade', 32), ('total expenses', 30), (' Cost of product sold', 30), (' Personnel costs', 29), ('total expenditure', 28), (' Cost of goods and services sold', 27), (' cost of coal sold', 25), ('cost of sales', 24), ('Cost of sales', 24), (' Cost of inventory sold', 24), ('expenditure', 20), ('expense', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [('total expenditure', 39), ('total expenses', 38), (' Cost of product sold', 38), ('purchase of stock-in-trade', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of inventory sold', 30), (' Cost of goods and services sold', 27), (' Personnel costs', 25), ('expenditure', 24), (' cost of coal sold', 18), ('expense', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [(' Cost of product sold', 38), (' Personnel costs', 35), (' cost of coal sold', 29), (' Cost of goods and services sold', 22), ('purchase of stock-in-trade', 21), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 20), ('total expenses', 19), ('total expenditure', 17), (' Cost of inventory sold', 15), ('expense', 8)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('cost of sales', 27), ('Cost of sales', 27), ('purchase of stock-in-trade', 26), (' Cost of goods and services sold', 26), (' cost of coal sold', 24), ('total expenditure', 23), (' Cost of product sold', 22), ('total expenses', 20), (' Personnel costs', 19), (' Cost of inventory sold', 17), ('expenditure', 16), ('expense', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [('total expenditure', 33), (' Cost of product sold', 33), ('total expenses', 32), ('purchase of stock-in-trade', 29), (' Cost of goods and services sold', 29), ('cost of sales', 27), ('Cost of sales', 27), (' Cost of inventory sold', 26), (' Personnel costs', 22), ('expenditure', 20), (' cost of coal sold', 16), ('expense', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('cost of sales', 27), ('Cost of sales', 27), ('purchase of stock-in-trade', 26), (' Cost of goods and services sold', 26), (' cost of coal sold', 24), ('total expenditure', 23), (' Cost of product sold', 22), ('total expenses', 20), (' Personnel costs', 19), (' Cost of inventory sold', 17), ('expenditure', 16), ('expense', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': -27645.0, 'line_item_label': ['Cost of goods and services sold'], 'note_numbers': [nan], 'line_item_value': [-27645.0]}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), (' Depreciation expenses', 38), (' Depreciation expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Administrative and other expenses', 32), (' Selling & distribution expenses', 30), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Sales and marketing', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Occupancy expenses', 17), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses', 38), (' Administrative expenses', 33), (' Administration expenses', 33), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), ('other expenses', 27), (' Other expenses', 27), (' Logistics and distribution', 27), (' Other expenses', 27), (' Marketing expenses', 22), (' Occupancy ', 22), (' Sales and marketing', 21), (' Lease expenses', 19), (' Selling Expenses', 19), (' Occupancy expenses', 18), (' Management expenses', 18), (' Depreciation expenses', 17), (' Advertising expenses', 17), (' Depreciation expenses', 17), (' depreciation', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [(' Logistics and distribution', 44), (' Sales and marketing', 40), (' Selling & distribution expenses', 35), (' Administrative and other expenses', 35), ('Distribution expenses', 34), (' Administrative expenses', 34), (' Administration expenses', 34), (' Selling Expenses', 33), ('other expenses', 32), (' Other expenses', 32), (' Other expenses', 32), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Advertising expenses', 30), (' Amortisation expenses', 26), (' depreciation', 25), (' Lease expenses', 17), (' Occupancy expenses', 16), (' Management expenses', 16), (' Occupancy ', 13), (' Marketing expenses', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Logistics and distribution', 19), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), ('Distribution expenses', 14), (' Administrative expenses', 14), (' Administration expenses', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [(' Occupancy ', 100), (' Occupancy expenses', 59), (' Amortisation expenses', 21), ('Distribution expenses', 19), (' depreciation', 17), (' Selling & distribution expenses', 15), ('other expenses', 12), (' Other expenses', 12), (' Lease expenses', 12), (' Selling Expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Marketing expenses', 11), (' Depreciation expenses', 11), (' Depreciation expenses', 11), (' Administrative expenses', 10), (' Administration expenses', 10), (' Advertising expenses', 10), (' Logistics and distribution', 8), (' Administrative and other expenses', 6), (' Sales and marketing', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' depreciation', 35), (' Sales and marketing', 32), (' Occupancy ', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 25), (' Sales and marketing', 22), (' Occupancy ', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [('other expenses', 54), (' Other expenses', 54), (' Other expenses', 54), (' Administrative and other expenses', 50), (' Sales and marketing', 48), (' Logistics and distribution', 41), (' Administrative expenses', 33), (' Administration expenses', 33), (' Marketing expenses', 30), ('Distribution expenses', 27), (' Occupancy expenses', 23), (' Selling & distribution expenses', 23), (' Advertising expenses', 21), (' Amortisation expenses', 21), (' depreciation', 19), (' Lease expenses', 16), (' Selling Expenses', 16), (' Management expenses', 15), (' Depreciation expenses', 14), (' Depreciation expenses', 14), (' Occupancy ', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' depreciation', 44), ('other expenses', 43), (' Other expenses', 43), (' Other expenses', 43), (' Marketing expenses', 42), (' Occupancy expenses', 35), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Selling Expenses', 27), (' Management expenses', 26), (' Occupancy ', 25), (' Amortisation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' Administrative expenses', 22), (' Administration expenses', 22), (' Selling & distribution expenses', 19), (' Logistics and distribution', 19), ('Distribution expenses', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Amortisation expenses', 15), (' Occupancy ', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Management expenses', 72), (' Lease expenses', 67), (' Occupancy expenses', 64), (' Marketing expenses', 62), (' Selling Expenses', 58), ('other expenses', 56), (' Other expenses', 56), (' Other expenses', 56), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Advertising expenses', 43), ('Distribution expenses', 41), (' Administrative expenses', 41), (' Selling & distribution expenses', 41), (' Administration expenses', 41), (' depreciation', 40), (' Administrative and other expenses', 36), (' Sales and marketing', 14), (' Logistics and distribution', 12), (' Occupancy ', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [(' Sales and marketing', 42), (' Administrative and other expenses', 41), (' Logistics and distribution', 37), ('other expenses', 27), (' Other expenses', 27), (' Management expenses', 27), (' Other expenses', 27), (' Marketing expenses', 26), (' Amortisation expenses', 25), (' Administrative expenses', 24), (' Administration expenses', 24), (' Selling & distribution expenses', 21), (' Lease expenses', 21), (' Selling Expenses', 21), (' Occupancy expenses', 20), (' Depreciation expenses', 19), (' Depreciation expenses', 19), ('Distribution expenses', 18), (' depreciation', 16), (' Advertising expenses', 12), (' Occupancy ', 9)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [(' Logistics and distribution', 40), (' Sales and marketing', 36), (' Administrative expenses', 31), (' Administration expenses', 31), (' Administrative and other expenses', 30), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Advertising expenses', 28), (' Marketing expenses', 25), ('Distribution expenses', 24), (' Selling Expenses', 22), (' Occupancy ', 20), (' depreciation', 19), (' Occupancy expenses', 17), (' Depreciation expenses', 16), (' Depreciation expenses', 16), ('other expenses', 13), (' Other expenses', 13), (' Lease expenses', 13), (' Management expenses', 13), (' Other expenses', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Depreciation expenses', 33), (' Depreciation expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), (' Administrative and other expenses', 29), (' Logistics and distribution', 29), (' depreciation', 28), (' Selling & distribution expenses', 28), (' Amortisation expenses', 28), (' Occupancy ', 22), ('other expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Lease expenses', 12), (' Selling Expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Marketing expenses', 11), (' Advertising expenses', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' Depreciation expenses', 53), (' Depreciation expenses', 53), ('other expenses', 50), (' Other expenses', 50), (' Management expenses', 50), (' Other expenses', 50), (' Marketing expenses', 49), (' Administrative and other expenses', 48), (' Lease expenses', 46), (' Advertising expenses', 46), ('Distribution expenses', 45), (' Administrative expenses', 45), (' Administration expenses', 45), (' Occupancy expenses', 44), (' Selling & distribution expenses', 44), (' Amortisation expenses', 42), (' Selling Expenses', 40), (' Sales and marketing', 31), (' Logistics and distribution', 27), (' depreciation', 26), (' Occupancy ', 7)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Amortisation expenses', 36), (' Administrative and other expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Management expenses', 19), (' Sales and marketing', 18), (' Occupancy ', 17), (' Occupancy expenses', 13), (' Selling Expenses', 13), (' Advertising expenses', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [(' Marketing expenses', 33), (' Selling & distribution expenses', 32), ('Distribution expenses', 31), (' Sales and marketing', 31), (' Logistics and distribution', 29), (' depreciation', 28), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' Lease expenses', 26), ('other expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Amortisation expenses', 24), (' Administrative and other expenses', 23), (' Occupancy expenses', 21), (' Advertising expenses', 20), (' Selling Expenses', 17), (' Administrative expenses', 15), (' Administration expenses', 15), (' Occupancy ', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [(' Administrative and other expenses', 34), (' Sales and marketing', 31), ('other expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 29), (' Other expenses', 29), (' Selling & distribution expenses', 28), (' Lease expenses', 24), (' Selling Expenses', 24), (' Marketing expenses', 23), (' Amortisation expenses', 23), (' Occupancy expenses', 20), ('Distribution expenses', 19), (' Administrative expenses', 19), (' Administration expenses', 19), (' Advertising expenses', 19), (' Depreciation expenses', 17), (' Depreciation expenses', 17), (' Management expenses', 17), (' Occupancy ', 13), (' depreciation', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' Administrative and other expenses', 32), (' Lease expenses', 27), (' Sales and marketing', 25), (' Marketing expenses', 23), (' Occupancy expenses', 23), (' Selling & distribution expenses', 23), (' Selling Expenses', 23), (' Management expenses', 23), (' Logistics and distribution', 23), (' Depreciation expenses', 19), (' Depreciation expenses', 19), (' Amortisation expenses', 19), (' Administrative expenses', 18), (' Administration expenses', 18), ('Distribution expenses', 15), (' depreciation', 14), (' Advertising expenses', 12), (' Occupancy ', 7)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [('other expenses', 38), (' Other expenses', 38), (' Other expenses', 38), (' Administrative and other expenses', 36), (' Lease expenses', 31), (' Selling Expenses', 31), (' Selling & distribution expenses', 29), (' Marketing expenses', 26), (' Occupancy expenses', 26), (' Management expenses', 26), (' Logistics and distribution', 26), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Amortisation expenses', 22), (' Administrative expenses', 21), (' Administration expenses', 21), ('Distribution expenses', 18), (' depreciation', 17), (' Advertising expenses', 14), (' Sales and marketing', 14), (' Occupancy ', 9)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [(' Logistics and distribution', 60), ('Distribution expenses', 44), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 35), (' Advertising expenses', 34), (' Amortisation expenses', 29), (' Sales and marketing', 29), (' Administrative expenses', 28), (' Administration expenses', 28), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' depreciation', 22), (' Occupancy expenses', 19), (' Depreciation expenses', 18), (' Depreciation expenses', 18), (' Occupancy ', 16), (' Lease expenses', 13), (' Selling Expenses', 13), (' Management expenses', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' Administrative and other expenses', 41), (' Logistics and distribution', 38), ('Distribution expenses', 36), (' Selling & distribution expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Amortisation expenses', 24), (' depreciation', 23), (' Advertising expenses', 23), (' Sales and marketing', 23), (' Lease expenses', 21), (' Occupancy expenses', 20), (' Depreciation expenses', 19), (' Depreciation expenses', 19), (' Marketing expenses', 15), (' Occupancy ', 12), (' Selling Expenses', 10), (' Management expenses', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [(' Selling & distribution expenses', 42), (' Administrative and other expenses', 37), (' Logistics and distribution', 34), ('Distribution expenses', 33), ('other expenses', 32), (' Other expenses', 32), (' Other expenses', 32), (' Lease expenses', 26), (' Selling Expenses', 26), (' Administrative expenses', 24), (' Administration expenses', 24), (' Occupancy expenses', 23), (' Management expenses', 23), (' Marketing expenses', 22), (' Amortisation expenses', 22), (' Depreciation expenses', 19), (' Depreciation expenses', 19), (' Advertising expenses', 15), (' Sales and marketing', 15), (' depreciation', 14), (' Occupancy ', 7)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' Administrative and other expenses', 41), (' Logistics and distribution', 38), ('Distribution expenses', 36), (' Selling & distribution expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Amortisation expenses', 24), (' depreciation', 23), (' Advertising expenses', 23), (' Sales and marketing', 23), (' Lease expenses', 21), (' Occupancy expenses', 20), (' Depreciation expenses', 19), (' Depreciation expenses', 19), (' Marketing expenses', 15), (' Occupancy ', 12), (' Selling Expenses', 10), (' Management expenses', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5, 6], 'score': 100, 'value': -9104.0, 'line_item_label': ['Occupancy', 'Administrative expenses', 'Other expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-357.0, -7437.0, -1310.0]}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), (' Depreciation expenses', 38), (' Depreciation expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Administrative and other expenses', 32), (' Selling & distribution expenses', 30), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Sales and marketing', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Occupancy expenses', 17), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses', 38), (' Administrative expenses', 33), (' Administration expenses', 33), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), ('other expenses', 27), (' Other expenses', 27), (' Logistics and distribution', 27), (' Other expenses', 27), (' Marketing expenses', 22), (' Occupancy ', 22), (' Sales and marketing', 21), (' Lease expenses', 19), (' Selling Expenses', 19), (' Occupancy expenses', 18), (' Management expenses', 18), (' Depreciation expenses', 17), (' Advertising expenses', 17), (' Depreciation expenses', 17), (' depreciation', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [(' Logistics and distribution', 44), (' Sales and marketing', 40), (' Selling & distribution expenses', 35), (' Administrative and other expenses', 35), ('Distribution expenses', 34), (' Administrative expenses', 34), (' Administration expenses', 34), (' Selling Expenses', 33), ('other expenses', 32), (' Other expenses', 32), (' Other expenses', 32), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Advertising expenses', 30), (' Amortisation expenses', 26), (' depreciation', 25), (' Lease expenses', 17), (' Occupancy expenses', 16), (' Management expenses', 16), (' Occupancy ', 13), (' Marketing expenses', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Logistics and distribution', 19), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), ('Distribution expenses', 14), (' Administrative expenses', 14), (' Administration expenses', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [(' Occupancy ', 100), (' Occupancy expenses', 59), (' Amortisation expenses', 21), ('Distribution expenses', 19), (' depreciation', 17), (' Selling & distribution expenses', 15), ('other expenses', 12), (' Other expenses', 12), (' Lease expenses', 12), (' Selling Expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Marketing expenses', 11), (' Depreciation expenses', 11), (' Depreciation expenses', 11), (' Administrative expenses', 10), (' Administration expenses', 10), (' Advertising expenses', 10), (' Logistics and distribution', 8), (' Administrative and other expenses', 6), (' Sales and marketing', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' depreciation', 35), (' Sales and marketing', 32), (' Occupancy ', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 25), (' Sales and marketing', 22), (' Occupancy ', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [('other expenses', 54), (' Other expenses', 54), (' Other expenses', 54), (' Administrative and other expenses', 50), (' Sales and marketing', 48), (' Logistics and distribution', 41), (' Administrative expenses', 33), (' Administration expenses', 33), (' Marketing expenses', 30), ('Distribution expenses', 27), (' Occupancy expenses', 23), (' Selling & distribution expenses', 23), (' Advertising expenses', 21), (' Amortisation expenses', 21), (' depreciation', 19), (' Lease expenses', 16), (' Selling Expenses', 16), (' Management expenses', 15), (' Depreciation expenses', 14), (' Depreciation expenses', 14), (' Occupancy ', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' depreciation', 44), ('other expenses', 43), (' Other expenses', 43), (' Other expenses', 43), (' Marketing expenses', 42), (' Occupancy expenses', 35), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Selling Expenses', 27), (' Management expenses', 26), (' Occupancy ', 25), (' Amortisation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' Administrative expenses', 22), (' Administration expenses', 22), (' Selling & distribution expenses', 19), (' Logistics and distribution', 19), ('Distribution expenses', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Amortisation expenses', 15), (' Occupancy ', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Management expenses', 72), (' Lease expenses', 67), (' Occupancy expenses', 64), (' Marketing expenses', 62), (' Selling Expenses', 58), ('other expenses', 56), (' Other expenses', 56), (' Other expenses', 56), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Advertising expenses', 43), ('Distribution expenses', 41), (' Administrative expenses', 41), (' Selling & distribution expenses', 41), (' Administration expenses', 41), (' depreciation', 40), (' Administrative and other expenses', 36), (' Sales and marketing', 14), (' Logistics and distribution', 12), (' Occupancy ', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [(' Sales and marketing', 42), (' Administrative and other expenses', 41), (' Logistics and distribution', 37), ('other expenses', 27), (' Other expenses', 27), (' Management expenses', 27), (' Other expenses', 27), (' Marketing expenses', 26), (' Amortisation expenses', 25), (' Administrative expenses', 24), (' Administration expenses', 24), (' Selling & distribution expenses', 21), (' Lease expenses', 21), (' Selling Expenses', 21), (' Occupancy expenses', 20), (' Depreciation expenses', 19), (' Depreciation expenses', 19), ('Distribution expenses', 18), (' depreciation', 16), (' Advertising expenses', 12), (' Occupancy ', 9)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [(' Logistics and distribution', 40), (' Sales and marketing', 36), (' Administrative expenses', 31), (' Administration expenses', 31), (' Administrative and other expenses', 30), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Advertising expenses', 28), (' Marketing expenses', 25), ('Distribution expenses', 24), (' Selling Expenses', 22), (' Occupancy ', 20), (' depreciation', 19), (' Occupancy expenses', 17), (' Depreciation expenses', 16), (' Depreciation expenses', 16), ('other expenses', 13), (' Other expenses', 13), (' Lease expenses', 13), (' Management expenses', 13), (' Other expenses', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Depreciation expenses', 33), (' Depreciation expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), (' Administrative and other expenses', 29), (' Logistics and distribution', 29), (' depreciation', 28), (' Selling & distribution expenses', 28), (' Amortisation expenses', 28), (' Occupancy ', 22), ('other expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Lease expenses', 12), (' Selling Expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Marketing expenses', 11), (' Advertising expenses', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' Depreciation expenses', 53), (' Depreciation expenses', 53), ('other expenses', 50), (' Other expenses', 50), (' Management expenses', 50), (' Other expenses', 50), (' Marketing expenses', 49), (' Administrative and other expenses', 48), (' Lease expenses', 46), (' Advertising expenses', 46), ('Distribution expenses', 45), (' Administrative expenses', 45), (' Administration expenses', 45), (' Occupancy expenses', 44), (' Selling & distribution expenses', 44), (' Amortisation expenses', 42), (' Selling Expenses', 40), (' Sales and marketing', 31), (' Logistics and distribution', 27), (' depreciation', 26), (' Occupancy ', 7)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Amortisation expenses', 36), (' Administrative and other expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Management expenses', 19), (' Sales and marketing', 18), (' Occupancy ', 17), (' Occupancy expenses', 13), (' Selling Expenses', 13), (' Advertising expenses', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [(' Marketing expenses', 33), (' Selling & distribution expenses', 32), ('Distribution expenses', 31), (' Sales and marketing', 31), (' Logistics and distribution', 29), (' depreciation', 28), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' Lease expenses', 26), ('other expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Amortisation expenses', 24), (' Administrative and other expenses', 23), (' Occupancy expenses', 21), (' Advertising expenses', 20), (' Selling Expenses', 17), (' Administrative expenses', 15), (' Administration expenses', 15), (' Occupancy ', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [(' Administrative and other expenses', 34), (' Sales and marketing', 31), ('other expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 29), (' Other expenses', 29), (' Selling & distribution expenses', 28), (' Lease expenses', 24), (' Selling Expenses', 24), (' Marketing expenses', 23), (' Amortisation expenses', 23), (' Occupancy expenses', 20), ('Distribution expenses', 19), (' Administrative expenses', 19), (' Administration expenses', 19), (' Advertising expenses', 19), (' Depreciation expenses', 17), (' Depreciation expenses', 17), (' Management expenses', 17), (' Occupancy ', 13), (' depreciation', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' Administrative and other expenses', 32), (' Lease expenses', 27), (' Sales and marketing', 25), (' Marketing expenses', 23), (' Occupancy expenses', 23), (' Selling & distribution expenses', 23), (' Selling Expenses', 23), (' Management expenses', 23), (' Logistics and distribution', 23), (' Depreciation expenses', 19), (' Depreciation expenses', 19), (' Amortisation expenses', 19), (' Administrative expenses', 18), (' Administration expenses', 18), ('Distribution expenses', 15), (' depreciation', 14), (' Advertising expenses', 12), (' Occupancy ', 7)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [('other expenses', 38), (' Other expenses', 38), (' Other expenses', 38), (' Administrative and other expenses', 36), (' Lease expenses', 31), (' Selling Expenses', 31), (' Selling & distribution expenses', 29), (' Marketing expenses', 26), (' Occupancy expenses', 26), (' Management expenses', 26), (' Logistics and distribution', 26), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Amortisation expenses', 22), (' Administrative expenses', 21), (' Administration expenses', 21), ('Distribution expenses', 18), (' depreciation', 17), (' Advertising expenses', 14), (' Sales and marketing', 14), (' Occupancy ', 9)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [(' Logistics and distribution', 60), ('Distribution expenses', 44), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 35), (' Advertising expenses', 34), (' Amortisation expenses', 29), (' Sales and marketing', 29), (' Administrative expenses', 28), (' Administration expenses', 28), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' depreciation', 22), (' Occupancy expenses', 19), (' Depreciation expenses', 18), (' Depreciation expenses', 18), (' Occupancy ', 16), (' Lease expenses', 13), (' Selling Expenses', 13), (' Management expenses', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' Administrative and other expenses', 41), (' Logistics and distribution', 38), ('Distribution expenses', 36), (' Selling & distribution expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Amortisation expenses', 24), (' depreciation', 23), (' Advertising expenses', 23), (' Sales and marketing', 23), (' Lease expenses', 21), (' Occupancy expenses', 20), (' Depreciation expenses', 19), (' Depreciation expenses', 19), (' Marketing expenses', 15), (' Occupancy ', 12), (' Selling Expenses', 10), (' Management expenses', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [(' Selling & distribution expenses', 42), (' Administrative and other expenses', 37), (' Logistics and distribution', 34), ('Distribution expenses', 33), ('other expenses', 32), (' Other expenses', 32), (' Other expenses', 32), (' Lease expenses', 26), (' Selling Expenses', 26), (' Administrative expenses', 24), (' Administration expenses', 24), (' Occupancy expenses', 23), (' Management expenses', 23), (' Marketing expenses', 22), (' Amortisation expenses', 22), (' Depreciation expenses', 19), (' Depreciation expenses', 19), (' Advertising expenses', 15), (' Sales and marketing', 15), (' depreciation', 14), (' Occupancy ', 7)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' Administrative and other expenses', 41), (' Logistics and distribution', 38), ('Distribution expenses', 36), (' Selling & distribution expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Amortisation expenses', 24), (' depreciation', 23), (' Advertising expenses', 23), (' Sales and marketing', 23), (' Lease expenses', 21), (' Occupancy expenses', 20), (' Depreciation expenses', 19), (' Depreciation expenses', 19), (' Marketing expenses', 15), (' Occupancy ', 12), (' Selling Expenses', 10), (' Management expenses', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5, 6], 'score': 100, 'value': -13889.0, 'line_item_label': ['Occupancy', 'Administrative expenses', 'Other expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-361.0, -10175.0, -3353.0]}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), ('Rent', 25), (' Rental expenses', 24), (' Occupancy expenses', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses', 33), (' Rental expenses', 31), ('Rent', 22), (' Occupancy', 22), (' Occupancy expenses', 18)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [(' Administration expenses', 34), (' Rental expenses', 16), (' Occupancy expenses', 16), (' Occupancy', 13), ('Rent', 7)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [(' Occupancy', 100), (' Occupancy expenses', 59), (' Rental expenses', 11), (' Administration expenses', 10), ('Rent', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [(' Administration expenses', 33), (' Occupancy expenses', 23), (' Rental expenses', 22), ('Rent', 11), (' Occupancy', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 35), ('Rent', 27), (' Occupancy', 25), (' Administration expenses', 22)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), ('Rent', 12), (' Occupancy', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 64), (' Administration expenses', 41), ('Rent', 24), (' Occupancy', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [(' Rental expenses', 39), (' Administration expenses', 24), (' Occupancy expenses', 20), ('Rent', 18), (' Occupancy', 9)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [(' Administration expenses', 31), (' Rental expenses', 21), (' Occupancy', 20), (' Occupancy expenses', 17), ('Rent', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Administration expenses', 32), (' Rental expenses', 29), ('Rent', 23), (' Occupancy', 22), (' Occupancy expenses', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' Rental expenses', 54), (' Administration expenses', 45), (' Occupancy expenses', 44), ('Rent', 21), (' Occupancy', 7)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Administration expenses', 23), (' Rental expenses', 19), ('Rent', 17), (' Occupancy', 17), (' Occupancy expenses', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [(' Rental expenses', 29), (' Occupancy expenses', 21), ('Rent', 15), (' Administration expenses', 15), (' Occupancy', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [(' Rental expenses', 20), (' Occupancy expenses', 20), (' Administration expenses', 19), ('Rent', 13), (' Occupancy', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [(' Rental expenses', 29), (' Occupancy expenses', 23), (' Administration expenses', 18), ('Rent', 15), (' Occupancy', 7)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [(' Rental expenses', 37), (' Occupancy expenses', 26), (' Administration expenses', 21), ('Rent', 18), (' Occupancy', 9)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [(' Administration expenses', 28), (' Rental expenses', 24), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 16)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' Administration expenses', 32), ('Rent', 25), (' Rental expenses', 20), (' Occupancy expenses', 20), (' Occupancy', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [(' Rental expenses', 32), (' Administration expenses', 24), (' Occupancy expenses', 23), ('Rent', 15), (' Occupancy', 7)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' Administration expenses', 32), ('Rent', 25), (' Rental expenses', 20), (' Occupancy expenses', 20), (' Occupancy', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5], 'score': 100, 'value': -7794.0, 'line_item_label': ['Occupancy', 'Administrative expenses'], 'note_numbers': [nan, nan], 'line_item_value': [-357.0, -7437.0]}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), ('Rent', 25), (' Rental expenses', 24), (' Occupancy expenses', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses', 33), (' Rental expenses', 31), ('Rent', 22), (' Occupancy', 22), (' Occupancy expenses', 18)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [(' Administration expenses', 34), (' Rental expenses', 16), (' Occupancy expenses', 16), (' Occupancy', 13), ('Rent', 7)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [(' Occupancy', 100), (' Occupancy expenses', 59), (' Rental expenses', 11), (' Administration expenses', 10), ('Rent', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [(' Administration expenses', 33), (' Occupancy expenses', 23), (' Rental expenses', 22), ('Rent', 11), (' Occupancy', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 35), ('Rent', 27), (' Occupancy', 25), (' Administration expenses', 22)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), ('Rent', 12), (' Occupancy', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 64), (' Administration expenses', 41), ('Rent', 24), (' Occupancy', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [(' Rental expenses', 39), (' Administration expenses', 24), (' Occupancy expenses', 20), ('Rent', 18), (' Occupancy', 9)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [(' Administration expenses', 31), (' Rental expenses', 21), (' Occupancy', 20), (' Occupancy expenses', 17), ('Rent', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Administration expenses', 32), (' Rental expenses', 29), ('Rent', 23), (' Occupancy', 22), (' Occupancy expenses', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' Rental expenses', 54), (' Administration expenses', 45), (' Occupancy expenses', 44), ('Rent', 21), (' Occupancy', 7)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Administration expenses', 23), (' Rental expenses', 19), ('Rent', 17), (' Occupancy', 17), (' Occupancy expenses', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [(' Rental expenses', 29), (' Occupancy expenses', 21), ('Rent', 15), (' Administration expenses', 15), (' Occupancy', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [(' Rental expenses', 20), (' Occupancy expenses', 20), (' Administration expenses', 19), ('Rent', 13), (' Occupancy', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [(' Rental expenses', 29), (' Occupancy expenses', 23), (' Administration expenses', 18), ('Rent', 15), (' Occupancy', 7)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [(' Rental expenses', 37), (' Occupancy expenses', 26), (' Administration expenses', 21), ('Rent', 18), (' Occupancy', 9)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [(' Administration expenses', 28), (' Rental expenses', 24), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 16)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' Administration expenses', 32), ('Rent', 25), (' Rental expenses', 20), (' Occupancy expenses', 20), (' Occupancy', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [(' Rental expenses', 32), (' Administration expenses', 24), (' Occupancy expenses', 23), ('Rent', 15), (' Occupancy', 7)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' Administration expenses', 32), ('Rent', 25), (' Rental expenses', 20), (' Occupancy expenses', 20), (' Occupancy', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5], 'score': 100, 'value': -10536.0, 'line_item_label': ['Occupancy', 'Administrative expenses'], 'note_numbers': [nan, nan], 'line_item_value': [-361.0, -10175.0]}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 36), ('Other revenue', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 24)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [(' Other income', 39), ('other operating', 29), ('Other revenue', 27)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), ('Other revenue', 17), (' Other income', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('other operating', 27), ('Other revenue', 24), (' Other income', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [(' Other income', 64), ('other operating', 58), ('Other revenue', 38)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('other operating', 67), ('Other revenue', 43), (' Other income', 27)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 9), ('Other revenue', 8)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [(' Other income', 55), ('other operating', 29), ('Other revenue', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [(' Other income', 26), ('Other revenue', 21), ('other operating', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Other income', 48), ('other operating', 31), ('Other revenue', 24)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' Other income', 40), ('other operating', 29), ('Other revenue', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 40), ('Other revenue', 32)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [('other operating', 26), (' Other income', 26), ('Other revenue', 21)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [(' Other income', 29), ('other operating', 27), ('Other revenue', 23)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('other operating', 34), ('Other revenue', 30), (' Other income', 30)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [('other operating', 39), (' Other income', 35), ('Other revenue', 19)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [('other operating', 33), (' Other income', 32), ('Other revenue', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('other operating', 26), (' Other income', 26), ('Other revenue', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [('other operating', 33), (' Other income', 33), ('Other revenue', 16)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('other operating', 26), (' Other income', 26), ('Other revenue', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 36), ('Other revenue', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 24)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [(' Other income', 39), ('other operating', 29), ('Other revenue', 27)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), ('Other revenue', 17), (' Other income', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('other operating', 27), ('Other revenue', 24), (' Other income', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [(' Other income', 64), ('other operating', 58), ('Other revenue', 38)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('other operating', 67), ('Other revenue', 43), (' Other income', 27)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 9), ('Other revenue', 8)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [(' Other income', 55), ('other operating', 29), ('Other revenue', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [(' Other income', 26), ('Other revenue', 21), ('other operating', 13)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Other income', 48), ('other operating', 31), ('Other revenue', 24)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' Other income', 40), ('other operating', 29), ('Other revenue', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 40), ('Other revenue', 32)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [('other operating', 26), (' Other income', 26), ('Other revenue', 21)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [(' Other income', 29), ('other operating', 27), ('Other revenue', 23)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('other operating', 34), ('Other revenue', 30), (' Other income', 30)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [('other operating', 39), (' Other income', 35), ('Other revenue', 19)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [('other operating', 33), (' Other income', 32), ('Other revenue', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('other operating', 26), (' Other income', 26), ('Other revenue', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [('other operating', 33), (' Other income', 33), ('Other revenue', 16)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('other operating', 26), (' Other income', 26), ('Other revenue', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), ('other income', 37), (' Finance income and costs', 34), (' Net finance costs', 34), (' Finance income and finance costs', 30), ('finance income', 14), ('Finance income', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [(' Finance income and costs', 57), (' Finance income and finance costs', 49), (' Net finance costs', 40), ('other income', 39), (' Interest revenue', 30), ('finance income', 27), ('Finance income', 27)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 30), (' Finance income and finance costs', 25), ('other income', 17), ('finance income', 17), ('Finance income', 17), (' Interest revenue', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('finance income', 24), ('Finance income', 24), (' Net finance costs', 20), (' Finance income and costs', 15), ('other income', 12), (' Finance income and finance costs', 12), (' Interest revenue', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), ('other income', 30), (' Finance income and finance costs', 27), (' Net finance costs', 26), ('finance income', 21), ('Finance income', 21)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [('other income', 64), (' Net finance costs', 41), ('finance income', 38), ('Finance income', 38), (' Finance income and costs', 34), (' Interest revenue', 34), (' Finance income and finance costs', 29)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Net finance costs', 38), ('other income', 27), (' Finance income and costs', 25), (' Interest revenue', 23), (' Finance income and finance costs', 21), ('finance income', 17), ('Finance income', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Net finance costs', 57), (' Finance income and costs', 53), ('finance income', 48), ('Finance income', 48), (' Finance income and finance costs', 44), ('other income', 25), (' Interest revenue', 21)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [('finance income', 80), ('Finance income', 80), (' Finance income and costs', 62), ('other income', 55), (' Net finance costs', 55), (' Finance income and finance costs', 52), (' Interest revenue', 24)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [(' Finance income and costs', 36), (' Net finance costs', 36), (' Finance income and finance costs', 35), (' Interest revenue', 32), ('other income', 26), ('finance income', 21), ('Finance income', 21)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('other income', 48), ('finance income', 41), ('Finance income', 41), (' Finance income and costs', 33), (' Finance income and finance costs', 28), (' Interest revenue', 27), (' Net finance costs', 27)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('finance income', 50), ('Finance income', 50), (' Finance income and costs', 44), ('other income', 40), (' Finance income and finance costs', 38), (' Net finance costs', 21), (' Interest revenue', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 40), (' Finance income and costs', 25), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 19), ('Finance income', 19)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [(' Interest revenue', 31), (' Net finance costs', 31), (' Finance income and costs', 28), ('other income', 26), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [(' Finance income and costs', 31), ('other income', 29), (' Finance income and finance costs', 28), (' Net finance costs', 25), (' Interest revenue', 22), ('finance income', 14), ('Finance income', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('other income', 30), (' Net finance costs', 28), (' Interest revenue', 22), ('finance income', 10), ('Finance income', 10), (' Finance income and costs', 9), (' Finance income and finance costs', 8)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [('other income', 35), (' Net finance costs', 29), (' Interest revenue', 21), ('finance income', 11), ('Finance income', 11), (' Finance income and costs', 10), (' Finance income and finance costs', 9)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [(' Finance income and costs', 34), (' Net finance costs', 34), ('other income', 32), (' Finance income and finance costs', 29), (' Interest revenue', 23), ('finance income', 12), ('Finance income', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' Net finance costs', 37), ('other income', 26), (' Finance income and costs', 24), (' Interest revenue', 23), (' Finance income and finance costs', 21), ('finance income', 20), ('Finance income', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [('other income', 33), (' Finance income and finance costs', 26), (' Finance income and costs', 25), (' Interest revenue', 25), (' Net finance costs', 25), ('finance income', 16), ('Finance income', 16)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' Net finance costs', 37), ('other income', 26), (' Finance income and costs', 24), (' Interest revenue', 23), (' Finance income and finance costs', 21), ('finance income', 20), ('Finance income', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 11], 'score': 80, 'value': 5497.0, 'line_item_label': ['Finance income', 'Total finance income'], 'note_numbers': ['2(c)', nan], 'line_item_value': [2792.0, 2705.0]}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), ('other income', 37), (' Finance income and costs', 34), (' Net finance costs', 34), (' Finance income and finance costs', 30), ('finance income', 14), ('Finance income', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [(' Finance income and costs', 57), (' Finance income and finance costs', 49), (' Net finance costs', 40), ('other income', 39), (' Interest revenue', 30), ('finance income', 27), ('Finance income', 27)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 30), (' Finance income and finance costs', 25), ('other income', 17), ('finance income', 17), ('Finance income', 17), (' Interest revenue', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('finance income', 24), ('Finance income', 24), (' Net finance costs', 20), (' Finance income and costs', 15), ('other income', 12), (' Finance income and finance costs', 12), (' Interest revenue', 10)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), ('other income', 30), (' Finance income and finance costs', 27), (' Net finance costs', 26), ('finance income', 21), ('Finance income', 21)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [('other income', 64), (' Net finance costs', 41), ('finance income', 38), ('Finance income', 38), (' Finance income and costs', 34), (' Interest revenue', 34), (' Finance income and finance costs', 29)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Net finance costs', 38), ('other income', 27), (' Finance income and costs', 25), (' Interest revenue', 23), (' Finance income and finance costs', 21), ('finance income', 17), ('Finance income', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Net finance costs', 57), (' Finance income and costs', 53), ('finance income', 48), ('Finance income', 48), (' Finance income and finance costs', 44), ('other income', 25), (' Interest revenue', 21)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [('finance income', 80), ('Finance income', 80), (' Finance income and costs', 62), ('other income', 55), (' Net finance costs', 55), (' Finance income and finance costs', 52), (' Interest revenue', 24)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [(' Finance income and costs', 36), (' Net finance costs', 36), (' Finance income and finance costs', 35), (' Interest revenue', 32), ('other income', 26), ('finance income', 21), ('Finance income', 21)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('other income', 48), ('finance income', 41), ('Finance income', 41), (' Finance income and costs', 33), (' Finance income and finance costs', 28), (' Interest revenue', 27), (' Net finance costs', 27)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('finance income', 50), ('Finance income', 50), (' Finance income and costs', 44), ('other income', 40), (' Finance income and finance costs', 38), (' Net finance costs', 21), (' Interest revenue', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 40), (' Finance income and costs', 25), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 19), ('Finance income', 19)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [(' Interest revenue', 31), (' Net finance costs', 31), (' Finance income and costs', 28), ('other income', 26), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [(' Finance income and costs', 31), ('other income', 29), (' Finance income and finance costs', 28), (' Net finance costs', 25), (' Interest revenue', 22), ('finance income', 14), ('Finance income', 14)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('other income', 30), (' Net finance costs', 28), (' Interest revenue', 22), ('finance income', 10), ('Finance income', 10), (' Finance income and costs', 9), (' Finance income and finance costs', 8)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [('other income', 35), (' Net finance costs', 29), (' Interest revenue', 21), ('finance income', 11), ('Finance income', 11), (' Finance income and costs', 10), (' Finance income and finance costs', 9)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [(' Finance income and costs', 34), (' Net finance costs', 34), ('other income', 32), (' Finance income and finance costs', 29), (' Interest revenue', 23), ('finance income', 12), ('Finance income', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' Net finance costs', 37), ('other income', 26), (' Finance income and costs', 24), (' Interest revenue', 23), (' Finance income and finance costs', 21), ('finance income', 20), ('Finance income', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [('other income', 33), (' Finance income and finance costs', 26), (' Finance income and costs', 25), (' Interest revenue', 25), (' Net finance costs', 25), ('finance income', 16), ('Finance income', 16)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' Net finance costs', 37), ('other income', 26), (' Finance income and costs', 24), (' Interest revenue', 23), (' Finance income and finance costs', 21), ('finance income', 20), ('Finance income', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 11], 'score': 80, 'value': 7802.0, 'line_item_label': ['Finance income', 'Total finance income'], 'note_numbers': ['2(c)', nan], 'line_item_value': [8393.0, -591.0]}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = current assets cash and cash equivalents , res_fuzz_match = [(' Bank Deposits - cash and cash equivalents', 81), (' Interest received - Bank', 45), (' Interest received - Loan', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), ('interest', 38), (' Sublease interest income', 36), (' Share of JV interest received/(paid)', 32), ('Bank interest', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = current assets cash and cash equivalents , res_fuzz_match = [(' Bank Deposits - cash and cash equivalents', 81), (' Interest received - Bank', 45), (' Interest received - Loan', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), ('interest', 38), (' Sublease interest income', 36), (' Share of JV interest received/(paid)', 32), ('Bank interest', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [81, 81], 'value': [136874.0, 90865.0], 'label': ['Current assets Cash and cash equivalents', 'Current assets Cash and cash equivalents'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance income interest received - bank , res_fuzz_match = [('interest', 100), (' Interest received - Bank', 100), (' Interest received - Loan', 90), ('Bank interest', 77), (' Interest income', 71), (' Interest income', 71), (' Share of JV interest received/(paid)', 69), (' Sublease interest income', 55), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 48), (' Bank Deposits - cash and cash equivalents', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance income interest received - loan , res_fuzz_match = [('interest', 100), (' Interest received - Loan', 100), (' Interest received - Bank', 90), ('Bank interest', 77), (' Interest income', 71), (' Share of JV interest received/(paid)', 71), (' Interest income', 71), (' Sublease interest income', 55), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 48), (' Bank Deposits - cash and cash equivalents', 30)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance income sublease interest income , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Sublease interest income', 100), (' Interest income', 100), ('Bank interest', 77), (' Interest received - Loan', 65), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 60), (' Interest received - Bank', 59), (' Share of JV interest received/(paid)', 54), (' Bank Deposits - cash and cash equivalents', 28)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance income share of jvinterest received/paid) , res_fuzz_match = [('interest', 100), (' Share of JV interest received/(paid)', 92), (' Interest received - Bank', 85), (' Interest received - Loan', 85), (' Interest income', 71), (' Interest income', 71), ('Bank interest', 69), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 63), (' Sublease interest income', 59), (' Bank Deposits - cash and cash equivalents', 36)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance income net foreign exchange gains/losses) , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), ('interest', 50), ('Bank interest', 46), (' Interest received - Bank', 45), (' Interest received - Loan', 45), (' Bank Deposits - cash and cash equivalents', 38), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 38), (' Sublease interest income', 36), (' Share of JV interest received/(paid)', 35)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance income finance income , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 56), ('Bank interest', 38), (' Sublease interest income', 36), (' Interest received - Bank', 30), (' Interest received - Loan', 30), (' Bank Deposits - cash and cash equivalents', 29), (' Share of JV interest received/(paid)', 28), ('interest', 25)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance costs lease interest expense , res_fuzz_match = [('interest', 100), ('Bank interest', 77), (' Sublease interest income', 73), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 69), (' Interest received - Loan', 69), (' Share of JV interest received/(paid)', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 52), (' Bank Deposits - cash and cash equivalents', 34)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance costs accretion expense , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 52), (' Interest income', 43), (' Interest income', 43), (' Interest received - Bank', 40), (' Interest received - Loan', 40), (' Share of JV interest received/(paid)', 39), ('interest', 38), ('Bank interest', 38), (' Bank Deposits - cash and cash equivalents', 36), (' Sublease interest income', 27)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance costs loss on loan refinancing , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest income', 43), (' Interest income', 43), (' Interest received - Bank', 40), ('interest', 38), ('Bank interest', 38), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 37), (' Sublease interest income', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Share of JV interest received/(paid)', 32)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance costs finance costs , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 57), (' Interest income', 50), (' Interest income', 50), (' Bank Deposits - cash and cash equivalents', 43), (' Sublease interest income', 41), (' Interest received - Bank', 40), (' Interest received - Loan', 40), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance costs total finance incomel cost , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Sublease interest income', 50), ('Bank interest', 46), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Bank Deposits - cash and cash equivalents', 41), ('interest', 38), (' Interest received - Bank', 35), (' Interest received - Loan', 35), (' Share of JV interest received/(paid)', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance income interest received - bank , res_fuzz_match = [('interest', 100), (' Interest received - Bank', 100), (' Interest received - Loan', 90), ('Bank interest', 77), (' Interest income', 71), (' Interest income', 71), (' Share of JV interest received/(paid)', 69), (' Sublease interest income', 55), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 48), (' Bank Deposits - cash and cash equivalents', 12)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance income interest received - loan , res_fuzz_match = [('interest', 100), (' Interest received - Loan', 100), (' Interest received - Bank', 90), ('Bank interest', 77), (' Interest income', 71), (' Share of JV interest received/(paid)', 71), (' Interest income', 71), (' Sublease interest income', 55), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 48), (' Bank Deposits - cash and cash equivalents', 30)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance income sublease interest income , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Sublease interest income', 100), (' Interest income', 100), ('Bank interest', 77), (' Interest received - Loan', 65), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 60), (' Interest received - Bank', 59), (' Share of JV interest received/(paid)', 54), (' Bank Deposits - cash and cash equivalents', 28)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance income share of jvinterest received/paid) , res_fuzz_match = [('interest', 100), (' Share of JV interest received/(paid)', 92), (' Interest received - Bank', 85), (' Interest received - Loan', 85), (' Interest income', 71), (' Interest income', 71), ('Bank interest', 69), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 63), (' Sublease interest income', 59), (' Bank Deposits - cash and cash equivalents', 36)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance income net foreign exchange gains/losses) , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), ('interest', 50), ('Bank interest', 46), (' Interest received - Bank', 45), (' Interest received - Loan', 45), (' Bank Deposits - cash and cash equivalents', 38), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 38), (' Sublease interest income', 36), (' Share of JV interest received/(paid)', 35)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance income finance income , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 56), ('Bank interest', 38), (' Sublease interest income', 36), (' Interest received - Bank', 30), (' Interest received - Loan', 30), (' Bank Deposits - cash and cash equivalents', 29), (' Share of JV interest received/(paid)', 28), ('interest', 25)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance costs lease interest expense , res_fuzz_match = [('interest', 100), ('Bank interest', 77), (' Sublease interest income', 73), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 69), (' Interest received - Loan', 69), (' Share of JV interest received/(paid)', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 52), (' Bank Deposits - cash and cash equivalents', 34)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance costs accretion expense , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 52), (' Interest income', 43), (' Interest income', 43), (' Interest received - Bank', 40), (' Interest received - Loan', 40), (' Share of JV interest received/(paid)', 39), ('interest', 38), ('Bank interest', 38), (' Bank Deposits - cash and cash equivalents', 36), (' Sublease interest income', 27)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance costs loss on loan refinancing , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest income', 43), (' Interest income', 43), (' Interest received - Bank', 40), ('interest', 38), ('Bank interest', 38), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 37), (' Sublease interest income', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Share of JV interest received/(paid)', 32)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance costs finance costs , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 57), (' Interest income', 50), (' Interest income', 50), (' Bank Deposits - cash and cash equivalents', 43), (' Sublease interest income', 41), (' Interest received - Bank', 40), (' Interest received - Loan', 40), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = finance costs total finance incomel cost , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Sublease interest income', 50), ('Bank interest', 46), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Bank Deposits - cash and cash equivalents', 41), ('interest', 38), (' Interest received - Bank', 35), (' Interest received - Loan', 35), (' Share of JV interest received/(paid)', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 6, 11, 12, 13, 14, 17], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [3453.0, 7415.0, 12.0, -2.0, 43.0, 633.0, 3087.0, 20.0, 3.0, -75.0], 'label': ['Finance income Interest received - Bank', 'Finance income Interest received - Loan', 'Finance income Sublease interest income', 'Finance income Share of JVinterest received/paid)', 'Finance costs Lease interest expense', 'Finance income Interest received - Bank', 'Finance income Interest received - Loan', 'Finance income Sublease interest income', 'Finance income Share of JVinterest received/paid)', 'Finance costs Lease interest expense'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = lng , res_fuzz_match = [(' Bank Deposits - cash and cash equivalents', 50), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 50), (' Interest received - Loan', 40), ('interest', 33), ('Bank interest', 33), (' Interest income', 33), (' Interest received - Bank', 33), (' Sublease interest income', 33), (' Share of JV interest received/(paid)', 33), (' Interest income', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = condensate , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 57), ('interest', 43), ('Bank interest', 43), (' Interest income', 40), (' Interest received - Loan', 40), (' Sublease interest income', 40), (' Interest income', 40), (' Interest received - Bank', 29), (' Share of JV interest received/(paid)', 29), (' Bank Deposits - cash and cash equivalents', 29)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = lng , res_fuzz_match = [(' Bank Deposits - cash and cash equivalents', 50), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 50), (' Interest received - Loan', 40), ('interest', 33), ('Bank interest', 33), (' Interest income', 33), (' Interest received - Bank', 33), (' Sublease interest income', 33), (' Share of JV interest received/(paid)', 33), (' Interest income', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = condensate , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 57), ('interest', 43), ('Bank interest', 43), (' Interest income', 40), (' Interest received - Loan', 40), (' Sublease interest income', 40), (' Interest income', 40), (' Interest received - Bank', 29), (' Share of JV interest received/(paid)', 29), (' Bank Deposits - cash and cash equivalents', 29)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = inventories , res_fuzz_match = [('interest', 50), ('Bank interest', 47), (' Interest income', 44), (' Interest received - Bank', 44), (' Interest received - Loan', 44), (' Sublease interest income', 44), (' Share of JV interest received/(paid)', 44), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 44), (' Interest income', 44), (' Bank Deposits - cash and cash equivalents', 29)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = inventories , res_fuzz_match = [('interest', 50), ('Bank interest', 47), (' Interest income', 44), (' Interest received - Bank', 44), (' Interest received - Loan', 44), (' Sublease interest income', 44), (' Share of JV interest received/(paid)', 44), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 44), (' Interest income', 44), (' Bank Deposits - cash and cash equivalents', 29)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = current assets prepayments , res_fuzz_match = [(' Share of JV interest received/(paid)', 50), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 45), ('interest', 38), (' Interest income', 36), (' Interest income', 36), (' Bank Deposits - cash and cash equivalents', 35), (' Interest received - Bank', 33), (' Interest received - Loan', 33), ('Bank interest', 31), (' Sublease interest income', 25)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = current assets interest receivable , res_fuzz_match = [('interest', 100), (' Interest received - Bank', 86), (' Interest received - Loan', 86), (' Share of JV interest received/(paid)', 77), (' Interest income', 71), (' Interest income', 71), ('Bank interest', 69), (' Sublease interest income', 63), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 45), (' Bank Deposits - cash and cash equivalents', 32)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = current assets bank guarantee , res_fuzz_match = [('Bank interest', 62), ('interest', 50), (' Interest received - Bank', 45), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 42), (' Bank Deposits - cash and cash equivalents', 37), (' Sublease interest income', 36), (' Interest income', 33), (' Interest income', 33), (' Share of JV interest received/(paid)', 29), (' Interest received - Loan', 25)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = current assets rental bond , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), ('Bank interest', 46), (' Share of JV interest received/(paid)', 46), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 44), (' Interest income', 43), (' Interest income', 43), ('interest', 38), (' Sublease interest income', 37), (' Bank Deposits - cash and cash equivalents', 36)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = current assets related party receivable , res_fuzz_match = [(' Interest received - Bank', 55), (' Interest received - Loan', 55), (' Share of JV interest received/(paid)', 51), ('interest', 50), (' Interest income', 43), (' Interest income', 43), (' Sublease interest income', 41), ('Bank interest', 38), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 35), (' Bank Deposits - cash and cash equivalents', 30)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = current assets share of jv prepayments , res_fuzz_match = [(' Share of JV interest received/(paid)', 53), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 47), (' Interest received - Bank', 41), (' Interest received - Loan', 41), ('interest', 38), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), (' Bank Deposits - cash and cash equivalents', 35), ('Bank interest', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = current assets current investments , res_fuzz_match = [('interest', 71), ('Bank interest', 58), (' Sublease interest income', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Share of JV interest received/(paid)', 42), (' Interest received - Bank', 38), (' Interest received - Loan', 38), (' Bank Deposits - cash and cash equivalents', 29)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = current assets , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 54), ('interest', 50), (' Interest received - Bank', 38), (' Interest received - Loan', 38), (' Sublease interest income', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 38), ('Bank interest', 35), (' Interest income', 31), (' Interest income', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = current assets prepayments , res_fuzz_match = [(' Share of JV interest received/(paid)', 50), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 45), ('interest', 38), (' Interest income', 36), (' Interest income', 36), (' Bank Deposits - cash and cash equivalents', 35), (' Interest received - Bank', 33), (' Interest received - Loan', 33), ('Bank interest', 31), (' Sublease interest income', 25)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = current assets interest receivable , res_fuzz_match = [('interest', 100), (' Interest received - Bank', 86), (' Interest received - Loan', 86), (' Share of JV interest received/(paid)', 77), (' Interest income', 71), (' Interest income', 71), ('Bank interest', 69), (' Sublease interest income', 63), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 45), (' Bank Deposits - cash and cash equivalents', 32)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = current assets bank guarantee , res_fuzz_match = [('Bank interest', 62), ('interest', 50), (' Interest received - Bank', 45), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 42), (' Bank Deposits - cash and cash equivalents', 37), (' Sublease interest income', 36), (' Interest income', 33), (' Interest income', 33), (' Share of JV interest received/(paid)', 29), (' Interest received - Loan', 25)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = current assets rental bond , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), ('Bank interest', 46), (' Share of JV interest received/(paid)', 46), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 44), (' Interest income', 43), (' Interest income', 43), ('interest', 38), (' Sublease interest income', 37), (' Bank Deposits - cash and cash equivalents', 36)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = current assets related party receivable , res_fuzz_match = [(' Interest received - Bank', 55), (' Interest received - Loan', 55), (' Share of JV interest received/(paid)', 51), ('interest', 50), (' Interest income', 43), (' Interest income', 43), (' Sublease interest income', 41), ('Bank interest', 38), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 35), (' Bank Deposits - cash and cash equivalents', 30)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = current assets share of jv prepayments , res_fuzz_match = [(' Share of JV interest received/(paid)', 53), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 47), (' Interest received - Bank', 41), (' Interest received - Loan', 41), ('interest', 38), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), (' Bank Deposits - cash and cash equivalents', 35), ('Bank interest', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = current assets current investments , res_fuzz_match = [('interest', 71), ('Bank interest', 58), (' Sublease interest income', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Share of JV interest received/(paid)', 42), (' Interest received - Bank', 38), (' Interest received - Loan', 38), (' Bank Deposits - cash and cash equivalents', 29)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = current assets , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 54), ('interest', 50), (' Interest received - Bank', 38), (' Interest received - Loan', 38), (' Sublease interest income', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 38), ('Bank interest', 35), (' Interest income', 31), (' Interest income', 31)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), ('interest', 33), ('Bank interest', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 33)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 9], 'score': [100, 100], 'value': [90.0, 38.0], 'label': ['Current assets Interest receivable', 'Current assets Interest receivable'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:42+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-04-23 13:59:42+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [(' net finance costs ', 40), ('finance cost', 39), ('finance costs', 39), (' finance expenses', 16)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('finance cost', 25), ('finance costs', 25), (' net finance costs ', 20), (' finance expenses', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 22), ('finance cost', 16), ('finance costs', 16)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' finance expenses', 42), (' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [(' net finance costs ', 55), ('finance cost', 41), ('finance costs', 41), (' finance expenses', 39)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 35), ('finance costs', 35), (' finance expenses', 21)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('finance cost', 30), ('finance costs', 30), (' finance expenses', 29), (' net finance costs ', 27)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' finance expenses', 54), ('finance cost', 23), ('finance costs', 23), (' net finance costs ', 21)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 24)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 23)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [(' net finance costs ', 28), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [(' finance expenses', 30), (' net finance costs ', 29), ('finance cost', 23), ('finance costs', 23)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 24)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' net finance costs ', 37), ('finance cost', 21), ('finance costs', 21), (' finance expenses', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [(' finance expenses', 25), (' net finance costs ', 25), ('finance cost', 20), ('finance costs', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' net finance costs ', 37), ('finance cost', 21), ('finance costs', 21), (' finance expenses', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -87.0, 'line_item_label': ['Finance expenses'], 'note_numbers': ['2(c)'], 'line_item_value': [-87.0]}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [(' net finance costs ', 40), ('finance cost', 39), ('finance costs', 39), (' finance expenses', 16)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('finance cost', 25), ('finance costs', 25), (' net finance costs ', 20), (' finance expenses', 11)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 22), ('finance cost', 16), ('finance costs', 16)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' finance expenses', 42), (' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [(' net finance costs ', 55), ('finance cost', 41), ('finance costs', 41), (' finance expenses', 39)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 35), ('finance costs', 35), (' finance expenses', 21)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('finance cost', 30), ('finance costs', 30), (' finance expenses', 29), (' net finance costs ', 27)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' finance expenses', 54), ('finance cost', 23), ('finance costs', 23), (' net finance costs ', 21)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 24)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 23)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [(' net finance costs ', 28), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [(' finance expenses', 30), (' net finance costs ', 29), ('finance cost', 23), ('finance costs', 23)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 24)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' net finance costs ', 37), ('finance cost', 21), ('finance costs', 21), (' finance expenses', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [(' finance expenses', 25), (' net finance costs ', 25), ('finance cost', 20), ('finance costs', 20)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' net finance costs ', 37), ('finance cost', 21), ('finance costs', 21), (' finance expenses', 15)]
2023-04-23 13:59:42+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -8984.0, 'line_item_label': ['Finance expenses'], 'note_numbers': ['2(c)'], 'line_item_value': [-8984.0]}
2023-04-23 13:59:42+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:42+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets cash and cash equivalents , res_fuzz_match = [('cash credit', 64), (' Interest on leases', 54), ('loan', 50), ('bonds', 50), (' Interest accrued on loans', 47), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 46), (' Interest on bank overdrafts and loans (other than those from related parties)', 43), (' Interest income', 43), (' Interest expense on financial liabilities using the effective interest rate method - other', 42), ('bank facilities', 40), ('Interest expenses', 40), ('debenture', 38), ('interest', 38), (' Interest accrued on lease liabilities', 38), (' Lease interest expense', 35), (' Discount unwind on the provision for asset retirement obligation', 34), ('borrowings', 33), ('  Other interest expense', 33), (' Lease liabilities interest expense', 30), ('debt', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets cash and cash equivalents , res_fuzz_match = [('cash credit', 64), (' Interest on leases', 54), ('loan', 50), ('bonds', 50), (' Interest accrued on loans', 47), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 46), (' Interest on bank overdrafts and loans (other than those from related parties)', 43), (' Interest income', 43), (' Interest expense on financial liabilities using the effective interest rate method - other', 42), ('bank facilities', 40), ('Interest expenses', 40), ('debenture', 38), ('interest', 38), (' Interest accrued on lease liabilities', 38), (' Lease interest expense', 35), (' Discount unwind on the provision for asset retirement obligation', 34), ('borrowings', 33), ('  Other interest expense', 33), (' Lease liabilities interest expense', 30), ('debt', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income interest received - bank , res_fuzz_match = [('interest', 100), (' Interest on leases', 77), ('Interest expenses', 73), (' Interest income', 71), (' Interest accrued on loans', 68), ('  Other interest expense', 62), (' Lease interest expense', 60), ('bank facilities', 57), (' Lease liabilities interest expense', 56), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 52), ('loan', 50), ('bonds', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 48), ('cash credit', 45), (' Interest accrued on lease liabilities', 43), (' Interest on bank overdrafts and loans (other than those from related parties)', 39), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 34), ('debt', 25), ('borrowings', 20)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income interest received - loan , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on leases', 77), (' Interest accrued on loans', 74), ('Interest expenses', 73), (' Interest income', 71), ('  Other interest expense', 62), (' Lease interest expense', 60), (' Interest accrued on lease liabilities', 57), (' Lease liabilities interest expense', 56), (' Interest expense on financial liabilities using the effective interest rate method - other', 52), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 52), ('debt', 50), ('bonds', 50), ('cash credit', 45), (' Interest on bank overdrafts and loans (other than those from related parties)', 45), ('bank facilities', 40), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 34), ('borrowings', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income sublease interest income , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Lease interest expense', 77), ('Interest expenses', 69), (' Interest on leases', 69), (' Interest accrued on loans', 67), (' Lease liabilities interest expense', 65), ('  Other interest expense', 59), ('loan', 50), (' Interest accrued on lease liabilities', 50), ('cash credit', 45), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), ('bank facilities', 40), ('debenture', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 37), (' Interest on bank overdrafts and loans (other than those from related parties)', 34), ('bonds', 29), ('debt', 25), (' Discount unwind on the provision for asset retirement obligation', 24), ('borrowings', 22)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income share of jvinterest received/paid) , res_fuzz_match = [('interest', 100), (' Interest on leases', 77), ('Interest expenses', 73), (' Interest income', 71), ('  Other interest expense', 67), (' Lease interest expense', 65), (' Interest expense on financial liabilities using the effective interest rate method - other', 56), (' Interest accrued on loans', 53), ('loan', 50), (' Lease liabilities interest expense', 50), (' Interest accrued on lease liabilities', 48), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 46), ('cash credit', 45), (' Discount unwind on the provision for asset retirement obligation', 41), ('debt', 40), ('bank facilities', 40), ('debenture', 38), (' Interest on bank overdrafts and loans (other than those from related parties)', 37), ('bonds', 25), ('borrowings', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income net foreign exchange gains/losses) , res_fuzz_match = [('bank facilities', 60), (' Interest income', 57), ('loan', 50), ('debt', 50), ('interest', 50), ('Interest expenses', 47), (' Interest on leases', 46), ('cash credit', 45), ('  Other interest expense', 43), (' Interest accrued on loans', 42), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), (' Lease liabilities interest expense', 37), ('borrowings', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Discount unwind on the provision for asset retirement obligation', 28), (' Interest accrued on lease liabilities', 27), ('debenture', 25), ('bonds', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income finance income , res_fuzz_match = [(' Interest income', 57), ('loan', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 44), ('bank facilities', 40), ('cash credit', 36), (' Interest on bank overdrafts and loans (other than those from related parties)', 36), (' Interest on leases', 31), (' Lease interest expense', 30), (' Lease liabilities interest expense', 30), (' Discount unwind on the provision for asset retirement obligation', 28), (' Interest accrued on lease liabilities', 28), ('Interest expenses', 27), (' Interest accrued on loans', 26), ('bonds', 25), ('interest', 25), ('  Other interest expense', 24), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 24), ('borrowings', 17), ('debenture', 12), ('debt', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs lease interest expense , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), (' Lease interest expense', 100), (' Lease liabilities interest expense', 85), ('  Other interest expense', 81), (' Interest on leases', 77), (' Interest income', 71), (' Interest accrued on loans', 59), ('cash credit', 55), (' Interest accrued on lease liabilities', 54), ('loan', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 47), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 47), ('debenture', 43), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 34), (' Discount unwind on the provision for asset retirement obligation', 33), ('debt', 25), ('bonds', 25), ('borrowings', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs accretion expense , res_fuzz_match = [('Interest expenses', 73), ('  Other interest expense', 63), (' Lease liabilities interest expense', 63), (' Lease interest expense', 56), ('cash credit', 55), (' Interest accrued on loans', 53), (' Interest expense on financial liabilities using the effective interest rate method - other', 52), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 52), ('loan', 50), ('debt', 50), (' Interest on leases', 46), (' Interest accrued on lease liabilities', 44), ('debenture', 43), (' Interest income', 43), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), ('interest', 38), (' Discount unwind on the provision for asset retirement obligation', 38), ('bonds', 25), ('borrowings', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs loss on loan refinancing , res_fuzz_match = [('loan', 100), ('bank facilities', 50), ('bonds', 50), (' Interest accrued on loans', 47), (' Interest on leases', 46), ('cash credit', 45), (' Interest income', 43), ('Interest expenses', 40), (' Lease liabilities interest expense', 40), ('interest', 38), (' Interest accrued on lease liabilities', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 37), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Discount unwind on the provision for asset retirement obligation', 30), (' Lease interest expense', 30), ('  Other interest expense', 29), ('debt', 25), ('debenture', 25), ('borrowings', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs finance costs , res_fuzz_match = [('loan', 50), (' Interest income', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 48), (' Interest on bank overdrafts and loans (other than those from related parties)', 43), ('bank facilities', 40), ('Interest expenses', 40), (' Discount unwind on the provision for asset retirement obligation', 39), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 39), ('interest', 38), (' Interest on leases', 38), (' Interest accrued on loans', 37), ('cash credit', 36), (' Lease liabilities interest expense', 36), (' Lease interest expense', 35), ('  Other interest expense', 33), (' Interest accrued on lease liabilities', 30), ('debt', 25), ('debenture', 25), ('bonds', 25), ('borrowings', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs total finance incomel cost , res_fuzz_match = [(' Interest income', 57), ('loan', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 49), (' Interest accrued on loans', 42), ('bank facilities', 40), ('interest', 38), (' Interest on leases', 38), (' Lease interest expense', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 38), ('cash credit', 36), (' Interest on bank overdrafts and loans (other than those from related parties)', 35), (' Interest accrued on lease liabilities', 35), ('  Other interest expense', 34), ('Interest expenses', 33), (' Lease liabilities interest expense', 33), (' Discount unwind on the provision for asset retirement obligation', 31), ('debt', 25), ('debenture', 25), ('bonds', 25), ('borrowings', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income interest received - bank , res_fuzz_match = [('interest', 100), (' Interest on leases', 77), ('Interest expenses', 73), (' Interest income', 71), (' Interest accrued on loans', 68), ('  Other interest expense', 62), (' Lease interest expense', 60), ('bank facilities', 57), (' Lease liabilities interest expense', 56), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 52), ('loan', 50), ('bonds', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 48), ('cash credit', 45), (' Interest accrued on lease liabilities', 43), (' Interest on bank overdrafts and loans (other than those from related parties)', 39), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 34), ('debt', 25), ('borrowings', 20)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income interest received - loan , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on leases', 77), (' Interest accrued on loans', 74), ('Interest expenses', 73), (' Interest income', 71), ('  Other interest expense', 62), (' Lease interest expense', 60), (' Interest accrued on lease liabilities', 57), (' Lease liabilities interest expense', 56), (' Interest expense on financial liabilities using the effective interest rate method - other', 52), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 52), ('debt', 50), ('bonds', 50), ('cash credit', 45), (' Interest on bank overdrafts and loans (other than those from related parties)', 45), ('bank facilities', 40), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 34), ('borrowings', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income sublease interest income , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Lease interest expense', 77), ('Interest expenses', 69), (' Interest on leases', 69), (' Interest accrued on loans', 67), (' Lease liabilities interest expense', 65), ('  Other interest expense', 59), ('loan', 50), (' Interest accrued on lease liabilities', 50), ('cash credit', 45), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), ('bank facilities', 40), ('debenture', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 37), (' Interest on bank overdrafts and loans (other than those from related parties)', 34), ('bonds', 29), ('debt', 25), (' Discount unwind on the provision for asset retirement obligation', 24), ('borrowings', 22)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income share of jvinterest received/paid) , res_fuzz_match = [('interest', 100), (' Interest on leases', 77), ('Interest expenses', 73), (' Interest income', 71), ('  Other interest expense', 67), (' Lease interest expense', 65), (' Interest expense on financial liabilities using the effective interest rate method - other', 56), (' Interest accrued on loans', 53), ('loan', 50), (' Lease liabilities interest expense', 50), (' Interest accrued on lease liabilities', 48), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 46), ('cash credit', 45), (' Discount unwind on the provision for asset retirement obligation', 41), ('debt', 40), ('bank facilities', 40), ('debenture', 38), (' Interest on bank overdrafts and loans (other than those from related parties)', 37), ('bonds', 25), ('borrowings', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income net foreign exchange gains/losses) , res_fuzz_match = [('bank facilities', 60), (' Interest income', 57), ('loan', 50), ('debt', 50), ('interest', 50), ('Interest expenses', 47), (' Interest on leases', 46), ('cash credit', 45), ('  Other interest expense', 43), (' Interest accrued on loans', 42), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), (' Lease liabilities interest expense', 37), ('borrowings', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Discount unwind on the provision for asset retirement obligation', 28), (' Interest accrued on lease liabilities', 27), ('debenture', 25), ('bonds', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income finance income , res_fuzz_match = [(' Interest income', 57), ('loan', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 44), ('bank facilities', 40), ('cash credit', 36), (' Interest on bank overdrafts and loans (other than those from related parties)', 36), (' Interest on leases', 31), (' Lease interest expense', 30), (' Lease liabilities interest expense', 30), (' Discount unwind on the provision for asset retirement obligation', 28), (' Interest accrued on lease liabilities', 28), ('Interest expenses', 27), (' Interest accrued on loans', 26), ('bonds', 25), ('interest', 25), ('  Other interest expense', 24), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 24), ('borrowings', 17), ('debenture', 12), ('debt', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs lease interest expense , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), (' Lease interest expense', 100), (' Lease liabilities interest expense', 85), ('  Other interest expense', 81), (' Interest on leases', 77), (' Interest income', 71), (' Interest accrued on loans', 59), ('cash credit', 55), (' Interest accrued on lease liabilities', 54), ('loan', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 47), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 47), ('debenture', 43), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 34), (' Discount unwind on the provision for asset retirement obligation', 33), ('debt', 25), ('bonds', 25), ('borrowings', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs accretion expense , res_fuzz_match = [('Interest expenses', 73), ('  Other interest expense', 63), (' Lease liabilities interest expense', 63), (' Lease interest expense', 56), ('cash credit', 55), (' Interest accrued on loans', 53), (' Interest expense on financial liabilities using the effective interest rate method - other', 52), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 52), ('loan', 50), ('debt', 50), (' Interest on leases', 46), (' Interest accrued on lease liabilities', 44), ('debenture', 43), (' Interest income', 43), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), ('interest', 38), (' Discount unwind on the provision for asset retirement obligation', 38), ('bonds', 25), ('borrowings', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs loss on loan refinancing , res_fuzz_match = [('loan', 100), ('bank facilities', 50), ('bonds', 50), (' Interest accrued on loans', 47), (' Interest on leases', 46), ('cash credit', 45), (' Interest income', 43), ('Interest expenses', 40), (' Lease liabilities interest expense', 40), ('interest', 38), (' Interest accrued on lease liabilities', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 37), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Discount unwind on the provision for asset retirement obligation', 30), (' Lease interest expense', 30), ('  Other interest expense', 29), ('debt', 25), ('debenture', 25), ('borrowings', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs finance costs , res_fuzz_match = [('loan', 50), (' Interest income', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 48), (' Interest on bank overdrafts and loans (other than those from related parties)', 43), ('bank facilities', 40), ('Interest expenses', 40), (' Discount unwind on the provision for asset retirement obligation', 39), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 39), ('interest', 38), (' Interest on leases', 38), (' Interest accrued on loans', 37), ('cash credit', 36), (' Lease liabilities interest expense', 36), (' Lease interest expense', 35), ('  Other interest expense', 33), (' Interest accrued on lease liabilities', 30), ('debt', 25), ('debenture', 25), ('bonds', 25), ('borrowings', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs total finance incomel cost , res_fuzz_match = [(' Interest income', 57), ('loan', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 49), (' Interest accrued on loans', 42), ('bank facilities', 40), ('interest', 38), (' Interest on leases', 38), (' Lease interest expense', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 38), ('cash credit', 36), (' Interest on bank overdrafts and loans (other than those from related parties)', 35), (' Interest accrued on lease liabilities', 35), ('  Other interest expense', 34), ('Interest expenses', 33), (' Lease liabilities interest expense', 33), (' Discount unwind on the provision for asset retirement obligation', 31), ('debt', 25), ('debenture', 25), ('bonds', 25), ('borrowings', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 6, 8, 11, 12, 13, 14, 17, 19], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [3453.0, 7415.0, 12.0, -2.0, 43.0, -7800.0, 633.0, 3087.0, 20.0, 3.0, -75.0, 0.0], 'label': ['Finance income Interest received - Bank', 'Finance income Interest received - Loan', 'Finance income Sublease interest income', 'Finance income Share of JVinterest received/paid)', 'Finance costs Lease interest expense', 'Finance costs Loss on loan refinancing', 'Finance income Interest received - Bank', 'Finance income Interest received - Loan', 'Finance income Sublease interest income', 'Finance income Share of JVinterest received/paid)', 'Finance costs Lease interest expense', 'Finance costs Loss on loan refinancing'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = lng , res_fuzz_match = [(' Discount unwind on the provision for asset retirement obligation', 67), ('bank facilities', 50), ('loan', 40), (' Interest accrued on loans', 40), ('debenture', 33), ('bonds', 33), ('interest', 33), ('Interest expenses', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Interest income', 33), (' Lease liabilities interest expense', 33), ('debt', 0), ('cash credit', 0), ('borrowings', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = condensate , res_fuzz_match = [('bonds', 75), ('loan', 50), ('debt', 50), ('debenture', 43), ('interest', 43), ('Interest expenses', 43), (' Discount unwind on the provision for asset retirement obligation', 43), ('  Other interest expense', 43), (' Interest on leases', 43), (' Lease interest expense', 43), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Lease liabilities interest expense', 43), (' Interest accrued on loans', 40), (' Interest income', 40), ('cash credit', 31), (' Interest on bank overdrafts and loans (other than those from related parties)', 29), (' Interest accrued on lease liabilities', 29), ('bank facilities', 20), ('borrowings', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = lng , res_fuzz_match = [(' Discount unwind on the provision for asset retirement obligation', 67), ('bank facilities', 50), ('loan', 40), (' Interest accrued on loans', 40), ('debenture', 33), ('bonds', 33), ('interest', 33), ('Interest expenses', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Interest income', 33), (' Lease liabilities interest expense', 33), ('debt', 0), ('cash credit', 0), ('borrowings', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = condensate , res_fuzz_match = [('bonds', 75), ('loan', 50), ('debt', 50), ('debenture', 43), ('interest', 43), ('Interest expenses', 43), (' Discount unwind on the provision for asset retirement obligation', 43), ('  Other interest expense', 43), (' Interest on leases', 43), (' Lease interest expense', 43), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Lease liabilities interest expense', 43), (' Interest accrued on loans', 40), (' Interest income', 40), ('cash credit', 31), (' Interest on bank overdrafts and loans (other than those from related parties)', 29), (' Interest accrued on lease liabilities', 29), ('bank facilities', 20), ('borrowings', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = inventories , res_fuzz_match = [('debt', 50), ('debenture', 50), ('interest', 50), ('Interest expenses', 44), ('  Other interest expense', 44), (' Interest on leases', 44), (' Interest on bank overdrafts and loans (other than those from related parties)', 44), (' Interest accrued on loans', 44), (' Interest accrued on lease liabilities', 44), (' Lease interest expense', 44), (' Interest expense on financial liabilities using the effective interest rate method - other', 44), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 44), (' Interest income', 44), (' Lease liabilities interest expense', 44), ('borrowings', 40), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 33), ('loan', 25), ('bonds', 25), ('bank facilities', 18)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = inventories , res_fuzz_match = [('debt', 50), ('debenture', 50), ('interest', 50), ('Interest expenses', 44), ('  Other interest expense', 44), (' Interest on leases', 44), (' Interest on bank overdrafts and loans (other than those from related parties)', 44), (' Interest accrued on loans', 44), (' Interest accrued on lease liabilities', 44), (' Lease interest expense', 44), (' Interest expense on financial liabilities using the effective interest rate method - other', 44), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 44), (' Interest income', 44), (' Lease liabilities interest expense', 44), ('borrowings', 40), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 33), ('loan', 25), ('bonds', 25), ('bank facilities', 18)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets prepayments , res_fuzz_match = [('debt', 50), (' Discount unwind on the provision for asset retirement obligation', 50), ('cash credit', 45), (' Interest expense on financial liabilities using the effective interest rate method - other', 45), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 45), (' Interest on bank overdrafts and loans (other than those from related parties)', 42), ('Interest expenses', 40), (' Interest accrued on lease liabilities', 40), (' Interest accrued on loans', 39), ('debenture', 38), ('interest', 38), (' Interest on leases', 38), (' Lease interest expense', 38), (' Interest income', 36), ('borrowings', 33), ('  Other interest expense', 31), (' Lease liabilities interest expense', 29), ('loan', 25), ('bonds', 25), ('bank facilities', 20)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets interest receivable , res_fuzz_match = [('interest', 100), (' Interest on leases', 77), ('Interest expenses', 73), (' Interest income', 71), (' Lease interest expense', 67), ('  Other interest expense', 63), (' Interest accrued on loans', 59), (' Interest accrued on lease liabilities', 59), (' Lease liabilities interest expense', 57), (' Interest expense on financial liabilities using the effective interest rate method - other', 52), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 52), ('debt', 50), ('debenture', 50), (' Discount unwind on the provision for asset retirement obligation', 49), (' Interest on bank overdrafts and loans (other than those from related parties)', 38), ('cash credit', 36), ('borrowings', 33), ('bank facilities', 30), ('loan', 25), ('bonds', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets bank guarantee , res_fuzz_match = [('bank facilities', 60), ('loan', 50), ('debt', 50), ('bonds', 50), ('interest', 50), (' Interest on bank overdrafts and loans (other than those from related parties)', 48), (' Discount unwind on the provision for asset retirement obligation', 43), ('debenture', 38), (' Interest on leases', 35), (' Lease interest expense', 35), (' Lease liabilities interest expense', 35), ('borrowings', 33), (' Interest income', 33), ('cash credit', 32), ('Interest expenses', 32), ('  Other interest expense', 29), (' Interest accrued on loans', 26), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 22), (' Interest accrued on lease liabilities', 20), (' Interest expense on financial liabilities using the effective interest rate method - other', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets rental bond , res_fuzz_match = [('bonds', 100), ('cash credit', 55), (' Discount unwind on the provision for asset retirement obligation', 51), ('loan', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 44), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 44), ('  Other interest expense', 43), (' Interest income', 43), (' Interest accrued on loans', 42), ('debt', 40), ('borrowings', 40), ('Interest expenses', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), ('debenture', 38), ('interest', 38), (' Interest on leases', 38), (' Interest accrued on lease liabilities', 38), (' Lease interest expense', 37), (' Lease liabilities interest expense', 36), ('bank facilities', 29)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets related party receivable , res_fuzz_match = [(' Interest on bank overdrafts and loans (other than those from related parties)', 56), ('cash credit', 55), ('loan', 50), ('debt', 50), ('interest', 50), (' Discount unwind on the provision for asset retirement obligation', 49), (' Interest on leases', 46), (' Lease interest expense', 45), ('  Other interest expense', 43), (' Interest income', 43), (' Interest accrued on loans', 42), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), ('bank facilities', 40), ('Interest expenses', 40), ('debenture', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 38), (' Interest accrued on lease liabilities', 37), (' Lease liabilities interest expense', 37), ('borrowings', 33), ('bonds', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets share of jv prepayments , res_fuzz_match = [('debt', 50), (' Discount unwind on the provision for asset retirement obligation', 46), (' Interest on leases', 46), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 46), (' Lease interest expense', 42), (' Interest expense on financial liabilities using the effective interest rate method - other', 42), ('Interest expenses', 41), ('debenture', 38), ('interest', 38), ('  Other interest expense', 38), ('cash credit', 36), (' Interest income', 36), (' Interest on bank overdrafts and loans (other than those from related parties)', 35), (' Interest accrued on lease liabilities', 35), ('borrowings', 33), (' Interest accrued on loans', 32), ('bank facilities', 30), ('loan', 25), ('bonds', 25), (' Lease liabilities interest expense', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets current investments , res_fuzz_match = [('interest', 71), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 54), (' Interest on leases', 53), (' Discount unwind on the provision for asset retirement obligation', 51), ('debt', 50), ('debenture', 50), ('Interest expenses', 48), (' Interest expense on financial liabilities using the effective interest rate method - other', 46), ('cash credit', 45), (' Lease interest expense', 45), ('  Other interest expense', 43), (' Interest income', 43), (' Interest accrued on loans', 40), (' Lease liabilities interest expense', 38), (' Interest on bank overdrafts and loans (other than those from related parties)', 34), ('borrowings', 33), (' Interest accrued on lease liabilities', 31), ('bank facilities', 30), ('loan', 25), ('bonds', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets , res_fuzz_match = [(' Discount unwind on the provision for asset retirement obligation', 54), (' Interest expense on financial liabilities using the effective interest rate method - other', 54), ('debt', 50), ('interest', 50), ('cash credit', 47), (' Interest on bank overdrafts and loans (other than those from related parties)', 46), (' Interest on leases', 45), ('debenture', 38), ('Interest expenses', 38), ('  Other interest expense', 38), (' Interest accrued on loans', 38), (' Interest accrued on lease liabilities', 38), (' Lease interest expense', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 38), (' Lease liabilities interest expense', 38), ('borrowings', 33), (' Interest income', 31), ('loan', 25), ('bonds', 25), ('bank facilities', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets prepayments , res_fuzz_match = [('debt', 50), (' Discount unwind on the provision for asset retirement obligation', 50), ('cash credit', 45), (' Interest expense on financial liabilities using the effective interest rate method - other', 45), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 45), (' Interest on bank overdrafts and loans (other than those from related parties)', 42), ('Interest expenses', 40), (' Interest accrued on lease liabilities', 40), (' Interest accrued on loans', 39), ('debenture', 38), ('interest', 38), (' Interest on leases', 38), (' Lease interest expense', 38), (' Interest income', 36), ('borrowings', 33), ('  Other interest expense', 31), (' Lease liabilities interest expense', 29), ('loan', 25), ('bonds', 25), ('bank facilities', 20)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets interest receivable , res_fuzz_match = [('interest', 100), (' Interest on leases', 77), ('Interest expenses', 73), (' Interest income', 71), (' Lease interest expense', 67), ('  Other interest expense', 63), (' Interest accrued on loans', 59), (' Interest accrued on lease liabilities', 59), (' Lease liabilities interest expense', 57), (' Interest expense on financial liabilities using the effective interest rate method - other', 52), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 52), ('debt', 50), ('debenture', 50), (' Discount unwind on the provision for asset retirement obligation', 49), (' Interest on bank overdrafts and loans (other than those from related parties)', 38), ('cash credit', 36), ('borrowings', 33), ('bank facilities', 30), ('loan', 25), ('bonds', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets bank guarantee , res_fuzz_match = [('bank facilities', 60), ('loan', 50), ('debt', 50), ('bonds', 50), ('interest', 50), (' Interest on bank overdrafts and loans (other than those from related parties)', 48), (' Discount unwind on the provision for asset retirement obligation', 43), ('debenture', 38), (' Interest on leases', 35), (' Lease interest expense', 35), (' Lease liabilities interest expense', 35), ('borrowings', 33), (' Interest income', 33), ('cash credit', 32), ('Interest expenses', 32), ('  Other interest expense', 29), (' Interest accrued on loans', 26), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 22), (' Interest accrued on lease liabilities', 20), (' Interest expense on financial liabilities using the effective interest rate method - other', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets rental bond , res_fuzz_match = [('bonds', 100), ('cash credit', 55), (' Discount unwind on the provision for asset retirement obligation', 51), ('loan', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 44), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 44), ('  Other interest expense', 43), (' Interest income', 43), (' Interest accrued on loans', 42), ('debt', 40), ('borrowings', 40), ('Interest expenses', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), ('debenture', 38), ('interest', 38), (' Interest on leases', 38), (' Interest accrued on lease liabilities', 38), (' Lease interest expense', 37), (' Lease liabilities interest expense', 36), ('bank facilities', 29)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets related party receivable , res_fuzz_match = [(' Interest on bank overdrafts and loans (other than those from related parties)', 56), ('cash credit', 55), ('loan', 50), ('debt', 50), ('interest', 50), (' Discount unwind on the provision for asset retirement obligation', 49), (' Interest on leases', 46), (' Lease interest expense', 45), ('  Other interest expense', 43), (' Interest income', 43), (' Interest accrued on loans', 42), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), ('bank facilities', 40), ('Interest expenses', 40), ('debenture', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 38), (' Interest accrued on lease liabilities', 37), (' Lease liabilities interest expense', 37), ('borrowings', 33), ('bonds', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets share of jv prepayments , res_fuzz_match = [('debt', 50), (' Discount unwind on the provision for asset retirement obligation', 46), (' Interest on leases', 46), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 46), (' Lease interest expense', 42), (' Interest expense on financial liabilities using the effective interest rate method - other', 42), ('Interest expenses', 41), ('debenture', 38), ('interest', 38), ('  Other interest expense', 38), ('cash credit', 36), (' Interest income', 36), (' Interest on bank overdrafts and loans (other than those from related parties)', 35), (' Interest accrued on lease liabilities', 35), ('borrowings', 33), (' Interest accrued on loans', 32), ('bank facilities', 30), ('loan', 25), ('bonds', 25), (' Lease liabilities interest expense', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets current investments , res_fuzz_match = [('interest', 71), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 54), (' Interest on leases', 53), (' Discount unwind on the provision for asset retirement obligation', 51), ('debt', 50), ('debenture', 50), ('Interest expenses', 48), (' Interest expense on financial liabilities using the effective interest rate method - other', 46), ('cash credit', 45), (' Lease interest expense', 45), ('  Other interest expense', 43), (' Interest income', 43), (' Interest accrued on loans', 40), (' Lease liabilities interest expense', 38), (' Interest on bank overdrafts and loans (other than those from related parties)', 34), ('borrowings', 33), (' Interest accrued on lease liabilities', 31), ('bank facilities', 30), ('loan', 25), ('bonds', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets , res_fuzz_match = [(' Discount unwind on the provision for asset retirement obligation', 54), (' Interest expense on financial liabilities using the effective interest rate method - other', 54), ('debt', 50), ('interest', 50), ('cash credit', 47), (' Interest on bank overdrafts and loans (other than those from related parties)', 46), (' Interest on leases', 45), ('debenture', 38), ('Interest expenses', 38), ('  Other interest expense', 38), (' Interest accrued on loans', 38), (' Interest accrued on lease liabilities', 38), (' Lease interest expense', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 38), (' Lease liabilities interest expense', 38), ('borrowings', 33), (' Interest income', 31), ('loan', 25), ('bonds', 25), ('bank facilities', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [('debt', 57), ('debenture', 50), ('bonds', 40), (' Interest income', 36), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest expense on financial liabilities using the effective interest rate method - other', 33), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 33), (' Lease liabilities interest expense', 33), ('borrowings', 29), ('cash credit', 22), ('bank facilities', 18), (' Interest on bank overdrafts and loans (other than those from related parties)', 17), ('loan', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 9, 11], 'score': [100, 100, 100, 100], 'value': [90.0, 27.0, 38.0, 27.0], 'label': ['Current assets Interest receivable', 'Current assets Rental bond', 'Current assets Interest receivable', 'Current assets Rental bond'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:43+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-04-23 13:59:43+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:43+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-04-23 13:59:43+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:43+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-04-23 13:59:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [(' net finance costs ', 40), ('finance cost', 39), ('finance costs', 39), (' finance expenses', 16)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('finance cost', 25), ('finance costs', 25), (' net finance costs ', 20), (' finance expenses', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 22), ('finance cost', 16), ('finance costs', 16)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' finance expenses', 42), (' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [(' net finance costs ', 55), ('finance cost', 41), ('finance costs', 41), (' finance expenses', 39)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 35), ('finance costs', 35), (' finance expenses', 21)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('finance cost', 30), ('finance costs', 30), (' finance expenses', 29), (' net finance costs ', 27)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' finance expenses', 54), ('finance cost', 23), ('finance costs', 23), (' net finance costs ', 21)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 23)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [(' net finance costs ', 28), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [(' finance expenses', 30), (' net finance costs ', 29), ('finance cost', 23), ('finance costs', 23)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' net finance costs ', 37), ('finance cost', 21), ('finance costs', 21), (' finance expenses', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [(' finance expenses', 25), (' net finance costs ', 25), ('finance cost', 20), ('finance costs', 20)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' net finance costs ', 37), ('finance cost', 21), ('finance costs', 21), (' finance expenses', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -87.0, 'line_item_label': ['Finance expenses'], 'note_numbers': ['2(c)'], 'line_item_value': [-87.0]}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [(' net finance costs ', 40), ('finance cost', 39), ('finance costs', 39), (' finance expenses', 16)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('finance cost', 25), ('finance costs', 25), (' net finance costs ', 20), (' finance expenses', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 22), ('finance cost', 16), ('finance costs', 16)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' finance expenses', 42), (' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [(' net finance costs ', 55), ('finance cost', 41), ('finance costs', 41), (' finance expenses', 39)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 35), ('finance costs', 35), (' finance expenses', 21)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('finance cost', 30), ('finance costs', 30), (' finance expenses', 29), (' net finance costs ', 27)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' finance expenses', 54), ('finance cost', 23), ('finance costs', 23), (' net finance costs ', 21)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 23)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [(' net finance costs ', 28), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [(' finance expenses', 30), (' net finance costs ', 29), ('finance cost', 23), ('finance costs', 23)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' net finance costs ', 37), ('finance cost', 21), ('finance costs', 21), (' finance expenses', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [(' finance expenses', 25), (' net finance costs ', 25), ('finance cost', 20), ('finance costs', 20)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [(' net finance costs ', 37), ('finance cost', 21), ('finance costs', 21), (' finance expenses', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -8984.0, 'line_item_label': ['Finance expenses'], 'note_numbers': ['2(c)'], 'line_item_value': [-8984.0]}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets cash and cash equivalents , res_fuzz_match = [(' net of tax', 57), (' foreign exchange gain', 45), (' share of jv income', 45), (' net (loss)/profit on disposal of non-current assets', 44), (' secondment income (tw recovery)', 43), (' other', 40), (' margin charge income', 39), (' insurance proceeds', 36), (' other income', 36), (' quota lease income', 36), (' other miscellaneous - net (loss)/gain', 34), (' net other foreign exchange (losses)/gains', 34), ('other revenue', 33), ('  government grants', 33), (' sundry income', 33), (' effective portion of changes in fair value of cash flow', 31), (' profit from discontinued operation', 30), (' net foreign exchange gains/(losses)', 30), (' net foreign exchange (loss)/gain', 30), (' commission revenue', 29), (' dividend from other parties', 29), (' net foreign exchange gain', 29), (' japan recoveries', 29), (' paid by customers - at amortised cost', 29), (' net ppe disposal (loss)/gain', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets cash and cash equivalents , res_fuzz_match = [(' net of tax', 57), (' foreign exchange gain', 45), (' share of jv income', 45), (' net (loss)/profit on disposal of non-current assets', 44), (' secondment income (tw recovery)', 43), (' other', 40), (' margin charge income', 39), (' insurance proceeds', 36), (' other income', 36), (' quota lease income', 36), (' other miscellaneous - net (loss)/gain', 34), (' net other foreign exchange (losses)/gains', 34), ('other revenue', 33), ('  government grants', 33), (' sundry income', 33), (' effective portion of changes in fair value of cash flow', 31), (' profit from discontinued operation', 30), (' net foreign exchange gains/(losses)', 30), (' net foreign exchange (loss)/gain', 30), (' commission revenue', 29), (' dividend from other parties', 29), (' net foreign exchange gain', 29), (' japan recoveries', 29), (' paid by customers - at amortised cost', 29), (' net ppe disposal (loss)/gain', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income interest received - bank , res_fuzz_match = [(' share of jv income', 64), (' other', 60), ('other revenue', 58), (' sundry income', 58), (' other income', 55), (' secondment income (tw recovery)', 52), (' commission revenue', 50), (' margin charge income', 50), (' net foreign exchange gain', 47), (' dividend from other parties', 44), (' quota lease income', 44), (' net of tax', 43), (' japan recoveries', 43), (' net foreign exchange gains/(losses)', 42), (' net foreign exchange (loss)/gain', 42), (' profit from discontinued operation', 41), (' foreign exchange gain', 39), (' paid by customers - at amortised cost', 38), (' insurance proceeds', 36), (' net ppe disposal (loss)/gain', 36), (' other miscellaneous - net (loss)/gain', 35), ('  government grants', 33), (' net (loss)/profit on disposal of non-current assets', 25), (' effective portion of changes in fair value of cash flow', 23), (' net other foreign exchange (losses)/gains', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income interest received - loan , res_fuzz_match = [(' share of jv income', 64), (' other', 60), ('other revenue', 58), (' sundry income', 58), (' other income', 55), (' secondment income (tw recovery)', 52), (' net ppe disposal (loss)/gain', 51), (' commission revenue', 50), (' margin charge income', 50), (' net foreign exchange (loss)/gain', 50), (' other miscellaneous - net (loss)/gain', 47), (' net foreign exchange gain', 46), (' dividend from other parties', 44), (' quota lease income', 44), (' net of tax', 43), (' japan recoveries', 43), (' profit from discontinued operation', 41), (' net foreign exchange gains/(losses)', 41), (' foreign exchange gain', 39), (' paid by customers - at amortised cost', 38), (' insurance proceeds', 36), (' net other foreign exchange (losses)/gains', 34), ('  government grants', 33), (' effective portion of changes in fair value of cash flow', 26), (' net (loss)/profit on disposal of non-current assets', 18)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income sublease interest income , res_fuzz_match = [(' other income', 73), (' share of jv income', 73), (' other', 60), (' sundry income', 58), (' margin charge income', 56), (' quota lease income', 56), (' commission revenue', 50), (' secondment income (tw recovery)', 48), (' net of tax', 43), ('other revenue', 42), (' paid by customers - at amortised cost', 42), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' dividend from other parties', 40), (' other miscellaneous - net (loss)/gain', 38), (' insurance proceeds', 36), (' japan recoveries', 36), (' net foreign exchange gains/(losses)', 32), (' net (loss)/profit on disposal of non-current assets', 31), (' net foreign exchange gain', 30), (' net ppe disposal (loss)/gain', 30), (' effective portion of changes in fair value of cash flow', 28), (' net foreign exchange (loss)/gain', 26), ('  government grants', 25), (' net other foreign exchange (losses)/gains', 23)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income share of jvinterest received/paid) , res_fuzz_match = [(' share of jv income', 73), (' other', 60), ('other revenue', 58), (' sundry income', 58), (' commission revenue', 57), (' secondment income (tw recovery)', 57), (' other income', 55), (' margin charge income', 50), (' net foreign exchange gain', 46), (' quota lease income', 44), (' net of tax', 43), (' japan recoveries', 43), (' profit from discontinued operation', 41), (' net foreign exchange gains/(losses)', 41), (' net foreign exchange (loss)/gain', 41), (' dividend from other parties', 40), (' other miscellaneous - net (loss)/gain', 38), (' insurance proceeds', 36), (' net other foreign exchange (losses)/gains', 36), ('  government grants', 33), (' foreign exchange gain', 32), (' net ppe disposal (loss)/gain', 31), (' paid by customers - at amortised cost', 29), (' net (loss)/profit on disposal of non-current assets', 27), (' effective portion of changes in fair value of cash flow', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income net foreign exchange gains/losses) , res_fuzz_match = [(' foreign exchange gain', 100), (' net foreign exchange gain', 100), (' net foreign exchange gains/(losses)', 100), (' net foreign exchange (loss)/gain', 83), (' net other foreign exchange (losses)/gains', 75), (' share of jv income', 64), (' sundry income', 58), (' net of tax', 57), (' effective portion of changes in fair value of cash flow', 56), (' other income', 55), (' secondment income (tw recovery)', 52), (' margin charge income', 50), (' net ppe disposal (loss)/gain', 46), (' other miscellaneous - net (loss)/gain', 45), (' quota lease income', 44), (' commission revenue', 43), (' japan recoveries', 43), ('other revenue', 42), ('  government grants', 42), (' paid by customers - at amortised cost', 42), (' profit from discontinued operation', 41), (' other', 40), (' insurance proceeds', 36), (' dividend from other parties', 36), (' net (loss)/profit on disposal of non-current assets', 27)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income finance income , res_fuzz_match = [(' share of jv income', 64), (' sundry income', 58), (' margin charge income', 56), (' other income', 55), (' quota lease income', 50), (' secondment income (tw recovery)', 48), (' net foreign exchange gain', 47), (' commission revenue', 43), (' japan recoveries', 43), (' paid by customers - at amortised cost', 43), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' effective portion of changes in fair value of cash flow', 40), (' insurance proceeds', 36), (' net of tax', 29), (' net (loss)/profit on disposal of non-current assets', 29), (' dividend from other parties', 28), ('other revenue', 25), ('  government grants', 25), (' net foreign exchange gains/(losses)', 24), (' other', 20), (' net foreign exchange (loss)/gain', 14), (' other miscellaneous - net (loss)/gain', 14), (' net other foreign exchange (losses)/gains', 14), (' net ppe disposal (loss)/gain', 8)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs lease interest expense , res_fuzz_match = [(' quota lease income', 62), (' other', 60), ('other revenue', 58), (' net of tax', 57), (' other income', 55), (' insurance proceeds', 45), (' foreign exchange gain', 45), (' share of jv income', 45), (' commission revenue', 43), (' japan recoveries', 43), (' net foreign exchange gain', 39), (' margin charge income', 39), (' net foreign exchange gains/(losses)', 39), (' net foreign exchange (loss)/gain', 39), (' secondment income (tw recovery)', 38), (' other miscellaneous - net (loss)/gain', 38), (' net other foreign exchange (losses)/gains', 38), (' profit from discontinued operation', 37), (' net ppe disposal (loss)/gain', 34), (' net (loss)/profit on disposal of non-current assets', 34), (' sundry income', 33), (' effective portion of changes in fair value of cash flow', 30), (' paid by customers - at amortised cost', 29), (' dividend from other parties', 28), ('  government grants', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs accretion expense , res_fuzz_match = [(' net of tax', 57), ('other revenue', 50), (' commission revenue', 50), (' share of jv income', 45), (' other', 40), (' margin charge income', 39), (' foreign exchange gain', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' other income', 36), (' japan recoveries', 36), (' net foreign exchange gains/(losses)', 36), (' net foreign exchange (loss)/gain', 36), (' net ppe disposal (loss)/gain', 36), (' net (loss)/profit on disposal of non-current assets', 36), (' net other foreign exchange (losses)/gains', 36), (' net foreign exchange gain', 35), (' secondment income (tw recovery)', 34), ('  government grants', 33), (' other miscellaneous - net (loss)/gain', 33), (' sundry income', 33), (' effective portion of changes in fair value of cash flow', 32), (' quota lease income', 31), (' paid by customers - at amortised cost', 30), (' dividend from other parties', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs loss on loan refinancing , res_fuzz_match = [(' share of jv income', 55), (' net ppe disposal (loss)/gain', 54), (' net other foreign exchange (losses)/gains', 51), ('  government grants', 50), (' other miscellaneous - net (loss)/gain', 48), (' net (loss)/profit on disposal of non-current assets', 47), (' quota lease income', 44), (' commission revenue', 43), (' net foreign exchange gain', 43), (' japan recoveries', 43), ('other revenue', 42), (' net foreign exchange (loss)/gain', 42), (' sundry income', 42), (' foreign exchange gain', 41), (' margin charge income', 41), (' other', 40), (' secondment income (tw recovery)', 38), (' insurance proceeds', 36), (' other income', 36), (' effective portion of changes in fair value of cash flow', 34), (' net foreign exchange gains/(losses)', 32), (' net of tax', 29), (' paid by customers - at amortised cost', 29), (' profit from discontinued operation', 26), (' dividend from other parties', 18)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs finance costs , res_fuzz_match = [(' net foreign exchange (loss)/gain', 48), (' margin charge income', 44), (' quota lease income', 44), (' japan recoveries', 43), (' net other foreign exchange (losses)/gains', 43), (' sundry income', 42), (' foreign exchange gain', 40), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net foreign exchange gain', 39), (' profit from discontinued operation', 39), (' net foreign exchange gains/(losses)', 39), (' secondment income (tw recovery)', 37), (' insurance proceeds', 36), (' other income', 36), (' share of jv income', 36), (' paid by customers - at amortised cost', 35), (' net (loss)/profit on disposal of non-current assets', 35), ('other revenue', 33), ('  government grants', 33), (' commission revenue', 29), (' net of tax', 29), (' dividend from other parties', 22), (' net ppe disposal (loss)/gain', 15), (' other miscellaneous - net (loss)/gain', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs total finance incomel cost , res_fuzz_match = [(' share of jv income', 64), (' quota lease income', 62), (' sundry income', 58), (' net of tax', 57), (' margin charge income', 56), (' other income', 55), (' secondment income (tw recovery)', 53), (' net foreign exchange gains/(losses)', 50), (' net foreign exchange gain', 46), (' paid by customers - at amortised cost', 46), (' net other foreign exchange (losses)/gains', 44), (' japan recoveries', 43), (' net foreign exchange (loss)/gain', 42), (' foreign exchange gain', 40), (' other', 40), (' profit from discontinued operation', 39), (' dividend from other parties', 37), (' insurance proceeds', 36), (' other miscellaneous - net (loss)/gain', 34), ('other revenue', 33), (' commission revenue', 33), ('  government grants', 33), (' effective portion of changes in fair value of cash flow', 31), (' net ppe disposal (loss)/gain', 28), (' net (loss)/profit on disposal of non-current assets', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income interest received - bank , res_fuzz_match = [(' share of jv income', 64), (' other', 60), ('other revenue', 58), (' sundry income', 58), (' other income', 55), (' secondment income (tw recovery)', 52), (' commission revenue', 50), (' margin charge income', 50), (' net foreign exchange gain', 47), (' dividend from other parties', 44), (' quota lease income', 44), (' net of tax', 43), (' japan recoveries', 43), (' net foreign exchange gains/(losses)', 42), (' net foreign exchange (loss)/gain', 42), (' profit from discontinued operation', 41), (' foreign exchange gain', 39), (' paid by customers - at amortised cost', 38), (' insurance proceeds', 36), (' net ppe disposal (loss)/gain', 36), (' other miscellaneous - net (loss)/gain', 35), ('  government grants', 33), (' net (loss)/profit on disposal of non-current assets', 25), (' effective portion of changes in fair value of cash flow', 23), (' net other foreign exchange (losses)/gains', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income interest received - loan , res_fuzz_match = [(' share of jv income', 64), (' other', 60), ('other revenue', 58), (' sundry income', 58), (' other income', 55), (' secondment income (tw recovery)', 52), (' net ppe disposal (loss)/gain', 51), (' commission revenue', 50), (' margin charge income', 50), (' net foreign exchange (loss)/gain', 50), (' other miscellaneous - net (loss)/gain', 47), (' net foreign exchange gain', 46), (' dividend from other parties', 44), (' quota lease income', 44), (' net of tax', 43), (' japan recoveries', 43), (' profit from discontinued operation', 41), (' net foreign exchange gains/(losses)', 41), (' foreign exchange gain', 39), (' paid by customers - at amortised cost', 38), (' insurance proceeds', 36), (' net other foreign exchange (losses)/gains', 34), ('  government grants', 33), (' effective portion of changes in fair value of cash flow', 26), (' net (loss)/profit on disposal of non-current assets', 18)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income sublease interest income , res_fuzz_match = [(' other income', 73), (' share of jv income', 73), (' other', 60), (' sundry income', 58), (' margin charge income', 56), (' quota lease income', 56), (' commission revenue', 50), (' secondment income (tw recovery)', 48), (' net of tax', 43), ('other revenue', 42), (' paid by customers - at amortised cost', 42), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' dividend from other parties', 40), (' other miscellaneous - net (loss)/gain', 38), (' insurance proceeds', 36), (' japan recoveries', 36), (' net foreign exchange gains/(losses)', 32), (' net (loss)/profit on disposal of non-current assets', 31), (' net foreign exchange gain', 30), (' net ppe disposal (loss)/gain', 30), (' effective portion of changes in fair value of cash flow', 28), (' net foreign exchange (loss)/gain', 26), ('  government grants', 25), (' net other foreign exchange (losses)/gains', 23)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income share of jvinterest received/paid) , res_fuzz_match = [(' share of jv income', 73), (' other', 60), ('other revenue', 58), (' sundry income', 58), (' commission revenue', 57), (' secondment income (tw recovery)', 57), (' other income', 55), (' margin charge income', 50), (' net foreign exchange gain', 46), (' quota lease income', 44), (' net of tax', 43), (' japan recoveries', 43), (' profit from discontinued operation', 41), (' net foreign exchange gains/(losses)', 41), (' net foreign exchange (loss)/gain', 41), (' dividend from other parties', 40), (' other miscellaneous - net (loss)/gain', 38), (' insurance proceeds', 36), (' net other foreign exchange (losses)/gains', 36), ('  government grants', 33), (' foreign exchange gain', 32), (' net ppe disposal (loss)/gain', 31), (' paid by customers - at amortised cost', 29), (' net (loss)/profit on disposal of non-current assets', 27), (' effective portion of changes in fair value of cash flow', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income net foreign exchange gains/losses) , res_fuzz_match = [(' foreign exchange gain', 100), (' net foreign exchange gain', 100), (' net foreign exchange gains/(losses)', 100), (' net foreign exchange (loss)/gain', 83), (' net other foreign exchange (losses)/gains', 75), (' share of jv income', 64), (' sundry income', 58), (' net of tax', 57), (' effective portion of changes in fair value of cash flow', 56), (' other income', 55), (' secondment income (tw recovery)', 52), (' margin charge income', 50), (' net ppe disposal (loss)/gain', 46), (' other miscellaneous - net (loss)/gain', 45), (' quota lease income', 44), (' commission revenue', 43), (' japan recoveries', 43), ('other revenue', 42), ('  government grants', 42), (' paid by customers - at amortised cost', 42), (' profit from discontinued operation', 41), (' other', 40), (' insurance proceeds', 36), (' dividend from other parties', 36), (' net (loss)/profit on disposal of non-current assets', 27)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance income finance income , res_fuzz_match = [(' share of jv income', 64), (' sundry income', 58), (' margin charge income', 56), (' other income', 55), (' quota lease income', 50), (' secondment income (tw recovery)', 48), (' net foreign exchange gain', 47), (' commission revenue', 43), (' japan recoveries', 43), (' paid by customers - at amortised cost', 43), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' effective portion of changes in fair value of cash flow', 40), (' insurance proceeds', 36), (' net of tax', 29), (' net (loss)/profit on disposal of non-current assets', 29), (' dividend from other parties', 28), ('other revenue', 25), ('  government grants', 25), (' net foreign exchange gains/(losses)', 24), (' other', 20), (' net foreign exchange (loss)/gain', 14), (' other miscellaneous - net (loss)/gain', 14), (' net other foreign exchange (losses)/gains', 14), (' net ppe disposal (loss)/gain', 8)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs lease interest expense , res_fuzz_match = [(' quota lease income', 62), (' other', 60), ('other revenue', 58), (' net of tax', 57), (' other income', 55), (' insurance proceeds', 45), (' foreign exchange gain', 45), (' share of jv income', 45), (' commission revenue', 43), (' japan recoveries', 43), (' net foreign exchange gain', 39), (' margin charge income', 39), (' net foreign exchange gains/(losses)', 39), (' net foreign exchange (loss)/gain', 39), (' secondment income (tw recovery)', 38), (' other miscellaneous - net (loss)/gain', 38), (' net other foreign exchange (losses)/gains', 38), (' profit from discontinued operation', 37), (' net ppe disposal (loss)/gain', 34), (' net (loss)/profit on disposal of non-current assets', 34), (' sundry income', 33), (' effective portion of changes in fair value of cash flow', 30), (' paid by customers - at amortised cost', 29), (' dividend from other parties', 28), ('  government grants', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs accretion expense , res_fuzz_match = [(' net of tax', 57), ('other revenue', 50), (' commission revenue', 50), (' share of jv income', 45), (' other', 40), (' margin charge income', 39), (' foreign exchange gain', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' other income', 36), (' japan recoveries', 36), (' net foreign exchange gains/(losses)', 36), (' net foreign exchange (loss)/gain', 36), (' net ppe disposal (loss)/gain', 36), (' net (loss)/profit on disposal of non-current assets', 36), (' net other foreign exchange (losses)/gains', 36), (' net foreign exchange gain', 35), (' secondment income (tw recovery)', 34), ('  government grants', 33), (' other miscellaneous - net (loss)/gain', 33), (' sundry income', 33), (' effective portion of changes in fair value of cash flow', 32), (' quota lease income', 31), (' paid by customers - at amortised cost', 30), (' dividend from other parties', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs loss on loan refinancing , res_fuzz_match = [(' share of jv income', 55), (' net ppe disposal (loss)/gain', 54), (' net other foreign exchange (losses)/gains', 51), ('  government grants', 50), (' other miscellaneous - net (loss)/gain', 48), (' net (loss)/profit on disposal of non-current assets', 47), (' quota lease income', 44), (' commission revenue', 43), (' net foreign exchange gain', 43), (' japan recoveries', 43), ('other revenue', 42), (' net foreign exchange (loss)/gain', 42), (' sundry income', 42), (' foreign exchange gain', 41), (' margin charge income', 41), (' other', 40), (' secondment income (tw recovery)', 38), (' insurance proceeds', 36), (' other income', 36), (' effective portion of changes in fair value of cash flow', 34), (' net foreign exchange gains/(losses)', 32), (' net of tax', 29), (' paid by customers - at amortised cost', 29), (' profit from discontinued operation', 26), (' dividend from other parties', 18)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs finance costs , res_fuzz_match = [(' net foreign exchange (loss)/gain', 48), (' margin charge income', 44), (' quota lease income', 44), (' japan recoveries', 43), (' net other foreign exchange (losses)/gains', 43), (' sundry income', 42), (' foreign exchange gain', 40), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net foreign exchange gain', 39), (' profit from discontinued operation', 39), (' net foreign exchange gains/(losses)', 39), (' secondment income (tw recovery)', 37), (' insurance proceeds', 36), (' other income', 36), (' share of jv income', 36), (' paid by customers - at amortised cost', 35), (' net (loss)/profit on disposal of non-current assets', 35), ('other revenue', 33), ('  government grants', 33), (' commission revenue', 29), (' net of tax', 29), (' dividend from other parties', 22), (' net ppe disposal (loss)/gain', 15), (' other miscellaneous - net (loss)/gain', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = finance costs total finance incomel cost , res_fuzz_match = [(' share of jv income', 64), (' quota lease income', 62), (' sundry income', 58), (' net of tax', 57), (' margin charge income', 56), (' other income', 55), (' secondment income (tw recovery)', 53), (' net foreign exchange gains/(losses)', 50), (' net foreign exchange gain', 46), (' paid by customers - at amortised cost', 46), (' net other foreign exchange (losses)/gains', 44), (' japan recoveries', 43), (' net foreign exchange (loss)/gain', 42), (' foreign exchange gain', 40), (' other', 40), (' profit from discontinued operation', 39), (' dividend from other parties', 37), (' insurance proceeds', 36), (' other miscellaneous - net (loss)/gain', 34), ('other revenue', 33), (' commission revenue', 33), ('  government grants', 33), (' effective portion of changes in fair value of cash flow', 31), (' net ppe disposal (loss)/gain', 28), (' net (loss)/profit on disposal of non-current assets', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 15], 'score': [100, 100], 'value': [-2485.0, -951.0], 'label': ['Finance income Net foreign exchange gains/losses)', 'Finance income Net foreign exchange gains/losses)'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = lng , res_fuzz_match = [('  government grants', 67), (' foreign exchange gain', 67), (' net foreign exchange gain', 67), (' effective portion of changes in fair value of cash flow', 67), (' net foreign exchange gains/(losses)', 67), (' net foreign exchange (loss)/gain', 67), (' net other foreign exchange (losses)/gains', 67), (' net ppe disposal (loss)/gain', 40), ('other revenue', 33), (' commission revenue', 33), (' insurance proceeds', 33), (' dividend from other parties', 33), (' other income', 33), (' profit from discontinued operation', 33), (' net of tax', 33), (' share of jv income', 33), (' secondment income (tw recovery)', 33), (' japan recoveries', 33), (' margin charge income', 33), (' other miscellaneous - net (loss)/gain', 33), (' quota lease income', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 33), (' other', 0), (' paid by customers - at amortised cost', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = condensate , res_fuzz_match = [(' secondment income (tw recovery)', 71), (' profit from discontinued operation', 57), (' paid by customers - at amortised cost', 55), (' japan recoveries', 46), (' commission revenue', 43), (' dividend from other parties', 43), (' other', 40), (' other income', 40), (' share of jv income', 40), (' margin charge income', 40), (' quota lease income', 40), (' sundry income', 40), (' net foreign exchange gains/(losses)', 36), (' net of tax', 33), ('other revenue', 29), ('  government grants', 29), (' insurance proceeds', 29), (' foreign exchange gain', 29), (' net foreign exchange gain', 29), (' effective portion of changes in fair value of cash flow', 29), (' net foreign exchange (loss)/gain', 29), (' net ppe disposal (loss)/gain', 29), (' other miscellaneous - net (loss)/gain', 29), (' net (loss)/profit on disposal of non-current assets', 29), (' net other foreign exchange (losses)/gains', 29)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = lng , res_fuzz_match = [('  government grants', 67), (' foreign exchange gain', 67), (' net foreign exchange gain', 67), (' effective portion of changes in fair value of cash flow', 67), (' net foreign exchange gains/(losses)', 67), (' net foreign exchange (loss)/gain', 67), (' net other foreign exchange (losses)/gains', 67), (' net ppe disposal (loss)/gain', 40), ('other revenue', 33), (' commission revenue', 33), (' insurance proceeds', 33), (' dividend from other parties', 33), (' other income', 33), (' profit from discontinued operation', 33), (' net of tax', 33), (' share of jv income', 33), (' secondment income (tw recovery)', 33), (' japan recoveries', 33), (' margin charge income', 33), (' other miscellaneous - net (loss)/gain', 33), (' quota lease income', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 33), (' other', 0), (' paid by customers - at amortised cost', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = condensate , res_fuzz_match = [(' secondment income (tw recovery)', 71), (' profit from discontinued operation', 57), (' paid by customers - at amortised cost', 55), (' japan recoveries', 46), (' commission revenue', 43), (' dividend from other parties', 43), (' other', 40), (' other income', 40), (' share of jv income', 40), (' margin charge income', 40), (' quota lease income', 40), (' sundry income', 40), (' net foreign exchange gains/(losses)', 36), (' net of tax', 33), ('other revenue', 29), ('  government grants', 29), (' insurance proceeds', 29), (' foreign exchange gain', 29), (' net foreign exchange gain', 29), (' effective portion of changes in fair value of cash flow', 29), (' net foreign exchange (loss)/gain', 29), (' net ppe disposal (loss)/gain', 29), (' other miscellaneous - net (loss)/gain', 29), (' net (loss)/profit on disposal of non-current assets', 29), (' net other foreign exchange (losses)/gains', 29)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = inventories , res_fuzz_match = [(' effective portion of changes in fair value of cash flow', 56), (' secondment income (tw recovery)', 53), (' japan recoveries', 53), (' other', 50), (' profit from discontinued operation', 47), (' commission revenue', 44), ('  government grants', 44), (' dividend from other parties', 44), (' other income', 43), (' net of tax', 43), (' share of jv income', 43), (' quota lease income', 43), (' sundry income', 43), ('other revenue', 40), (' net foreign exchange gains/(losses)', 38), (' foreign exchange gain', 36), (' net foreign exchange gain', 36), (' net foreign exchange (loss)/gain', 36), (' net ppe disposal (loss)/gain', 36), (' other miscellaneous - net (loss)/gain', 36), (' net other foreign exchange (losses)/gains', 36), (' margin charge income', 35), (' insurance proceeds', 33), (' paid by customers - at amortised cost', 33), (' net (loss)/profit on disposal of non-current assets', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = inventories , res_fuzz_match = [(' effective portion of changes in fair value of cash flow', 56), (' secondment income (tw recovery)', 53), (' japan recoveries', 53), (' other', 50), (' profit from discontinued operation', 47), (' commission revenue', 44), ('  government grants', 44), (' dividend from other parties', 44), (' other income', 43), (' net of tax', 43), (' share of jv income', 43), (' quota lease income', 43), (' sundry income', 43), ('other revenue', 40), (' net foreign exchange gains/(losses)', 38), (' foreign exchange gain', 36), (' net foreign exchange gain', 36), (' net foreign exchange (loss)/gain', 36), (' net ppe disposal (loss)/gain', 36), (' other miscellaneous - net (loss)/gain', 36), (' net other foreign exchange (losses)/gains', 36), (' margin charge income', 35), (' insurance proceeds', 33), (' paid by customers - at amortised cost', 33), (' net (loss)/profit on disposal of non-current assets', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets prepayments , res_fuzz_match = [(' net (loss)/profit on disposal of non-current assets', 67), (' net of tax', 57), (' insurance proceeds', 45), (' paid by customers - at amortised cost', 41), (' other', 40), (' other miscellaneous - net (loss)/gain', 40), (' profit from discontinued operation', 38), (' quota lease income', 38), (' commission revenue', 37), (' dividend from other parties', 35), (' net foreign exchange gain', 35), (' net foreign exchange gains/(losses)', 35), (' net foreign exchange (loss)/gain', 35), (' net ppe disposal (loss)/gain', 35), (' net other foreign exchange (losses)/gains', 35), ('other revenue', 33), (' foreign exchange gain', 32), (' effective portion of changes in fair value of cash flow', 30), (' secondment income (tw recovery)', 29), (' other income', 27), (' share of jv income', 27), ('  government grants', 25), (' japan recoveries', 22), (' margin charge income', 19), (' sundry income', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets interest receivable , res_fuzz_match = [(' other', 60), (' net of tax', 57), (' secondment income (tw recovery)', 52), (' net (loss)/profit on disposal of non-current assets', 51), ('other revenue', 50), (' quota lease income', 50), (' insurance proceeds', 45), (' other income', 45), (' share of jv income', 45), (' japan recoveries', 43), (' commission revenue', 40), (' foreign exchange gain', 40), (' net other foreign exchange (losses)/gains', 38), (' net foreign exchange gain', 35), ('  government grants', 33), (' profit from discontinued operation', 33), (' sundry income', 33), (' effective portion of changes in fair value of cash flow', 31), (' net foreign exchange gains/(losses)', 31), (' paid by customers - at amortised cost', 31), (' net foreign exchange (loss)/gain', 31), (' other miscellaneous - net (loss)/gain', 30), (' net ppe disposal (loss)/gain', 25), (' margin charge income', 22), (' dividend from other parties', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets bank guarantee , res_fuzz_match = [('  government grants', 58), (' net of tax', 57), (' net (loss)/profit on disposal of non-current assets', 54), (' foreign exchange gain', 50), (' other miscellaneous - net (loss)/gain', 47), (' net foreign exchange gain', 44), (' net foreign exchange (loss)/gain', 44), (' net other foreign exchange (losses)/gains', 44), (' other', 40), (' quota lease income', 38), (' effective portion of changes in fair value of cash flow', 37), (' net foreign exchange gains/(losses)', 37), (' insurance proceeds', 36), (' japan recoveries', 36), (' net ppe disposal (loss)/gain', 35), ('other revenue', 33), (' dividend from other parties', 32), (' share of jv income', 32), (' secondment income (tw recovery)', 32), (' commission revenue', 29), (' other income', 27), (' profit from discontinued operation', 26), (' paid by customers - at amortised cost', 25), (' margin charge income', 24), (' sundry income', 20)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets rental bond , res_fuzz_match = [(' net of tax', 57), (' net (loss)/profit on disposal of non-current assets', 57), ('other revenue', 50), (' commission revenue', 43), (' net foreign exchange gain', 41), (' net foreign exchange gains/(losses)', 40), (' net foreign exchange (loss)/gain', 40), (' quota lease income', 38), (' net other foreign exchange (losses)/gains', 37), (' share of jv income', 36), (' other miscellaneous - net (loss)/gain', 36), (' foreign exchange gain', 35), (' effective portion of changes in fair value of cash flow', 32), (' profit from discontinued operation', 32), (' net ppe disposal (loss)/gain', 32), (' japan recoveries', 31), (' other income', 29), (' secondment income (tw recovery)', 28), (' margin charge income', 28), (' insurance proceeds', 27), ('  government grants', 25), (' other', 25), (' paid by customers - at amortised cost', 25), (' sundry income', 25), (' dividend from other parties', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets related party receivable , res_fuzz_match = [(' net of tax', 57), (' japan recoveries', 54), ('other revenue', 48), (' secondment income (tw recovery)', 48), (' net (loss)/profit on disposal of non-current assets', 48), (' insurance proceeds', 45), (' dividend from other parties', 44), (' net foreign exchange gain', 43), (' margin charge income', 41), (' commission revenue', 40), (' other', 40), (' net foreign exchange gains/(losses)', 39), (' paid by customers - at amortised cost', 39), (' net foreign exchange (loss)/gain', 39), (' quota lease income', 38), (' share of jv income', 36), (' other miscellaneous - net (loss)/gain', 36), (' foreign exchange gain', 35), (' net other foreign exchange (losses)/gains', 35), (' profit from discontinued operation', 33), (' sundry income', 33), (' effective portion of changes in fair value of cash flow', 31), (' other income', 27), (' net ppe disposal (loss)/gain', 26), ('  government grants', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets share of jv prepayments , res_fuzz_match = [(' net of tax', 57), (' net (loss)/profit on disposal of non-current assets', 56), (' insurance proceeds', 55), (' share of jv income', 55), (' commission revenue', 43), (' net foreign exchange gain', 41), (' foreign exchange gain', 40), (' other', 40), (' other miscellaneous - net (loss)/gain', 39), (' effective portion of changes in fair value of cash flow', 38), (' quota lease income', 38), (' net other foreign exchange (losses)/gains', 38), (' net ppe disposal (loss)/gain', 36), (' net foreign exchange (loss)/gain', 35), ('other revenue', 33), (' dividend from other parties', 33), (' margin charge income', 33), (' profit from discontinued operation', 32), (' secondment income (tw recovery)', 32), (' net foreign exchange gains/(losses)', 31), (' japan recoveries', 29), (' other income', 27), ('  government grants', 25), (' sundry income', 25), (' paid by customers - at amortised cost', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets current investments , res_fuzz_match = [(' net of tax', 57), (' net (loss)/profit on disposal of non-current assets', 53), (' secondment income (tw recovery)', 46), (' share of jv income', 45), (' net foreign exchange gain', 44), (' quota lease income', 44), (' commission revenue', 43), ('other revenue', 42), (' other miscellaneous - net (loss)/gain', 42), (' sundry income', 42), (' other', 40), (' margin charge income', 39), (' net foreign exchange gains/(losses)', 39), (' net other foreign exchange (losses)/gains', 39), (' net foreign exchange (loss)/gain', 38), (' other income', 36), (' insurance proceeds', 35), (' foreign exchange gain', 35), (' profit from discontinued operation', 35), (' net ppe disposal (loss)/gain', 34), ('  government grants', 33), (' effective portion of changes in fair value of cash flow', 32), (' japan recoveries', 29), (' paid by customers - at amortised cost', 27), (' dividend from other parties', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets , res_fuzz_match = [(' net (loss)/profit on disposal of non-current assets', 87), (' net of tax', 57), (' paid by customers - at amortised cost', 46), (' other miscellaneous - net (loss)/gain', 46), (' net other foreign exchange (losses)/gains', 46), (' profit from discontinued operation', 40), (' foreign exchange gain', 38), (' net foreign exchange gain', 38), (' net foreign exchange gains/(losses)', 38), (' net foreign exchange (loss)/gain', 38), (' insurance proceeds', 36), ('other revenue', 35), (' commission revenue', 31), (' dividend from other parties', 31), (' effective portion of changes in fair value of cash flow', 31), (' secondment income (tw recovery)', 31), (' net ppe disposal (loss)/gain', 31), (' quota lease income', 31), (' share of jv income', 27), ('  government grants', 25), (' japan recoveries', 25), (' margin charge income', 25), (' other income', 21), (' other', 20), (' sundry income', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets prepayments , res_fuzz_match = [(' net (loss)/profit on disposal of non-current assets', 67), (' net of tax', 57), (' insurance proceeds', 45), (' paid by customers - at amortised cost', 41), (' other', 40), (' other miscellaneous - net (loss)/gain', 40), (' profit from discontinued operation', 38), (' quota lease income', 38), (' commission revenue', 37), (' dividend from other parties', 35), (' net foreign exchange gain', 35), (' net foreign exchange gains/(losses)', 35), (' net foreign exchange (loss)/gain', 35), (' net ppe disposal (loss)/gain', 35), (' net other foreign exchange (losses)/gains', 35), ('other revenue', 33), (' foreign exchange gain', 32), (' effective portion of changes in fair value of cash flow', 30), (' secondment income (tw recovery)', 29), (' other income', 27), (' share of jv income', 27), ('  government grants', 25), (' japan recoveries', 22), (' margin charge income', 19), (' sundry income', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets interest receivable , res_fuzz_match = [(' other', 60), (' net of tax', 57), (' secondment income (tw recovery)', 52), (' net (loss)/profit on disposal of non-current assets', 51), ('other revenue', 50), (' quota lease income', 50), (' insurance proceeds', 45), (' other income', 45), (' share of jv income', 45), (' japan recoveries', 43), (' commission revenue', 40), (' foreign exchange gain', 40), (' net other foreign exchange (losses)/gains', 38), (' net foreign exchange gain', 35), ('  government grants', 33), (' profit from discontinued operation', 33), (' sundry income', 33), (' effective portion of changes in fair value of cash flow', 31), (' net foreign exchange gains/(losses)', 31), (' paid by customers - at amortised cost', 31), (' net foreign exchange (loss)/gain', 31), (' other miscellaneous - net (loss)/gain', 30), (' net ppe disposal (loss)/gain', 25), (' margin charge income', 22), (' dividend from other parties', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets bank guarantee , res_fuzz_match = [('  government grants', 58), (' net of tax', 57), (' net (loss)/profit on disposal of non-current assets', 54), (' foreign exchange gain', 50), (' other miscellaneous - net (loss)/gain', 47), (' net foreign exchange gain', 44), (' net foreign exchange (loss)/gain', 44), (' net other foreign exchange (losses)/gains', 44), (' other', 40), (' quota lease income', 38), (' effective portion of changes in fair value of cash flow', 37), (' net foreign exchange gains/(losses)', 37), (' insurance proceeds', 36), (' japan recoveries', 36), (' net ppe disposal (loss)/gain', 35), ('other revenue', 33), (' dividend from other parties', 32), (' share of jv income', 32), (' secondment income (tw recovery)', 32), (' commission revenue', 29), (' other income', 27), (' profit from discontinued operation', 26), (' paid by customers - at amortised cost', 25), (' margin charge income', 24), (' sundry income', 20)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets rental bond , res_fuzz_match = [(' net of tax', 57), (' net (loss)/profit on disposal of non-current assets', 57), ('other revenue', 50), (' commission revenue', 43), (' net foreign exchange gain', 41), (' net foreign exchange gains/(losses)', 40), (' net foreign exchange (loss)/gain', 40), (' quota lease income', 38), (' net other foreign exchange (losses)/gains', 37), (' share of jv income', 36), (' other miscellaneous - net (loss)/gain', 36), (' foreign exchange gain', 35), (' effective portion of changes in fair value of cash flow', 32), (' profit from discontinued operation', 32), (' net ppe disposal (loss)/gain', 32), (' japan recoveries', 31), (' other income', 29), (' secondment income (tw recovery)', 28), (' margin charge income', 28), (' insurance proceeds', 27), ('  government grants', 25), (' other', 25), (' paid by customers - at amortised cost', 25), (' sundry income', 25), (' dividend from other parties', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets related party receivable , res_fuzz_match = [(' net of tax', 57), (' japan recoveries', 54), ('other revenue', 48), (' secondment income (tw recovery)', 48), (' net (loss)/profit on disposal of non-current assets', 48), (' insurance proceeds', 45), (' dividend from other parties', 44), (' net foreign exchange gain', 43), (' margin charge income', 41), (' commission revenue', 40), (' other', 40), (' net foreign exchange gains/(losses)', 39), (' paid by customers - at amortised cost', 39), (' net foreign exchange (loss)/gain', 39), (' quota lease income', 38), (' share of jv income', 36), (' other miscellaneous - net (loss)/gain', 36), (' foreign exchange gain', 35), (' net other foreign exchange (losses)/gains', 35), (' profit from discontinued operation', 33), (' sundry income', 33), (' effective portion of changes in fair value of cash flow', 31), (' other income', 27), (' net ppe disposal (loss)/gain', 26), ('  government grants', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets share of jv prepayments , res_fuzz_match = [(' net of tax', 57), (' net (loss)/profit on disposal of non-current assets', 56), (' insurance proceeds', 55), (' share of jv income', 55), (' commission revenue', 43), (' net foreign exchange gain', 41), (' foreign exchange gain', 40), (' other', 40), (' other miscellaneous - net (loss)/gain', 39), (' effective portion of changes in fair value of cash flow', 38), (' quota lease income', 38), (' net other foreign exchange (losses)/gains', 38), (' net ppe disposal (loss)/gain', 36), (' net foreign exchange (loss)/gain', 35), ('other revenue', 33), (' dividend from other parties', 33), (' margin charge income', 33), (' profit from discontinued operation', 32), (' secondment income (tw recovery)', 32), (' net foreign exchange gains/(losses)', 31), (' japan recoveries', 29), (' other income', 27), ('  government grants', 25), (' sundry income', 25), (' paid by customers - at amortised cost', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets current investments , res_fuzz_match = [(' net of tax', 57), (' net (loss)/profit on disposal of non-current assets', 53), (' secondment income (tw recovery)', 46), (' share of jv income', 45), (' net foreign exchange gain', 44), (' quota lease income', 44), (' commission revenue', 43), ('other revenue', 42), (' other miscellaneous - net (loss)/gain', 42), (' sundry income', 42), (' other', 40), (' margin charge income', 39), (' net foreign exchange gains/(losses)', 39), (' net other foreign exchange (losses)/gains', 39), (' net foreign exchange (loss)/gain', 38), (' other income', 36), (' insurance proceeds', 35), (' foreign exchange gain', 35), (' profit from discontinued operation', 35), (' net ppe disposal (loss)/gain', 34), ('  government grants', 33), (' effective portion of changes in fair value of cash flow', 32), (' japan recoveries', 29), (' paid by customers - at amortised cost', 27), (' dividend from other parties', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = current assets , res_fuzz_match = [(' net (loss)/profit on disposal of non-current assets', 87), (' net of tax', 57), (' paid by customers - at amortised cost', 46), (' other miscellaneous - net (loss)/gain', 46), (' net other foreign exchange (losses)/gains', 46), (' profit from discontinued operation', 40), (' foreign exchange gain', 38), (' net foreign exchange gain', 38), (' net foreign exchange gains/(losses)', 38), (' net foreign exchange (loss)/gain', 38), (' insurance proceeds', 36), ('other revenue', 35), (' commission revenue', 31), (' dividend from other parties', 31), (' effective portion of changes in fair value of cash flow', 31), (' secondment income (tw recovery)', 31), (' net ppe disposal (loss)/gain', 31), (' quota lease income', 31), (' share of jv income', 27), ('  government grants', 25), (' japan recoveries', 25), (' margin charge income', 25), (' other income', 21), (' other', 20), (' sundry income', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' japan recoveries', 50), (' insurance proceeds', 40), (' other income', 36), (' share of jv income', 36), (' margin charge income', 36), (' quota lease income', 36), (' sundry income', 36), ('other revenue', 33), (' commission revenue', 33), (' foreign exchange gain', 33), (' dividend from other parties', 33), (' net foreign exchange gain', 33), (' effective portion of changes in fair value of cash flow', 33), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' net foreign exchange gains/(losses)', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' net other foreign exchange (losses)/gains', 33), (' net (loss)/profit on disposal of non-current assets', 22), (' other', 20), ('  government grants', 17), (' net of tax', 17), (' net ppe disposal (loss)/gain', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 15], 'score': [87, 87], 'value': [252815.0, 188453.0], 'label': ['Current assets ', 'Current assets '], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:43+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-04-23 13:59:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:43+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-04-23 13:59:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:43+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-04-23 13:59:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [('NULL', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('NULL', 22)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('NULL', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [('NULL', 18)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('NULL', 7)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('NULL', 8)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [('NULL', 13)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [('NULL', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('NULL', 6)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('NULL', 6)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [('NULL', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('NULL', 22)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('NULL', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [('NULL', 18)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('NULL', 7)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('NULL', 8)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [('NULL', 13)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [('NULL', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('NULL', 6)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('NULL', 6)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-04-23 13:59:43+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-04-23 13:59:43+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-04-23 13:59:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('current tax', 35), (' income tax benefit', 34), (' tax (expense)/benefit', 33), ('provision for taxation previous year', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 19), ('prior year ', 18), (' income tax expense', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('current tax', 33), ('provision for taxation previous year', 33), (' income tax benefit', 33), ('amount transferred to retained earnings', 31), (' income tax', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 25), (' income tax expense', 25), ('deferred tax', 20), (' tax (expense)/benefit', 16), ('prior year ', 10), ('earlier year', 9)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [('amount transferred to retained earnings', 31), (' income tax benefit', 29), ('deferred tax', 24), (' income tax expense', 24), (' income tax', 24), (' income tax benefit/(expense)', 24), (' tax (expense)/benefit', 23), ('earlier year', 22), ('minimum alternate tax credit entitlement', 21), ('provision for taxation previous year', 19), ('current tax', 17), ('prior year ', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 34), (' income tax expense', 29), ('prior year ', 27), ('current tax', 26), ('minimum alternate tax credit entitlement', 23), (' income tax benefit', 21), (' tax (expense)/benefit', 20), ('deferred tax', 19), (' income tax', 19), ('earlier year', 17), (' income tax benefit/(expense)', 17), ('amount transferred to retained earnings', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('current tax', 25), (' income tax', 14), ('prior year ', 13), ('amount transferred to retained earnings', 12), ('provision for taxation previous year', 12), ('minimum alternate tax credit entitlement', 11), (' income tax expense', 10), (' income tax benefit', 9), (' tax (expense)/benefit', 9), (' income tax benefit/(expense)', 7), ('deferred tax', 0), ('earlier year', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 22), ('provision for taxation previous year', 22), (' income tax benefit', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('provision for taxation previous year', 34), ('amount transferred to retained earnings', 31), ('deferred tax', 29), (' income tax', 29), ('current tax', 26), ('earlier year', 25), (' income tax benefit', 21), ('prior year ', 18), ('minimum alternate tax credit entitlement', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [(' income tax benefit', 39), (' income tax', 35), ('amount transferred to retained earnings', 34), ('current tax', 32), (' tax (expense)/benefit', 31), ('provision for taxation previous year', 28), (' income tax expense', 27), ('deferred tax', 26), (' income tax benefit/(expense)', 26), ('earlier year', 23), ('minimum alternate tax credit entitlement', 17), ('prior year ', 8)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('deferred tax', 40), (' income tax expense', 37), ('provision for taxation previous year', 35), ('earlier year', 35), ('prior year ', 29), (' income tax benefit', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('current tax', 27), (' income tax benefit/(expense)', 23), (' income tax', 20), ('amount transferred to retained earnings', 16)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), (' tax (expense)/benefit', 27), ('amount transferred to retained earnings', 21), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 18), ('prior year ', 18), ('current tax', 17), ('earlier year', 17), ('provision for taxation previous year', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' income tax expense', 69), (' income tax benefit/(expense)', 54), (' tax (expense)/benefit', 52), (' income tax benefit', 40), ('current tax', 33), ('minimum alternate tax credit entitlement', 31), ('amount transferred to retained earnings', 30), ('deferred tax', 27), (' income tax', 27), ('prior year ', 26), ('provision for taxation previous year', 24), ('earlier year', 16)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [(' income tax benefit', 63), (' income tax expense', 59), (' income tax', 59), (' income tax benefit/(expense)', 57), (' tax (expense)/benefit', 39), ('current tax', 34), ('deferred tax', 30), ('prior year ', 29), ('minimum alternate tax credit entitlement', 28), ('amount transferred to retained earnings', 22), ('provision for taxation previous year', 21), ('earlier year', 13)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [('provision for taxation previous year', 34), ('amount transferred to retained earnings', 32), (' income tax benefit', 31), ('current tax', 30), (' tax (expense)/benefit', 30), ('prior year ', 27), (' income tax expense', 27), (' income tax benefit/(expense)', 27), ('minimum alternate tax credit entitlement', 24), (' income tax', 23), ('earlier year', 17), ('deferred tax', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' income tax benefit', 67), ('provision for taxation previous year', 59), (' income tax expense', 58), (' income tax', 58), (' income tax benefit/(expense)', 57), (' tax (expense)/benefit', 50), ('deferred tax', 45), ('current tax', 42), ('minimum alternate tax credit entitlement', 41), ('prior year ', 25), ('amount transferred to retained earnings', 24), ('earlier year', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' income tax benefit/(expense)', 100), (' tax (expense)/benefit', 86), (' income tax benefit', 83), (' income tax expense', 80), ('minimum alternate tax credit entitlement', 57), (' income tax', 55), ('deferred tax', 42), ('current tax', 40), ('amount transferred to retained earnings', 31), ('prior year ', 29), ('provision for taxation previous year', 23), ('earlier year', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 55), ('current tax', 40), ('earlier year', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29), ('amount transferred to retained earnings', 26)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [('provision for taxation previous year', 37), (' income tax benefit/(expense)', 37), (' tax (expense)/benefit', 37), ('minimum alternate tax credit entitlement', 35), ('amount transferred to retained earnings', 35), (' income tax benefit', 34), (' income tax expense', 31), ('earlier year', 29), ('deferred tax', 27), ('current tax', 26), ('prior year ', 26), (' income tax', 22)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [(' income tax expense', 30), ('amount transferred to retained earnings', 24), ('prior year ', 24), ('provision for taxation previous year', 23), ('minimum alternate tax credit entitlement', 22), (' income tax benefit', 22), ('current tax', 21), (' income tax', 21), (' tax (expense)/benefit', 21), ('earlier year', 20), (' income tax benefit/(expense)', 20), ('deferred tax', 18)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('provision for taxation previous year', 51), ('earlier year', 33), ('prior year ', 31), (' income tax expense', 31), ('current tax', 30), ('minimum alternate tax credit entitlement', 30), (' income tax benefit', 30), (' tax (expense)/benefit', 30), ('deferred tax', 28), (' income tax benefit/(expense)', 27), (' income tax', 24), ('amount transferred to retained earnings', 21)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 51), ('prior year ', 35), (' tax (expense)/benefit', 34), ('minimum alternate tax credit entitlement', 33), (' income tax expense', 32), ('current tax', 31), (' income tax benefit', 31), (' income tax benefit/(expense)', 31), ('earlier year', 30), ('deferred tax', 24), (' income tax', 24), ('amount transferred to retained earnings', 21)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [('provision for taxation previous year', 29), (' income tax', 28), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), (' income tax expense', 22), (' income tax benefit', 22), (' tax (expense)/benefit', 21), ('prior year ', 20), ('minimum alternate tax credit entitlement', 19), (' income tax benefit/(expense)', 18), ('deferred tax', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('earlier year', 35), ('deferred tax', 27), ('minimum alternate tax credit entitlement', 27), ('current tax', 26), ('prior year ', 26), ('amount transferred to retained earnings', 25), (' income tax', 22), ('provision for taxation previous year', 18), (' income tax benefit', 18), (' tax (expense)/benefit', 17), (' income tax benefit/(expense)', 15), (' income tax expense', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [('provision for taxation previous year', 46), ('minimum alternate tax credit entitlement', 39), (' tax (expense)/benefit', 32), ('prior year ', 30), (' income tax benefit', 30), (' income tax benefit/(expense)', 30), (' income tax expense', 27), ('current tax', 26), ('earlier year', 26), (' income tax', 24), ('deferred tax', 20), ('amount transferred to retained earnings', 18)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('earlier year', 35), ('deferred tax', 27), ('minimum alternate tax credit entitlement', 27), ('current tax', 26), ('prior year ', 26), ('amount transferred to retained earnings', 25), (' income tax', 22), ('provision for taxation previous year', 18), (' income tax benefit', 18), (' tax (expense)/benefit', 17), (' income tax benefit/(expense)', 15), (' income tax expense', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': -4288.0, 'line_item_label': ['Income tax benefit/(expense)'], 'note_numbers': ['11'], 'line_item_value': [-4288.0]}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('current tax', 35), (' income tax benefit', 34), (' tax (expense)/benefit', 33), ('provision for taxation previous year', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 19), ('prior year ', 18), (' income tax expense', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('current tax', 33), ('provision for taxation previous year', 33), (' income tax benefit', 33), ('amount transferred to retained earnings', 31), (' income tax', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 25), (' income tax expense', 25), ('deferred tax', 20), (' tax (expense)/benefit', 16), ('prior year ', 10), ('earlier year', 9)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [('amount transferred to retained earnings', 31), (' income tax benefit', 29), ('deferred tax', 24), (' income tax expense', 24), (' income tax', 24), (' income tax benefit/(expense)', 24), (' tax (expense)/benefit', 23), ('earlier year', 22), ('minimum alternate tax credit entitlement', 21), ('provision for taxation previous year', 19), ('current tax', 17), ('prior year ', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 34), (' income tax expense', 29), ('prior year ', 27), ('current tax', 26), ('minimum alternate tax credit entitlement', 23), (' income tax benefit', 21), (' tax (expense)/benefit', 20), ('deferred tax', 19), (' income tax', 19), ('earlier year', 17), (' income tax benefit/(expense)', 17), ('amount transferred to retained earnings', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('current tax', 25), (' income tax', 14), ('prior year ', 13), ('amount transferred to retained earnings', 12), ('provision for taxation previous year', 12), ('minimum alternate tax credit entitlement', 11), (' income tax expense', 10), (' income tax benefit', 9), (' tax (expense)/benefit', 9), (' income tax benefit/(expense)', 7), ('deferred tax', 0), ('earlier year', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 22), ('provision for taxation previous year', 22), (' income tax benefit', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('provision for taxation previous year', 34), ('amount transferred to retained earnings', 31), ('deferred tax', 29), (' income tax', 29), ('current tax', 26), ('earlier year', 25), (' income tax benefit', 21), ('prior year ', 18), ('minimum alternate tax credit entitlement', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [(' income tax benefit', 39), (' income tax', 35), ('amount transferred to retained earnings', 34), ('current tax', 32), (' tax (expense)/benefit', 31), ('provision for taxation previous year', 28), (' income tax expense', 27), ('deferred tax', 26), (' income tax benefit/(expense)', 26), ('earlier year', 23), ('minimum alternate tax credit entitlement', 17), ('prior year ', 8)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('deferred tax', 40), (' income tax expense', 37), ('provision for taxation previous year', 35), ('earlier year', 35), ('prior year ', 29), (' income tax benefit', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('current tax', 27), (' income tax benefit/(expense)', 23), (' income tax', 20), ('amount transferred to retained earnings', 16)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), (' tax (expense)/benefit', 27), ('amount transferred to retained earnings', 21), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 18), ('prior year ', 18), ('current tax', 17), ('earlier year', 17), ('provision for taxation previous year', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' income tax expense', 69), (' income tax benefit/(expense)', 54), (' tax (expense)/benefit', 52), (' income tax benefit', 40), ('current tax', 33), ('minimum alternate tax credit entitlement', 31), ('amount transferred to retained earnings', 30), ('deferred tax', 27), (' income tax', 27), ('prior year ', 26), ('provision for taxation previous year', 24), ('earlier year', 16)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [(' income tax benefit', 63), (' income tax expense', 59), (' income tax', 59), (' income tax benefit/(expense)', 57), (' tax (expense)/benefit', 39), ('current tax', 34), ('deferred tax', 30), ('prior year ', 29), ('minimum alternate tax credit entitlement', 28), ('amount transferred to retained earnings', 22), ('provision for taxation previous year', 21), ('earlier year', 13)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [('provision for taxation previous year', 34), ('amount transferred to retained earnings', 32), (' income tax benefit', 31), ('current tax', 30), (' tax (expense)/benefit', 30), ('prior year ', 27), (' income tax expense', 27), (' income tax benefit/(expense)', 27), ('minimum alternate tax credit entitlement', 24), (' income tax', 23), ('earlier year', 17), ('deferred tax', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' income tax benefit', 67), ('provision for taxation previous year', 59), (' income tax expense', 58), (' income tax', 58), (' income tax benefit/(expense)', 57), (' tax (expense)/benefit', 50), ('deferred tax', 45), ('current tax', 42), ('minimum alternate tax credit entitlement', 41), ('prior year ', 25), ('amount transferred to retained earnings', 24), ('earlier year', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' income tax benefit/(expense)', 100), (' tax (expense)/benefit', 86), (' income tax benefit', 83), (' income tax expense', 80), ('minimum alternate tax credit entitlement', 57), (' income tax', 55), ('deferred tax', 42), ('current tax', 40), ('amount transferred to retained earnings', 31), ('prior year ', 29), ('provision for taxation previous year', 23), ('earlier year', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 55), ('current tax', 40), ('earlier year', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29), ('amount transferred to retained earnings', 26)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [('provision for taxation previous year', 37), (' income tax benefit/(expense)', 37), (' tax (expense)/benefit', 37), ('minimum alternate tax credit entitlement', 35), ('amount transferred to retained earnings', 35), (' income tax benefit', 34), (' income tax expense', 31), ('earlier year', 29), ('deferred tax', 27), ('current tax', 26), ('prior year ', 26), (' income tax', 22)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [(' income tax expense', 30), ('amount transferred to retained earnings', 24), ('prior year ', 24), ('provision for taxation previous year', 23), ('minimum alternate tax credit entitlement', 22), (' income tax benefit', 22), ('current tax', 21), (' income tax', 21), (' tax (expense)/benefit', 21), ('earlier year', 20), (' income tax benefit/(expense)', 20), ('deferred tax', 18)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('provision for taxation previous year', 51), ('earlier year', 33), ('prior year ', 31), (' income tax expense', 31), ('current tax', 30), ('minimum alternate tax credit entitlement', 30), (' income tax benefit', 30), (' tax (expense)/benefit', 30), ('deferred tax', 28), (' income tax benefit/(expense)', 27), (' income tax', 24), ('amount transferred to retained earnings', 21)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 51), ('prior year ', 35), (' tax (expense)/benefit', 34), ('minimum alternate tax credit entitlement', 33), (' income tax expense', 32), ('current tax', 31), (' income tax benefit', 31), (' income tax benefit/(expense)', 31), ('earlier year', 30), ('deferred tax', 24), (' income tax', 24), ('amount transferred to retained earnings', 21)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [('provision for taxation previous year', 29), (' income tax', 28), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), (' income tax expense', 22), (' income tax benefit', 22), (' tax (expense)/benefit', 21), ('prior year ', 20), ('minimum alternate tax credit entitlement', 19), (' income tax benefit/(expense)', 18), ('deferred tax', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('earlier year', 35), ('deferred tax', 27), ('minimum alternate tax credit entitlement', 27), ('current tax', 26), ('prior year ', 26), ('amount transferred to retained earnings', 25), (' income tax', 22), ('provision for taxation previous year', 18), (' income tax benefit', 18), (' tax (expense)/benefit', 17), (' income tax benefit/(expense)', 15), (' income tax expense', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [('provision for taxation previous year', 46), ('minimum alternate tax credit entitlement', 39), (' tax (expense)/benefit', 32), ('prior year ', 30), (' income tax benefit', 30), (' income tax benefit/(expense)', 30), (' income tax expense', 27), ('current tax', 26), ('earlier year', 26), (' income tax', 24), ('deferred tax', 20), ('amount transferred to retained earnings', 18)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('earlier year', 35), ('deferred tax', 27), ('minimum alternate tax credit entitlement', 27), ('current tax', 26), ('prior year ', 26), ('amount transferred to retained earnings', 25), (' income tax', 22), ('provision for taxation previous year', 18), (' income tax benefit', 18), (' tax (expense)/benefit', 17), (' income tax benefit/(expense)', 15), (' income tax expense', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': -15042.0, 'line_item_label': ['Income tax benefit/(expense)'], 'note_numbers': ['11'], 'line_item_value': [-15042.0]}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = (loss)/profit from continuing operations before income tax expense , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 87), (' current income tax', 71), (' income tax expense on continuing operations', 71), (' total income tax expense / (benefit)', 69), (' total tax (expense)/benefit in income statement', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 37)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = tax at the australian tax rate of 30.0% (2021 - 30.0%) , res_fuzz_match = [('income tax expense', 57), (' deferred income tax', 47), (' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 33), (' income tax expense on continuing operations', 30)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = other , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 60), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = prior year (over)/under , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' deferred income tax', 33), (' total tax (expense)/benefit in income statement', 33), (' income tax expense on continuing operations', 32), ('income tax expense', 19), (' current income tax', 17), (' total income tax expense / (benefit)', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = non assessable franked dividend , res_fuzz_match = [(' deferred income tax', 32), (' total income tax expense / (benefit)', 29), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 28), (' income tax expense on continuing operations', 27), ('income tax expense', 26), (' total tax (expense)/benefit in income statement', 20), (' current income tax', 19)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = investments in associate -dta not recognised , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total tax (expense)/benefit in income statement', 36), ('income tax expense', 33), (' total income tax expense / (benefit)', 33), (' current income tax', 29), (' deferred income tax', 27), (' income tax expense on continuing operations', 22)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = non deductible decommissioning levy , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' current income tax', 41), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 34), (' total income tax expense / (benefit)', 33), (' income tax expense on continuing operations', 28)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = foreign income tax offsets , res_fuzz_match = [(' current income tax', 76), (' deferred income tax', 73), ('income tax expense', 69), (' total tax (expense)/benefit in income statement', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), (' total income tax expense / (benefit)', 54), (' income tax expense on continuing operations', 50)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = total tax expense / (benefit) reported in profit and loss , res_fuzz_match = [(' total income tax expense / (benefit)', 80), ('income tax expense', 75), (' total tax (expense)/benefit in income statement', 70), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 62), (' income tax expense on continuing operations', 48), (' current income tax', 35), (' deferred income tax', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = (loss)/profit from continuing operations before income tax expense , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 87), (' current income tax', 71), (' income tax expense on continuing operations', 71), (' total income tax expense / (benefit)', 69), (' total tax (expense)/benefit in income statement', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 37)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = tax at the australian tax rate of 30.0% (2021 - 30.0%) , res_fuzz_match = [('income tax expense', 57), (' deferred income tax', 47), (' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 33), (' income tax expense on continuing operations', 30)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = other , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 60), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = prior year (over)/under , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' deferred income tax', 33), (' total tax (expense)/benefit in income statement', 33), (' income tax expense on continuing operations', 32), ('income tax expense', 19), (' current income tax', 17), (' total income tax expense / (benefit)', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = non assessable franked dividend , res_fuzz_match = [(' deferred income tax', 32), (' total income tax expense / (benefit)', 29), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 28), (' income tax expense on continuing operations', 27), ('income tax expense', 26), (' total tax (expense)/benefit in income statement', 20), (' current income tax', 19)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = investments in associate -dta not recognised , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total tax (expense)/benefit in income statement', 36), ('income tax expense', 33), (' total income tax expense / (benefit)', 33), (' current income tax', 29), (' deferred income tax', 27), (' income tax expense on continuing operations', 22)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = non deductible decommissioning levy , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' current income tax', 41), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 34), (' total income tax expense / (benefit)', 33), (' income tax expense on continuing operations', 28)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = foreign income tax offsets , res_fuzz_match = [(' current income tax', 76), (' deferred income tax', 73), ('income tax expense', 69), (' total tax (expense)/benefit in income statement', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), (' total income tax expense / (benefit)', 54), (' income tax expense on continuing operations', 50)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = total tax expense / (benefit) reported in profit and loss , res_fuzz_match = [(' total income tax expense / (benefit)', 80), ('income tax expense', 75), (' total tax (expense)/benefit in income statement', 70), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 62), (' income tax expense on continuing operations', 48), (' current income tax', 35), (' deferred income tax', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 8, 9, 17], 'score': [100, 80, 100, 80], 'value': [65013.0, 15042.0, 21702.0, 4288.0], 'label': [' (Loss)/Profit from continuing operations before income tax expense', ' Total tax expense / (benefit) reported in profit and loss', ' (Loss)/Profit from continuing operations before income tax expense', ' Total tax expense / (benefit) reported in profit and loss'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = deferred tax expense/benefit) - current period , res_fuzz_match = [('income tax expense', 69), (' current income tax', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 64), (' total income tax expense / (benefit)', 63), (' total tax (expense)/benefit in income statement', 62), (' deferred income tax', 60), (' income tax expense on continuing operations', 59)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = deferred tax expense/benefit) - prior period , res_fuzz_match = [('income tax expense', 69), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 65), (' total tax (expense)/benefit in income statement', 65), (' total income tax expense / (benefit)', 63), (' deferred income tax', 60), (' income tax expense on continuing operations', 59), (' current income tax', 35)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = total income tax expense / (benefit) , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 80), (' income tax expense on continuing operations', 72), (' deferred income tax', 67), (' current income tax', 65)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = deferred tax expense/benefit) - current period , res_fuzz_match = [('income tax expense', 69), (' current income tax', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 64), (' total income tax expense / (benefit)', 63), (' total tax (expense)/benefit in income statement', 62), (' deferred income tax', 60), (' income tax expense on continuing operations', 59)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = deferred tax expense/benefit) - prior period , res_fuzz_match = [('income tax expense', 69), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 65), (' total tax (expense)/benefit in income statement', 65), (' total income tax expense / (benefit)', 63), (' deferred income tax', 60), (' income tax expense on continuing operations', 59), (' current income tax', 35)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = total income tax expense / (benefit) , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 80), (' income tax expense on continuing operations', 72), (' deferred income tax', 67), (' current income tax', 65)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_rows = 31 december $'000 , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5], 'score': [100, 100], 'value': [15042.0, 4288.0], 'label': [' Total income tax expense / (benefit)', ' Total income tax expense / (benefit)'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-04-23 13:59:43+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-04-23 13:59:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-04-23 13:59:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('share of', 0), ('share in', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('share of', 0), ('share in', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-04-23 13:59:43+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-04-23 13:59:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-04-23 13:59:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 25), ('exceptional', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('exceptional', 16), ('prior period', 9)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [('prior period', 32), ('exceptional', 13)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('exceptional', 36), ('prior period', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [('exceptional', 20), ('prior period', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('prior period', 61), ('exceptional', 35)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 17), ('exceptional', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('exceptional', 32), ('prior period', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [('prior period', 27), ('exceptional', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [('prior period', 30), ('exceptional', 20)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('prior period', 47), ('exceptional', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('prior period', 28), ('exceptional', 27)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [('prior period', 29), ('exceptional', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [('prior period', 23), ('exceptional', 13)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('prior period', 26), ('exceptional', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [('prior period', 38), ('exceptional', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [('prior period', 44), ('exceptional', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('prior period', 30), ('exceptional', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [('prior period', 29), ('exceptional', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('prior period', 30), ('exceptional', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 25), ('exceptional', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('exceptional', 16), ('prior period', 9)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [('prior period', 32), ('exceptional', 13)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('exceptional', 36), ('prior period', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [('exceptional', 20), ('prior period', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('prior period', 61), ('exceptional', 35)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 17), ('exceptional', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('exceptional', 32), ('prior period', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [('prior period', 27), ('exceptional', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [('prior period', 30), ('exceptional', 20)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('prior period', 47), ('exceptional', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('prior period', 28), ('exceptional', 27)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [('prior period', 29), ('exceptional', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [('prior period', 23), ('exceptional', 13)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('prior period', 26), ('exceptional', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [('prior period', 38), ('exceptional', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [('prior period', 44), ('exceptional', 15)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('prior period', 30), ('exceptional', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [('prior period', 29), ('exceptional', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('prior period', 30), ('exceptional', 24)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 13:59:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-04-23 13:59:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 13:59:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-04-23 13:59:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 13:59:43+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-04-23 13:59:43+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [('NULL', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('NULL', 22)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('NULL', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [('NULL', 18)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('NULL', 7)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('NULL', 8)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [('NULL', 13)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [('NULL', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('NULL', 6)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('NULL', 6)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 13:59:43+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 13:59:43+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = cost of goods and services sold , res_fuzz_match = [('NULL', 14)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('NULL', 22)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other gains - net , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('NULL', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total finance income , res_fuzz_match = [('NULL', 18)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of profit of equity accounted investees , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('NULL', 7)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = item that may be reclassified to profit or loss , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive profit/loss) of equity accounted investees , res_fuzz_match = [('NULL', 10)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = other comprehensive profit/(loss) for the year, net of tax , res_fuzz_match = [('NULL', 8)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year , res_fuzz_match = [('NULL', 13)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = profit/(loss) is attributable to: , res_fuzz_match = [('NULL', 17)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('NULL', 6)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit/(loss) for the year is attributable to: , res_fuzz_match = [('NULL', 11)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - txt_particular = owners of jera australia pty ltd , res_fuzz_match = [('NULL', 6)]
2023-04-23 13:59:43+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:13+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-04-23 14:01:13+0530 - sLogger - DEBUG - process_main_pages started
2023-04-23 14:01:13+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-04-23 14:01:13+0530 - sLogger - DEBUG - start_refactoring started
2023-04-23 14:01:13+0530 - sLogger - DEBUG - start_refactoring completed
2023-04-23 14:01:13+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-04-23 14:01:13+0530 - sLogger - DEBUG - start_refactoring started
2023-04-23 14:01:13+0530 - sLogger - DEBUG - start_refactoring completed
2023-04-23 14:01:13+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-04-23 14:01:13+0530 - sLogger - DEBUG - start_refactoring started
2023-04-23 14:01:13+0530 - sLogger - DEBUG - start_refactoring completed
2023-04-23 14:01:13+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-04-23 14:01:13+0530 - sLogger - DEBUG - set_section_details started
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Current assets | [('current assets', 100), ('noncurrent assets', 77), ('assets', 56), ('current liabilities', 52), ('noncurrent liabilities', 44), ('equity', 32), ('equity liabilities', 23), ('equity and liabilities', 20), ('liabilities', 11)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current assets | score 100
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current liabilities | score 67
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent assets | score 90
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent liabilities | score 61
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current assets | score 95
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current liabilities | score 86
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity and liabilities | score 33
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity | score 31
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 47), ('assets', 31), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('current liabilities', 17), ('liabilities', 7), ('noncurrent liabilities', 6)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 29
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 36
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 33
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 46
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Trade and other receivables | [('equity and liabilities', 41), ('current assets', 34), ('current liabilities', 28), ('noncurrent assets', 23), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('liabilities', 14), ('noncurrent liabilities', 11)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 39
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 35
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 34
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Inventories | [('noncurrent assets', 36), ('current liabilities', 35), ('assets', 29), ('current assets', 27), ('liabilities', 27), ('equity', 27), ('equity and liabilities', 23), ('equity liabilities', 18), ('noncurrent liabilities', 17)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 32
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 40
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 40
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 45
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Other financial assets | [('noncurrent assets', 62), ('current assets', 50), ('assets', 42), ('current liabilities', 36), ('noncurrent liabilities', 30), ('equity liabilities', 25), ('liabilities', 24), ('equity', 24), ('equity and liabilities', 22)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD current assets | score 86
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD current liabilities | score 29
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD noncurrent assets | score 53
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD noncurrent liabilities | score 36
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD non current assets | score 50
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD non current liabilities | score 36
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD equity and liabilities | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Other assets | [('noncurrent assets', 67), ('assets', 62), ('current assets', 58), ('noncurrent liabilities', 32), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('equity and liabilities', 21), ('liabilities', 12)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current assets | score 64
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current liabilities | score 32
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent assets | score 64
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent liabilities | score 36
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current assets | score 86
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current liabilities | score 36
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity and liabilities | score 29
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 55), ('assets', 42), ('noncurrent liabilities', 36), ('equity liabilities', 31), ('equity and liabilities', 28), ('equity', 24), ('liabilities', 8)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 29
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Noncurrent assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('current liabilities', 30), ('equity', 21), ('equity and liabilities', 20), ('equity liabilities', 15), ('liabilities', 11)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current assets | score 90
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current liabilities | score 61
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent assets | score 100
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent liabilities | score 72
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current assets | score 97
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current liabilities | score 70
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity | score 31
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 49), ('equity', 40), ('current assets', 38), ('noncurrent assets', 32), ('equity liabilities', 32), ('current liabilities', 26), ('assets', 21), ('liabilities', 13), ('noncurrent liabilities', 11)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 36
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 24
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 33
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 40
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Right of use assets and other intangibles | [('noncurrent assets', 40), ('current assets', 36), ('assets', 27), ('equity and liabilities', 24), ('current liabilities', 22), ('noncurrent liabilities', 22), ('liabilities', 16), ('equity', 11), ('equity liabilities', 9)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Right of use assets and other intangibles | MATCH WORD current assets | score 86
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Right of use assets and other intangibles | MATCH WORD current liabilities | score 32
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Right of use assets and other intangibles | MATCH WORD noncurrent assets | score 86
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Right of use assets and other intangibles | MATCH WORD noncurrent liabilities | score 34
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Right of use assets and other intangibles | MATCH WORD non current assets | score 86
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Right of use assets and other intangibles | MATCH WORD non current liabilities | score 33
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Right of use assets and other intangibles | MATCH WORD equity and liabilities | score 86
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Right of use assets and other intangibles | MATCH WORD equity | score 45
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Goodwill | [('liabilities', 31), ('equity and liabilities', 25), ('equity liabilities', 20), ('current liabilities', 19), ('noncurrent liabilities', 19), ('equity', 15), ('noncurrent assets', 10), ('assets', 0), ('current assets', 0)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD current assets | score 0
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD current liabilities | score 22
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD noncurrent assets | score 11
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD noncurrent liabilities | score 22
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD non current assets | score 15
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD non current liabilities | score 22
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD equity and liabilities | score 22
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD equity | score 14
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 21), ('equity', 19), ('liabilities', 10)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 29
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 36), ('equity and liabilities', 28), ('equity liabilities', 25), ('equity', 24), ('liabilities', 8)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 27
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('equity liabilities', 33), ('current liabilities', 32), ('equity and liabilities', 29), ('equity', 24), ('liabilities', 12), ('noncurrent liabilities', 8)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 22
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 40
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Current liabilities | [('current liabilities', 100), ('equity liabilities', 67), ('liabilities', 60), ('equity and liabilities', 58), ('current assets', 52), ('noncurrent liabilities', 43), ('noncurrent assets', 30), ('equity', 30), ('assets', 11)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current assets | score 64
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current liabilities | score 100
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent assets | score 56
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent liabilities | score 93
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current assets | score 54
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current liabilities | score 95
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity and liabilities | score 69
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current assets', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('noncurrent assets', 23), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 39
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 37
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 28
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 39
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 28
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 34
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Bank Loan | [('equity and liabilities', 38), ('current liabilities', 35), ('current assets', 27), ('noncurrent assets', 27), ('liabilities', 27), ('equity liabilities', 27), ('noncurrent liabilities', 26), ('assets', 14), ('equity', 0)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Bank Loan | MATCH WORD current assets | score 26
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Bank Loan | MATCH WORD current liabilities | score 40
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Bank Loan | MATCH WORD noncurrent assets | score 28
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Bank Loan | MATCH WORD noncurrent liabilities | score 40
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Bank Loan | MATCH WORD non current assets | score 40
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Bank Loan | MATCH WORD non current liabilities | score 40
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Bank Loan | MATCH WORD equity and liabilities | score 50
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Bank Loan | MATCH WORD equity | score 0
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Customer deposits | [('assets', 32), ('current assets', 30), ('equity', 30), ('current liabilities', 29), ('equity and liabilities', 26), ('equity liabilities', 22), ('noncurrent assets', 15), ('noncurrent liabilities', 14), ('liabilities', 10)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Customer deposits | MATCH WORD current assets | score 45
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Customer deposits | MATCH WORD current liabilities | score 39
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Customer deposits | MATCH WORD noncurrent assets | score 41
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Customer deposits | MATCH WORD noncurrent liabilities | score 36
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Customer deposits | MATCH WORD non current assets | score 40
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Customer deposits | MATCH WORD non current liabilities | score 35
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Customer deposits | MATCH WORD equity and liabilities | score 25
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Customer deposits | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 26
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 24
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 23
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Other financial liabilities | [('equity liabilities', 55), ('equity and liabilities', 54), ('noncurrent liabilities', 53), ('current liabilities', 47), ('liabilities', 46), ('noncurrent assets', 24), ('current assets', 18), ('assets', 16), ('equity', 8)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other financial liabilities | MATCH WORD current assets | score 28
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other financial liabilities | MATCH WORD current liabilities | score 69
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other financial liabilities | MATCH WORD noncurrent assets | score 31
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other financial liabilities | MATCH WORD noncurrent liabilities | score 64
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other financial liabilities | MATCH WORD non current assets | score 25
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other financial liabilities | MATCH WORD non current liabilities | score 62
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other financial liabilities | MATCH WORD equity and liabilities | score 65
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other financial liabilities | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Deferred revenue | [('current assets', 40), ('noncurrent assets', 32), ('current liabilities', 31), ('noncurrent liabilities', 23), ('equity', 22), ('equity liabilities', 16), ('equity and liabilities', 14), ('assets', 12), ('liabilities', 0)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD current assets | score 33
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD current liabilities | score 29
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD noncurrent assets | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD noncurrent liabilities | score 26
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD non current assets | score 29
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD non current liabilities | score 26
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD equity and liabilities | score 25
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD equity | score 36
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Current tax liabilities | [('current liabilities', 88), ('equity liabilities', 58), ('equity and liabilities', 51), ('liabilities', 50), ('current assets', 45), ('noncurrent liabilities', 44), ('noncurrent assets', 26), ('equity', 25), ('assets', 17)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current assets | score 86
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current liabilities | score 95
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent assets | score 50
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent liabilities | score 84
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current assets | score 56
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current liabilities | score 86
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity and liabilities | score 71
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 22
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 26
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 36
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 22
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Other liabilities | [('noncurrent liabilities', 69), ('liabilities', 67), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 11)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD current assets | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD current liabilities | score 75
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrent assets | score 33
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrent liabilities | score 75
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD non current assets | score 28
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD non current liabilities | score 75
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD equity and liabilities | score 75
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('equity liabilities', 55), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 52
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 57
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Noncurrent liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('assets', 11), ('equity', 10)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current assets | score 61
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current liabilities | score 93
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent assets | score 70
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent liabilities | score 100
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current assets | score 65
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current liabilities | score 98
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity and liabilities | score 65
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current assets', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('noncurrent assets', 23), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 39
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 37
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 28
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 39
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 28
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 34
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 22
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 26
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 36
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 22
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 26
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 24
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 23
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrent assets', 55), ('liabilities', 46), ('current assets', 42), ('equity liabilities', 36), ('current liabilities', 35), ('equity and liabilities', 32), ('assets', 16), ('equity', 15)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 60
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 22)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 33
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 32
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('equity and liabilities', 31), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('liabilities', 13)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equity liabilities', 63), ('equity and liabilities', 52), ('assets', 36), ('liabilities', 33), ('current liabilities', 30), ('current assets', 21), ('noncurrent assets', 21), ('noncurrent liabilities', 20)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 31
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 31
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('current assets', 35), ('noncurrent assets', 35), ('current liabilities', 33), ('equity and liabilities', 30), ('equity liabilities', 26), ('liabilities', 25), ('noncurrent liabilities', 25)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 29
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 34
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 26
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 25
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 27
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Retained earnings | [('assets', 38), ('equity and liabilities', 36), ('current assets', 33), ('noncurrent assets', 33), ('current liabilities', 32), ('equity', 24), ('equity liabilities', 17), ('noncurrent liabilities', 16), ('liabilities', 12)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 33
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 31
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 34
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 36
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-04-23 14:01:13+0530 - sLogger - DEBUG - Total equity | [('equity', 67), ('equity liabilities', 64), ('equity and liabilities', 55), ('current liabilities', 31), ('assets', 12), ('liabilities', 11), ('current assets', 8), ('noncurrent assets', 8), ('noncurrent liabilities', 8)]
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 15
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 21
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 32
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-04-23 14:01:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-04-23 14:01:13+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-04-23 14:01:13+0530 - sLogger - DEBUG - set_section_details started
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from operating activities | operating cash flow before working capital changes
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | adiustments for movements in working capital
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest and other costs of finance paid | operating profit before changes in assets and liabilities
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income taxes refunded/paid) | changes in working capital
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash (used in)/provided by operating activities | operating cash flow before working capital changes
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from investing activities | operating cash flow before working capital changes
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments for property, plant and equipment | changes in operating assets and liabilities
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from disposal of property, plant and equipment | adiustments for movements in working capital
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment for investments* | adiustments for movements in working capital
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash (used in)/provided by investing activities | operating profit before working capital changes
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from financing activities | operating cash flow before working capital changes
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to reduce lease liabilities | changes in operating assets and liabilities
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Loan borrowed/repaid) | operating profit before working capital changes
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividend paid | movements in working capital
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash (used in)/provided by financing activities | operating profit before working capital changes
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net (decrease/increase in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- in Effects of exchange rate changes on the balance of cash held foreign currencies | operating cash flow before working capital changes
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the year | changes in operating assets and liabilities
2023-04-23 14:01:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the end of the year | changes in operating assets and liabilities
2023-04-23 14:01:15+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 14:01:15+0530 - sLogger - ERROR - error occured: 'year'
2023-04-23 14:01:15+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 14:01:15+0530 - sLogger - ERROR - error occured: 'value'
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-04-23 14:01:16+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 14:01:16+0530 - sLogger - ERROR - error occured: 'value'
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-04-23 14:01:16+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 14:01:16+0530 - sLogger - ERROR - error occured: 'value'
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 14:01:16+0530 - sLogger - ERROR - error occured: 'value'
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 14:01:16+0530 - sLogger - ERROR - error occured: 'year'
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 14:01:16+0530 - sLogger - ERROR - error occured: 'year'
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 14:01:16+0530 - sLogger - ERROR - error occured: 'year'
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 14:01:16+0530 - sLogger - ERROR - error occured: 'value'
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-04-23 14:01:16+0530 - sLogger - ERROR - error occured: 'year'
2023-04-23 14:01:16+0530 - sLogger - DEBUG - process_main_pages completed
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 25), ('cash and cash equivalents', 24), (' cash and cash equivalents', 24), ('bank balances other than above', 20), ('other bank balances', 20), ('bank balances other than cash and cash equivalents', 18), ('cash and bank balances', 18)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and short term deposits', 54), ('cash and bank balances', 39), ('bank balances other than above', 17), ('other bank balances', 11)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('bank balances other than above', 45), ('cash and cash equivalents', 42), (' cash and cash equivalents', 42), ('other bank balances', 41), ('bank balances other than cash and cash equivalents', 36), ('cash and short term deposits', 33), ('cash and bank balances', 24)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('cash and bank balances', 14), ('bank balances other than cash and cash equivalents', 11), ('bank balances other than above', 11)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('other bank balances', 56), ('bank balances other than above', 48), ('bank balances other than cash and cash equivalents', 38), ('cash and bank balances', 36), ('cash and short term deposits', 26), ('cash and cash equivalents', 25), (' cash and cash equivalents', 25)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other bank balances', 50), ('cash and short term deposits', 42), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 25), (' cash and cash equivalents', 25), ('cash and bank balances', 19)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 27230401.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['11'], 'line_item_value': [27230401.0]}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 25), ('cash and cash equivalents', 24), (' cash and cash equivalents', 24), ('bank balances other than above', 20), ('other bank balances', 20), ('bank balances other than cash and cash equivalents', 18), ('cash and bank balances', 18)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and short term deposits', 54), ('cash and bank balances', 39), ('bank balances other than above', 17), ('other bank balances', 11)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('bank balances other than above', 45), ('cash and cash equivalents', 42), (' cash and cash equivalents', 42), ('other bank balances', 41), ('bank balances other than cash and cash equivalents', 36), ('cash and short term deposits', 33), ('cash and bank balances', 24)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('cash and bank balances', 14), ('bank balances other than cash and cash equivalents', 11), ('bank balances other than above', 11)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('other bank balances', 56), ('bank balances other than above', 48), ('bank balances other than cash and cash equivalents', 38), ('cash and bank balances', 36), ('cash and short term deposits', 26), ('cash and cash equivalents', 25), (' cash and cash equivalents', 25)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other bank balances', 50), ('cash and short term deposits', 42), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 25), (' cash and cash equivalents', 25), ('cash and bank balances', 19)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 17825903.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['11'], 'line_item_value': [17825903.0]}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = cash and bank balances , res_fuzz_match = [('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 72), (' cash at bank and on hand', 67), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 60), (' cash and cash equivalents', 60), (' short term deposits', 22)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = 17825903 , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = 2022 , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': [89], 'value': [17825903.0], 'label': [' Cash and bank balances'], 'year': [], 'colname_found': ['rows']}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 31)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 36)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('inventories', 44)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 27)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 51132749.0, 'line_item_label': ['Inventories'], 'note_numbers': [nan], 'line_item_value': [51132749.0]}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 31)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 36)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('inventories', 44)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 27)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 54388398.0, 'line_item_label': ['Inventories'], 'note_numbers': [nan], 'line_item_value': [54388398.0]}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other financial assets', 30), ('other current financial assets', 29), ('other current assets', 25), ('other assets', 25), ('prepayments', 15)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current assets', 39), ('other financial assets', 39), ('other current financial assets', 33), ('prepayments', 21)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 29), ('other current financial assets', 22), ('prepayments', 13)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('other financial assets', 100), ('other current financial assets', 83), ('other assets', 73), ('other current assets', 68), ('prepayments', 8)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), ('other financial assets', 73), ('other current financial assets', 58), ('prepayments', 12)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4, 5], 'score': 100, 'value': 1164948.0, 'line_item_label': ['Current assets', 'Other financial assets', 'Other assets'], 'note_numbers': [nan, '13', '14'], 'line_item_value': [0.0, 435033.0, 729915.0]}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other financial assets', 30), ('other current financial assets', 29), ('other current assets', 25), ('other assets', 25), ('prepayments', 15)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current assets', 39), ('other financial assets', 39), ('other current financial assets', 33), ('prepayments', 21)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 29), ('other current financial assets', 22), ('prepayments', 13)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('other financial assets', 100), ('other current financial assets', 83), ('other assets', 73), ('other current assets', 68), ('prepayments', 8)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), ('other financial assets', 73), ('other current financial assets', 58), ('prepayments', 12)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4, 5], 'score': 100, 'value': 1684817.0, 'line_item_label': ['Current assets', 'Other financial assets', 'Other assets'], 'note_numbers': [nan, '13', '14'], 'line_item_value': [0.0, 1016248.0, 668569.0]}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = bank guarantee , res_fuzz_match = [('prepayments', 33), ('prepaid', 31), ('prepaid expenditure', 29), ('other prepayments', 27), ('prepaid expense', 17)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 44), ('prepaid', 43), ('prepayments', 33), ('other prepayments', 33)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = bank guarantee , res_fuzz_match = [('prepayments', 33), ('prepaid', 31), ('prepaid expenditure', 29), ('other prepayments', 27), ('prepaid expense', 17)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 44), ('prepaid', 43), ('prepayments', 33), ('other prepayments', 33)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = other prepayments , res_fuzz_match = [('prepayments', 100), ('other prepayments', 100), ('prepaid', 77), ('prepaid expense', 42), ('prepaid expenditure', 42)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = other prepayments , res_fuzz_match = [('prepayments', 100), ('other prepayments', 100), ('prepaid', 77), ('prepaid expense', 42), ('prepaid expenditure', 42)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': [100, 100], 'value': [668569.0, 729915.0], 'label': [' Other prepayments', ' Other prepayments'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' deferred operating expenditure', 29), (' income tax receivable from related parties', 17)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 42), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), (' other financial assets', 30), ('other current assets', 25), ('other assets', 25), (' other current assets', 25), (' deferred operating expenditure', 19)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets', 42), (' income tax receivable from related parties', 40), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' deferred operating expenditure', 37), (' financial assets', 23), (' biological assets', 18)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' biological assets', 29), (' other financial assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24), (' deferred operating expenditure', 20)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [(' other financial assets', 100), (' financial assets', 81), ('other assets', 73), ('other current assets', 68), (' other current assets', 68), (' biological assets', 52), (' trade and other receivables', 39), (' income tax receivable from related parties', 27), (' deferred operating expenditure', 20)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), (' other current assets', 73), (' other financial assets', 73), (' biological assets', 61), (' financial assets', 50), (' trade and other receivables', 42), (' income tax receivable from related parties', 23), (' deferred operating expenditure', 19)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 4, 5], 'score': 100, 'value': 34550658.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other financial assets', 'Other assets'], 'note_numbers': [nan, '12', '13', '14'], 'line_item_value': [0.0, 33385710.0, 435033.0, 729915.0]}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' deferred operating expenditure', 29), (' income tax receivable from related parties', 17)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 42), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), (' other financial assets', 30), ('other current assets', 25), ('other assets', 25), (' other current assets', 25), (' deferred operating expenditure', 19)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets', 42), (' income tax receivable from related parties', 40), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' deferred operating expenditure', 37), (' financial assets', 23), (' biological assets', 18)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' biological assets', 29), (' other financial assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24), (' deferred operating expenditure', 20)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [(' other financial assets', 100), (' financial assets', 81), ('other assets', 73), ('other current assets', 68), (' other current assets', 68), (' biological assets', 52), (' trade and other receivables', 39), (' income tax receivable from related parties', 27), (' deferred operating expenditure', 20)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), (' other current assets', 73), (' other financial assets', 73), (' biological assets', 61), (' financial assets', 50), (' trade and other receivables', 42), (' income tax receivable from related parties', 23), (' deferred operating expenditure', 19)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 4, 5], 'score': 100, 'value': 26807506.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other financial assets', 'Other assets'], 'note_numbers': [nan, '12', '13', '14'], 'line_item_value': [0.0, 25122689.0, 1016248.0, 668569.0]}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 70), (' related party receivable', 70), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 50), (' foreign exchange forward contracts', 47), (' forward exchange contracts', 47), (' accrued interest', 44), (' other', 40), (' accrued rebates', 38), ('other assets', 36), (' bank guarantee', 35), (' share of jv prepayments', 35), (' current investments', 33), ('current', 29), (' deposits', 29), (' condensate', 29), (' related party disclosures', 25), (' rental bond', 24), (' lng', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 70), (' related party receivable', 70), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 50), (' foreign exchange forward contracts', 47), (' forward exchange contracts', 47), (' accrued interest', 44), (' other', 40), (' accrued rebates', 38), ('other assets', 36), (' bank guarantee', 35), (' share of jv prepayments', 35), (' current investments', 33), ('current', 29), (' deposits', 29), (' condensate', 29), (' related party disclosures', 25), (' rental bond', 24), (' lng', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 70), (' related party receivable', 70), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 50), (' foreign exchange forward contracts', 47), (' forward exchange contracts', 47), (' accrued interest', 44), (' other', 40), (' accrued rebates', 38), ('other assets', 36), (' bank guarantee', 35), (' share of jv prepayments', 35), (' current investments', 33), ('current', 29), (' deposits', 29), (' condensate', 29), (' related party disclosures', 25), (' rental bond', 24), (' lng', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 70), (' related party receivable', 70), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 50), (' foreign exchange forward contracts', 47), (' forward exchange contracts', 47), (' accrued interest', 44), (' other', 40), (' accrued rebates', 38), ('other assets', 36), (' bank guarantee', 35), (' share of jv prepayments', 35), (' current investments', 33), ('current', 29), (' deposits', 29), (' condensate', 29), (' related party disclosures', 25), (' rental bond', 24), (' lng', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 70), (' related party receivable', 70), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 50), (' foreign exchange forward contracts', 47), (' forward exchange contracts', 47), (' accrued interest', 44), (' other', 40), (' accrued rebates', 38), ('other assets', 36), (' bank guarantee', 35), (' share of jv prepayments', 35), (' current investments', 33), ('current', 29), (' deposits', 29), (' condensate', 29), (' related party disclosures', 25), (' rental bond', 24), (' lng', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 70), (' related party receivable', 70), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 50), (' foreign exchange forward contracts', 47), (' forward exchange contracts', 47), (' accrued interest', 44), (' other', 40), (' accrued rebates', 38), ('other assets', 36), (' bank guarantee', 35), (' share of jv prepayments', 35), (' current investments', 33), ('current', 29), (' deposits', 29), (' condensate', 29), (' related party disclosures', 25), (' rental bond', 24), (' lng', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = bank guarantee , res_fuzz_match = [(' bank guarantee', 100), ('current', 57), (' other', 50), (' forward exchange contracts', 48), (' related party receivable', 46), (' other debtors and prepayments', 46), (' other receivables - related party', 45), (' other deposits receivable - related party', 45), (' income tax receivable from related parties', 42), (' accrued interest', 38), (' related party disclosures', 38), (' amount receivable from controlling entity', 38), (' rental bond', 38), (' current investments', 38), (' foreign exchange forward contracts', 38), (' accrued rebates', 36), (' long service leave receivable', 35), (' lng', 33), (' condensate', 33), ('foreign exchange derivatives at fair value', 31), (' derivative contracts - fair value', 31), (' share of jv prepayments', 30), ('other assets', 29), (' electricity derivatives at fair value', 27), (' interest receivable', 23), (' deposits', 22)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [(' foreign exchange forward contracts', 100), (' lng', 67), (' forward exchange contracts', 67), ('foreign exchange derivatives at fair value', 61), (' other', 60), (' derivative contracts - fair value', 59), ('other assets', 53), (' amount receivable from controlling entity', 45), ('current', 43), (' deposits', 43), (' condensate', 43), (' accrued rebates', 43), (' share of jv prepayments', 42), (' other debtors and prepayments', 40), (' bank guarantee', 38), (' related party receivable', 38), (' electricity derivatives at fair value', 36), (' income tax receivable from related parties', 36), (' interest receivable', 36), (' rental bond', 36), (' current investments', 36), (' accrued interest', 35), (' related party disclosures', 33), (' other receivables - related party', 33), (' long service leave receivable', 32), (' other deposits receivable - related party', 29)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = bank guarantee , res_fuzz_match = [(' bank guarantee', 100), ('current', 57), (' other', 50), (' forward exchange contracts', 48), (' related party receivable', 46), (' other debtors and prepayments', 46), (' other receivables - related party', 45), (' other deposits receivable - related party', 45), (' income tax receivable from related parties', 42), (' accrued interest', 38), (' related party disclosures', 38), (' amount receivable from controlling entity', 38), (' rental bond', 38), (' current investments', 38), (' foreign exchange forward contracts', 38), (' accrued rebates', 36), (' long service leave receivable', 35), (' lng', 33), (' condensate', 33), ('foreign exchange derivatives at fair value', 31), (' derivative contracts - fair value', 31), (' share of jv prepayments', 30), ('other assets', 29), (' electricity derivatives at fair value', 27), (' interest receivable', 23), (' deposits', 22)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [(' foreign exchange forward contracts', 100), (' lng', 67), (' forward exchange contracts', 67), ('foreign exchange derivatives at fair value', 61), (' other', 60), (' derivative contracts - fair value', 59), ('other assets', 53), (' amount receivable from controlling entity', 45), ('current', 43), (' deposits', 43), (' condensate', 43), (' accrued rebates', 43), (' share of jv prepayments', 42), (' other debtors and prepayments', 40), (' bank guarantee', 38), (' related party receivable', 38), (' electricity derivatives at fair value', 36), (' income tax receivable from related parties', 36), (' interest receivable', 36), (' rental bond', 36), (' current investments', 36), (' accrued interest', 35), (' related party disclosures', 33), (' other receivables - related party', 33), (' long service leave receivable', 32), (' other deposits receivable - related party', 29)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [100, 100, 100, 100], 'value': [0.0, 0.0, 435033.0, 0.0], 'label': [' Bank guarantee', ' Foreign exchange forward contracts', ' Bank guarantee', ' Foreign exchange forward contracts'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = other prepayments , res_fuzz_match = [(' other', 100), (' share of jv prepayments', 78), (' other receivables - related party', 67), (' other deposits receivable - related party', 67), (' other debtors and prepayments', 67), ('other assets', 64), (' interest receivable', 50), (' accrued rebates', 45), ('current', 43), (' electricity derivatives at fair value', 42), (' accrued interest', 42), (' income tax receivable from related parties', 42), (' derivative contracts - fair value', 42), (' long service leave receivable', 42), (' amount receivable from controlling entity', 42), (' related party receivable', 42), (' forward exchange contracts', 40), (' rental bond', 38), ('foreign exchange derivatives at fair value', 33), (' related party disclosures', 33), (' deposits', 33), (' foreign exchange forward contracts', 33), (' condensate', 29), (' bank guarantee', 27), (' current investments', 25), (' lng', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows = other prepayments , res_fuzz_match = [(' other', 100), (' share of jv prepayments', 78), (' other receivables - related party', 67), (' other deposits receivable - related party', 67), (' other debtors and prepayments', 67), ('other assets', 64), (' interest receivable', 50), (' accrued rebates', 45), ('current', 43), (' electricity derivatives at fair value', 42), (' accrued interest', 42), (' income tax receivable from related parties', 42), (' derivative contracts - fair value', 42), (' long service leave receivable', 42), (' amount receivable from controlling entity', 42), (' related party receivable', 42), (' forward exchange contracts', 40), (' rental bond', 38), ('foreign exchange derivatives at fair value', 33), (' related party disclosures', 33), (' deposits', 33), (' foreign exchange forward contracts', 33), (' condensate', 29), (' bank guarantee', 27), (' current investments', 25), (' lng', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': [100, 100], 'value': [668569.0, 729915.0], 'label': [' Other prepayments', ' Other prepayments'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('current assets', 50)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('current assets', 58)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('current assets', 50)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('current assets', 58)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('plant property equipment', 15), ('property plant equipment', 15)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 91, 'value': 3228260.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['15'], 'line_item_value': [3228260.0]}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('plant property equipment', 15), ('property plant equipment', 15)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 91, 'value': 3871674.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['15'], 'line_item_value': [3871674.0]}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('plant property equipment', 15), ('property plant equipment', 15)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 91, 'value': 3228260.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['15'], 'line_item_value': [3228260.0]}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('plant property equipment', 15), ('property plant equipment', 15)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 91, 'value': 3871674.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['15'], 'line_item_value': [3871674.0]}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('right of use', 47), ('right to use', 47), ('capital work-in-progress', 45), ('capital workinprogress', 45), ('capital work in progress', 38), ('work in progress', 38), ('tangible', 25), ('rightofuse', 24), ('righttouse', 24)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('work in progress', 31), ('capital work in progress', 26), ('capital work-in-progress', 25), ('capital workinprogress', 25), ('rightofuse', 22), ('righttouse', 22)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('right of use', 100), ('right to use', 100), ('rightofuse', 78), ('righttouse', 78), ('tangible', 73), ('work in progress', 38), ('capital work-in-progress', 36), ('capital workinprogress', 36), ('capital work in progress', 32)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('tangible', 43), ('rightofuse', 29), ('righttouse', 29), ('capital work-in-progress', 17), ('capital workinprogress', 17), ('capital work in progress', 17), ('work in progress', 17), ('right of use', 14), ('right to use', 14)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('capital work-in-progress', 32), ('capital workinprogress', 32), ('capital work in progress', 32), ('work in progress', 31), ('tangible', 29)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': 5884364.0, 'line_item_label': ['Right of use assets and other intangibles'], 'note_numbers': ['16'], 'line_item_value': [5884364.0]}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('right of use', 47), ('right to use', 47), ('capital work-in-progress', 45), ('capital workinprogress', 45), ('capital work in progress', 38), ('work in progress', 38), ('tangible', 25), ('rightofuse', 24), ('righttouse', 24)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('work in progress', 31), ('capital work in progress', 26), ('capital work-in-progress', 25), ('capital workinprogress', 25), ('rightofuse', 22), ('righttouse', 22)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('right of use', 100), ('right to use', 100), ('rightofuse', 78), ('righttouse', 78), ('tangible', 73), ('work in progress', 38), ('capital work-in-progress', 36), ('capital workinprogress', 36), ('capital work in progress', 32)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('tangible', 43), ('rightofuse', 29), ('righttouse', 29), ('capital work-in-progress', 17), ('capital workinprogress', 17), ('capital work in progress', 17), ('work in progress', 17), ('right of use', 14), ('right to use', 14)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('capital work-in-progress', 32), ('capital workinprogress', 32), ('capital work in progress', 32), ('work in progress', 31), ('tangible', 29)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': 9533623.0, 'line_item_label': ['Right of use assets and other intangibles'], 'note_numbers': ['16'], 'line_item_value': [9533623.0]}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('tangible assets', 49)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('tangible assets', 30)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('tangible assets', 49)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('tangible assets', 30)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill', 29), ('goodwill on consolidatio', 15)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('goodwill on consolidatio', 15), ('goodwill', 14)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('goodwill', 100), ('goodwill on consolidatio', 100)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 20), ('goodwill', 14)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 5570624.0, 'line_item_label': ['Goodwill'], 'note_numbers': ['17'], 'line_item_value': [5570624.0]}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill', 29), ('goodwill on consolidatio', 15)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('goodwill on consolidatio', 15), ('goodwill', 14)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('goodwill', 100), ('goodwill on consolidatio', 100)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 20), ('goodwill', 14)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 5570624.0, 'line_item_label': ['Goodwill'], 'note_numbers': ['17'], 'line_item_value': [5570624.0]}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-04-23 14:01:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 33)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 44), ('intangible assets under development', 18)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('intangible', 100), ('intangible assets under development', 54), ('intangible under development', 46)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('intangible under development', 29), ('intangible', 25), ('intangible assets under development', 20)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible under development', 38), ('intangible', 33)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': 5884364.0, 'line_item_label': ['Right of use assets and other intangibles'], 'note_numbers': ['16'], 'line_item_value': [5884364.0]}
2023-04-23 14:01:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:16+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 33)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 44), ('intangible assets under development', 18)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('intangible', 100), ('intangible assets under development', 54), ('intangible under development', 46)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('intangible under development', 29), ('intangible', 25), ('intangible assets under development', 20)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible under development', 38), ('intangible', 33)]
2023-04-23 14:01:16+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': 9533623.0, 'line_item_label': ['Right of use assets and other intangibles'], 'note_numbers': ['16'], 'line_item_value': [9533623.0]}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('donations', 16)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('donations', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('donations', 16)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('donations', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), (' investment in associate', 40), ('investment', 36), (' investment in joint venture', 33), ('derivative financial instruments', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 44), (' investment in joint venture', 39), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33), ('derivative financial instruments', 32)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('investment', 50), ('joint ventures and associates', 48), (' investment in associate', 46), (' investments accounted for using the equity method', 44), ('derivative financial instruments', 42), (' investment in joint venture', 42)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' investment in associate', 36), (' investments accounted for using the equity method', 36), ('joint ventures and associates', 33), ('derivative financial instruments', 29), (' investment in joint venture', 29), ('investment', 25)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 27), (' investment in joint venture', 20)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), (' investment in associate', 40), ('investment', 36), (' investment in joint venture', 33), ('derivative financial instruments', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 44), (' investment in joint venture', 39), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33), ('derivative financial instruments', 32)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('investment', 50), ('joint ventures and associates', 48), (' investment in associate', 46), (' investments accounted for using the equity method', 44), ('derivative financial instruments', 42), (' investment in joint venture', 42)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' investment in associate', 36), (' investments accounted for using the equity method', 36), ('joint ventures and associates', 33), ('derivative financial instruments', 29), (' investment in joint venture', 29), ('investment', 25)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 27), (' investment in joint venture', 20)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 23)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('deferred tax assets', 43), ('deferred tax', 29), ('deferred charges', 23)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('deferred charges', 22), ('deferred tax', 12), ('deferred tax assets', 9)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': 827995.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['10'], 'line_item_value': [827995.0]}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 23)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('deferred tax assets', 43), ('deferred tax', 29), ('deferred charges', 23)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('deferred charges', 22), ('deferred tax', 12), ('deferred tax assets', 9)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': 1053623.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['10'], 'line_item_value': [1053623.0]}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefito, current year , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = income tax expense(denefit) - prior year's adjustment , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit) current year , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit), prior year's adjustment , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) income tax expense , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense profit before tax , res_fuzz_match = [('deferred tax assets', 58), (' deferred tax balances', 56)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense tax at the rate of 30% (2021: 30%) , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense non-deductible entertainment , res_fuzz_match = [(' deferred tax balances', 45), ('deferred tax assets', 40)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of current tax liability in prior year , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 47)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of deferred tax in prior year , res_fuzz_match = [('deferred tax assets', 67), (' deferred tax balances', 62)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense tax expense for the year , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.3 current tax assets and liabilities , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 50)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): income tax recelvable/payable) , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 50)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 50)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefito, current year , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = income tax expense(denefit) - prior year's adjustment , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit) current year , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit), prior year's adjustment , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) income tax expense , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense profit before tax , res_fuzz_match = [('deferred tax assets', 58), (' deferred tax balances', 56)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense tax at the rate of 30% (2021: 30%) , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense non-deductible entertainment , res_fuzz_match = [(' deferred tax balances', 45), ('deferred tax assets', 40)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of current tax liability in prior year , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 47)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of deferred tax in prior year , res_fuzz_match = [('deferred tax assets', 67), (' deferred tax balances', 62)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense tax expense for the year , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.3 current tax assets and liabilities , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 50)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): income tax recelvable/payable) , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 50)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 50)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [(' deferred tax balances', 59), ('deferred tax assets', 46)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [('deferred tax assets', 60), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [(' deferred tax balances', 59), ('deferred tax assets', 46)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [('deferred tax assets', 60), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [(' deferred tax balances', 59), ('deferred tax assets', 46)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [('deferred tax assets', 60), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 30), (' loan receivables', 25), (' leases', 24)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other assets', 40), (' other assets', 40), (' exploration and evaluation expenditure', 39), (' loan receivables', 34), (' other non-current assets', 33), (' other non-current assets', 33), (' leased assets', 29), (' financial assets', 27), ('non-current', 19), (' leases', 14)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [(' other non-current assets', 55), (' other non-current assets', 55), ('other assets', 51), (' other assets', 51), (' financial assets', 49), (' leased assets', 38), (' exploration and evaluation expenditure', 37), (' loan receivables', 23), ('non-current', 15), (' leases', 11)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' leases', 18), (' other non-current assets', 15), (' other non-current assets', 15), ('non-current', 14), (' exploration and evaluation expenditure', 12), (' leased assets', 12), ('other assets', 11), (' other assets', 11), (' loan receivables', 11), (' financial assets', 10)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 33), (' loan receivables', 23), (' leases', 21), ('non-current', 9)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 30), (' loan receivables', 25), (' leases', 24)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other assets', 40), (' other assets', 40), (' exploration and evaluation expenditure', 39), (' loan receivables', 34), (' other non-current assets', 33), (' other non-current assets', 33), (' leased assets', 29), (' financial assets', 27), ('non-current', 19), (' leases', 14)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [(' other non-current assets', 55), (' other non-current assets', 55), ('other assets', 51), (' other assets', 51), (' financial assets', 49), (' leased assets', 38), (' exploration and evaluation expenditure', 37), (' loan receivables', 23), ('non-current', 15), (' leases', 11)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' leases', 18), (' other non-current assets', 15), (' other non-current assets', 15), ('non-current', 14), (' exploration and evaluation expenditure', 12), (' leased assets', 12), ('other assets', 11), (' other assets', 11), (' loan receivables', 11), (' financial assets', 10)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 33), (' loan receivables', 23), (' leases', 21), ('non-current', 9)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('non-current assets total', 43)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('non-current assets total', 23)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('non-current assets total', 59)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('non-current assets total', 43)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('non-current assets total', 23)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('non-current assets total', 59)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), ('borrowings', 20), ('shortterm borrowings', 20), (' bank overdraft', 7)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' bank overdraft', 44), (' loans and borrowings', 38), ('lease liabilities', 30), ('shortterm borrowings', 21), (' leases', 15), ('borrowings', 14), ('short term debt', 11), ('short-term debt', 11), ('shortterm debt', 11)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [(' bank overdraft', 61), (' loans and borrowings', 58), ('lease liabilities', 40), (' leases', 31), ('borrowings', 27), ('short-term debt', 26), ('shortterm debt', 26), ('short term debt', 25), ('shortterm borrowings', 16)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = customer deposits , res_fuzz_match = [('shortterm borrowings', 27), ('lease liabilities', 24), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), (' loans and borrowings', 14)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), ('short-term debt', 16), ('shortterm debt', 16), ('short term debt', 15), ('borrowings', 12), (' bank overdraft', 8), ('shortterm borrowings', 7)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('lease liabilities', 52), (' bank overdraft', 35), ('short term debt', 29), ('short-term debt', 29), ('shortterm debt', 29), (' loans and borrowings', 29), ('shortterm borrowings', 28), ('borrowings', 23), (' leases', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('short-term debt', 31), ('shortterm debt', 31), ('short term debt', 30), (' bank overdraft', 23), ('borrowings', 22), ('lease liabilities', 17), ('shortterm borrowings', 14), (' leases', 12), (' loans and borrowings', 7)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17), (' bank overdraft', 12)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('lease liabilities', 52), ('short-term debt', 38), ('shortterm debt', 38), (' bank overdraft', 38), ('short term debt', 37), ('shortterm borrowings', 36), ('borrowings', 33), (' loans and borrowings', 30), (' leases', 25)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 874163.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['21'], 'line_item_value': [874163.0]}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), ('borrowings', 20), ('shortterm borrowings', 20), (' bank overdraft', 7)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' bank overdraft', 44), (' loans and borrowings', 38), ('lease liabilities', 30), ('shortterm borrowings', 21), (' leases', 15), ('borrowings', 14), ('short term debt', 11), ('short-term debt', 11), ('shortterm debt', 11)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [(' bank overdraft', 61), (' loans and borrowings', 58), ('lease liabilities', 40), (' leases', 31), ('borrowings', 27), ('short-term debt', 26), ('shortterm debt', 26), ('short term debt', 25), ('shortterm borrowings', 16)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = customer deposits , res_fuzz_match = [('shortterm borrowings', 27), ('lease liabilities', 24), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), (' loans and borrowings', 14)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), ('short-term debt', 16), ('shortterm debt', 16), ('short term debt', 15), ('borrowings', 12), (' bank overdraft', 8), ('shortterm borrowings', 7)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('lease liabilities', 52), (' bank overdraft', 35), ('short term debt', 29), ('short-term debt', 29), ('shortterm debt', 29), (' loans and borrowings', 29), ('shortterm borrowings', 28), ('borrowings', 23), (' leases', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('short-term debt', 31), ('shortterm debt', 31), ('short term debt', 30), (' bank overdraft', 23), ('borrowings', 22), ('lease liabilities', 17), ('shortterm borrowings', 14), (' leases', 12), (' loans and borrowings', 7)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17), (' bank overdraft', 12)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('lease liabilities', 52), ('short-term debt', 38), ('shortterm debt', 38), (' bank overdraft', 38), ('short term debt', 37), ('shortterm borrowings', 36), ('borrowings', 33), (' loans and borrowings', 30), (' leases', 25)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 1486742.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['21'], 'line_item_value': [1486742.0]}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['current maturities']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('other financial liabilities', 38), ('other current liabilities', 33), ('current maturities', 17), ('current maturities of long-term debt', 16), ('current maturities of longterm debt', 16)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('other financial liabilities', 34), ('other current liabilities', 28), ('current maturities of long-term debt', 28), ('current maturities of longterm debt', 28), ('current maturities', 27)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = customer deposits , res_fuzz_match = [('current maturities of long-term debt', 34), ('current maturities of longterm debt', 34), ('current maturities', 30), ('other current liabilities', 24), ('other financial liabilities', 12)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('other financial liabilities', 100), ('other current liabilities', 70), ('current maturities of long-term debt', 30), ('current maturities of longterm debt', 30), ('current maturities', 12)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('current maturities', 40), ('current maturities of long-term debt', 26), ('current maturities of longterm debt', 26), ('other current liabilities', 25), ('other financial liabilities', 19)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), ('current maturities', 65), ('other financial liabilities', 53), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('other financial liabilities', 75), ('other current liabilities', 75), ('current maturities of long-term debt', 15), ('current maturities of longterm debt', 15), ('current maturities', 8)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 19, 21], 'score': 84, 'value': 1763539.0, 'line_item_label': ['Current liabilities', 'Other financial liabilities', 'Current tax liabilities'], 'note_numbers': [nan, '22', '10'], 'line_item_value': [0.0, 150004.0, 1613535.0]}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('other financial liabilities', 38), ('other current liabilities', 33), ('current maturities', 17), ('current maturities of long-term debt', 16), ('current maturities of longterm debt', 16)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('other financial liabilities', 34), ('other current liabilities', 28), ('current maturities of long-term debt', 28), ('current maturities of longterm debt', 28), ('current maturities', 27)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = customer deposits , res_fuzz_match = [('current maturities of long-term debt', 34), ('current maturities of longterm debt', 34), ('current maturities', 30), ('other current liabilities', 24), ('other financial liabilities', 12)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('other financial liabilities', 100), ('other current liabilities', 70), ('current maturities of long-term debt', 30), ('current maturities of longterm debt', 30), ('current maturities', 12)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('current maturities', 40), ('current maturities of long-term debt', 26), ('current maturities of longterm debt', 26), ('other current liabilities', 25), ('other financial liabilities', 19)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), ('current maturities', 65), ('other financial liabilities', 53), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('other financial liabilities', 75), ('other current liabilities', 75), ('current maturities of long-term debt', 15), ('current maturities of longterm debt', 15), ('current maturities', 8)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 19, 21], 'score': 84, 'value': 2155291.0, 'line_item_label': ['Current liabilities', 'Other financial liabilities', 'Current tax liabilities'], 'note_numbers': [nan, '22', '10'], 'line_item_value': [0.0, 0.0, 2155291.0]}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['current maturities'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [('current maturities', 42)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [('current maturities', 42)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['current maturities'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefito, current year , res_fuzz_match = [('current maturities', 80)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = income tax expense(denefit) - prior year's adjustment , res_fuzz_match = [('current maturities', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit) current year , res_fuzz_match = [('current maturities', 80)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit), prior year's adjustment , res_fuzz_match = [('current maturities', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) , res_fuzz_match = [('current maturities', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) income tax expense , res_fuzz_match = [('current maturities', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense , res_fuzz_match = [('current maturities', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense profit before tax , res_fuzz_match = [('current maturities', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense tax at the rate of 30% (2021: 30%) , res_fuzz_match = [('current maturities', 46)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense non-deductible entertainment , res_fuzz_match = [('current maturities', 40)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of current tax liability in prior year , res_fuzz_match = [('current maturities', 69)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of deferred tax in prior year , res_fuzz_match = [('current maturities', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense tax expense for the year , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.3 current tax assets and liabilities , res_fuzz_match = [('current maturities', 69)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): income tax recelvable/payable) , res_fuzz_match = [('current maturities', 69)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): , res_fuzz_match = [('current maturities', 69)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefito, current year , res_fuzz_match = [('current maturities', 80)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = income tax expense(denefit) - prior year's adjustment , res_fuzz_match = [('current maturities', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit) current year , res_fuzz_match = [('current maturities', 80)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit), prior year's adjustment , res_fuzz_match = [('current maturities', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) , res_fuzz_match = [('current maturities', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) income tax expense , res_fuzz_match = [('current maturities', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense , res_fuzz_match = [('current maturities', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense profit before tax , res_fuzz_match = [('current maturities', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense tax at the rate of 30% (2021: 30%) , res_fuzz_match = [('current maturities', 46)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense non-deductible entertainment , res_fuzz_match = [('current maturities', 40)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of current tax liability in prior year , res_fuzz_match = [('current maturities', 69)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of deferred tax in prior year , res_fuzz_match = [('current maturities', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense tax expense for the year , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.3 current tax assets and liabilities , res_fuzz_match = [('current maturities', 69)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): income tax recelvable/payable) , res_fuzz_match = [('current maturities', 69)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): , res_fuzz_match = [('current maturities', 69)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 17, 20], 'score': [80, 80, 80, 80], 'value': [3876839.0, -225627.0, 2808004.0, -213181.0], 'label': [' Income tax expense(benefito, current year', 'Deferred tax expense(benefit) Deferred tax expense(benefit) current year', ' Income tax expense(benefito, current year', 'Deferred tax expense(benefit) Deferred tax expense(benefit) current year'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['current maturities'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('current maturities', 32)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [('current maturities', 25)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [('current maturities', 42)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [('current maturities', 42)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [('current maturities', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [('current maturities', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [('current maturities', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [('current maturities', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [('current maturities', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [('current maturities', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('current maturities', 32)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [('current maturities', 25)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [('current maturities', 42)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [('current maturities', 42)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [('current maturities', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [('current maturities', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [('current maturities', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [('current maturities', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [('current maturities', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [('current maturities', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('current maturities', 32)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [('current maturities', 25)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [('current maturities', 42)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [('current maturities', 42)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [('current maturities', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [('current maturities', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [('current maturities', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [('current maturities', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [('current maturities', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [('current maturities', 31)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [('current maturities', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('note payable(debt)', 24)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = customer deposits , res_fuzz_match = [('note payable(debt)', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('note payable(debt)', 22)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('note payable(debt)', 14)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('note payable(debt)', 41)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('note payable(debt)', 21)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('note payable(debt)', 24)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = customer deposits , res_fuzz_match = [('note payable(debt)', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('note payable(debt)', 22)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('note payable(debt)', 14)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('note payable(debt)', 41)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('note payable(debt)', 21)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises', 34), ('other trade payables', 31), ('trade and other payables', 28), ('micro enterprises and small enterprises', 24), ('other than micro and small enterprises', 24), ('trade payable', 23), ('outstanding dues of micro enterprises and small enterprises', 23), ('outstanding dues of creditors other than micro enterprises and small enterprises', 22), ('outstanding dues of creditors other than', 22), ('total outstanding due of other creditors other than micro and small', 16)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('total outstanding due of other creditors other than micro and small', 39), ('small enterprises', 38), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36), ('micro enterprises and small enterprises', 35), ('micro enterprises', 32), ('outstanding dues of micro enterprises and small enterprises', 29)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('trade and other payables', 32), ('other than micro and small enterprises', 27), ('accounts payable', 26), ('micro enterprises', 25), ('small enterprises', 25), ('outstanding dues of creditors other than', 24), ('outstanding dues of micro enterprises and small enterprises', 21), ('trade payable', 19), ('micro enterprises and small enterprises', 18), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 16), ('other trade payables', 15)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = customer deposits , res_fuzz_match = [('other trade payables', 25), ('trade payable', 23), ('accounts payable', 21), ('trade and other payables', 17), ('outstanding dues of creditors other than', 17), ('micro enterprises', 14), ('small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 13), ('micro enterprises and small enterprises', 12), ('other than micro and small enterprises', 12), ('total outstanding due of other creditors other than micro and small', 11), ('outstanding dues of creditors other than micro enterprises and small enterprises', 10)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than', 14), ('total outstanding due of other creditors other than micro and small', 14)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('trade payable', 44), ('other than micro and small enterprises', 39), ('trade and other payables', 38), ('accounts payable', 35), ('outstanding dues of creditors other than', 35), ('total outstanding due of other creditors other than micro and small', 28), ('other trade payables', 26), ('outstanding dues of creditors other than micro enterprises and small enterprises', 25), ('micro enterprises', 23), ('small enterprises', 23), ('micro enterprises and small enterprises', 22), ('outstanding dues of micro enterprises and small enterprises', 21)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('trade and other payables', 35), ('other trade payables', 33), ('other than micro and small enterprises', 25), ('outstanding dues of creditors other than', 23), ('outstanding dues of micro enterprises and small enterprises', 20), ('total outstanding due of other creditors other than micro and small', 19), ('trade payable', 17), ('micro enterprises and small enterprises', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15), ('micro enterprises', 15), ('small enterprises', 15), ('accounts payable', 8)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('accounts payable', 50), ('other trade payables', 44), ('trade and other payables', 40), ('trade payable', 40), ('small enterprises', 36), ('other than micro and small enterprises', 33), ('micro enterprises', 30), ('outstanding dues of creditors other than micro enterprises and small enterprises', 28), ('outstanding dues of creditors other than', 28), ('micro enterprises and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 24), ('total outstanding due of other creditors other than micro and small', 23)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10), ('total outstanding due of other creditors other than micro and small', 9), ('other trade payables', 8), ('trade and other payables', 7)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('trade payable', 50), ('trade and other payables', 41), ('other trade payables', 33), ('other than micro and small enterprises', 33), ('outstanding dues of creditors other than', 32), ('accounts payable', 23), ('micro enterprises', 22), ('small enterprises', 22), ('total outstanding due of other creditors other than micro and small', 22), ('micro enterprises and small enterprises', 21), ('outstanding dues of creditors other than micro enterprises and small enterprises', 20), ('outstanding dues of micro enterprises and small enterprises', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': 55367844.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['18'], 'line_item_value': [55367844.0]}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises', 34), ('other trade payables', 31), ('trade and other payables', 28), ('micro enterprises and small enterprises', 24), ('other than micro and small enterprises', 24), ('trade payable', 23), ('outstanding dues of micro enterprises and small enterprises', 23), ('outstanding dues of creditors other than micro enterprises and small enterprises', 22), ('outstanding dues of creditors other than', 22), ('total outstanding due of other creditors other than micro and small', 16)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('total outstanding due of other creditors other than micro and small', 39), ('small enterprises', 38), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36), ('micro enterprises and small enterprises', 35), ('micro enterprises', 32), ('outstanding dues of micro enterprises and small enterprises', 29)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('trade and other payables', 32), ('other than micro and small enterprises', 27), ('accounts payable', 26), ('micro enterprises', 25), ('small enterprises', 25), ('outstanding dues of creditors other than', 24), ('outstanding dues of micro enterprises and small enterprises', 21), ('trade payable', 19), ('micro enterprises and small enterprises', 18), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 16), ('other trade payables', 15)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = customer deposits , res_fuzz_match = [('other trade payables', 25), ('trade payable', 23), ('accounts payable', 21), ('trade and other payables', 17), ('outstanding dues of creditors other than', 17), ('micro enterprises', 14), ('small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 13), ('micro enterprises and small enterprises', 12), ('other than micro and small enterprises', 12), ('total outstanding due of other creditors other than micro and small', 11), ('outstanding dues of creditors other than micro enterprises and small enterprises', 10)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than', 14), ('total outstanding due of other creditors other than micro and small', 14)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('trade payable', 44), ('other than micro and small enterprises', 39), ('trade and other payables', 38), ('accounts payable', 35), ('outstanding dues of creditors other than', 35), ('total outstanding due of other creditors other than micro and small', 28), ('other trade payables', 26), ('outstanding dues of creditors other than micro enterprises and small enterprises', 25), ('micro enterprises', 23), ('small enterprises', 23), ('micro enterprises and small enterprises', 22), ('outstanding dues of micro enterprises and small enterprises', 21)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('trade and other payables', 35), ('other trade payables', 33), ('other than micro and small enterprises', 25), ('outstanding dues of creditors other than', 23), ('outstanding dues of micro enterprises and small enterprises', 20), ('total outstanding due of other creditors other than micro and small', 19), ('trade payable', 17), ('micro enterprises and small enterprises', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15), ('micro enterprises', 15), ('small enterprises', 15), ('accounts payable', 8)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('accounts payable', 50), ('other trade payables', 44), ('trade and other payables', 40), ('trade payable', 40), ('small enterprises', 36), ('other than micro and small enterprises', 33), ('micro enterprises', 30), ('outstanding dues of creditors other than micro enterprises and small enterprises', 28), ('outstanding dues of creditors other than', 28), ('micro enterprises and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 24), ('total outstanding due of other creditors other than micro and small', 23)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10), ('total outstanding due of other creditors other than micro and small', 9), ('other trade payables', 8), ('trade and other payables', 7)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('trade payable', 50), ('trade and other payables', 41), ('other trade payables', 33), ('other than micro and small enterprises', 33), ('outstanding dues of creditors other than', 32), ('accounts payable', 23), ('micro enterprises', 22), ('small enterprises', 22), ('total outstanding due of other creditors other than micro and small', 22), ('micro enterprises and small enterprises', 21), ('outstanding dues of creditors other than micro enterprises and small enterprises', 20), ('outstanding dues of micro enterprises and small enterprises', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': 42899673.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['18'], 'line_item_value': [42899673.0]}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables', 100), (' trade payables - other parties', 83), (' related party payables', 76), (' other trade payables', 67), (' trade and other payables', 55), (' amounts payable to controlling entity', 55), ('trade creditors', 50), ('current', 43)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = trade payables - others , res_fuzz_match = [(' trade payables', 100), (' trade payables - other parties', 100), (' trade payables', 100), (' trade payables - related parties', 78), (' trade and other payables', 72), (' amounts payable to controlling entity', 67), (' other trade payables', 67), (' related party payables', 51), ('trade creditors', 50), ('current', 29)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('current', 43), (' amounts payable to controlling entity', 42), ('trade creditors', 33), (' related party payables', 33), (' trade payables', 27), (' trade payables', 27), (' other trade payables', 27), (' trade and other payables', 25), (' trade payables - other parties', 25), (' trade payables - related parties', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables', 100), (' trade payables - other parties', 83), (' related party payables', 76), (' other trade payables', 67), (' trade and other payables', 55), (' amounts payable to controlling entity', 55), ('trade creditors', 50), ('current', 43)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = trade payables - others , res_fuzz_match = [(' trade payables', 100), (' trade payables - other parties', 100), (' trade payables', 100), (' trade payables - related parties', 78), (' trade and other payables', 72), (' amounts payable to controlling entity', 67), (' other trade payables', 67), (' related party payables', 51), ('trade creditors', 50), ('current', 29)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('current', 43), (' amounts payable to controlling entity', 42), ('trade creditors', 33), (' related party payables', 33), (' trade payables', 27), (' trade payables', 27), (' other trade payables', 27), (' trade and other payables', 25), (' trade payables - other parties', 25), (' trade payables - related parties', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 4, 5], 'score': [100, 100, 100, 100], 'value': [41304444.0, 693692.0, 53934092.0, 410079.0], 'label': [' Trade payables related parties', ' Trade payables - others', ' Trade payables related parties', ' Trade payables - others'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables', 100), (' trade payables - other parties', 83), (' related party payables', 76), (' other trade payables', 67), (' trade and other payables', 55), (' amounts payable to controlling entity', 55), ('trade creditors', 50), ('current', 43)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables', 100), (' trade payables - other parties', 83), (' related party payables', 76), (' other trade payables', 67), (' trade and other payables', 55), (' amounts payable to controlling entity', 55), ('trade creditors', 50), ('current', 43)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': [100, 100], 'value': [0.0, 5439086.0], 'label': [' Trade payables related parties', ' Trade payables related parties'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 28)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other liabilities', 41), ('other financial liabilities', 38), ('other current liabilities', 33), ('other current financial liabilities', 32)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('other financial liabilities', 34), ('trade and other payables', 32), ('other current liabilities', 28), ('other current financial liabilities', 27), ('other liabilities', 19)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = customer deposits , res_fuzz_match = [('other current liabilities', 24), ('other current financial liabilities', 19), ('trade and other payables', 17), ('other liabilities', 15), ('other financial liabilities', 12)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('other financial liabilities', 100), ('other current financial liabilities', 83), ('other liabilities', 75), ('other current liabilities', 70), ('trade and other payables', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('trade and other payables', 35), ('other current liabilities', 25), ('other current financial liabilities', 20), ('other financial liabilities', 19), ('other liabilities', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), ('other current financial liabilities', 70), ('other financial liabilities', 53), ('other liabilities', 53), ('trade and other payables', 40)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8), ('trade and other payables', 7)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('other liabilities', 100), ('other current liabilities', 75), ('other financial liabilities', 75), ('other current financial liabilities', 60), ('trade and other payables', 41)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15, 19, 21, 23], 'score': 100, 'value': 57786316.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Other financial liabilities', 'Current tax liabilities', 'Other liabilities'], 'note_numbers': [nan, '18', '22', '10', '25'], 'line_item_value': [0.0, 55367844.0, 150004.0, 1613535.0, 654933.0]}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 28)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other liabilities', 41), ('other financial liabilities', 38), ('other current liabilities', 33), ('other current financial liabilities', 32)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('other financial liabilities', 34), ('trade and other payables', 32), ('other current liabilities', 28), ('other current financial liabilities', 27), ('other liabilities', 19)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = customer deposits , res_fuzz_match = [('other current liabilities', 24), ('other current financial liabilities', 19), ('trade and other payables', 17), ('other liabilities', 15), ('other financial liabilities', 12)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('other financial liabilities', 100), ('other current financial liabilities', 83), ('other liabilities', 75), ('other current liabilities', 70), ('trade and other payables', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('trade and other payables', 35), ('other current liabilities', 25), ('other current financial liabilities', 20), ('other financial liabilities', 19), ('other liabilities', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), ('other current financial liabilities', 70), ('other financial liabilities', 53), ('other liabilities', 53), ('trade and other payables', 40)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8), ('trade and other payables', 7)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('other liabilities', 100), ('other current liabilities', 75), ('other financial liabilities', 75), ('other current financial liabilities', 60), ('trade and other payables', 41)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15, 19, 21, 23], 'score': 100, 'value': 45569132.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Other financial liabilities', 'Current tax liabilities', 'Other liabilities'], 'note_numbers': [nan, '18', '22', '10', '25'], 'line_item_value': [0.0, 42899673.0, 0.0, 2155291.0, 514168.0]}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [('interest accrued', 44), ('accrued expenses', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = trade payables - others , res_fuzz_match = [('interest accrued', 32), ('accrued expenses', 25)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 59)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [('interest accrued', 44), ('accrued expenses', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = trade payables - others , res_fuzz_match = [('interest accrued', 32), ('accrued expenses', 25)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 59)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 6], 'score': [100, 100], 'value': [901537.0, 1023673.0], 'label': [' Accrued expenses', ' Accrued expenses'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [('interest accrued', 44), ('accrued expenses', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [('interest accrued', 44), ('accrued expenses', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [('interest accrued', 48), ('accrued expenses', 42)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [('interest accrued', 48), ('accrued expenses', 42)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefito, current year , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = income tax expense(denefit) - prior year's adjustment , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 43)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit) current year , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 40)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit), prior year's adjustment , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 29)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 21)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) income tax expense , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense profit before tax , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense tax at the rate of 30% (2021: 30%) , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense non-deductible entertainment , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 52)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of current tax liability in prior year , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of deferred tax in prior year , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense tax expense for the year , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 43)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.3 current tax assets and liabilities , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): income tax recelvable/payable) , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefito, current year , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = income tax expense(denefit) - prior year's adjustment , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 43)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit) current year , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 40)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit), prior year's adjustment , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 29)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 21)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) income tax expense , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense profit before tax , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense tax at the rate of 30% (2021: 30%) , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense non-deductible entertainment , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 52)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of current tax liability in prior year , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of deferred tax in prior year , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense tax expense for the year , res_fuzz_match = [('accrued expenses', 67), ('interest accrued', 43)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.3 current tax assets and liabilities , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): income tax recelvable/payable) , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('interest accrued', 57), ('accrued expenses', 53)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [('accrued expenses', 33), ('interest accrued', 32)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [('interest accrued', 38), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [('interest accrued', 48), ('accrued expenses', 42)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 29)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('interest accrued', 57), ('accrued expenses', 53)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [('accrued expenses', 33), ('interest accrued', 32)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [('interest accrued', 38), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [('interest accrued', 48), ('accrued expenses', 42)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 29)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('interest accrued', 57), ('accrued expenses', 53)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [('accrued expenses', 33), ('interest accrued', 32)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [('interest accrued', 38), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [('interest accrued', 48), ('accrued expenses', 42)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 38)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 29)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = gst liabilities , res_fuzz_match = [('interest accrued', 42), ('accrued expenses', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = gst liabilities , res_fuzz_match = [('interest accrued', 42), ('accrued expenses', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 65), ('current tax liabilities', 41)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('current tax liabilities', 44), (' income tax payable', 36), ('tax', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = customer deposits , res_fuzz_match = [('current tax liabilities', 36), (' income tax payable', 36), ('tax', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('current tax liabilities', 59), (' income tax payable', 48), ('tax', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 8), ('tax', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 60)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('current tax liabilities', 67), (' income tax payable', 43), ('tax', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [21], 'score': 100, 'value': 1613535.0, 'line_item_label': ['Current tax liabilities'], 'note_numbers': ['10'], 'line_item_value': [1613535.0]}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 65), ('current tax liabilities', 41)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('current tax liabilities', 44), (' income tax payable', 36), ('tax', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = customer deposits , res_fuzz_match = [('current tax liabilities', 36), (' income tax payable', 36), ('tax', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('current tax liabilities', 59), (' income tax payable', 48), ('tax', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 8), ('tax', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 60)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('current tax liabilities', 67), (' income tax payable', 43), ('tax', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [21], 'score': 100, 'value': 2155291.0, 'line_item_label': ['Current tax liabilities'], 'note_numbers': ['10'], 'line_item_value': [2155291.0]}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefito, current year , res_fuzz_match = [('income tax (refundable)/payable', 52)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = income tax expense(denefit) - prior year's adjustment , res_fuzz_match = [('income tax (refundable)/payable', 52)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit) current year , res_fuzz_match = [('income tax (refundable)/payable', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit), prior year's adjustment , res_fuzz_match = [('income tax (refundable)/payable', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) , res_fuzz_match = [('income tax (refundable)/payable', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) income tax expense , res_fuzz_match = [('income tax (refundable)/payable', 62)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense , res_fuzz_match = [('income tax (refundable)/payable', 56)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense profit before tax , res_fuzz_match = [('income tax (refundable)/payable', 61)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense tax at the rate of 30% (2021: 30%) , res_fuzz_match = [('income tax (refundable)/payable', 61)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense non-deductible entertainment , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of current tax liability in prior year , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of deferred tax in prior year , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense tax expense for the year , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.3 current tax assets and liabilities , res_fuzz_match = [('income tax (refundable)/payable', 57)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): income tax recelvable/payable) , res_fuzz_match = [('income tax (refundable)/payable', 83)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): , res_fuzz_match = [('income tax (refundable)/payable', 51)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefito, current year , res_fuzz_match = [('income tax (refundable)/payable', 52)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = income tax expense(denefit) - prior year's adjustment , res_fuzz_match = [('income tax (refundable)/payable', 52)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit) current year , res_fuzz_match = [('income tax (refundable)/payable', 33)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit), prior year's adjustment , res_fuzz_match = [('income tax (refundable)/payable', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) , res_fuzz_match = [('income tax (refundable)/payable', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) income tax expense , res_fuzz_match = [('income tax (refundable)/payable', 62)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense , res_fuzz_match = [('income tax (refundable)/payable', 56)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense profit before tax , res_fuzz_match = [('income tax (refundable)/payable', 61)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense tax at the rate of 30% (2021: 30%) , res_fuzz_match = [('income tax (refundable)/payable', 61)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense non-deductible entertainment , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of current tax liability in prior year , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of deferred tax in prior year , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense tax expense for the year , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.3 current tax assets and liabilities , res_fuzz_match = [('income tax (refundable)/payable', 57)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): income tax recelvable/payable) , res_fuzz_match = [('income tax (refundable)/payable', 83)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): , res_fuzz_match = [('income tax (refundable)/payable', 51)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [15, 32], 'score': [83, 83], 'value': [-2155291.0, -1613535.0], 'label': ['Current tax assets/liabilities): Income tax recelvable/payable)', 'Current tax assets/liabilities): Income tax recelvable/payable)'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('income tax (refundable)/payable', 46)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [('income tax (refundable)/payable', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [('income tax (refundable)/payable', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [('income tax (refundable)/payable', 37)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [('income tax (refundable)/payable', 41)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [('income tax (refundable)/payable', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [('income tax (refundable)/payable', 29)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [('income tax (refundable)/payable', 47)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [('income tax (refundable)/payable', 32)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [('income tax (refundable)/payable', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [('income tax (refundable)/payable', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [('income tax (refundable)/payable', 41)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [('income tax (refundable)/payable', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [('income tax (refundable)/payable', 14)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('income tax (refundable)/payable', 46)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [('income tax (refundable)/payable', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [('income tax (refundable)/payable', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [('income tax (refundable)/payable', 37)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [('income tax (refundable)/payable', 41)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [('income tax (refundable)/payable', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [('income tax (refundable)/payable', 29)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [('income tax (refundable)/payable', 47)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [('income tax (refundable)/payable', 32)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [('income tax (refundable)/payable', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [('income tax (refundable)/payable', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [('income tax (refundable)/payable', 41)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [('income tax (refundable)/payable', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [('income tax (refundable)/payable', 14)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('income tax (refundable)/payable', 46)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [('income tax (refundable)/payable', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [('income tax (refundable)/payable', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [('income tax (refundable)/payable', 37)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [('income tax (refundable)/payable', 41)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [('income tax (refundable)/payable', 36)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [('income tax (refundable)/payable', 29)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [('income tax (refundable)/payable', 47)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [('income tax (refundable)/payable', 32)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [('income tax (refundable)/payable', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [('income tax (refundable)/payable', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [('income tax (refundable)/payable', 41)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [('income tax (refundable)/payable', 30)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [('income tax (refundable)/payable', 14)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:17+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-04-23 14:01:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' other financial liabilities', 47), (' foreign exchange contract liability', 44), (' customer deposits', 36), (' employee benefits', 34), (' deferred revenue', 31), (' trade and other payables', 28), ('provisions', 20)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' other financial liabilities', 38), (' deferred revenue', 35), ('other current liabilities', 33), (' financial liabilities', 33), (' other current liabilities', 33), (' customer deposits', 22), (' foreign exchange contract liability', 19), ('provisions', 14), (' employee benefits', 11)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [(' financial liabilities', 43), (' employee benefits', 42), (' other financial liabilities', 34), (' trade and other payables', 32), ('other current liabilities', 28), (' other current liabilities', 28), (' foreign exchange contract liability', 25), (' deferred revenue', 19), ('provisions', 13), (' customer deposits', 9)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = customer deposits , res_fuzz_match = [(' customer deposits', 100), ('provisions', 30), ('other current liabilities', 24), (' other current liabilities', 24), (' employee benefits', 21), (' trade and other payables', 17), (' deferred revenue', 15), (' foreign exchange contract liability', 13), (' other financial liabilities', 12), (' financial liabilities', 7)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 38), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [(' other financial liabilities', 100), (' financial liabilities', 82), ('other current liabilities', 70), (' other current liabilities', 70), (' foreign exchange contract liability', 43), (' trade and other payables', 38), (' employee benefits', 23), (' deferred revenue', 19), (' customer deposits', 18), ('provisions', 8)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [(' deferred revenue', 100), (' trade and other payables', 35), ('other current liabilities', 25), (' other current liabilities', 25), (' foreign exchange contract liability', 23), ('provisions', 22), (' other financial liabilities', 19), (' financial liabilities', 15), (' employee benefits', 15), (' customer deposits', 15)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 41), (' trade and other payables', 40), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' deferred revenue', 22), ('other current liabilities', 15), (' other current liabilities', 15), (' foreign exchange contract liability', 11), (' financial liabilities', 10), (' employee benefits', 10), (' customer deposits', 10), (' other financial liabilities', 8), (' trade and other payables', 7)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('other current liabilities', 75), (' other current liabilities', 75), (' other financial liabilities', 75), (' financial liabilities', 46), (' trade and other payables', 41), (' foreign exchange contract liability', 28), (' deferred revenue', 17), (' employee benefits', 15), (' customer deposits', 15), ('provisions', 11)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15, 17, 19, 20, 21, 22], 'score': 100, 'value': 60075762.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Customer deposits', 'Other financial liabilities', 'Deferred revenue', 'Current tax liabilities', 'Provisions'], 'note_numbers': [nan, '18', nan, '22', '23', '10', '24'], 'line_item_value': [0.0, 55367844.0, 1566114.0, 150004.0, 197643.0, 1613535.0, 1180622.0]}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' other financial liabilities', 47), (' foreign exchange contract liability', 44), (' customer deposits', 36), (' employee benefits', 34), (' deferred revenue', 31), (' trade and other payables', 28), ('provisions', 20)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' other financial liabilities', 38), (' deferred revenue', 35), ('other current liabilities', 33), (' financial liabilities', 33), (' other current liabilities', 33), (' customer deposits', 22), (' foreign exchange contract liability', 19), ('provisions', 14), (' employee benefits', 11)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [(' financial liabilities', 43), (' employee benefits', 42), (' other financial liabilities', 34), (' trade and other payables', 32), ('other current liabilities', 28), (' other current liabilities', 28), (' foreign exchange contract liability', 25), (' deferred revenue', 19), ('provisions', 13), (' customer deposits', 9)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = customer deposits , res_fuzz_match = [(' customer deposits', 100), ('provisions', 30), ('other current liabilities', 24), (' other current liabilities', 24), (' employee benefits', 21), (' trade and other payables', 17), (' deferred revenue', 15), (' foreign exchange contract liability', 13), (' other financial liabilities', 12), (' financial liabilities', 7)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 38), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [(' other financial liabilities', 100), (' financial liabilities', 82), ('other current liabilities', 70), (' other current liabilities', 70), (' foreign exchange contract liability', 43), (' trade and other payables', 38), (' employee benefits', 23), (' deferred revenue', 19), (' customer deposits', 18), ('provisions', 8)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [(' deferred revenue', 100), (' trade and other payables', 35), ('other current liabilities', 25), (' other current liabilities', 25), (' foreign exchange contract liability', 23), ('provisions', 22), (' other financial liabilities', 19), (' financial liabilities', 15), (' employee benefits', 15), (' customer deposits', 15)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 41), (' trade and other payables', 40), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' deferred revenue', 22), ('other current liabilities', 15), (' other current liabilities', 15), (' foreign exchange contract liability', 11), (' financial liabilities', 10), (' employee benefits', 10), (' customer deposits', 10), (' other financial liabilities', 8), (' trade and other payables', 7)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('other current liabilities', 75), (' other current liabilities', 75), (' other financial liabilities', 75), (' financial liabilities', 46), (' trade and other payables', 41), (' foreign exchange contract liability', 28), (' deferred revenue', 17), (' employee benefits', 15), (' customer deposits', 15), ('provisions', 11)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15, 17, 19, 20, 21, 22], 'score': 100, 'value': 47655955.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Customer deposits', 'Other financial liabilities', 'Deferred revenue', 'Current tax liabilities', 'Provisions'], 'note_numbers': [nan, '18', nan, '22', '23', '10', '24'], 'line_item_value': [0.0, 42899673.0, 1445299.0, 0.0, 146859.0, 2155291.0, 1008833.0]}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' rebates', 80), (' loan payable to relayed party under tax funding agreement', 79), (' loans from related party', 76), (' other related parties', 71), (' gst payables', 70), (' warranty', 62), (' gst payable and accruals', 59), (' ultimate parent entity', 57), (' share of joint venture payables', 50), (' restructuring', 50), (' contract liabilites - current', 48), ('current', 43), (' current - liability for annual and long service leave', 42), (' employee benefits - payroll', 42), ('other creditors and accruals', 40), (' other', 40), (' make good provisions', 39), (' employee benefits - current', 36), (' provisions - current', 36), (' gst', 33), (' derivative contracts - at fair value', 32), (' gst liabilities', 32), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' total current employee benefits', 29), (' arising from service contracts', 28), (' abandonment and decommissioning costs', 24), (' provision for associate funding', 22), (' secured long-term bank loans', 18), (' forward exchange contracts', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = trade payables - others , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' share of joint venture payables', 60), (' loan payable to relayed party under tax funding agreement', 56), (' gst payable and accruals', 56), (' other creditors', 53), (' other creditors', 53), (' other creditors', 53), (' contract liabilites - current', 50), (' employee benefits - payroll', 46), (' other related parties', 45), ('other creditors and accruals', 44), (' current - liability for annual and long service leave', 44), (' derivative contracts - at fair value', 42), (' loans from related party', 40), (' gst liabilities', 40), (' rebates', 40), (' arising from service contracts', 35), (' forward exchange contracts', 35), (' ultimate parent entity', 34), (' abandonment and decommissioning costs', 33), (' gst', 33), (' total current employee benefits', 33), (' make good provisions', 31), ('current', 29), (' employee benefits - current', 28), (' warranty', 25), (' restructuring', 20), (' secured long-term bank loans', 19), (' provision for associate funding', 19), (' provisions - current', 15)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('other creditors and accruals', 53), (' gst payable and accruals', 53), (' forward exchange contracts', 50), ('current', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 42), (' total current employee benefits', 42), (' provisions - current', 40), (' contract liabilites - current', 40), (' gst', 40), (' rebates', 40), (' provision for associate funding', 35), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' secured long-term bank loans', 30), (' other creditors', 27), (' other creditors', 27), (' arising from service contracts', 27), (' other creditors', 27), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' warranty', 25), (' other related parties', 22), (' make good provisions', 20), (' restructuring', 20), (' other', 20), (' gst payables', 17), (' gst liabilities', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' rebates', 80), (' loan payable to relayed party under tax funding agreement', 79), (' loans from related party', 76), (' other related parties', 71), (' gst payables', 70), (' warranty', 62), (' gst payable and accruals', 59), (' ultimate parent entity', 57), (' share of joint venture payables', 50), (' restructuring', 50), (' contract liabilites - current', 48), ('current', 43), (' current - liability for annual and long service leave', 42), (' employee benefits - payroll', 42), ('other creditors and accruals', 40), (' other', 40), (' make good provisions', 39), (' employee benefits - current', 36), (' provisions - current', 36), (' gst', 33), (' derivative contracts - at fair value', 32), (' gst liabilities', 32), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' total current employee benefits', 29), (' arising from service contracts', 28), (' abandonment and decommissioning costs', 24), (' provision for associate funding', 22), (' secured long-term bank loans', 18), (' forward exchange contracts', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = trade payables - others , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' share of joint venture payables', 60), (' loan payable to relayed party under tax funding agreement', 56), (' gst payable and accruals', 56), (' other creditors', 53), (' other creditors', 53), (' other creditors', 53), (' contract liabilites - current', 50), (' employee benefits - payroll', 46), (' other related parties', 45), ('other creditors and accruals', 44), (' current - liability for annual and long service leave', 44), (' derivative contracts - at fair value', 42), (' loans from related party', 40), (' gst liabilities', 40), (' rebates', 40), (' arising from service contracts', 35), (' forward exchange contracts', 35), (' ultimate parent entity', 34), (' abandonment and decommissioning costs', 33), (' gst', 33), (' total current employee benefits', 33), (' make good provisions', 31), ('current', 29), (' employee benefits - current', 28), (' warranty', 25), (' restructuring', 20), (' secured long-term bank loans', 19), (' provision for associate funding', 19), (' provisions - current', 15)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('other creditors and accruals', 53), (' gst payable and accruals', 53), (' forward exchange contracts', 50), ('current', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 42), (' total current employee benefits', 42), (' provisions - current', 40), (' contract liabilites - current', 40), (' gst', 40), (' rebates', 40), (' provision for associate funding', 35), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' secured long-term bank loans', 30), (' other creditors', 27), (' other creditors', 27), (' arising from service contracts', 27), (' other creditors', 27), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' warranty', 25), (' other related parties', 22), (' make good provisions', 20), (' restructuring', 20), (' other', 20), (' gst payables', 17), (' gst liabilities', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 4, 5], 'score': [80, 100, 80, 100], 'value': [41304444.0, 693692.0, 53934092.0, 410079.0], 'label': [' Trade payables related parties', ' Trade payables - others', ' Trade payables related parties', ' Trade payables - others'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' rebates', 80), (' loan payable to relayed party under tax funding agreement', 79), (' loans from related party', 76), (' other related parties', 71), (' gst payables', 70), (' warranty', 62), (' gst payable and accruals', 59), (' ultimate parent entity', 57), (' share of joint venture payables', 50), (' restructuring', 50), (' contract liabilites - current', 48), ('current', 43), (' current - liability for annual and long service leave', 42), (' employee benefits - payroll', 42), ('other creditors and accruals', 40), (' other', 40), (' make good provisions', 39), (' employee benefits - current', 36), (' provisions - current', 36), (' gst', 33), (' derivative contracts - at fair value', 32), (' gst liabilities', 32), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' total current employee benefits', 29), (' arising from service contracts', 28), (' abandonment and decommissioning costs', 24), (' provision for associate funding', 22), (' secured long-term bank loans', 18), (' forward exchange contracts', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' rebates', 80), (' loan payable to relayed party under tax funding agreement', 79), (' loans from related party', 76), (' other related parties', 71), (' gst payables', 70), (' warranty', 62), (' gst payable and accruals', 59), (' ultimate parent entity', 57), (' share of joint venture payables', 50), (' restructuring', 50), (' contract liabilites - current', 48), ('current', 43), (' current - liability for annual and long service leave', 42), (' employee benefits - payroll', 42), ('other creditors and accruals', 40), (' other', 40), (' make good provisions', 39), (' employee benefits - current', 36), (' provisions - current', 36), (' gst', 33), (' derivative contracts - at fair value', 32), (' gst liabilities', 32), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' total current employee benefits', 29), (' arising from service contracts', 28), (' abandonment and decommissioning costs', 24), (' provision for associate funding', 22), (' secured long-term bank loans', 18), (' forward exchange contracts', 17)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': [80, 80], 'value': [0.0, 5439086.0], 'label': [' Trade payables related parties', ' Trade payables related parties'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [(' forward exchange contracts', 67), (' rebates', 60), (' other', 60), (' derivative contracts - at fair value', 59), (' arising from service contracts', 59), (' warranty', 50), (' contract liabilites - current', 48), (' restructuring', 44), ('current', 43), (' current - liability for annual and long service leave', 41), (' other creditors', 40), (' other creditors', 40), (' other creditors', 40), (' loans from related party', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' provisions - current', 36), (' share of joint venture payables', 36), (' provision for associate funding', 36), (' gst payable and accruals', 35), (' loan payable to relayed party under tax funding agreement', 34), (' gst', 33), ('other creditors and accruals', 32), (' ultimate parent entity', 32), (' gst payables', 30), (' abandonment and decommissioning costs', 30), (' gst liabilities', 30), (' total current employee benefits', 30), (' other related parties', 29), (' employee benefits - current', 26), (' employee benefits - payroll', 26)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [(' forward exchange contracts', 67), (' rebates', 60), (' other', 60), (' derivative contracts - at fair value', 59), (' arising from service contracts', 59), (' warranty', 50), (' contract liabilites - current', 48), (' restructuring', 44), ('current', 43), (' current - liability for annual and long service leave', 41), (' other creditors', 40), (' other creditors', 40), (' other creditors', 40), (' loans from related party', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' provisions - current', 36), (' share of joint venture payables', 36), (' provision for associate funding', 36), (' gst payable and accruals', 35), (' loan payable to relayed party under tax funding agreement', 34), (' gst', 33), ('other creditors and accruals', 32), (' ultimate parent entity', 32), (' gst payables', 30), (' abandonment and decommissioning costs', 30), (' gst liabilities', 30), (' total current employee benefits', 30), (' other related parties', 29), (' employee benefits - current', 26), (' employee benefits - payroll', 26)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:17+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefito, current year , res_fuzz_match = [('current', 100), (' employee benefits - current', 78), (' provisions - current', 64), (' rebates', 60), (' total current employee benefits', 59), (' employee benefits - payroll', 55), (' other related parties', 52), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' contract liabilites - current', 48), (' ultimate parent entity', 47), (' loans from related party', 45), (' restructuring', 42), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' share of joint venture payables', 38), ('other creditors and accruals', 37), (' warranty', 36), (' gst payables', 35), (' secured long-term bank loans', 34), (' derivative contracts - at fair value', 33), (' gst liabilities', 33), (' gst', 33), (' forward exchange contracts', 33), (' arising from service contracts', 32), (' make good provisions', 31), (' gst payable and accruals', 28), (' abandonment and decommissioning costs', 27), (' current - liability for annual and long service leave', 26), (' provision for associate funding', 19)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = income tax expense(denefit) - prior year's adjustment , res_fuzz_match = [(' gst', 67), (' employee benefits - payroll', 59), (' employee benefits - current', 57), (' total current employee benefits', 45), ('other creditors and accruals', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other related parties', 42), (' provision for associate funding', 41), (' other', 40), (' derivative contracts - at fair value', 38), (' make good provisions', 38), (' warranty', 38), (' ultimate parent entity', 37), (' gst payable and accruals', 37), (' provisions - current', 36), (' secured long-term bank loans', 33), (' loans from related party', 33), (' current - liability for annual and long service leave', 33), (' forward exchange contracts', 33), (' loan payable to relayed party under tax funding agreement', 32), (' arising from service contracts', 32), (' gst liabilities', 31), (' gst payables', 30), (' restructuring', 30), (' share of joint venture payables', 29), (' contract liabilites - current', 28), (' abandonment and decommissioning costs', 23), (' rebates', 20)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit) current year , res_fuzz_match = [('current', 100), (' employee benefits - current', 78), (' provisions - current', 64), (' rebates', 60), (' employee benefits - payroll', 55), (' total current employee benefits', 51), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' contract liabilites - current', 48), (' ultimate parent entity', 47), (' loans from related party', 45), (' restructuring', 42), (' other', 40), (' share of joint venture payables', 38), (' warranty', 36), ('other creditors and accruals', 35), (' gst payables', 35), (' loan payable to relayed party under tax funding agreement', 34), (' current - liability for annual and long service leave', 34), (' derivative contracts - at fair value', 33), (' secured long-term bank loans', 33), (' gst liabilities', 33), (' gst', 33), (' forward exchange contracts', 33), (' abandonment and decommissioning costs', 31), (' gst payable and accruals', 28), (' provision for associate funding', 27), (' make good provisions', 25), (' arising from service contracts', 15)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit), prior year's adjustment , res_fuzz_match = [(' gst', 67), (' employee benefits - payroll', 64), (' employee benefits - current', 57), (' total current employee benefits', 45), ('other creditors and accruals', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' other related parties', 42), (' provision for associate funding', 41), (' rebates', 40), (' other', 40), (' warranty', 38), (' gst payable and accruals', 37), (' current - liability for annual and long service leave', 36), (' provisions - current', 36), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' forward exchange contracts', 33), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' gst liabilities', 31), (' gst payables', 30), (' restructuring', 30), (' loan payable to relayed party under tax funding agreement', 29), (' share of joint venture payables', 29), (' contract liabilites - current', 28), (' secured long-term bank loans', 25), (' arising from service contracts', 24)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) , res_fuzz_match = [(' total current employee benefits', 57), (' employee benefits - payroll', 56), (' employee benefits - current', 54), (' loan payable to relayed party under tax funding agreement', 52), (' ultimate parent entity', 49), ('current', 43), (' rebates', 40), (' other', 40), (' forward exchange contracts', 39), (' gst', 33), (' arising from service contracts', 32), (' other creditors', 31), (' other creditors', 31), (' provisions - current', 31), (' other creditors', 31), (' contract liabilites - current', 30), (' other related parties', 29), (' restructuring', 29), (' share of joint venture payables', 28), (' provision for associate funding', 27), (' warranty', 27), ('other creditors and accruals', 25), (' derivative contracts - at fair value', 25), (' make good provisions', 25), (' secured long-term bank loans', 24), (' current - liability for annual and long service leave', 24), (' loans from related party', 21), (' abandonment and decommissioning costs', 21), (' gst payables', 20), (' gst liabilities', 20), (' gst payable and accruals', 12)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) income tax expense , res_fuzz_match = [(' employee benefits - current', 57), (' employee benefits - payroll', 55), (' total current employee benefits', 45), ('current', 43), (' ultimate parent entity', 42), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' share of joint venture payables', 36), (' make good provisions', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' secured long-term bank loans', 33), (' gst', 33), (' loans from related party', 32), (' abandonment and decommissioning costs', 31), (' gst liabilities', 30), (' restructuring', 30), (' other related parties', 29), (' provisions - current', 29), (' contract liabilites - current', 28), (' arising from service contracts', 28), (' provision for associate funding', 27), (' derivative contracts - at fair value', 26), (' gst payable and accruals', 23), (' gst payables', 20), (' current - liability for annual and long service leave', 17), (' warranty', 13)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense , res_fuzz_match = [('current', 43), (' provision for associate funding', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst', 40), (' rebates', 40), (' loan payable to relayed party under tax funding agreement', 39), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' make good provisions', 38), (' warranty', 38), (' other related parties', 35), (' ultimate parent entity', 34), (' share of joint venture payables', 33), (' gst payable and accruals', 32), ('other creditors and accruals', 31), (' abandonment and decommissioning costs', 31), (' restructuring', 31), (' gst liabilities', 30), (' other creditors', 29), (' other creditors', 29), (' employee benefits - payroll', 29), (' arising from service contracts', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' employee benefits - current', 28), (' total current employee benefits', 24), (' provisions - current', 21), (' other', 20), (' current - liability for annual and long service leave', 18)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense profit before tax , res_fuzz_match = [(' provision for associate funding', 53), (' provisions - current', 50), (' arising from service contracts', 45), (' make good provisions', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' share of joint venture payables', 43), (' other creditors', 43), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' ultimate parent entity', 38), (' loan payable to relayed party under tax funding agreement', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' warranty', 38), (' total current employee benefits', 38), (' other related parties', 35), ('other creditors and accruals', 33), (' gst', 33), (' forward exchange contracts', 32), (' abandonment and decommissioning costs', 31), (' current - liability for annual and long service leave', 30), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 20), (' other', 20)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:17+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense tax at the rate of 30% (2021: 30%) , res_fuzz_match = [(' other', 80), (' gst', 67), (' rebates', 60), (' other related parties', 54), (' other creditors', 45), (' other creditors', 45), (' other creditors', 45), ('current', 43), (' ultimate parent entity', 42), (' provision for associate funding', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' restructuring', 40), (' warranty', 40), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' share of joint venture payables', 36), (' gst payable and accruals', 32), ('other creditors and accruals', 31), (' abandonment and decommissioning costs', 31), (' current - liability for annual and long service leave', 30), (' gst liabilities', 30), (' provisions - current', 29), (' employee benefits - payroll', 27), (' employee benefits - current', 24)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense non-deductible entertainment , res_fuzz_match = [(' other', 60), ('current', 57), (' share of joint venture payables', 52), (' secured long-term bank loans', 44), (' employee benefits - current', 43), (' forward exchange contracts', 42), (' rebates', 40), (' restructuring', 40), (' ultimate parent entity', 38), (' other related parties', 38), (' loans from related party', 38), (' make good provisions', 38), (' warranty', 38), (' provisions - current', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 35), (' other creditors', 35), (' other creditors', 35), (' total current employee benefits', 34), (' derivative contracts - at fair value', 33), (' loan payable to relayed party under tax funding agreement', 33), (' arising from service contracts', 33), (' gst', 33), (' gst payable and accruals', 32), ('other creditors and accruals', 31), (' gst payables', 30), (' gst liabilities', 30), (' abandonment and decommissioning costs', 27), (' provision for associate funding', 27), (' current - liability for annual and long service leave', 24)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of current tax liability in prior year , res_fuzz_match = [('current', 100), (' provisions - current', 100), (' gst liabilities', 80), (' make good provisions', 62), (' other', 60), (' other related parties', 53), (' current - liability for annual and long service leave', 53), (' employee benefits - current', 52), (' contract liabilites - current', 52), (' share of joint venture payables', 52), (' gst payables', 50), (' provision for associate funding', 50), (' restructuring', 50), (' warranty', 50), (' loans from related party', 48), (' derivative contracts - at fair value', 46), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' total current employee benefits', 41), (' loan payable to relayed party under tax funding agreement', 40), (' rebates', 40), (' secured long-term bank loans', 38), (' forward exchange contracts', 38), (' gst payable and accruals', 36), (' arising from service contracts', 36), ('other creditors and accruals', 33), (' gst', 33), (' abandonment and decommissioning costs', 31)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of deferred tax in prior year , res_fuzz_match = [(' provisions - current', 64), (' make good provisions', 62), (' other', 60), (' other related parties', 53), (' share of joint venture payables', 52), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 47), (' provision for associate funding', 45), ('current', 43), (' loans from related party', 43), (' secured long-term bank loans', 42), (' current - liability for annual and long service leave', 41), (' employee benefits - payroll', 41), (' rebates', 40), (' restructuring', 40), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' contract liabilites - current', 36), (' gst', 33), (' gst payable and accruals', 32), (' gst payables', 30), (' gst liabilities', 30), (' employee benefits - current', 29), (' abandonment and decommissioning costs', 27)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense tax expense for the year , res_fuzz_match = [(' other', 60), (' share of joint venture payables', 56), (' other related parties', 54), (' loans from related party', 49), ('current', 43), (' total current employee benefits', 41), (' rebates', 40), (' restructuring', 40), (' provision for associate funding', 39), (' make good provisions', 38), (' warranty', 38), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' contract liabilites - current', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 35), (' employee benefits - current', 35), (' employee benefits - payroll', 34), (' arising from service contracts', 34), (' derivative contracts - at fair value', 33), (' secured long-term bank loans', 33), (' current - liability for annual and long service leave', 33), (' gst', 33), (' gst payable and accruals', 32), (' gst payables', 32), (' gst liabilities', 30), (' forward exchange contracts', 28), ('other creditors and accruals', 27), (' abandonment and decommissioning costs', 27)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = 10.3 current tax assets and liabilities , res_fuzz_match = [('current', 100), (' gst liabilities', 70), (' gst', 67), (' rebates', 60), (' gst payable and accruals', 50), (' current - liability for annual and long service leave', 50), (' provisions - current', 50), (' warranty', 50), (' ultimate parent entity', 47), (' contract liabilites - current', 45), (' share of joint venture payables', 44), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' provision for associate funding', 41), (' gst payables', 40), (' restructuring', 40), (' loans from related party', 38), (' make good provisions', 38), (' abandonment and decommissioning costs', 36), (' total current employee benefits', 35), (' employee benefits - current', 30), (' other creditors', 29), (' secured long-term bank loans', 29), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 28), (' employee benefits - payroll', 27), (' forward exchange contracts', 21), (' other', 20)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): income tax recelvable/payable) , res_fuzz_match = [('current', 100), (' gst liabilities', 90), (' gst payables', 70), (' gst', 67), (' rebates', 60), (' other related parties', 53), (' loans from related party', 52), (' contract liabilites - current', 52), (' provisions - current', 50), (' warranty', 50), (' share of joint venture payables', 49), (' ultimate parent entity', 47), (' gst payable and accruals', 45), (' current - liability for annual and long service leave', 43), (' arising from service contracts', 40), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' total current employee benefits', 38), ('other creditors and accruals', 35), (' forward exchange contracts', 33), (' employee benefits - payroll', 32), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' employee benefits - current', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 27)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): , res_fuzz_match = [('current', 100), (' gst liabilities', 90), (' gst', 67), (' gst payables', 60), (' rebates', 60), (' current - liability for annual and long service leave', 58), (' provisions - current', 50), (' contract liabilites - current', 50), (' warranty', 50), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 42), (' share of joint venture payables', 42), (' other related parties', 41), (' derivative contracts - at fair value', 41), (' restructuring', 40), (' loans from related party', 38), (' gst payable and accruals', 38), (' total current employee benefits', 38), ('other creditors and accruals', 36), (' secured long-term bank loans', 33), (' provision for associate funding', 33), (' employee benefits - current', 30), (' other creditors', 29), (' other creditors', 29), (' make good provisions', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' employee benefits - payroll', 27), (' abandonment and decommissioning costs', 27), (' arising from service contracts', 24), (' other', 20)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefito, current year , res_fuzz_match = [('current', 100), (' employee benefits - current', 78), (' provisions - current', 64), (' rebates', 60), (' total current employee benefits', 59), (' employee benefits - payroll', 55), (' other related parties', 52), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' contract liabilites - current', 48), (' ultimate parent entity', 47), (' loans from related party', 45), (' restructuring', 42), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' share of joint venture payables', 38), ('other creditors and accruals', 37), (' warranty', 36), (' gst payables', 35), (' secured long-term bank loans', 34), (' derivative contracts - at fair value', 33), (' gst liabilities', 33), (' gst', 33), (' forward exchange contracts', 33), (' arising from service contracts', 32), (' make good provisions', 31), (' gst payable and accruals', 28), (' abandonment and decommissioning costs', 27), (' current - liability for annual and long service leave', 26), (' provision for associate funding', 19)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = income tax expense(denefit) - prior year's adjustment , res_fuzz_match = [(' gst', 67), (' employee benefits - payroll', 59), (' employee benefits - current', 57), (' total current employee benefits', 45), ('other creditors and accruals', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other related parties', 42), (' provision for associate funding', 41), (' other', 40), (' derivative contracts - at fair value', 38), (' make good provisions', 38), (' warranty', 38), (' ultimate parent entity', 37), (' gst payable and accruals', 37), (' provisions - current', 36), (' secured long-term bank loans', 33), (' loans from related party', 33), (' current - liability for annual and long service leave', 33), (' forward exchange contracts', 33), (' loan payable to relayed party under tax funding agreement', 32), (' arising from service contracts', 32), (' gst liabilities', 31), (' gst payables', 30), (' restructuring', 30), (' share of joint venture payables', 29), (' contract liabilites - current', 28), (' abandonment and decommissioning costs', 23), (' rebates', 20)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit) current year , res_fuzz_match = [('current', 100), (' employee benefits - current', 78), (' provisions - current', 64), (' rebates', 60), (' employee benefits - payroll', 55), (' total current employee benefits', 51), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' contract liabilites - current', 48), (' ultimate parent entity', 47), (' loans from related party', 45), (' restructuring', 42), (' other', 40), (' share of joint venture payables', 38), (' warranty', 36), ('other creditors and accruals', 35), (' gst payables', 35), (' loan payable to relayed party under tax funding agreement', 34), (' current - liability for annual and long service leave', 34), (' derivative contracts - at fair value', 33), (' secured long-term bank loans', 33), (' gst liabilities', 33), (' gst', 33), (' forward exchange contracts', 33), (' abandonment and decommissioning costs', 31), (' gst payable and accruals', 28), (' provision for associate funding', 27), (' make good provisions', 25), (' arising from service contracts', 15)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit), prior year's adjustment , res_fuzz_match = [(' gst', 67), (' employee benefits - payroll', 64), (' employee benefits - current', 57), (' total current employee benefits', 45), ('other creditors and accruals', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' other related parties', 42), (' provision for associate funding', 41), (' rebates', 40), (' other', 40), (' warranty', 38), (' gst payable and accruals', 37), (' current - liability for annual and long service leave', 36), (' provisions - current', 36), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' forward exchange contracts', 33), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' gst liabilities', 31), (' gst payables', 30), (' restructuring', 30), (' loan payable to relayed party under tax funding agreement', 29), (' share of joint venture payables', 29), (' contract liabilites - current', 28), (' secured long-term bank loans', 25), (' arising from service contracts', 24)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) , res_fuzz_match = [(' total current employee benefits', 57), (' employee benefits - payroll', 56), (' employee benefits - current', 54), (' loan payable to relayed party under tax funding agreement', 52), (' ultimate parent entity', 49), ('current', 43), (' rebates', 40), (' other', 40), (' forward exchange contracts', 39), (' gst', 33), (' arising from service contracts', 32), (' other creditors', 31), (' other creditors', 31), (' provisions - current', 31), (' other creditors', 31), (' contract liabilites - current', 30), (' other related parties', 29), (' restructuring', 29), (' share of joint venture payables', 28), (' provision for associate funding', 27), (' warranty', 27), ('other creditors and accruals', 25), (' derivative contracts - at fair value', 25), (' make good provisions', 25), (' secured long-term bank loans', 24), (' current - liability for annual and long service leave', 24), (' loans from related party', 21), (' abandonment and decommissioning costs', 21), (' gst payables', 20), (' gst liabilities', 20), (' gst payable and accruals', 12)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) income tax expense , res_fuzz_match = [(' employee benefits - current', 57), (' employee benefits - payroll', 55), (' total current employee benefits', 45), ('current', 43), (' ultimate parent entity', 42), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' share of joint venture payables', 36), (' make good provisions', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' secured long-term bank loans', 33), (' gst', 33), (' loans from related party', 32), (' abandonment and decommissioning costs', 31), (' gst liabilities', 30), (' restructuring', 30), (' other related parties', 29), (' provisions - current', 29), (' contract liabilites - current', 28), (' arising from service contracts', 28), (' provision for associate funding', 27), (' derivative contracts - at fair value', 26), (' gst payable and accruals', 23), (' gst payables', 20), (' current - liability for annual and long service leave', 17), (' warranty', 13)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense , res_fuzz_match = [('current', 43), (' provision for associate funding', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst', 40), (' rebates', 40), (' loan payable to relayed party under tax funding agreement', 39), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' make good provisions', 38), (' warranty', 38), (' other related parties', 35), (' ultimate parent entity', 34), (' share of joint venture payables', 33), (' gst payable and accruals', 32), ('other creditors and accruals', 31), (' abandonment and decommissioning costs', 31), (' restructuring', 31), (' gst liabilities', 30), (' other creditors', 29), (' other creditors', 29), (' employee benefits - payroll', 29), (' arising from service contracts', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' employee benefits - current', 28), (' total current employee benefits', 24), (' provisions - current', 21), (' other', 20), (' current - liability for annual and long service leave', 18)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense profit before tax , res_fuzz_match = [(' provision for associate funding', 53), (' provisions - current', 50), (' arising from service contracts', 45), (' make good provisions', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' share of joint venture payables', 43), (' other creditors', 43), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' ultimate parent entity', 38), (' loan payable to relayed party under tax funding agreement', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' warranty', 38), (' total current employee benefits', 38), (' other related parties', 35), ('other creditors and accruals', 33), (' gst', 33), (' forward exchange contracts', 32), (' abandonment and decommissioning costs', 31), (' current - liability for annual and long service leave', 30), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 20), (' other', 20)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense tax at the rate of 30% (2021: 30%) , res_fuzz_match = [(' other', 80), (' gst', 67), (' rebates', 60), (' other related parties', 54), (' other creditors', 45), (' other creditors', 45), (' other creditors', 45), ('current', 43), (' ultimate parent entity', 42), (' provision for associate funding', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' restructuring', 40), (' warranty', 40), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' share of joint venture payables', 36), (' gst payable and accruals', 32), ('other creditors and accruals', 31), (' abandonment and decommissioning costs', 31), (' current - liability for annual and long service leave', 30), (' gst liabilities', 30), (' provisions - current', 29), (' employee benefits - payroll', 27), (' employee benefits - current', 24)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense non-deductible entertainment , res_fuzz_match = [(' other', 60), ('current', 57), (' share of joint venture payables', 52), (' secured long-term bank loans', 44), (' employee benefits - current', 43), (' forward exchange contracts', 42), (' rebates', 40), (' restructuring', 40), (' ultimate parent entity', 38), (' other related parties', 38), (' loans from related party', 38), (' make good provisions', 38), (' warranty', 38), (' provisions - current', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 35), (' other creditors', 35), (' other creditors', 35), (' total current employee benefits', 34), (' derivative contracts - at fair value', 33), (' loan payable to relayed party under tax funding agreement', 33), (' arising from service contracts', 33), (' gst', 33), (' gst payable and accruals', 32), ('other creditors and accruals', 31), (' gst payables', 30), (' gst liabilities', 30), (' abandonment and decommissioning costs', 27), (' provision for associate funding', 27), (' current - liability for annual and long service leave', 24)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of current tax liability in prior year , res_fuzz_match = [('current', 100), (' provisions - current', 100), (' gst liabilities', 80), (' make good provisions', 62), (' other', 60), (' other related parties', 53), (' current - liability for annual and long service leave', 53), (' employee benefits - current', 52), (' contract liabilites - current', 52), (' share of joint venture payables', 52), (' gst payables', 50), (' provision for associate funding', 50), (' restructuring', 50), (' warranty', 50), (' loans from related party', 48), (' derivative contracts - at fair value', 46), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' total current employee benefits', 41), (' loan payable to relayed party under tax funding agreement', 40), (' rebates', 40), (' secured long-term bank loans', 38), (' forward exchange contracts', 38), (' gst payable and accruals', 36), (' arising from service contracts', 36), ('other creditors and accruals', 33), (' gst', 33), (' abandonment and decommissioning costs', 31)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of deferred tax in prior year , res_fuzz_match = [(' provisions - current', 64), (' make good provisions', 62), (' other', 60), (' other related parties', 53), (' share of joint venture payables', 52), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 47), (' provision for associate funding', 45), ('current', 43), (' loans from related party', 43), (' secured long-term bank loans', 42), (' current - liability for annual and long service leave', 41), (' employee benefits - payroll', 41), (' rebates', 40), (' restructuring', 40), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' contract liabilites - current', 36), (' gst', 33), (' gst payable and accruals', 32), (' gst payables', 30), (' gst liabilities', 30), (' employee benefits - current', 29), (' abandonment and decommissioning costs', 27)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense tax expense for the year , res_fuzz_match = [(' other', 60), (' share of joint venture payables', 56), (' other related parties', 54), (' loans from related party', 49), ('current', 43), (' total current employee benefits', 41), (' rebates', 40), (' restructuring', 40), (' provision for associate funding', 39), (' make good provisions', 38), (' warranty', 38), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' contract liabilites - current', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 35), (' employee benefits - current', 35), (' employee benefits - payroll', 34), (' arising from service contracts', 34), (' derivative contracts - at fair value', 33), (' secured long-term bank loans', 33), (' current - liability for annual and long service leave', 33), (' gst', 33), (' gst payable and accruals', 32), (' gst payables', 32), (' gst liabilities', 30), (' forward exchange contracts', 28), ('other creditors and accruals', 27), (' abandonment and decommissioning costs', 27)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = 10.3 current tax assets and liabilities , res_fuzz_match = [('current', 100), (' gst liabilities', 70), (' gst', 67), (' rebates', 60), (' gst payable and accruals', 50), (' current - liability for annual and long service leave', 50), (' provisions - current', 50), (' warranty', 50), (' ultimate parent entity', 47), (' contract liabilites - current', 45), (' share of joint venture payables', 44), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' provision for associate funding', 41), (' gst payables', 40), (' restructuring', 40), (' loans from related party', 38), (' make good provisions', 38), (' abandonment and decommissioning costs', 36), (' total current employee benefits', 35), (' employee benefits - current', 30), (' other creditors', 29), (' secured long-term bank loans', 29), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 28), (' employee benefits - payroll', 27), (' forward exchange contracts', 21), (' other', 20)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): income tax recelvable/payable) , res_fuzz_match = [('current', 100), (' gst liabilities', 90), (' gst payables', 70), (' gst', 67), (' rebates', 60), (' other related parties', 53), (' loans from related party', 52), (' contract liabilites - current', 52), (' provisions - current', 50), (' warranty', 50), (' share of joint venture payables', 49), (' ultimate parent entity', 47), (' gst payable and accruals', 45), (' current - liability for annual and long service leave', 43), (' arising from service contracts', 40), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' total current employee benefits', 38), ('other creditors and accruals', 35), (' forward exchange contracts', 33), (' employee benefits - payroll', 32), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' employee benefits - current', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 27)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): , res_fuzz_match = [('current', 100), (' gst liabilities', 90), (' gst', 67), (' gst payables', 60), (' rebates', 60), (' current - liability for annual and long service leave', 58), (' provisions - current', 50), (' contract liabilites - current', 50), (' warranty', 50), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 42), (' share of joint venture payables', 42), (' other related parties', 41), (' derivative contracts - at fair value', 41), (' restructuring', 40), (' loans from related party', 38), (' gst payable and accruals', 38), (' total current employee benefits', 38), ('other creditors and accruals', 36), (' secured long-term bank loans', 33), (' provision for associate funding', 33), (' employee benefits - current', 30), (' other creditors', 29), (' other creditors', 29), (' make good provisions', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' employee benefits - payroll', 27), (' abandonment and decommissioning costs', 27), (' arising from service contracts', 24), (' other', 20)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 9, 11, 14, 15, 16, 17, 20, 26, 28, 31, 32, 33], 'score': [100, 100, 80, 100, 100, 100, 100, 100, 100, 80, 100, 100, 100, 100], 'value': [3876839.0, -225627.0, 3621821.0, 4173.0, 0.0, -2155291.0, -2155291.0, 2808004.0, -213181.0, 2577052.0, 188467.0, 0.0, -1613535.0, -1613535.0], 'label': [' Income tax expense(benefito, current year', 'Deferred tax expense(benefit) Deferred tax expense(benefit) current year', '10.2 Reconciliation of prima-facie income tax to tax Expense Tax at the rate of 30% (2021: 30%)', 'Tax effect of share of non-deductible expense Over/under provisions of current tax liability in prior year', '10.3 Current tax assets and liabilities ', 'Current tax assets/liabilities): Income tax recelvable/payable)', 'Current tax assets/liabilities): ', ' Income tax expense(benefito, current year', 'Deferred tax expense(benefit) Deferred tax expense(benefit) current year', '10.2 Reconciliation of prima-facie income tax to tax Expense Tax at the rate of 30% (2021: 30%)', 'Tax effect of share of non-deductible expense Over/under provisions of current tax liability in prior year', '10.3 Current tax assets and liabilities ', 'Current tax assets/liabilities): Income tax recelvable/payable)', 'Current tax assets/liabilities): '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-04-23 14:01:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:18+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('other creditors and accruals', 58), (' arising from service contracts', 57), (' provision for associate funding', 50), (' make good provisions', 50), (' loans from related party', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 46), (' gst payable and accruals', 45), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 42), (' other related parties', 41), (' provisions - current', 40), (' rebates', 40), (' other', 40), (' share of joint venture payables', 38), (' warranty', 38), (' ultimate parent entity', 37), (' secured long-term bank loans', 36), (' forward exchange contracts', 36), (' current - liability for annual and long service leave', 34), (' gst', 33), (' employee benefits - payroll', 32), (' abandonment and decommissioning costs', 32), ('current', 31), (' employee benefits - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' contract liabilites - current', 23), (' total current employee benefits', 15)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [(' arising from service contracts', 65), (' make good provisions', 50), (' loans from related party', 48), (' loan payable to relayed party under tax funding agreement', 47), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' other related parties', 41), (' provision for associate funding', 41), (' rebates', 40), (' other', 40), (' forward exchange contracts', 38), (' warranty', 38), (' ultimate parent entity', 37), ('other creditors and accruals', 35), (' derivative contracts - at fair value', 34), (' secured long-term bank loans', 33), (' current - liability for annual and long service leave', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' employee benefits - payroll', 32), (' restructuring', 30), (' employee benefits - current', 29), (' total current employee benefits', 28), (' gst payable and accruals', 27), (' share of joint venture payables', 25), ('current', 20), (' gst payables', 20), (' gst liabilities', 20), (' contract liabilites - current', 14)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [(' make good provisions', 62), (' employee benefits - payroll', 61), (' provisions - current', 60), (' loans from related party', 57), (' arising from service contracts', 57), (' employee benefits - current', 49), (' total current employee benefits', 47), (' loan payable to relayed party under tax funding agreement', 44), (' other creditors', 43), (' other creditors', 43), (' provision for associate funding', 43), (' other creditors', 43), (' current - liability for annual and long service leave', 42), (' other related parties', 41), (' rebates', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' warranty', 38), (' ultimate parent entity', 37), (' gst', 33), (' forward exchange contracts', 33), (' abandonment and decommissioning costs', 31), (' restructuring', 30), ('current', 29), (' secured long-term bank loans', 29), ('other creditors and accruals', 27), (' share of joint venture payables', 24), (' gst payables', 20), (' gst liabilities', 20), (' gst payable and accruals', 19), (' contract liabilites - current', 16)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [(' gst', 67), (' arising from service contracts', 55), (' provisions - current', 50), (' make good provisions', 50), (' rebates', 50), (' loans from related party', 48), (' loan payable to relayed party under tax funding agreement', 46), (' provision for associate funding', 45), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' share of joint venture payables', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' ultimate parent entity', 41), (' other related parties', 41), (' current - liability for annual and long service leave', 41), (' other', 40), (' abandonment and decommissioning costs', 38), (' warranty', 38), (' employee benefits - current', 35), (' gst payables', 35), (' gst liabilities', 35), (' employee benefits - payroll', 32), ('other creditors and accruals', 31), (' restructuring', 31), (' gst payable and accruals', 27), (' total current employee benefits', 27), (' contract liabilites - current', 24), (' secured long-term bank loans', 22)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [(' gst liabilities', 80), (' arising from service contracts', 57), (' loans from related party', 53), (' gst payables', 50), (' make good provisions', 50), (' provision for associate funding', 48), (' contract liabilites - current', 46), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' secured long-term bank loans', 42), (' other related parties', 41), (' rebates', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' forward exchange contracts', 38), (' warranty', 38), (' ultimate parent entity', 37), (' employee benefits - payroll', 36), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' gst', 33), ('other creditors and accruals', 31), (' gst payable and accruals', 31), (' restructuring', 30), ('current', 29), (' employee benefits - current', 26), (' total current employee benefits', 24), (' abandonment and decommissioning costs', 20)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [(' make good provisions', 100), (' provisions - current', 60), (' arising from service contracts', 56), (' loans from related party', 52), (' other creditors', 43), (' other creditors', 43), (' provision for associate funding', 43), (' other creditors', 43), (' secured long-term bank loans', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 40), (' gst', 40), (' rebates', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' abandonment and decommissioning costs', 35), (' derivative contracts - at fair value', 33), (' employee benefits - payroll', 32), ('other creditors and accruals', 31), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' share of joint venture payables', 29), (' forward exchange contracts', 27), (' employee benefits - current', 26), (' gst payable and accruals', 24), (' total current employee benefits', 21), (' contract liabilites - current', 18)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [(' derivative contracts - at fair value', 74), (' arising from service contracts', 72), (' rebates', 60), (' provisions - current', 50), (' make good provisions', 50), (' forward exchange contracts', 50), (' contract liabilites - current', 48), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 44), (' restructuring', 44), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' abandonment and decommissioning costs', 42), (' other related parties', 41), (' warranty', 40), (' other', 40), (' secured long-term bank loans', 37), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), ('other creditors and accruals', 35), (' gst', 33), (' gst payable and accruals', 32), (' current - liability for annual and long service leave', 30), (' gst payables', 30), (' gst liabilities', 24), (' total current employee benefits', 24)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [(' rebates', 60), (' loans from related party', 59), (' arising from service contracts', 59), (' provisions - current', 50), (' make good provisions', 50), (' loan payable to relayed party under tax funding agreement', 47), (' gst payables', 47), (' other related parties', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' provision for associate funding', 41), (' other', 40), (' warranty', 38), (' ultimate parent entity', 37), (' employee benefits - payroll', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' current - liability for annual and long service leave', 32), (' forward exchange contracts', 32), (' secured long-term bank loans', 31), (' employee benefits - current', 30), (' share of joint venture payables', 30), ('current', 29), (' abandonment and decommissioning costs', 29), (' gst payable and accruals', 28), (' restructuring', 27), ('other creditors and accruals', 26), (' contract liabilites - current', 23), (' gst liabilities', 22), (' total current employee benefits', 18)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [(' arising from service contracts', 64), (' loans from related party', 57), (' ultimate parent entity', 54), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' provisions - current', 50), (' make good provisions', 50), ('other creditors and accruals', 46), (' provision for associate funding', 45), (' abandonment and decommissioning costs', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other related parties', 41), (' derivative contracts - at fair value', 41), (' rebates', 40), (' other', 40), (' warranty', 38), (' employee benefits - payroll', 36), (' loan payable to relayed party under tax funding agreement', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' gst', 33), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 29), (' total current employee benefits', 29), (' contract liabilites - current', 27)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [(' rebates', 67), (' provision for associate funding', 65), (' arising from service contracts', 64), (' provisions - current', 57), (' make good provisions', 50), (' loans from related party', 48), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other related parties', 41), (' other', 40), (' employee benefits - current', 39), (' share of joint venture payables', 39), (' warranty', 38), (' ultimate parent entity', 37), (' loan payable to relayed party under tax funding agreement', 37), (' forward exchange contracts', 37), (' total current employee benefits', 36), (' secured long-term bank loans', 33), (' gst payables', 33), (' gst liabilities', 33), (' gst', 33), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), ('other creditors and accruals', 31), (' abandonment and decommissioning costs', 30), (' restructuring', 30), ('current', 29), (' current - liability for annual and long service leave', 29), (' gst payable and accruals', 27), (' derivative contracts - at fair value', 21)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [(' gst', 67), (' arising from service contracts', 56), (' loans from related party', 52), (' provision for associate funding', 50), (' make good provisions', 50), (' loan payable to relayed party under tax funding agreement', 47), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' abandonment and decommissioning costs', 35), (' restructuring', 33), (' employee benefits - payroll', 32), ('other creditors and accruals', 31), (' employee benefits - current', 30), ('current', 29), (' gst payable and accruals', 29), (' forward exchange contracts', 29), (' contract liabilites - current', 28), (' secured long-term bank loans', 25), (' share of joint venture payables', 22)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [(' provisions - current', 77), (' arising from service contracts', 60), (' provision for associate funding', 59), (' make good provisions', 56), (' loans from related party', 52), ('current', 50), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' other related parties', 41), (' current - liability for annual and long service leave', 41), (' rebates', 40), (' warranty', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 39), (' derivative contracts - at fair value', 38), (' ultimate parent entity', 37), ('other creditors and accruals', 36), (' employee benefits - payroll', 36), (' secured long-term bank loans', 34), (' gst payables', 33), (' gst', 33), (' gst liabilities', 32), (' share of joint venture payables', 31), (' abandonment and decommissioning costs', 31), (' restructuring', 30), (' total current employee benefits', 30), (' forward exchange contracts', 29), (' gst payable and accruals', 28), (' contract liabilites - current', 27)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [(' provisions - current', 72), (' arising from service contracts', 60), (' make good provisions', 56), (' loans from related party', 49), (' other related parties', 48), (' provision for associate funding', 48), (' employee benefits - payroll', 45), (' gst payables', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' current - liability for annual and long service leave', 42), (' ultimate parent entity', 41), (' rebates', 40), (' warranty', 40), (' other', 40), (' derivative contracts - at fair value', 38), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' share of joint venture payables', 35), (' gst payable and accruals', 33), (' gst', 33), (' abandonment and decommissioning costs', 31), (' gst liabilities', 30), (' restructuring', 30), (' total current employee benefits', 30), ('current', 29), (' secured long-term bank loans', 29), (' forward exchange contracts', 29), (' loan payable to relayed party under tax funding agreement', 23), (' contract liabilites - current', 8)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [(' rebates', 60), (' loans from related party', 56), (' arising from service contracts', 51), (' make good provisions', 50), (' loan payable to relayed party under tax funding agreement', 49), (' provision for associate funding', 44), ('current', 43), (' other related parties', 43), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' other', 40), (' restructuring', 38), (' warranty', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' secured long-term bank loans', 34), (' gst', 33), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), ('other creditors and accruals', 31), (' abandonment and decommissioning costs', 31), (' employee benefits - current', 30), (' gst payables', 30), (' gst liabilities', 30), (' forward exchange contracts', 30), (' gst payable and accruals', 29), (' total current employee benefits', 20), (' share of joint venture payables', 18)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [(' other', 100), (' arising from service contracts', 60), (' other creditors', 53), (' other creditors', 53), (' other creditors', 53), (' make good provisions', 50), (' loan payable to relayed party under tax funding agreement', 48), (' other related parties', 45), (' loans from related party', 44), (' provisions - current', 43), (' rebates', 40), (' secured long-term bank loans', 38), (' abandonment and decommissioning costs', 38), (' warranty', 38), (' ultimate parent entity', 37), (' provision for associate funding', 37), (' derivative contracts - at fair value', 35), (' current - liability for annual and long service leave', 33), (' gst', 33), (' forward exchange contracts', 33), ('other creditors and accruals', 32), (' employee benefits - payroll', 32), (' restructuring', 30), ('current', 29), (' gst payable and accruals', 27), (' employee benefits - current', 26), (' total current employee benefits', 24), (' contract liabilites - current', 20), (' gst payables', 20), (' gst liabilities', 20), (' share of joint venture payables', 19)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 52), (' make good provisions', 50), (' other creditors', 43), (' other creditors', 43), (' arising from service contracts', 43), (' other creditors', 43), (' other related parties', 41), (' secured long-term bank loans', 40), (' loans from related party', 40), (' provisions - current', 40), (' rebates', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' current - liability for annual and long service leave', 38), (' employee benefits - payroll', 38), (' warranty', 38), (' ultimate parent entity', 37), (' abandonment and decommissioning costs', 35), ('other creditors and accruals', 33), (' share of joint venture payables', 33), (' provision for associate funding', 33), (' gst', 33), (' restructuring', 33), ('current', 29), (' forward exchange contracts', 29), (' gst payable and accruals', 24), (' employee benefits - current', 24), (' gst payables', 24), (' gst liabilities', 24), (' total current employee benefits', 24), (' contract liabilites - current', 14)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('other creditors and accruals', 58), (' arising from service contracts', 57), (' provision for associate funding', 50), (' make good provisions', 50), (' loans from related party', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 46), (' gst payable and accruals', 45), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 42), (' other related parties', 41), (' provisions - current', 40), (' rebates', 40), (' other', 40), (' share of joint venture payables', 38), (' warranty', 38), (' ultimate parent entity', 37), (' secured long-term bank loans', 36), (' forward exchange contracts', 36), (' current - liability for annual and long service leave', 34), (' gst', 33), (' employee benefits - payroll', 32), (' abandonment and decommissioning costs', 32), ('current', 31), (' employee benefits - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' contract liabilites - current', 23), (' total current employee benefits', 15)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [(' arising from service contracts', 65), (' make good provisions', 50), (' loans from related party', 48), (' loan payable to relayed party under tax funding agreement', 47), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' other related parties', 41), (' provision for associate funding', 41), (' rebates', 40), (' other', 40), (' forward exchange contracts', 38), (' warranty', 38), (' ultimate parent entity', 37), ('other creditors and accruals', 35), (' derivative contracts - at fair value', 34), (' secured long-term bank loans', 33), (' current - liability for annual and long service leave', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' employee benefits - payroll', 32), (' restructuring', 30), (' employee benefits - current', 29), (' total current employee benefits', 28), (' gst payable and accruals', 27), (' share of joint venture payables', 25), ('current', 20), (' gst payables', 20), (' gst liabilities', 20), (' contract liabilites - current', 14)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [(' make good provisions', 62), (' employee benefits - payroll', 61), (' provisions - current', 60), (' loans from related party', 57), (' arising from service contracts', 57), (' employee benefits - current', 49), (' total current employee benefits', 47), (' loan payable to relayed party under tax funding agreement', 44), (' other creditors', 43), (' other creditors', 43), (' provision for associate funding', 43), (' other creditors', 43), (' current - liability for annual and long service leave', 42), (' other related parties', 41), (' rebates', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' warranty', 38), (' ultimate parent entity', 37), (' gst', 33), (' forward exchange contracts', 33), (' abandonment and decommissioning costs', 31), (' restructuring', 30), ('current', 29), (' secured long-term bank loans', 29), ('other creditors and accruals', 27), (' share of joint venture payables', 24), (' gst payables', 20), (' gst liabilities', 20), (' gst payable and accruals', 19), (' contract liabilites - current', 16)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [(' gst', 67), (' arising from service contracts', 55), (' provisions - current', 50), (' make good provisions', 50), (' rebates', 50), (' loans from related party', 48), (' loan payable to relayed party under tax funding agreement', 46), (' provision for associate funding', 45), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' share of joint venture payables', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' ultimate parent entity', 41), (' other related parties', 41), (' current - liability for annual and long service leave', 41), (' other', 40), (' abandonment and decommissioning costs', 38), (' warranty', 38), (' employee benefits - current', 35), (' gst payables', 35), (' gst liabilities', 35), (' employee benefits - payroll', 32), ('other creditors and accruals', 31), (' restructuring', 31), (' gst payable and accruals', 27), (' total current employee benefits', 27), (' contract liabilites - current', 24), (' secured long-term bank loans', 22)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [(' gst liabilities', 80), (' arising from service contracts', 57), (' loans from related party', 53), (' gst payables', 50), (' make good provisions', 50), (' provision for associate funding', 48), (' contract liabilites - current', 46), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' secured long-term bank loans', 42), (' other related parties', 41), (' rebates', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' forward exchange contracts', 38), (' warranty', 38), (' ultimate parent entity', 37), (' employee benefits - payroll', 36), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' gst', 33), ('other creditors and accruals', 31), (' gst payable and accruals', 31), (' restructuring', 30), ('current', 29), (' employee benefits - current', 26), (' total current employee benefits', 24), (' abandonment and decommissioning costs', 20)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [(' make good provisions', 100), (' provisions - current', 60), (' arising from service contracts', 56), (' loans from related party', 52), (' other creditors', 43), (' other creditors', 43), (' provision for associate funding', 43), (' other creditors', 43), (' secured long-term bank loans', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 40), (' gst', 40), (' rebates', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' abandonment and decommissioning costs', 35), (' derivative contracts - at fair value', 33), (' employee benefits - payroll', 32), ('other creditors and accruals', 31), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' share of joint venture payables', 29), (' forward exchange contracts', 27), (' employee benefits - current', 26), (' gst payable and accruals', 24), (' total current employee benefits', 21), (' contract liabilites - current', 18)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [(' derivative contracts - at fair value', 74), (' arising from service contracts', 72), (' rebates', 60), (' provisions - current', 50), (' make good provisions', 50), (' forward exchange contracts', 50), (' contract liabilites - current', 48), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 44), (' restructuring', 44), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' abandonment and decommissioning costs', 42), (' other related parties', 41), (' warranty', 40), (' other', 40), (' secured long-term bank loans', 37), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), ('other creditors and accruals', 35), (' gst', 33), (' gst payable and accruals', 32), (' current - liability for annual and long service leave', 30), (' gst payables', 30), (' gst liabilities', 24), (' total current employee benefits', 24)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [(' rebates', 60), (' loans from related party', 59), (' arising from service contracts', 59), (' provisions - current', 50), (' make good provisions', 50), (' loan payable to relayed party under tax funding agreement', 47), (' gst payables', 47), (' other related parties', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' provision for associate funding', 41), (' other', 40), (' warranty', 38), (' ultimate parent entity', 37), (' employee benefits - payroll', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' current - liability for annual and long service leave', 32), (' forward exchange contracts', 32), (' secured long-term bank loans', 31), (' employee benefits - current', 30), (' share of joint venture payables', 30), ('current', 29), (' abandonment and decommissioning costs', 29), (' gst payable and accruals', 28), (' restructuring', 27), ('other creditors and accruals', 26), (' contract liabilites - current', 23), (' gst liabilities', 22), (' total current employee benefits', 18)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [(' arising from service contracts', 64), (' loans from related party', 57), (' ultimate parent entity', 54), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' provisions - current', 50), (' make good provisions', 50), ('other creditors and accruals', 46), (' provision for associate funding', 45), (' abandonment and decommissioning costs', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other related parties', 41), (' derivative contracts - at fair value', 41), (' rebates', 40), (' other', 40), (' warranty', 38), (' employee benefits - payroll', 36), (' loan payable to relayed party under tax funding agreement', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' gst', 33), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 29), (' total current employee benefits', 29), (' contract liabilites - current', 27)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [(' rebates', 67), (' provision for associate funding', 65), (' arising from service contracts', 64), (' provisions - current', 57), (' make good provisions', 50), (' loans from related party', 48), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other related parties', 41), (' other', 40), (' employee benefits - current', 39), (' share of joint venture payables', 39), (' warranty', 38), (' ultimate parent entity', 37), (' loan payable to relayed party under tax funding agreement', 37), (' forward exchange contracts', 37), (' total current employee benefits', 36), (' secured long-term bank loans', 33), (' gst payables', 33), (' gst liabilities', 33), (' gst', 33), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), ('other creditors and accruals', 31), (' abandonment and decommissioning costs', 30), (' restructuring', 30), ('current', 29), (' current - liability for annual and long service leave', 29), (' gst payable and accruals', 27), (' derivative contracts - at fair value', 21)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [(' gst', 67), (' arising from service contracts', 56), (' loans from related party', 52), (' provision for associate funding', 50), (' make good provisions', 50), (' loan payable to relayed party under tax funding agreement', 47), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' abandonment and decommissioning costs', 35), (' restructuring', 33), (' employee benefits - payroll', 32), ('other creditors and accruals', 31), (' employee benefits - current', 30), ('current', 29), (' gst payable and accruals', 29), (' forward exchange contracts', 29), (' contract liabilites - current', 28), (' secured long-term bank loans', 25), (' share of joint venture payables', 22)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [(' provisions - current', 77), (' arising from service contracts', 60), (' provision for associate funding', 59), (' make good provisions', 56), (' loans from related party', 52), ('current', 50), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' other related parties', 41), (' current - liability for annual and long service leave', 41), (' rebates', 40), (' warranty', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 39), (' derivative contracts - at fair value', 38), (' ultimate parent entity', 37), ('other creditors and accruals', 36), (' employee benefits - payroll', 36), (' secured long-term bank loans', 34), (' gst payables', 33), (' gst', 33), (' gst liabilities', 32), (' share of joint venture payables', 31), (' abandonment and decommissioning costs', 31), (' restructuring', 30), (' total current employee benefits', 30), (' forward exchange contracts', 29), (' gst payable and accruals', 28), (' contract liabilites - current', 27)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [(' provisions - current', 72), (' arising from service contracts', 60), (' make good provisions', 56), (' loans from related party', 49), (' other related parties', 48), (' provision for associate funding', 48), (' employee benefits - payroll', 45), (' gst payables', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' current - liability for annual and long service leave', 42), (' ultimate parent entity', 41), (' rebates', 40), (' warranty', 40), (' other', 40), (' derivative contracts - at fair value', 38), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' share of joint venture payables', 35), (' gst payable and accruals', 33), (' gst', 33), (' abandonment and decommissioning costs', 31), (' gst liabilities', 30), (' restructuring', 30), (' total current employee benefits', 30), ('current', 29), (' secured long-term bank loans', 29), (' forward exchange contracts', 29), (' loan payable to relayed party under tax funding agreement', 23), (' contract liabilites - current', 8)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [(' rebates', 60), (' loans from related party', 56), (' arising from service contracts', 51), (' make good provisions', 50), (' loan payable to relayed party under tax funding agreement', 49), (' provision for associate funding', 44), ('current', 43), (' other related parties', 43), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' other', 40), (' restructuring', 38), (' warranty', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' secured long-term bank loans', 34), (' gst', 33), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), ('other creditors and accruals', 31), (' abandonment and decommissioning costs', 31), (' employee benefits - current', 30), (' gst payables', 30), (' gst liabilities', 30), (' forward exchange contracts', 30), (' gst payable and accruals', 29), (' total current employee benefits', 20), (' share of joint venture payables', 18)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [(' other', 100), (' arising from service contracts', 60), (' other creditors', 53), (' other creditors', 53), (' other creditors', 53), (' make good provisions', 50), (' loan payable to relayed party under tax funding agreement', 48), (' other related parties', 45), (' loans from related party', 44), (' provisions - current', 43), (' rebates', 40), (' secured long-term bank loans', 38), (' abandonment and decommissioning costs', 38), (' warranty', 38), (' ultimate parent entity', 37), (' provision for associate funding', 37), (' derivative contracts - at fair value', 35), (' current - liability for annual and long service leave', 33), (' gst', 33), (' forward exchange contracts', 33), ('other creditors and accruals', 32), (' employee benefits - payroll', 32), (' restructuring', 30), ('current', 29), (' gst payable and accruals', 27), (' employee benefits - current', 26), (' total current employee benefits', 24), (' contract liabilites - current', 20), (' gst payables', 20), (' gst liabilities', 20), (' share of joint venture payables', 19)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 52), (' make good provisions', 50), (' other creditors', 43), (' other creditors', 43), (' arising from service contracts', 43), (' other creditors', 43), (' other related parties', 41), (' secured long-term bank loans', 40), (' loans from related party', 40), (' provisions - current', 40), (' rebates', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' current - liability for annual and long service leave', 38), (' employee benefits - payroll', 38), (' warranty', 38), (' ultimate parent entity', 37), (' abandonment and decommissioning costs', 35), ('other creditors and accruals', 33), (' share of joint venture payables', 33), (' provision for associate funding', 33), (' gst', 33), (' restructuring', 33), ('current', 29), (' forward exchange contracts', 29), (' gst payable and accruals', 24), (' employee benefits - current', 24), (' gst payables', 24), (' gst liabilities', 24), (' total current employee benefits', 24), (' contract liabilites - current', 14)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('other creditors and accruals', 58), (' arising from service contracts', 57), (' provision for associate funding', 50), (' make good provisions', 50), (' loans from related party', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 46), (' gst payable and accruals', 45), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 42), (' other related parties', 41), (' provisions - current', 40), (' rebates', 40), (' other', 40), (' share of joint venture payables', 38), (' warranty', 38), (' ultimate parent entity', 37), (' secured long-term bank loans', 36), (' forward exchange contracts', 36), (' current - liability for annual and long service leave', 34), (' gst', 33), (' employee benefits - payroll', 32), (' abandonment and decommissioning costs', 32), ('current', 31), (' employee benefits - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' contract liabilites - current', 23), (' total current employee benefits', 15)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [(' arising from service contracts', 65), (' make good provisions', 50), (' loans from related party', 48), (' loan payable to relayed party under tax funding agreement', 47), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' other related parties', 41), (' provision for associate funding', 41), (' rebates', 40), (' other', 40), (' forward exchange contracts', 38), (' warranty', 38), (' ultimate parent entity', 37), ('other creditors and accruals', 35), (' derivative contracts - at fair value', 34), (' secured long-term bank loans', 33), (' current - liability for annual and long service leave', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' employee benefits - payroll', 32), (' restructuring', 30), (' employee benefits - current', 29), (' total current employee benefits', 28), (' gst payable and accruals', 27), (' share of joint venture payables', 25), ('current', 20), (' gst payables', 20), (' gst liabilities', 20), (' contract liabilites - current', 14)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [(' make good provisions', 62), (' employee benefits - payroll', 61), (' provisions - current', 60), (' loans from related party', 57), (' arising from service contracts', 57), (' employee benefits - current', 49), (' total current employee benefits', 47), (' loan payable to relayed party under tax funding agreement', 44), (' other creditors', 43), (' other creditors', 43), (' provision for associate funding', 43), (' other creditors', 43), (' current - liability for annual and long service leave', 42), (' other related parties', 41), (' rebates', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' warranty', 38), (' ultimate parent entity', 37), (' gst', 33), (' forward exchange contracts', 33), (' abandonment and decommissioning costs', 31), (' restructuring', 30), ('current', 29), (' secured long-term bank loans', 29), ('other creditors and accruals', 27), (' share of joint venture payables', 24), (' gst payables', 20), (' gst liabilities', 20), (' gst payable and accruals', 19), (' contract liabilites - current', 16)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [(' gst', 67), (' arising from service contracts', 55), (' provisions - current', 50), (' make good provisions', 50), (' rebates', 50), (' loans from related party', 48), (' loan payable to relayed party under tax funding agreement', 46), (' provision for associate funding', 45), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' share of joint venture payables', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' ultimate parent entity', 41), (' other related parties', 41), (' current - liability for annual and long service leave', 41), (' other', 40), (' abandonment and decommissioning costs', 38), (' warranty', 38), (' employee benefits - current', 35), (' gst payables', 35), (' gst liabilities', 35), (' employee benefits - payroll', 32), ('other creditors and accruals', 31), (' restructuring', 31), (' gst payable and accruals', 27), (' total current employee benefits', 27), (' contract liabilites - current', 24), (' secured long-term bank loans', 22)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [(' gst liabilities', 80), (' arising from service contracts', 57), (' loans from related party', 53), (' gst payables', 50), (' make good provisions', 50), (' provision for associate funding', 48), (' contract liabilites - current', 46), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' secured long-term bank loans', 42), (' other related parties', 41), (' rebates', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' forward exchange contracts', 38), (' warranty', 38), (' ultimate parent entity', 37), (' employee benefits - payroll', 36), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' gst', 33), ('other creditors and accruals', 31), (' gst payable and accruals', 31), (' restructuring', 30), ('current', 29), (' employee benefits - current', 26), (' total current employee benefits', 24), (' abandonment and decommissioning costs', 20)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [(' make good provisions', 100), (' provisions - current', 60), (' arising from service contracts', 56), (' loans from related party', 52), (' other creditors', 43), (' other creditors', 43), (' provision for associate funding', 43), (' other creditors', 43), (' secured long-term bank loans', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 40), (' gst', 40), (' rebates', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' abandonment and decommissioning costs', 35), (' derivative contracts - at fair value', 33), (' employee benefits - payroll', 32), ('other creditors and accruals', 31), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' share of joint venture payables', 29), (' forward exchange contracts', 27), (' employee benefits - current', 26), (' gst payable and accruals', 24), (' total current employee benefits', 21), (' contract liabilites - current', 18)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [(' derivative contracts - at fair value', 74), (' arising from service contracts', 72), (' rebates', 60), (' provisions - current', 50), (' make good provisions', 50), (' forward exchange contracts', 50), (' contract liabilites - current', 48), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 44), (' restructuring', 44), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' abandonment and decommissioning costs', 42), (' other related parties', 41), (' warranty', 40), (' other', 40), (' secured long-term bank loans', 37), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), ('other creditors and accruals', 35), (' gst', 33), (' gst payable and accruals', 32), (' current - liability for annual and long service leave', 30), (' gst payables', 30), (' gst liabilities', 24), (' total current employee benefits', 24)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [(' rebates', 60), (' loans from related party', 59), (' arising from service contracts', 59), (' provisions - current', 50), (' make good provisions', 50), (' loan payable to relayed party under tax funding agreement', 47), (' gst payables', 47), (' other related parties', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' provision for associate funding', 41), (' other', 40), (' warranty', 38), (' ultimate parent entity', 37), (' employee benefits - payroll', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' current - liability for annual and long service leave', 32), (' forward exchange contracts', 32), (' secured long-term bank loans', 31), (' employee benefits - current', 30), (' share of joint venture payables', 30), ('current', 29), (' abandonment and decommissioning costs', 29), (' gst payable and accruals', 28), (' restructuring', 27), ('other creditors and accruals', 26), (' contract liabilites - current', 23), (' gst liabilities', 22), (' total current employee benefits', 18)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [(' arising from service contracts', 64), (' loans from related party', 57), (' ultimate parent entity', 54), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' provisions - current', 50), (' make good provisions', 50), ('other creditors and accruals', 46), (' provision for associate funding', 45), (' abandonment and decommissioning costs', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other related parties', 41), (' derivative contracts - at fair value', 41), (' rebates', 40), (' other', 40), (' warranty', 38), (' employee benefits - payroll', 36), (' loan payable to relayed party under tax funding agreement', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' gst', 33), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 29), (' total current employee benefits', 29), (' contract liabilites - current', 27)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [(' rebates', 67), (' provision for associate funding', 65), (' arising from service contracts', 64), (' provisions - current', 57), (' make good provisions', 50), (' loans from related party', 48), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other related parties', 41), (' other', 40), (' employee benefits - current', 39), (' share of joint venture payables', 39), (' warranty', 38), (' ultimate parent entity', 37), (' loan payable to relayed party under tax funding agreement', 37), (' forward exchange contracts', 37), (' total current employee benefits', 36), (' secured long-term bank loans', 33), (' gst payables', 33), (' gst liabilities', 33), (' gst', 33), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), ('other creditors and accruals', 31), (' abandonment and decommissioning costs', 30), (' restructuring', 30), ('current', 29), (' current - liability for annual and long service leave', 29), (' gst payable and accruals', 27), (' derivative contracts - at fair value', 21)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [(' gst', 67), (' arising from service contracts', 56), (' loans from related party', 52), (' provision for associate funding', 50), (' make good provisions', 50), (' loan payable to relayed party under tax funding agreement', 47), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' abandonment and decommissioning costs', 35), (' restructuring', 33), (' employee benefits - payroll', 32), ('other creditors and accruals', 31), (' employee benefits - current', 30), ('current', 29), (' gst payable and accruals', 29), (' forward exchange contracts', 29), (' contract liabilites - current', 28), (' secured long-term bank loans', 25), (' share of joint venture payables', 22)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [(' provisions - current', 77), (' arising from service contracts', 60), (' provision for associate funding', 59), (' make good provisions', 56), (' loans from related party', 52), ('current', 50), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' other related parties', 41), (' current - liability for annual and long service leave', 41), (' rebates', 40), (' warranty', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 39), (' derivative contracts - at fair value', 38), (' ultimate parent entity', 37), ('other creditors and accruals', 36), (' employee benefits - payroll', 36), (' secured long-term bank loans', 34), (' gst payables', 33), (' gst', 33), (' gst liabilities', 32), (' share of joint venture payables', 31), (' abandonment and decommissioning costs', 31), (' restructuring', 30), (' total current employee benefits', 30), (' forward exchange contracts', 29), (' gst payable and accruals', 28), (' contract liabilites - current', 27)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [(' provisions - current', 72), (' arising from service contracts', 60), (' make good provisions', 56), (' loans from related party', 49), (' other related parties', 48), (' provision for associate funding', 48), (' employee benefits - payroll', 45), (' gst payables', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' current - liability for annual and long service leave', 42), (' ultimate parent entity', 41), (' rebates', 40), (' warranty', 40), (' other', 40), (' derivative contracts - at fair value', 38), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' share of joint venture payables', 35), (' gst payable and accruals', 33), (' gst', 33), (' abandonment and decommissioning costs', 31), (' gst liabilities', 30), (' restructuring', 30), (' total current employee benefits', 30), ('current', 29), (' secured long-term bank loans', 29), (' forward exchange contracts', 29), (' loan payable to relayed party under tax funding agreement', 23), (' contract liabilites - current', 8)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [(' rebates', 60), (' loans from related party', 56), (' arising from service contracts', 51), (' make good provisions', 50), (' loan payable to relayed party under tax funding agreement', 49), (' provision for associate funding', 44), ('current', 43), (' other related parties', 43), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' other', 40), (' restructuring', 38), (' warranty', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' secured long-term bank loans', 34), (' gst', 33), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), ('other creditors and accruals', 31), (' abandonment and decommissioning costs', 31), (' employee benefits - current', 30), (' gst payables', 30), (' gst liabilities', 30), (' forward exchange contracts', 30), (' gst payable and accruals', 29), (' total current employee benefits', 20), (' share of joint venture payables', 18)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [(' other', 100), (' arising from service contracts', 60), (' other creditors', 53), (' other creditors', 53), (' other creditors', 53), (' make good provisions', 50), (' loan payable to relayed party under tax funding agreement', 48), (' other related parties', 45), (' loans from related party', 44), (' provisions - current', 43), (' rebates', 40), (' secured long-term bank loans', 38), (' abandonment and decommissioning costs', 38), (' warranty', 38), (' ultimate parent entity', 37), (' provision for associate funding', 37), (' derivative contracts - at fair value', 35), (' current - liability for annual and long service leave', 33), (' gst', 33), (' forward exchange contracts', 33), ('other creditors and accruals', 32), (' employee benefits - payroll', 32), (' restructuring', 30), ('current', 29), (' gst payable and accruals', 27), (' employee benefits - current', 26), (' total current employee benefits', 24), (' contract liabilites - current', 20), (' gst payables', 20), (' gst liabilities', 20), (' share of joint venture payables', 19)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 52), (' make good provisions', 50), (' other creditors', 43), (' other creditors', 43), (' arising from service contracts', 43), (' other creditors', 43), (' other related parties', 41), (' secured long-term bank loans', 40), (' loans from related party', 40), (' provisions - current', 40), (' rebates', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' current - liability for annual and long service leave', 38), (' employee benefits - payroll', 38), (' warranty', 38), (' ultimate parent entity', 37), (' abandonment and decommissioning costs', 35), ('other creditors and accruals', 33), (' share of joint venture payables', 33), (' provision for associate funding', 33), (' gst', 33), (' restructuring', 33), ('current', 29), (' forward exchange contracts', 29), (' gst payable and accruals', 24), (' employee benefits - current', 24), (' gst payables', 24), (' gst liabilities', 24), (' total current employee benefits', 24), (' contract liabilites - current', 14)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5, 14, 20, 21, 30, 36, 37, 46], 'score': [80, 100, 100, 80, 100, 100, 80, 100, 100], 'value': [2745954.0, 133989.0, 62.0, 1573745.0, 103196.0, 163.0, 1172209.0, 30793.0, -101.0], 'label': ['Timing difference arising from: Lease liability', 'Timing difference arising from: Make good provisions', 'Timing difference arising from: Others', 'Timing difference arising from: Lease liability', 'Timing difference arising from: Make good provisions', 'Timing difference arising from: Others', 'Timing difference arising from: Lease liability', 'Timing difference arising from: Make good provisions', 'Timing difference arising from: Others'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-04-23 14:01:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:18+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' loan payable to relayed party under tax funding agreement', 50), (' other creditors', 48), (' other creditors', 48), (' other creditors', 48), (' ultimate parent entity', 47), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' rebates', 40), (' other', 40), (' contract liabilites - current', 37), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' gst', 33), (' abandonment and decommissioning costs', 29), (' restructuring', 29), (' arising from service contracts', 28), ('other creditors and accruals', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' make good provisions', 27), (' forward exchange contracts', 27), (' warranty', 27), (' other related parties', 21), (' gst payables', 15), (' gst liabilities', 15)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = make good provision , res_fuzz_match = [(' make good provisions', 100), (' provisions - current', 60), (' loans from related party', 41), (' other related parties', 40), (' gst', 40), (' other', 40), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' secured long-term bank loans', 37), (' ultimate parent entity', 32), (' gst payable and accruals', 32), (' loan payable to relayed party under tax funding agreement', 31), (' gst payables', 30), (' gst liabilities', 30), ('other creditors and accruals', 29), (' derivative contracts - at fair value', 27), (' restructuring', 27), (' warranty', 27), (' total current employee benefits', 27), (' other creditors', 26), (' other creditors', 26), (' forward exchange contracts', 26), (' other creditors', 26), (' employee benefits - current', 25), (' rebates', 20), (' contract liabilites - current', 19), ('current', 14)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' loan payable to relayed party under tax funding agreement', 50), (' other creditors', 48), (' other creditors', 48), (' other creditors', 48), (' ultimate parent entity', 47), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' rebates', 40), (' other', 40), (' contract liabilites - current', 37), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' gst', 33), (' abandonment and decommissioning costs', 29), (' restructuring', 29), (' arising from service contracts', 28), ('other creditors and accruals', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' make good provisions', 27), (' forward exchange contracts', 27), (' warranty', 27), (' other related parties', 21), (' gst payables', 15), (' gst liabilities', 15)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = make good provision , res_fuzz_match = [(' make good provisions', 100), (' provisions - current', 60), (' loans from related party', 41), (' other related parties', 40), (' gst', 40), (' other', 40), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' secured long-term bank loans', 37), (' ultimate parent entity', 32), (' gst payable and accruals', 32), (' loan payable to relayed party under tax funding agreement', 31), (' gst payables', 30), (' gst liabilities', 30), ('other creditors and accruals', 29), (' derivative contracts - at fair value', 27), (' restructuring', 27), (' warranty', 27), (' total current employee benefits', 27), (' other creditors', 26), (' other creditors', 26), (' forward exchange contracts', 26), (' other creditors', 26), (' employee benefits - current', 25), (' rebates', 20), (' contract liabilites - current', 19), ('current', 14)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' loan payable to relayed party under tax funding agreement', 50), (' other creditors', 48), (' other creditors', 48), (' other creditors', 48), (' ultimate parent entity', 47), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' rebates', 40), (' other', 40), (' contract liabilites - current', 37), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' gst', 33), (' abandonment and decommissioning costs', 29), (' restructuring', 29), (' arising from service contracts', 28), ('other creditors and accruals', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' make good provisions', 27), (' forward exchange contracts', 27), (' warranty', 27), (' other related parties', 21), (' gst payables', 15), (' gst liabilities', 15)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = make good provision , res_fuzz_match = [(' make good provisions', 100), (' provisions - current', 60), (' loans from related party', 41), (' other related parties', 40), (' gst', 40), (' other', 40), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' secured long-term bank loans', 37), (' ultimate parent entity', 32), (' gst payable and accruals', 32), (' loan payable to relayed party under tax funding agreement', 31), (' gst payables', 30), (' gst liabilities', 30), ('other creditors and accruals', 29), (' derivative contracts - at fair value', 27), (' restructuring', 27), (' warranty', 27), (' total current employee benefits', 27), (' other creditors', 26), (' other creditors', 26), (' forward exchange contracts', 26), (' other creditors', 26), (' employee benefits - current', 25), (' rebates', 20), (' contract liabilites - current', 19), ('current', 14)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' loan payable to relayed party under tax funding agreement', 50), (' other creditors', 48), (' other creditors', 48), (' other creditors', 48), (' ultimate parent entity', 47), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' rebates', 40), (' other', 40), (' contract liabilites - current', 37), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' gst', 33), (' abandonment and decommissioning costs', 29), (' restructuring', 29), (' arising from service contracts', 28), ('other creditors and accruals', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' make good provisions', 27), (' forward exchange contracts', 27), (' warranty', 27), (' other related parties', 21), (' gst payables', 15), (' gst liabilities', 15)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = make good provision , res_fuzz_match = [(' make good provisions', 100), (' provisions - current', 60), (' loans from related party', 41), (' other related parties', 40), (' gst', 40), (' other', 40), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' secured long-term bank loans', 37), (' ultimate parent entity', 32), (' gst payable and accruals', 32), (' loan payable to relayed party under tax funding agreement', 31), (' gst payables', 30), (' gst liabilities', 30), ('other creditors and accruals', 29), (' derivative contracts - at fair value', 27), (' restructuring', 27), (' warranty', 27), (' total current employee benefits', 27), (' other creditors', 26), (' other creditors', 26), (' forward exchange contracts', 26), (' other creditors', 26), (' employee benefits - current', 25), (' rebates', 20), (' contract liabilites - current', 19), ('current', 14)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4, 6, 7, 9, 10], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [971917.0, 36916.0, 86717.0, 409716.0, 1033607.0, 147015.0, 55638.0, 196972.0], 'label': ['  Employee benefits', '  Make good provision', '  Employee benefits', '  Make good provision', '  Employee benefits', '  Make good provision', '  Employee benefits', '  Make good provision'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-04-23 14:01:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:18+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = carrying amount as at 1 january 2022 , res_fuzz_match = [('other creditors and accruals', 50), (' warranty', 50), (' derivative contracts - at fair value', 45), (' loan payable to relayed party under tax funding agreement', 45), (' share of joint venture payables', 45), ('current', 43), (' gst payable and accruals', 43), (' other related parties', 41), (' current - liability for annual and long service leave', 40), (' gst payables', 40), (' rebates', 40), (' forward exchange contracts', 40), (' other', 40), (' ultimate parent entity', 37), (' employee benefits - current', 37), (' contract liabilites - current', 37), (' provision for associate funding', 37), (' provisions - current', 36), (' total current employee benefits', 35), (' gst', 33), (' other creditors', 31), (' other creditors', 31), (' abandonment and decommissioning costs', 31), (' other creditors', 31), (' secured long-term bank loans', 30), (' employee benefits - payroll', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' make good provisions', 28), (' loans from related party', 24), (' restructuring', 20)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = employee benefits $ , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' loan payable to relayed party under tax funding agreement', 50), (' other creditors', 48), (' other creditors', 48), (' other creditors', 48), (' ultimate parent entity', 47), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' rebates', 40), (' other', 40), (' contract liabilites - current', 37), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' gst', 33), (' abandonment and decommissioning costs', 29), (' restructuring', 29), (' arising from service contracts', 28), ('other creditors and accruals', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' make good provisions', 27), (' forward exchange contracts', 27), (' warranty', 27), (' other related parties', 21), (' gst payables', 15), (' gst liabilities', 15)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('other creditors and accruals', 60), (' other creditors', 60), (' other creditors', 60), (' abandonment and decommissioning costs', 60), (' other creditors', 60), (' other related parties', 44), (' loans from related party', 44), (' gst liabilities', 44), (' warranty', 44), (' ultimate parent entity', 40), (' derivative contracts - at fair value', 40), (' employee benefits - current', 40), (' current - liability for annual and long service leave', 40), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' arising from service contracts', 40), (' rebates', 40), (' forward exchange contracts', 40), (' total current employee benefits', 40), (' gst', 33), (' provision for associate funding', 29), (' other', 29), ('current', 20), (' loan payable to relayed party under tax funding agreement', 20), (' secured long-term bank loans', 20), (' gst payable and accruals', 20), (' provisions - current', 20), (' gst payables', 20), (' make good provisions', 20), (' restructuring', 20)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = employee benefits $ , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' loan payable to relayed party under tax funding agreement', 50), (' other creditors', 48), (' other creditors', 48), (' other creditors', 48), (' ultimate parent entity', 47), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' rebates', 40), (' other', 40), (' contract liabilites - current', 37), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' gst', 33), (' abandonment and decommissioning costs', 29), (' restructuring', 29), (' arising from service contracts', 28), ('other creditors and accruals', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' make good provisions', 27), (' forward exchange contracts', 27), (' warranty', 27), (' other related parties', 21), (' gst payables', 15), (' gst liabilities', 15)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = amount charged , res_fuzz_match = [(' other related parties', 50), (' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' gst', 50), (' forward exchange contracts', 50), ('current', 43), ('other creditors and accruals', 42), (' other creditors', 42), (' loans from related party', 42), (' other creditors', 42), (' employee benefits - current', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' share of joint venture payables', 42), (' employee benefits - payroll', 42), (' abandonment and decommissioning costs', 42), (' other creditors', 42), (' total current employee benefits', 42), (' other', 40), (' arising from service contracts', 38), (' provision for associate funding', 35), (' ultimate parent entity', 33), (' provisions - current', 33), (' gst payables', 33), (' make good provisions', 33), (' warranty', 33), (' gst liabilities', 32), (' secured long-term bank loans', 30), (' rebates', 29), (' gst payable and accruals', 26), (' restructuring', 17)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = employee benefits $ , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' loan payable to relayed party under tax funding agreement', 50), (' other creditors', 48), (' other creditors', 48), (' other creditors', 48), (' ultimate parent entity', 47), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' rebates', 40), (' other', 40), (' contract liabilites - current', 37), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' gst', 33), (' abandonment and decommissioning costs', 29), (' restructuring', 29), (' arising from service contracts', 28), ('other creditors and accruals', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' make good provisions', 27), (' forward exchange contracts', 27), (' warranty', 27), (' other related parties', 21), (' gst payables', 15), (' gst liabilities', 15)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = carrying amount as at 31 december 2022 , res_fuzz_match = [(' rebates', 50), (' warranty', 50), (' abandonment and decommissioning costs', 47), (' total current employee benefits', 47), (' provision for associate funding', 46), ('current', 43), (' loan payable to relayed party under tax funding agreement', 42), (' current - liability for annual and long service leave', 42), (' forward exchange contracts', 41), (' other creditors', 40), (' other creditors', 40), (' other creditors', 40), (' other', 40), (' employee benefits - current', 38), (' contract liabilites - current', 38), (' derivative contracts - at fair value', 37), (' share of joint venture payables', 37), (' provisions - current', 36), (' arising from service contracts', 36), (' gst liabilities', 33), (' gst', 33), ('other creditors and accruals', 32), (' ultimate parent entity', 32), (' gst payables', 32), (' secured long-term bank loans', 26), (' loans from related party', 25), (' restructuring', 25), (' gst payable and accruals', 22), (' other related parties', 21), (' employee benefits - payroll', 19), (' make good provisions', 14)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = employee benefits $ , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' loan payable to relayed party under tax funding agreement', 50), (' other creditors', 48), (' other creditors', 48), (' other creditors', 48), (' ultimate parent entity', 47), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' rebates', 40), (' other', 40), (' contract liabilites - current', 37), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' gst', 33), (' abandonment and decommissioning costs', 29), (' restructuring', 29), (' arising from service contracts', 28), ('other creditors and accruals', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' make good provisions', 27), (' forward exchange contracts', 27), (' warranty', 27), (' other related parties', 21), (' gst payables', 15), (' gst liabilities', 15)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = carrying amount as at 1 january 2022 , res_fuzz_match = [('other creditors and accruals', 50), (' warranty', 50), (' derivative contracts - at fair value', 45), (' loan payable to relayed party under tax funding agreement', 45), (' share of joint venture payables', 45), ('current', 43), (' gst payable and accruals', 43), (' other related parties', 41), (' current - liability for annual and long service leave', 40), (' gst payables', 40), (' rebates', 40), (' forward exchange contracts', 40), (' other', 40), (' ultimate parent entity', 37), (' employee benefits - current', 37), (' contract liabilites - current', 37), (' provision for associate funding', 37), (' provisions - current', 36), (' total current employee benefits', 35), (' gst', 33), (' other creditors', 31), (' other creditors', 31), (' abandonment and decommissioning costs', 31), (' other creditors', 31), (' secured long-term bank loans', 30), (' employee benefits - payroll', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' make good provisions', 28), (' loans from related party', 24), (' restructuring', 20)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = make good provisions $ , res_fuzz_match = [(' make good provisions', 100), (' provisions - current', 60), (' loans from related party', 41), (' other related parties', 40), (' gst', 40), (' other', 40), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' secured long-term bank loans', 37), (' ultimate parent entity', 32), (' gst payable and accruals', 32), (' loan payable to relayed party under tax funding agreement', 31), (' gst payables', 30), (' gst liabilities', 30), ('other creditors and accruals', 29), (' derivative contracts - at fair value', 27), (' restructuring', 27), (' warranty', 27), (' total current employee benefits', 27), (' other creditors', 26), (' other creditors', 26), (' forward exchange contracts', 26), (' other creditors', 26), (' employee benefits - current', 25), (' rebates', 20), (' contract liabilites - current', 19), ('current', 14)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('other creditors and accruals', 60), (' other creditors', 60), (' other creditors', 60), (' abandonment and decommissioning costs', 60), (' other creditors', 60), (' other related parties', 44), (' loans from related party', 44), (' gst liabilities', 44), (' warranty', 44), (' ultimate parent entity', 40), (' derivative contracts - at fair value', 40), (' employee benefits - current', 40), (' current - liability for annual and long service leave', 40), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' arising from service contracts', 40), (' rebates', 40), (' forward exchange contracts', 40), (' total current employee benefits', 40), (' gst', 33), (' provision for associate funding', 29), (' other', 29), ('current', 20), (' loan payable to relayed party under tax funding agreement', 20), (' secured long-term bank loans', 20), (' gst payable and accruals', 20), (' provisions - current', 20), (' gst payables', 20), (' make good provisions', 20), (' restructuring', 20)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = make good provisions $ , res_fuzz_match = [(' make good provisions', 100), (' provisions - current', 60), (' loans from related party', 41), (' other related parties', 40), (' gst', 40), (' other', 40), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' secured long-term bank loans', 37), (' ultimate parent entity', 32), (' gst payable and accruals', 32), (' loan payable to relayed party under tax funding agreement', 31), (' gst payables', 30), (' gst liabilities', 30), ('other creditors and accruals', 29), (' derivative contracts - at fair value', 27), (' restructuring', 27), (' warranty', 27), (' total current employee benefits', 27), (' other creditors', 26), (' other creditors', 26), (' forward exchange contracts', 26), (' other creditors', 26), (' employee benefits - current', 25), (' rebates', 20), (' contract liabilites - current', 19), ('current', 14)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = amount charged , res_fuzz_match = [(' other related parties', 50), (' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' gst', 50), (' forward exchange contracts', 50), ('current', 43), ('other creditors and accruals', 42), (' other creditors', 42), (' loans from related party', 42), (' other creditors', 42), (' employee benefits - current', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' share of joint venture payables', 42), (' employee benefits - payroll', 42), (' abandonment and decommissioning costs', 42), (' other creditors', 42), (' total current employee benefits', 42), (' other', 40), (' arising from service contracts', 38), (' provision for associate funding', 35), (' ultimate parent entity', 33), (' provisions - current', 33), (' gst payables', 33), (' make good provisions', 33), (' warranty', 33), (' gst liabilities', 32), (' secured long-term bank loans', 30), (' rebates', 29), (' gst payable and accruals', 26), (' restructuring', 17)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = make good provisions $ , res_fuzz_match = [(' make good provisions', 100), (' provisions - current', 60), (' loans from related party', 41), (' other related parties', 40), (' gst', 40), (' other', 40), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' secured long-term bank loans', 37), (' ultimate parent entity', 32), (' gst payable and accruals', 32), (' loan payable to relayed party under tax funding agreement', 31), (' gst payables', 30), (' gst liabilities', 30), ('other creditors and accruals', 29), (' derivative contracts - at fair value', 27), (' restructuring', 27), (' warranty', 27), (' total current employee benefits', 27), (' other creditors', 26), (' other creditors', 26), (' forward exchange contracts', 26), (' other creditors', 26), (' employee benefits - current', 25), (' rebates', 20), (' contract liabilites - current', 19), ('current', 14)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = carrying amount as at 31 december 2022 , res_fuzz_match = [(' rebates', 50), (' warranty', 50), (' abandonment and decommissioning costs', 47), (' total current employee benefits', 47), (' provision for associate funding', 46), ('current', 43), (' loan payable to relayed party under tax funding agreement', 42), (' current - liability for annual and long service leave', 42), (' forward exchange contracts', 41), (' other creditors', 40), (' other creditors', 40), (' other creditors', 40), (' other', 40), (' employee benefits - current', 38), (' contract liabilites - current', 38), (' derivative contracts - at fair value', 37), (' share of joint venture payables', 37), (' provisions - current', 36), (' arising from service contracts', 36), (' gst liabilities', 33), (' gst', 33), ('other creditors and accruals', 32), (' ultimate parent entity', 32), (' gst payables', 32), (' secured long-term bank loans', 26), (' loans from related party', 25), (' restructuring', 25), (' gst payable and accruals', 22), (' other related parties', 21), (' employee benefits - payroll', 19), (' make good provisions', 14)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_rows = make good provisions $ , res_fuzz_match = [(' make good provisions', 100), (' provisions - current', 60), (' loans from related party', 41), (' other related parties', 40), (' gst', 40), (' other', 40), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' secured long-term bank loans', 37), (' ultimate parent entity', 32), (' gst payable and accruals', 32), (' loan payable to relayed party under tax funding agreement', 31), (' gst payables', 30), (' gst liabilities', 30), ('other creditors and accruals', 29), (' derivative contracts - at fair value', 27), (' restructuring', 27), (' warranty', 27), (' total current employee benefits', 27), (' other creditors', 26), (' other creditors', 26), (' forward exchange contracts', 26), (' other creditors', 26), (' employee benefits - current', 25), (' rebates', 20), (' contract liabilites - current', 19), ('current', 14)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [1089245.0, 1196504.0, -1227115.0, 1058634.0, 343987.0, 212744.0, -110099.0, 446632.0], 'label': ['Employee Benefits $', 'Employee Benefits $', 'Employee Benefits $', 'Employee Benefits $', 'Make good provisions $', 'Make good provisions $', 'Make good provisions $', 'Make good provisions $'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-04-23 14:01:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-04-23 14:01:18+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-04-23 14:01:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-04-23 14:01:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-04-23 14:01:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:18+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 28)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('current liabilities', 35)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = customer deposits , res_fuzz_match = [('current liabilities', 29)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('current liabilities', 47)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('current liabilities', 31)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current liabilities', 88)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('current liabilities', 46)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 21], 'score': 88, 'value': 1613535.0, 'line_item_label': ['Current liabilities', 'Current tax liabilities'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 1613535.0]}
2023-04-23 14:01:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:18+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 28)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('current liabilities', 35)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = customer deposits , res_fuzz_match = [('current liabilities', 29)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('current liabilities', 47)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('current liabilities', 31)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current liabilities', 88)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('current liabilities', 46)]
2023-04-23 14:01:18+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 21], 'score': 88, 'value': 2155291.0, 'line_item_label': ['Current liabilities', 'Current tax liabilities'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 2155291.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term debt', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term debt', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 35), (' borrowings', 33)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 53), (' lease liabilities', 48), (' lease liability', 48), ('interest bearing loans and borrowings', 45), (' borrowings', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), (' loans and borrowings', 40), (' borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 22)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 4371653.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['21'], 'line_item_value': [4371653.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 35), (' borrowings', 33)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 53), (' lease liabilities', 48), (' lease liability', 48), ('interest bearing loans and borrowings', 45), (' borrowings', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), (' loans and borrowings', 40), (' borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 22)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 7666439.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['21'], 'line_item_value': [7666439.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 23)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 39), ('(bond)', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 26), ('(bond)', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 23)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 39), ('(bond)', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 26), ('(bond)', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 23)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 39), ('lease liabilities', 30)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('lease liabilities', 30), ('interest bearing loans and borrowings', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 4371653.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['21'], 'line_item_value': [4371653.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 23)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 39), ('lease liabilities', 30)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('lease liabilities', 30), ('interest bearing loans and borrowings', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 7666439.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['21'], 'line_item_value': [7666439.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 45)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), ('lease liabilities', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 4371653.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['21'], 'line_item_value': [4371653.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 45)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), ('lease liabilities', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 7666439.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['21'], 'line_item_value': [7666439.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('common stock', 23), ('contributed equity', 20), ('equity share capital', 19), (' issued capital', 17), ('share capital', 16), (' share capital', 16), ('perpetual equity instrument', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('share capital', 30), (' share capital', 30), ('perpetual equity instrument', 21), ('contributed equity', 21), ('equity share capital', 20), (' issued capital', 19), ('common stock', 18)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' issued capital', 38), ('share capital', 35), (' share capital', 35), ('equity share capital', 25), ('common stock', 22), ('contributed equity', 18), ('perpetual equity instrument', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' issued capital', 29), ('share capital', 27), (' share capital', 27), ('contributed equity', 22), ('equity share capital', 21), ('perpetual equity instrument', 17), ('common stock', 9)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('share capital', 40), (' share capital', 40), ('equity share capital', 37), ('contributed equity', 32), (' issued capital', 32), ('perpetual equity instrument', 29), ('common stock', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('common stock', 23), ('contributed equity', 20), ('equity share capital', 19), (' issued capital', 17), ('share capital', 16), (' share capital', 16), ('perpetual equity instrument', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('share capital', 30), (' share capital', 30), ('perpetual equity instrument', 21), ('contributed equity', 21), ('equity share capital', 20), (' issued capital', 19), ('common stock', 18)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' issued capital', 38), ('share capital', 35), (' share capital', 35), ('equity share capital', 25), ('common stock', 22), ('contributed equity', 18), ('perpetual equity instrument', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' issued capital', 29), ('share capital', 27), (' share capital', 27), ('contributed equity', 22), ('equity share capital', 21), ('perpetual equity instrument', 17), ('common stock', 9)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('share capital', 40), (' share capital', 40), ('equity share capital', 37), ('contributed equity', 32), (' issued capital', 32), ('perpetual equity instrument', 29), ('common stock', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('minority interest', 28)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 16)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('minority interest', 28)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 16)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term liabilities', 32)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term liabilities', 32)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('share capital', 67), ('equity share capital', 50), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('equity share capital', 28), ('share capital', 27), ('common stock', 26), ('perpetual equity instrument', 22)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('share capital', 67), ('equity share capital', 50), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('equity share capital', 28), ('share capital', 27), ('common stock', 26), ('perpetual equity instrument', 22)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves and surplus', 36), ('additional paid in capital', 30), ('additional paid up capital', 30), ('other equity', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves and surplus', 36), ('additional paid in capital', 30), ('additional paid up capital', 30), ('other equity', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('other equity', 17), ('reserves surplus', 17), (' accumulated losses', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [34], 'score': 100, 'value': 22431844.0, 'line_item_label': ['Retained earnings'], 'note_numbers': ['27'], 'line_item_value': [22431844.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('other equity', 17), ('reserves surplus', 17), (' accumulated losses', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [34], 'score': 100, 'value': 10849194.0, 'line_item_label': ['Retained earnings'], 'note_numbers': ['27'], 'line_item_value': [10849194.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = balance at beginning of year , res_fuzz_match = [('retained earnings', 67), ('retained earnings and dividends on equity instruments', 41), ('general reserves', 30), ('accumulated losses', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = dividend paid , res_fuzz_match = [('retained earnings and dividends on equity instruments', 77), ('retained earnings', 30), ('general reserves', 29), ('accumulated losses', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = profit/(loss) for the year , res_fuzz_match = [('retained earnings', 57), ('accumulated losses', 42), ('general reserves', 33), ('retained earnings and dividends on equity instruments', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = balance at end of year , res_fuzz_match = [('retained earnings', 60), ('retained earnings and dividends on equity instruments', 47), ('general reserves', 38), ('accumulated losses', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = inr respect of the current year ended 31 december 2022, a dividend of $20,000,000 was paid. (2021: nil proposed) , res_fuzz_match = [('retained earnings', 64), ('general reserves', 58), ('retained earnings and dividends on equity instruments', 55), ('accumulated losses', 35)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = franking account balance , res_fuzz_match = [('retained earnings', 55), ('accumulated losses', 42), ('retained earnings and dividends on equity instruments', 25), ('general reserves', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = payment of dividends provided for at the reporting date , res_fuzz_match = [('retained earnings', 45), ('general reserves', 42), ('retained earnings and dividends on equity instruments', 42), ('accumulated losses', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = payg instalments paid and income tax payments/ refunds , res_fuzz_match = [('general reserves', 43), ('retained earnings and dividends on equity instruments', 37), ('retained earnings', 35), ('accumulated losses', 33)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = adjusted franking account balance , res_fuzz_match = [('retained earnings', 55), ('accumulated losses', 42), ('retained earnings and dividends on equity instruments', 34), ('general reserves', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = balance at beginning of year , res_fuzz_match = [('retained earnings', 67), ('retained earnings and dividends on equity instruments', 41), ('general reserves', 30), ('accumulated losses', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = dividend paid , res_fuzz_match = [('retained earnings and dividends on equity instruments', 77), ('retained earnings', 30), ('general reserves', 29), ('accumulated losses', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = profit/(loss) for the year , res_fuzz_match = [('retained earnings', 57), ('accumulated losses', 42), ('general reserves', 33), ('retained earnings and dividends on equity instruments', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = balance at end of year , res_fuzz_match = [('retained earnings', 60), ('retained earnings and dividends on equity instruments', 47), ('general reserves', 38), ('accumulated losses', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = inr respect of the current year ended 31 december 2022, a dividend of $20,000,000 was paid. (2021: nil proposed) , res_fuzz_match = [('retained earnings', 64), ('general reserves', 58), ('retained earnings and dividends on equity instruments', 55), ('accumulated losses', 35)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = franking account balance , res_fuzz_match = [('retained earnings', 55), ('accumulated losses', 42), ('retained earnings and dividends on equity instruments', 25), ('general reserves', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = payment of dividends provided for at the reporting date , res_fuzz_match = [('retained earnings', 45), ('general reserves', 42), ('retained earnings and dividends on equity instruments', 42), ('accumulated losses', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = payg instalments paid and income tax payments/ refunds , res_fuzz_match = [('general reserves', 43), ('retained earnings and dividends on equity instruments', 37), ('retained earnings', 35), ('accumulated losses', 33)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = adjusted franking account balance , res_fuzz_match = [('retained earnings', 55), ('accumulated losses', 42), ('retained earnings and dividends on equity instruments', 34), ('general reserves', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves', 'reserves']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27), ('reserves', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves', 24)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27), ('reserves', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves', 24)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 29)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 29)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('plant property equipment', 15), ('property plant equipment', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 91, 'value': 3228260.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['15'], 'line_item_value': [3228260.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('plant property equipment', 15), ('property plant equipment', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 91, 'value': 3871674.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['15'], 'line_item_value': [3871674.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['cost', 'gross'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['cost', 'gross'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('government subsidies receivable', 31), ('billed', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('receivable', 50), ('billed', 50), ('trade and other receivables', 48), ('account receivables', 36), ('trade receivables', 35), ('government subsidies receivable', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 61), ('billed', 29), ('unbilled', 20)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('receivable', 50), ('account receivables', 44), ('unbilled', 40), ('trade receivables', 36), ('trade and other receivables', 36), ('government subsidies receivable', 33), ('billed', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('trade and other receivables', 45), ('trade receivables', 42), ('government subsidies receivable', 42), ('unbilled', 40), ('receivable', 33), ('account receivables', 25), ('billed', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('trade and other receivables', 64), ('government subsidies receivable', 55), ('account receivables', 36), ('trade receivables', 36), ('receivable', 33), ('billed', 0), ('unbilled', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 33385710.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['12'], 'line_item_value': [33385710.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('government subsidies receivable', 31), ('billed', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('receivable', 50), ('billed', 50), ('trade and other receivables', 48), ('account receivables', 36), ('trade receivables', 35), ('government subsidies receivable', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 61), ('billed', 29), ('unbilled', 20)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('receivable', 50), ('account receivables', 44), ('unbilled', 40), ('trade receivables', 36), ('trade and other receivables', 36), ('government subsidies receivable', 33), ('billed', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('trade and other receivables', 45), ('trade receivables', 42), ('government subsidies receivable', 42), ('unbilled', 40), ('receivable', 33), ('account receivables', 25), ('billed', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('trade and other receivables', 64), ('government subsidies receivable', 55), ('account receivables', 36), ('trade receivables', 36), ('receivable', 33), ('billed', 0), ('unbilled', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 25122689.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['12'], 'line_item_value': [25122689.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 76), (' related party receivables', 70), (' net trade debtors', 58), (' other debtors', 42), ('current', 29)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 76), (' related party receivables', 70), (' net trade debtors', 58), (' other debtors', 42), ('current', 29)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 76), (' related party receivables', 70), (' net trade debtors', 58), (' other debtors', 42), ('current', 29)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 76), (' related party receivables', 70), (' net trade debtors', 58), (' other debtors', 42), ('current', 29)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 76), (' related party receivables', 70), (' net trade debtors', 58), (' other debtors', 42), ('current', 29)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 76), (' related party receivables', 70), (' net trade debtors', 58), (' other debtors', 42), ('current', 29)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 4, 5, 6], 'score': [100, 100, 100, 100, 100, 100], 'value': [0.0, 0.0, 0.0, 3524.0, 0.0, 525356.0], 'label': [' Trade receivables', ' Trade receivables', ' Trade receivables', ' Trade receivables', ' Trade receivables', ' Trade receivables'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('revenue from operations', 43), (' Sale of coal', 38), (' Sales revenue', 35), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 22), (' Revenue', 22), ('net sales', 20), ('sale of products', 17), ('transmission and distribution business', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('sale of products', 22), ('net sales', 14), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('sale of products', 33), ('from trading business', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 19), (' Sales revenue', 17), ('transmission and distribution business', 15), (' Revenue', 11), ('net sales', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('net sales', 38), (' Sales revenue', 32), (' Revenue', 29), ('revenue from operations', 25), ('revenue from contracts with customers', 25), ('Revenue from contract with customers', 25), ('sale of products', 20), ('transmission and distribution business', 17), ('from trading business', 17), (' Sale of coal', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('transmission and distribution business', 34), ('revenue from operations', 29), (' Sale of coal', 21), ('revenue from contracts with customers', 20), ('Revenue from contract with customers', 20), ('from trading business', 18), ('net sales', 15), (' Revenue', 8), (' Sales revenue', 7), ('sale of products', 6)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('transmission and distribution business', 55), (' Sales revenue', 37), ('sale of products', 36), (' Revenue', 36), ('revenue from operations', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('net sales', 25), ('from trading business', 19), (' Sale of coal', 16)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Sales revenue', 50), (' Revenue', 32), ('net sales', 29), ('from trading business', 29), ('revenue from operations', 28), ('sale of products', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), (' Sale of coal', 18), ('transmission and distribution business', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue', 44), (' Sales revenue', 35), ('sale of products', 25), ('revenue from operations', 21), ('net sales', 20), ('revenue from contracts with customers', 14), ('Revenue from contract with customers', 14), ('transmission and distribution business', 10), (' Sale of coal', 10), ('from trading business', 7)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('transmission and distribution business', 41), (' Sales revenue', 37), (' Revenue', 36), ('revenue from operations', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('from trading business', 26), ('net sales', 25), (' Sale of coal', 24), ('sale of products', 14)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('sale of products', 35), ('net sales', 32), ('from trading business', 31), (' Sale of coal', 30), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), (' Sales revenue', 18), ('revenue from operations', 15), (' Revenue', 12), ('transmission and distribution business', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Sales revenue', 55), ('net sales', 42), ('sale of products', 35), (' Revenue', 35), ('revenue from operations', 30), (' Sale of coal', 30), ('from trading business', 23), ('revenue from contracts with customers', 19), ('Revenue from contract with customers', 19), ('transmission and distribution business', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('net sales', 48), ('revenue from operations', 38), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), (' Sales revenue', 31), ('sale of products', 30), (' Revenue', 30), ('from trading business', 22), ('transmission and distribution business', 20), (' Sale of coal', 20)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [(' Sales revenue', 38), ('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('transmission and distribution business', 29), ('net sales', 28), ('revenue from operations', 22), ('from trading business', 22), (' Revenue', 22), (' Sale of coal', 13), ('sale of products', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('net sales', 33), ('transmission and distribution business', 27), ('revenue from operations', 25), (' Sales revenue', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), (' Sale of coal', 16), (' Revenue', 9)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('sale of products', 29), ('transmission and distribution business', 27), (' Revenue', 27), ('net sales', 25), (' Sale of coal', 24), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), ('revenue from operations', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('sale of products', 39), ('from trading business', 35), ('revenue from operations', 34), (' Sales revenue', 27), ('transmission and distribution business', 26), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 14)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), (' Sale of coal', 26), ('transmission and distribution business', 16), ('net sales', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('sale of products', 38), ('from trading business', 36), (' Sales revenue', 35), ('revenue from operations', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('net sales', 28), (' Sale of coal', 27), (' Revenue', 20), ('transmission and distribution business', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 160803224.0, 'line_item_label': ['Revenue'], 'note_numbers': ['5'], 'line_item_value': [160803224.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('revenue from operations', 43), (' Sale of coal', 38), (' Sales revenue', 35), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 22), (' Revenue', 22), ('net sales', 20), ('sale of products', 17), ('transmission and distribution business', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('sale of products', 22), ('net sales', 14), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('sale of products', 33), ('from trading business', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 19), (' Sales revenue', 17), ('transmission and distribution business', 15), (' Revenue', 11), ('net sales', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('net sales', 38), (' Sales revenue', 32), (' Revenue', 29), ('revenue from operations', 25), ('revenue from contracts with customers', 25), ('Revenue from contract with customers', 25), ('sale of products', 20), ('transmission and distribution business', 17), ('from trading business', 17), (' Sale of coal', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('transmission and distribution business', 34), ('revenue from operations', 29), (' Sale of coal', 21), ('revenue from contracts with customers', 20), ('Revenue from contract with customers', 20), ('from trading business', 18), ('net sales', 15), (' Revenue', 8), (' Sales revenue', 7), ('sale of products', 6)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('transmission and distribution business', 55), (' Sales revenue', 37), ('sale of products', 36), (' Revenue', 36), ('revenue from operations', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('net sales', 25), ('from trading business', 19), (' Sale of coal', 16)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Sales revenue', 50), (' Revenue', 32), ('net sales', 29), ('from trading business', 29), ('revenue from operations', 28), ('sale of products', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), (' Sale of coal', 18), ('transmission and distribution business', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue', 44), (' Sales revenue', 35), ('sale of products', 25), ('revenue from operations', 21), ('net sales', 20), ('revenue from contracts with customers', 14), ('Revenue from contract with customers', 14), ('transmission and distribution business', 10), (' Sale of coal', 10), ('from trading business', 7)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('transmission and distribution business', 41), (' Sales revenue', 37), (' Revenue', 36), ('revenue from operations', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('from trading business', 26), ('net sales', 25), (' Sale of coal', 24), ('sale of products', 14)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('sale of products', 35), ('net sales', 32), ('from trading business', 31), (' Sale of coal', 30), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), (' Sales revenue', 18), ('revenue from operations', 15), (' Revenue', 12), ('transmission and distribution business', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Sales revenue', 55), ('net sales', 42), ('sale of products', 35), (' Revenue', 35), ('revenue from operations', 30), (' Sale of coal', 30), ('from trading business', 23), ('revenue from contracts with customers', 19), ('Revenue from contract with customers', 19), ('transmission and distribution business', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('net sales', 48), ('revenue from operations', 38), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), (' Sales revenue', 31), ('sale of products', 30), (' Revenue', 30), ('from trading business', 22), ('transmission and distribution business', 20), (' Sale of coal', 20)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [(' Sales revenue', 38), ('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('transmission and distribution business', 29), ('net sales', 28), ('revenue from operations', 22), ('from trading business', 22), (' Revenue', 22), (' Sale of coal', 13), ('sale of products', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('net sales', 33), ('transmission and distribution business', 27), ('revenue from operations', 25), (' Sales revenue', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), (' Sale of coal', 16), (' Revenue', 9)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('sale of products', 29), ('transmission and distribution business', 27), (' Revenue', 27), ('net sales', 25), (' Sale of coal', 24), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), ('revenue from operations', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('sale of products', 39), ('from trading business', 35), ('revenue from operations', 34), (' Sales revenue', 27), ('transmission and distribution business', 26), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 14)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), (' Sale of coal', 26), ('transmission and distribution business', 16), ('net sales', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('sale of products', 38), ('from trading business', 36), (' Sales revenue', 35), ('revenue from operations', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('net sales', 28), (' Sale of coal', 27), (' Revenue', 20), ('transmission and distribution business', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 144417994.0, 'line_item_label': ['Revenue'], 'note_numbers': ['5'], 'line_item_value': [144417994.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' Cost of goods and services sold', 38), ('purchase of stock-in-trade', 32), (' cost of coal sold', 31), ('expenditure', 27), ('expense', 22), ('total expenditure', 21), ('total expenses', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('cost of sales', 13), ('Cost of sales', 13), ('purchase of stock-in-trade', 8), (' Cost of goods and services sold', 6), (' cost of coal sold', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Cost of product sold', 54), (' Personnel costs', 52), (' Cost of inventory sold', 43), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' cost of coal sold', 23), ('total expenditure', 21), (' Cost of inventory sold', 19), (' Cost of goods and services sold', 16), ('expense', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('expense', 43), ('total expenses', 40), ('expenditure', 33), ('purchase of stock-in-trade', 30), ('total expenditure', 25), ('cost of sales', 24), ('Cost of sales', 24), (' cost of coal sold', 18), (' Cost of goods and services sold', 18), (' Personnel costs', 18), (' Cost of product sold', 16), (' Cost of inventory sold', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' Cost of goods and services sold', 41), ('expenditure', 34), ('total expenditure', 34), ('total expenses', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 26), (' Cost of inventory sold', 26), (' Cost of product sold', 22), ('expense', 8)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Cost of product sold', 42), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' cost of coal sold', 27), (' Cost of goods and services sold', 24), ('purchase of stock-in-trade', 23)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 41), (' Personnel costs', 30), ('purchase of stock-in-trade', 25), (' Cost of inventory sold', 19), ('cost of sales', 18), ('Cost of sales', 18), (' cost of coal sold', 15), (' Cost of product sold', 13), (' Cost of goods and services sold', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 43), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of goods and services sold', 22), (' Cost of inventory sold', 19), (' cost of coal sold', 15), (' Cost of product sold', 14), ('cost of sales', 10), ('Cost of sales', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 23)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 17), ('total expenditure', 15), ('expense', 12), ('expenditure', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('expense', 71), ('total expenses', 70), ('total expenditure', 52), ('expenditure', 48), ('cost of sales', 40), ('Cost of sales', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), (' cost of coal sold', 32), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' Cost of inventory sold', 60), ('total expenses', 36), (' Cost of goods and services sold', 35), ('cost of sales', 33), ('Cost of sales', 33), ('total expenditure', 32), (' Personnel costs', 29), ('expenditure', 26), (' Cost of product sold', 26), ('purchase of stock-in-trade', 25), ('expense', 22), (' cost of coal sold', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('total expenses', 55), ('expenditure', 52), ('total expenditure', 49), ('expense', 44), (' Cost of goods and services sold', 43), ('purchase of stock-in-trade', 35), (' Cost of inventory sold', 30), (' Personnel costs', 23), ('cost of sales', 20), ('Cost of sales', 20), (' Cost of product sold', 16), (' cost of coal sold', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 23), (' Cost of goods and services sold', 20), (' Personnel costs', 20), ('expense', 18), ('purchase of stock-in-trade', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of inventory sold', 29), (' Cost of goods and services sold', 24), (' cost of coal sold', 20), (' Personnel costs', 20), (' Cost of product sold', 18)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), ('total expenditure', 34), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 26), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), ('total expenses', 41), (' Cost of inventory sold', 39), ('expenditure', 38), ('total expenditure', 37), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of product sold', 31), ('expense', 29), (' Cost of goods and services sold', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' Cost of product sold', 38), (' Cost of inventory sold', 37), ('cost of sales', 36), ('Cost of sales', 36), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 30), (' Personnel costs', 29), ('expenditure', 27), ('expense', 20), (' cost of coal sold', 20)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': -136649031.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-136649031.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' Cost of goods and services sold', 38), ('purchase of stock-in-trade', 32), (' cost of coal sold', 31), ('expenditure', 27), ('expense', 22), ('total expenditure', 21), ('total expenses', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('cost of sales', 13), ('Cost of sales', 13), ('purchase of stock-in-trade', 8), (' Cost of goods and services sold', 6), (' cost of coal sold', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Cost of product sold', 54), (' Personnel costs', 52), (' Cost of inventory sold', 43), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' cost of coal sold', 23), ('total expenditure', 21), (' Cost of inventory sold', 19), (' Cost of goods and services sold', 16), ('expense', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('expense', 43), ('total expenses', 40), ('expenditure', 33), ('purchase of stock-in-trade', 30), ('total expenditure', 25), ('cost of sales', 24), ('Cost of sales', 24), (' cost of coal sold', 18), (' Cost of goods and services sold', 18), (' Personnel costs', 18), (' Cost of product sold', 16), (' Cost of inventory sold', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' Cost of goods and services sold', 41), ('expenditure', 34), ('total expenditure', 34), ('total expenses', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 26), (' Cost of inventory sold', 26), (' Cost of product sold', 22), ('expense', 8)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Cost of product sold', 42), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' cost of coal sold', 27), (' Cost of goods and services sold', 24), ('purchase of stock-in-trade', 23)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 41), (' Personnel costs', 30), ('purchase of stock-in-trade', 25), (' Cost of inventory sold', 19), ('cost of sales', 18), ('Cost of sales', 18), (' cost of coal sold', 15), (' Cost of product sold', 13), (' Cost of goods and services sold', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 43), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of goods and services sold', 22), (' Cost of inventory sold', 19), (' cost of coal sold', 15), (' Cost of product sold', 14), ('cost of sales', 10), ('Cost of sales', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 23)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 17), ('total expenditure', 15), ('expense', 12), ('expenditure', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('expense', 71), ('total expenses', 70), ('total expenditure', 52), ('expenditure', 48), ('cost of sales', 40), ('Cost of sales', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), (' cost of coal sold', 32), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' Cost of inventory sold', 60), ('total expenses', 36), (' Cost of goods and services sold', 35), ('cost of sales', 33), ('Cost of sales', 33), ('total expenditure', 32), (' Personnel costs', 29), ('expenditure', 26), (' Cost of product sold', 26), ('purchase of stock-in-trade', 25), ('expense', 22), (' cost of coal sold', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('total expenses', 55), ('expenditure', 52), ('total expenditure', 49), ('expense', 44), (' Cost of goods and services sold', 43), ('purchase of stock-in-trade', 35), (' Cost of inventory sold', 30), (' Personnel costs', 23), ('cost of sales', 20), ('Cost of sales', 20), (' Cost of product sold', 16), (' cost of coal sold', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 23), (' Cost of goods and services sold', 20), (' Personnel costs', 20), ('expense', 18), ('purchase of stock-in-trade', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of inventory sold', 29), (' Cost of goods and services sold', 24), (' cost of coal sold', 20), (' Personnel costs', 20), (' Cost of product sold', 18)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), ('total expenditure', 34), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 26), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), ('total expenses', 41), (' Cost of inventory sold', 39), ('expenditure', 38), ('total expenditure', 37), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of product sold', 31), ('expense', 29), (' Cost of goods and services sold', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' Cost of product sold', 38), (' Cost of inventory sold', 37), ('cost of sales', 36), ('Cost of sales', 36), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 30), (' Personnel costs', 29), ('expenditure', 27), ('expense', 20), (' cost of coal sold', 20)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': -114042844.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-114042844.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), (' Depreciation expenses', 38), (' Depreciation expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Administrative and other expenses', 32), (' Selling & distribution expenses', 30), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Sales and marketing', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Occupancy expenses', 17), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Advertising expenses', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15), (' Sales and marketing', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Administrative and other expenses', 29), (' Logistics and distribution', 28), (' Advertising expenses', 17), (' Amortisation expenses', 17), (' Occupancy ', 14), (' depreciation', 12), ('other expenses', 10), (' Occupancy expenses', 10), (' Other expenses', 10), (' Management expenses', 10), (' Other expenses', 10), (' Marketing expenses', 9), (' Depreciation expenses', 9), (' Depreciation expenses', 9)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Logistics and distribution', 19), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), ('Distribution expenses', 14), (' Administrative expenses', 14), (' Administration expenses', 14)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('other expenses', 40), (' depreciation', 40), (' Other expenses', 40), (' Other expenses', 40), (' Marketing expenses', 38), (' Depreciation expenses', 36), (' Depreciation expenses', 36), (' Sales and marketing', 35), (' Administrative expenses', 33), (' Administration expenses', 33), (' Lease expenses', 32), (' Selling Expenses', 32), (' Occupancy expenses', 30), (' Management expenses', 30), (' Advertising expenses', 26), ('Distribution expenses', 25), (' Administrative and other expenses', 24), (' Selling & distribution expenses', 21), (' Logistics and distribution', 21), (' Amortisation expenses', 18), (' Occupancy ', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' Administrative and other expenses', 53), ('other expenses', 52), (' Other expenses', 52), (' Other expenses', 52), (' Logistics and distribution', 51), (' Administrative expenses', 40), (' Administration expenses', 40), (' Sales and marketing', 35), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Marketing expenses', 25), (' Advertising expenses', 24), (' depreciation', 23), (' Management expenses', 19), (' Depreciation expenses', 18), (' Depreciation expenses', 18), (' Occupancy ', 8)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('Distribution expenses', 100), (' Selling & distribution expenses', 86), (' Administrative expenses', 75), (' Administration expenses', 75), (' Depreciation expenses', 67), (' Depreciation expenses', 67), (' Advertising expenses', 65), (' Logistics and distribution', 61), (' Amortisation expenses', 60), (' Administrative and other expenses', 57), (' Lease expenses', 44), (' Selling Expenses', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' depreciation', 35), (' Sales and marketing', 32), (' Occupancy ', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Marketing expenses', 100), (' Management expenses', 72), (' Lease expenses', 67), (' Selling Expenses', 67), ('other expenses', 64), (' Other expenses', 64), (' Other expenses', 64), (' Sales and marketing', 57), (' Occupancy expenses', 56), (' Selling & distribution expenses', 47), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Advertising expenses', 43), ('Distribution expenses', 41), (' Administrative expenses', 41), (' Administrative and other expenses', 41), (' Administration expenses', 41), (' depreciation', 40), (' Logistics and distribution', 12), (' Occupancy ', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), ('other expenses', 67), (' Other expenses', 67), (' Other expenses', 67), (' Lease expenses', 61), (' Selling Expenses', 61), (' Occupancy ', 59), (' Management expenses', 58), (' Marketing expenses', 56), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 42), (' Selling & distribution expenses', 42), (' Administrative and other expenses', 42), (' Logistics and distribution', 19), (' Sales and marketing', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' depreciation', 35), (' Sales and marketing', 32), (' Occupancy ', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Distribution expenses', 30), (' Management expenses', 26), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' depreciation', 22), (' Administrative expenses', 22), (' Administrative and other expenses', 22), (' Administration expenses', 22), (' Lease expenses', 18), (' Marketing expenses', 17), (' Occupancy expenses', 17), (' Amortisation expenses', 16), (' Advertising expenses', 15), (' Sales and marketing', 15), (' Logistics and distribution', 13), ('other expenses', 9), (' Other expenses', 9), (' Selling Expenses', 9), (' Other expenses', 9)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Selling Expenses', 100), (' Lease expenses', 73), ('other expenses', 70), (' Other expenses', 70), (' Other expenses', 70), (' Selling & distribution expenses', 69), (' Marketing expenses', 67), (' Occupancy expenses', 61), (' Management expenses', 61), (' Depreciation expenses', 48), (' Depreciation expenses', 48), (' Amortisation expenses', 48), (' Advertising expenses', 46), ('Distribution expenses', 44), (' Administrative expenses', 44), (' Administration expenses', 44), (' Administrative and other expenses', 43), (' depreciation', 33), (' Sales and marketing', 31), (' Logistics and distribution', 26), (' Occupancy ', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' Selling & distribution expenses', 43), (' Advertising expenses', 39), (' Logistics and distribution', 39), (' Selling Expenses', 38), (' Amortisation expenses', 34), (' Sales and marketing', 33), (' Lease expenses', 31), ('other expenses', 30), (' Occupancy expenses', 30), (' Other expenses', 30), (' Administrative and other expenses', 30), (' Management expenses', 30), (' Other expenses', 30), (' Marketing expenses', 29), ('Distribution expenses', 27), (' Administrative expenses', 27), (' Administration expenses', 27), (' depreciation', 21), (' Depreciation expenses', 17), (' Depreciation expenses', 17), (' Occupancy ', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('other expenses', 73), (' Other expenses', 73), (' Other expenses', 73), (' Administrative and other expenses', 68), (' Management expenses', 55), (' Marketing expenses', 53), (' Lease expenses', 50), (' Advertising expenses', 50), (' Selling Expenses', 50), (' Administrative expenses', 49), (' Administration expenses', 49), (' Occupancy expenses', 48), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), ('Distribution expenses', 43), (' Logistics and distribution', 34), (' Sales and marketing', 33), (' depreciation', 29), (' Occupancy ', 8)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Sales and marketing', 32), (' Logistics and distribution', 28), ('Distribution expenses', 25), (' Selling & distribution expenses', 22), (' Administrative expenses', 19), (' Administrative and other expenses', 19), (' Occupancy ', 19), (' Administration expenses', 19), (' Lease expenses', 15), (' Selling Expenses', 15), ('other expenses', 14), (' Marketing expenses', 14), (' Occupancy expenses', 14), (' Other expenses', 14), (' Management expenses', 14), (' Other expenses', 14), (' Advertising expenses', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Occupancy ', 10), (' Logistics and distribution', 6), (' Sales and marketing', 6)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Amortisation expenses', 36), (' Administrative and other expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Management expenses', 19), (' Sales and marketing', 18), (' Occupancy ', 17), (' Occupancy expenses', 13), (' Selling Expenses', 13), (' Advertising expenses', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' depreciation', 28), ('Distribution expenses', 26), (' Logistics and distribution', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), (' Occupancy ', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other expenses', 43), (' Other expenses', 43), (' Other expenses', 43), (' Administrative and other expenses', 39), (' Lease expenses', 35), (' Management expenses', 34), (' Marketing expenses', 33), (' Occupancy expenses', 30), (' Selling Expenses', 30), (' Selling & distribution expenses', 29), (' Administrative expenses', 24), (' Depreciation expenses', 24), (' Administration expenses', 24), (' Depreciation expenses', 24), (' Amortisation expenses', 24), ('Distribution expenses', 20), (' depreciation', 19), (' Advertising expenses', 16), (' Sales and marketing', 16), (' Logistics and distribution', 11), (' Occupancy ', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 7, 8, 9, 11], 'score': 100, 'value': -14777531.0, 'line_item_label': ['Distribution expenses', 'Marketing expenses', 'Occupancy expenses', 'Administration expenses', 'Selling expenses'], 'note_numbers': [nan, nan, nan, nan, nan], 'line_item_value': [-214431.0, -262432.0, -709992.0, -12937702.0, -652974.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), (' Depreciation expenses', 38), (' Depreciation expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Administrative and other expenses', 32), (' Selling & distribution expenses', 30), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Sales and marketing', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Occupancy expenses', 17), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Advertising expenses', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15), (' Sales and marketing', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Administrative and other expenses', 29), (' Logistics and distribution', 28), (' Advertising expenses', 17), (' Amortisation expenses', 17), (' Occupancy ', 14), (' depreciation', 12), ('other expenses', 10), (' Occupancy expenses', 10), (' Other expenses', 10), (' Management expenses', 10), (' Other expenses', 10), (' Marketing expenses', 9), (' Depreciation expenses', 9), (' Depreciation expenses', 9)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Logistics and distribution', 19), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), ('Distribution expenses', 14), (' Administrative expenses', 14), (' Administration expenses', 14)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('other expenses', 40), (' depreciation', 40), (' Other expenses', 40), (' Other expenses', 40), (' Marketing expenses', 38), (' Depreciation expenses', 36), (' Depreciation expenses', 36), (' Sales and marketing', 35), (' Administrative expenses', 33), (' Administration expenses', 33), (' Lease expenses', 32), (' Selling Expenses', 32), (' Occupancy expenses', 30), (' Management expenses', 30), (' Advertising expenses', 26), ('Distribution expenses', 25), (' Administrative and other expenses', 24), (' Selling & distribution expenses', 21), (' Logistics and distribution', 21), (' Amortisation expenses', 18), (' Occupancy ', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' Administrative and other expenses', 53), ('other expenses', 52), (' Other expenses', 52), (' Other expenses', 52), (' Logistics and distribution', 51), (' Administrative expenses', 40), (' Administration expenses', 40), (' Sales and marketing', 35), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Marketing expenses', 25), (' Advertising expenses', 24), (' depreciation', 23), (' Management expenses', 19), (' Depreciation expenses', 18), (' Depreciation expenses', 18), (' Occupancy ', 8)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('Distribution expenses', 100), (' Selling & distribution expenses', 86), (' Administrative expenses', 75), (' Administration expenses', 75), (' Depreciation expenses', 67), (' Depreciation expenses', 67), (' Advertising expenses', 65), (' Logistics and distribution', 61), (' Amortisation expenses', 60), (' Administrative and other expenses', 57), (' Lease expenses', 44), (' Selling Expenses', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' depreciation', 35), (' Sales and marketing', 32), (' Occupancy ', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Marketing expenses', 100), (' Management expenses', 72), (' Lease expenses', 67), (' Selling Expenses', 67), ('other expenses', 64), (' Other expenses', 64), (' Other expenses', 64), (' Sales and marketing', 57), (' Occupancy expenses', 56), (' Selling & distribution expenses', 47), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Advertising expenses', 43), ('Distribution expenses', 41), (' Administrative expenses', 41), (' Administrative and other expenses', 41), (' Administration expenses', 41), (' depreciation', 40), (' Logistics and distribution', 12), (' Occupancy ', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), ('other expenses', 67), (' Other expenses', 67), (' Other expenses', 67), (' Lease expenses', 61), (' Selling Expenses', 61), (' Occupancy ', 59), (' Management expenses', 58), (' Marketing expenses', 56), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 42), (' Selling & distribution expenses', 42), (' Administrative and other expenses', 42), (' Logistics and distribution', 19), (' Sales and marketing', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' depreciation', 35), (' Sales and marketing', 32), (' Occupancy ', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Distribution expenses', 30), (' Management expenses', 26), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' depreciation', 22), (' Administrative expenses', 22), (' Administrative and other expenses', 22), (' Administration expenses', 22), (' Lease expenses', 18), (' Marketing expenses', 17), (' Occupancy expenses', 17), (' Amortisation expenses', 16), (' Advertising expenses', 15), (' Sales and marketing', 15), (' Logistics and distribution', 13), ('other expenses', 9), (' Other expenses', 9), (' Selling Expenses', 9), (' Other expenses', 9)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Selling Expenses', 100), (' Lease expenses', 73), ('other expenses', 70), (' Other expenses', 70), (' Other expenses', 70), (' Selling & distribution expenses', 69), (' Marketing expenses', 67), (' Occupancy expenses', 61), (' Management expenses', 61), (' Depreciation expenses', 48), (' Depreciation expenses', 48), (' Amortisation expenses', 48), (' Advertising expenses', 46), ('Distribution expenses', 44), (' Administrative expenses', 44), (' Administration expenses', 44), (' Administrative and other expenses', 43), (' depreciation', 33), (' Sales and marketing', 31), (' Logistics and distribution', 26), (' Occupancy ', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' Selling & distribution expenses', 43), (' Advertising expenses', 39), (' Logistics and distribution', 39), (' Selling Expenses', 38), (' Amortisation expenses', 34), (' Sales and marketing', 33), (' Lease expenses', 31), ('other expenses', 30), (' Occupancy expenses', 30), (' Other expenses', 30), (' Administrative and other expenses', 30), (' Management expenses', 30), (' Other expenses', 30), (' Marketing expenses', 29), ('Distribution expenses', 27), (' Administrative expenses', 27), (' Administration expenses', 27), (' depreciation', 21), (' Depreciation expenses', 17), (' Depreciation expenses', 17), (' Occupancy ', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('other expenses', 73), (' Other expenses', 73), (' Other expenses', 73), (' Administrative and other expenses', 68), (' Management expenses', 55), (' Marketing expenses', 53), (' Lease expenses', 50), (' Advertising expenses', 50), (' Selling Expenses', 50), (' Administrative expenses', 49), (' Administration expenses', 49), (' Occupancy expenses', 48), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), ('Distribution expenses', 43), (' Logistics and distribution', 34), (' Sales and marketing', 33), (' depreciation', 29), (' Occupancy ', 8)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Sales and marketing', 32), (' Logistics and distribution', 28), ('Distribution expenses', 25), (' Selling & distribution expenses', 22), (' Administrative expenses', 19), (' Administrative and other expenses', 19), (' Occupancy ', 19), (' Administration expenses', 19), (' Lease expenses', 15), (' Selling Expenses', 15), ('other expenses', 14), (' Marketing expenses', 14), (' Occupancy expenses', 14), (' Other expenses', 14), (' Management expenses', 14), (' Other expenses', 14), (' Advertising expenses', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Occupancy ', 10), (' Logistics and distribution', 6), (' Sales and marketing', 6)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Amortisation expenses', 36), (' Administrative and other expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Management expenses', 19), (' Sales and marketing', 18), (' Occupancy ', 17), (' Occupancy expenses', 13), (' Selling Expenses', 13), (' Advertising expenses', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' depreciation', 28), ('Distribution expenses', 26), (' Logistics and distribution', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), (' Occupancy ', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other expenses', 43), (' Other expenses', 43), (' Other expenses', 43), (' Administrative and other expenses', 39), (' Lease expenses', 35), (' Management expenses', 34), (' Marketing expenses', 33), (' Occupancy expenses', 30), (' Selling Expenses', 30), (' Selling & distribution expenses', 29), (' Administrative expenses', 24), (' Depreciation expenses', 24), (' Administration expenses', 24), (' Depreciation expenses', 24), (' Amortisation expenses', 24), ('Distribution expenses', 20), (' depreciation', 19), (' Advertising expenses', 16), (' Sales and marketing', 16), (' Logistics and distribution', 11), (' Occupancy ', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 7, 8, 9, 11], 'score': 100, 'value': -17494347.0, 'line_item_label': ['Distribution expenses', 'Marketing expenses', 'Occupancy expenses', 'Administration expenses', 'Selling expenses'], 'note_numbers': [nan, nan, nan, nan, nan], 'line_item_value': [-240245.0, -885245.0, -839567.0, -14492289.0, -1037001.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), ('Rent', 25), (' Rental expenses', 24), (' Occupancy expenses', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), ('Rent', 15), (' Occupancy', 14), (' Occupancy expenses', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 14)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('Rent', 50), (' Rental expenses', 38), (' Administration expenses', 33), (' Occupancy expenses', 30), (' Occupancy', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' Administration expenses', 40), (' Occupancy expenses', 26), (' Rental expenses', 25), ('Rent', 9), (' Occupancy', 8)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Administration expenses', 75), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Rental expenses', 77), (' Occupancy expenses', 56), (' Administration expenses', 41), ('Rent', 35), (' Occupancy', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), (' Occupancy', 59), (' Rental expenses', 56), (' Administration expenses', 43), ('Rent', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Occupancy', 25), (' Administration expenses', 22), (' Rental expenses', 17), (' Occupancy expenses', 17), ('Rent', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Rental expenses', 75), (' Occupancy expenses', 61), (' Administration expenses', 44), ('Rent', 27), (' Occupancy', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' Rental expenses', 47), (' Occupancy expenses', 30), (' Administration expenses', 27), ('Rent', 24), (' Occupancy', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [(' Administration expenses', 49), (' Occupancy expenses', 48), (' Rental expenses', 47), ('Rent', 24), (' Occupancy', 8)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), ('Rent', 20), (' Administration expenses', 19), (' Occupancy', 19), (' Occupancy expenses', 14)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Administration expenses', 23), (' Rental expenses', 19), ('Rent', 17), (' Occupancy', 17), (' Occupancy expenses', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Occupancy expenses', 35), (' Rental expenses', 34), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 30), (' Administration expenses', 24), ('Rent', 21), (' Occupancy', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9], 'score': 100, 'value': -13647694.0, 'line_item_label': ['Occupancy expenses', 'Administration expenses'], 'note_numbers': [nan, nan], 'line_item_value': [-709992.0, -12937702.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), ('Rent', 25), (' Rental expenses', 24), (' Occupancy expenses', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), ('Rent', 15), (' Occupancy', 14), (' Occupancy expenses', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 14)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('Rent', 50), (' Rental expenses', 38), (' Administration expenses', 33), (' Occupancy expenses', 30), (' Occupancy', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' Administration expenses', 40), (' Occupancy expenses', 26), (' Rental expenses', 25), ('Rent', 9), (' Occupancy', 8)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Administration expenses', 75), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Rental expenses', 77), (' Occupancy expenses', 56), (' Administration expenses', 41), ('Rent', 35), (' Occupancy', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), (' Occupancy', 59), (' Rental expenses', 56), (' Administration expenses', 43), ('Rent', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Occupancy', 25), (' Administration expenses', 22), (' Rental expenses', 17), (' Occupancy expenses', 17), ('Rent', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Rental expenses', 75), (' Occupancy expenses', 61), (' Administration expenses', 44), ('Rent', 27), (' Occupancy', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' Rental expenses', 47), (' Occupancy expenses', 30), (' Administration expenses', 27), ('Rent', 24), (' Occupancy', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [(' Administration expenses', 49), (' Occupancy expenses', 48), (' Rental expenses', 47), ('Rent', 24), (' Occupancy', 8)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), ('Rent', 20), (' Administration expenses', 19), (' Occupancy', 19), (' Occupancy expenses', 14)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Administration expenses', 23), (' Rental expenses', 19), ('Rent', 17), (' Occupancy', 17), (' Occupancy expenses', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Occupancy expenses', 35), (' Rental expenses', 34), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 30), (' Administration expenses', 24), ('Rent', 21), (' Occupancy', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9], 'score': 100, 'value': -15331856.0, 'line_item_label': ['Occupancy expenses', 'Administration expenses'], 'note_numbers': [nan, nan], 'line_item_value': [-839567.0, -14492289.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 36), ('Other revenue', 33)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 29), ('other operating', 21)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), ('Other revenue', 17), (' Other income', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [(' Other income', 53), ('Other revenue', 40), ('other operating', 33)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' Other income', 60), ('other operating', 48), ('Other revenue', 32)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('Other revenue', 29), ('other operating', 15), (' Other income', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('other operating', 35), (' Other income', 25), ('Other revenue', 24)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue', 33), (' Other income', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('other operating', 38), (' Other income', 27), ('Other revenue', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('Other revenue', 42), (' Other income', 38), ('other operating', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('other operating', 52), (' Other income', 50), ('Other revenue', 30)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), ('Other revenue', 29), (' Other income', 22)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 40), ('Other revenue', 32)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 21)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 36), ('Other revenue', 33)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 29), ('other operating', 21)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), ('Other revenue', 17), (' Other income', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [(' Other income', 53), ('Other revenue', 40), ('other operating', 33)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' Other income', 60), ('other operating', 48), ('Other revenue', 32)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('Other revenue', 29), ('other operating', 15), (' Other income', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('other operating', 35), (' Other income', 25), ('Other revenue', 24)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue', 33), (' Other income', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('other operating', 38), (' Other income', 27), ('Other revenue', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('Other revenue', 42), (' Other income', 38), ('other operating', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('other operating', 52), (' Other income', 50), ('Other revenue', 30)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), ('Other revenue', 29), (' Other income', 22)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 40), ('Other revenue', 32)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 21)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 30), (' Finance income and finance costs', 25), ('other income', 17), ('finance income', 17), ('Finance income', 17), (' Interest revenue', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [(' Interest revenue', 70), ('other income', 53), (' Finance income and costs', 21), ('finance income', 20), ('Finance income', 20), (' Finance income and finance costs', 17), (' Net finance costs', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('other income', 60), (' Finance income and costs', 35), (' Finance income and finance costs', 30), (' Interest revenue', 29), ('finance income', 26), ('Finance income', 26), (' Net finance costs', 24)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Interest revenue', 45), (' Finance income and costs', 27), (' Net finance costs', 26), (' Finance income and finance costs', 23), ('other income', 15), ('finance income', 14), ('Finance income', 14)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Net finance costs', 36), ('other income', 25), (' Interest revenue', 21), ('finance income', 16), ('Finance income', 16), (' Finance income and costs', 12), (' Finance income and finance costs', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 30), ('other income', 26), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Finance income and finance costs', 20), (' Net finance costs', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), ('other income', 30), (' Finance income and finance costs', 27), (' Net finance costs', 26), ('finance income', 21), ('Finance income', 21)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('other income', 27), (' Interest revenue', 23), (' Net finance costs', 23), (' Finance income and costs', 19), ('finance income', 17), ('Finance income', 17), (' Finance income and finance costs', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' Interest revenue', 56), ('other income', 38), (' Finance income and costs', 29), (' Finance income and finance costs', 24), (' Net finance costs', 22), ('finance income', 18), ('Finance income', 18)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('other income', 50), (' Finance income and costs', 48), (' Finance income and finance costs', 41), (' Net finance costs', 33), (' Interest revenue', 28), ('finance income', 24), ('Finance income', 24)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Finance income and costs', 27), (' Net finance costs', 26), (' Finance income and finance costs', 23), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Interest revenue', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Net finance costs', 26), (' Interest revenue', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 40), (' Finance income and costs', 25), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 19), ('Finance income', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other income', 43), (' Net finance costs', 40), (' Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 20)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 85, 'value': -131545.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['8'], 'line_item_value': [-131545.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 30), (' Finance income and finance costs', 25), ('other income', 17), ('finance income', 17), ('Finance income', 17), (' Interest revenue', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [(' Interest revenue', 70), ('other income', 53), (' Finance income and costs', 21), ('finance income', 20), ('Finance income', 20), (' Finance income and finance costs', 17), (' Net finance costs', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('other income', 60), (' Finance income and costs', 35), (' Finance income and finance costs', 30), (' Interest revenue', 29), ('finance income', 26), ('Finance income', 26), (' Net finance costs', 24)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Interest revenue', 45), (' Finance income and costs', 27), (' Net finance costs', 26), (' Finance income and finance costs', 23), ('other income', 15), ('finance income', 14), ('Finance income', 14)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Net finance costs', 36), ('other income', 25), (' Interest revenue', 21), ('finance income', 16), ('Finance income', 16), (' Finance income and costs', 12), (' Finance income and finance costs', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 30), ('other income', 26), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Finance income and finance costs', 20), (' Net finance costs', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), ('other income', 30), (' Finance income and finance costs', 27), (' Net finance costs', 26), ('finance income', 21), ('Finance income', 21)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('other income', 27), (' Interest revenue', 23), (' Net finance costs', 23), (' Finance income and costs', 19), ('finance income', 17), ('Finance income', 17), (' Finance income and finance costs', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' Interest revenue', 56), ('other income', 38), (' Finance income and costs', 29), (' Finance income and finance costs', 24), (' Net finance costs', 22), ('finance income', 18), ('Finance income', 18)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('other income', 50), (' Finance income and costs', 48), (' Finance income and finance costs', 41), (' Net finance costs', 33), (' Interest revenue', 28), ('finance income', 24), ('Finance income', 24)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Finance income and costs', 27), (' Net finance costs', 26), (' Finance income and finance costs', 23), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Interest revenue', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Net finance costs', 26), (' Interest revenue', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 40), (' Finance income and costs', 25), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 19), ('Finance income', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other income', 43), (' Net finance costs', 40), (' Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 20)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 85, 'value': -424637.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['8'], 'line_item_value': [-424637.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 9)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('finance cost', 21), ('finance costs', 21), (' finance expenses', 19), (' net finance costs ', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' net finance costs ', 24), ('finance cost', 20), ('finance costs', 20), (' finance expenses', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' finance expenses', 62), (' net finance costs ', 36), ('finance cost', 17), ('finance costs', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 17), ('finance costs', 17), (' net finance costs ', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' finance expenses', 29), ('finance cost', 25), ('finance costs', 25), (' net finance costs ', 22)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [(' finance expenses', 53), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -131545.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['8'], 'line_item_value': [-131545.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 9)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('finance cost', 21), ('finance costs', 21), (' finance expenses', 19), (' net finance costs ', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' net finance costs ', 24), ('finance cost', 20), ('finance costs', 20), (' finance expenses', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' finance expenses', 62), (' net finance costs ', 36), ('finance cost', 17), ('finance costs', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 17), ('finance costs', 17), (' net finance costs ', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' finance expenses', 29), ('finance cost', 25), ('finance costs', 25), (' net finance costs ', 22)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [(' finance expenses', 53), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -424637.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['8'], 'line_item_value': [-424637.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 9)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('finance cost', 21), ('finance costs', 21), (' finance expenses', 19), (' net finance costs ', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' net finance costs ', 24), ('finance cost', 20), ('finance costs', 20), (' finance expenses', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' finance expenses', 62), (' net finance costs ', 36), ('finance cost', 17), ('finance costs', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 17), ('finance costs', 17), (' net finance costs ', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' finance expenses', 29), ('finance cost', 25), ('finance costs', 25), (' net finance costs ', 22)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [(' finance expenses', 53), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -131545.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['8'], 'line_item_value': [-131545.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 9)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('finance cost', 21), ('finance costs', 21), (' finance expenses', 19), (' net finance costs ', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' net finance costs ', 24), ('finance cost', 20), ('finance costs', 20), (' finance expenses', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' finance expenses', 62), (' net finance costs ', 36), ('finance cost', 17), ('finance costs', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 17), ('finance costs', 17), (' net finance costs ', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' finance expenses', 29), ('finance cost', 25), ('finance costs', 25), (' net finance costs ', 22)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [(' finance expenses', 53), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -424637.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['8'], 'line_item_value': [-424637.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('NULL', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('NULL', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('NULL', 40)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('NULL', 16)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('NULL', 8)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('NULL', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('NULL', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('NULL', 40)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('NULL', 16)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('NULL', 8)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-04-23 14:01:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('current tax', 35), (' income tax benefit', 34), (' tax (expense)/benefit', 33), ('provision for taxation previous year', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 19), ('prior year ', 18), (' income tax expense', 14)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), ('prior year ', 25), ('provision for taxation previous year', 23), ('earlier year', 22), ('amount transferred to retained earnings', 18), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax', 13), (' income tax benefit/(expense)', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), ('provision for taxation previous year', 26), (' income tax benefit', 23), ('amount transferred to retained earnings', 22), (' tax (expense)/benefit', 22), (' income tax benefit/(expense)', 18), ('minimum alternate tax credit entitlement', 15), ('deferred tax', 11), ('earlier year', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 34), (' income tax expense', 29), ('prior year ', 27), ('current tax', 26), ('minimum alternate tax credit entitlement', 23), (' income tax benefit', 21), (' tax (expense)/benefit', 20), ('deferred tax', 19), (' income tax', 19), ('earlier year', 17), (' income tax benefit/(expense)', 17), ('amount transferred to retained earnings', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('earlier year', 40), ('deferred tax', 35), (' income tax', 35), ('amount transferred to retained earnings', 34), ('current tax', 32), ('minimum alternate tax credit entitlement', 25), (' income tax expense', 25), (' income tax benefit', 24), (' tax (expense)/benefit', 23), ('provision for taxation previous year', 22), ('prior year ', 22), (' income tax benefit/(expense)', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('amount transferred to retained earnings', 43), (' income tax benefit', 39), (' income tax', 36), (' income tax benefit/(expense)', 33), (' tax (expense)/benefit', 32), (' income tax expense', 29), ('earlier year', 26), ('provision for taxation previous year', 25), ('deferred tax', 21), ('minimum alternate tax credit entitlement', 20), ('current tax', 7), ('prior year ', 7)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 45), (' income tax expense', 38), ('amount transferred to retained earnings', 33), ('prior year ', 31), ('provision for taxation previous year', 27), ('minimum alternate tax credit entitlement', 25), ('deferred tax', 24), ('current tax', 22), (' income tax benefit', 18), (' income tax', 16), ('earlier year', 14)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' income tax expense', 62), (' tax (expense)/benefit', 52), (' income tax benefit/(expense)', 49), ('deferred tax', 36), ('prior year ', 35), ('earlier year', 32), ('provision for taxation previous year', 29), ('minimum alternate tax credit entitlement', 27), (' income tax', 27), (' income tax benefit', 27), ('current tax', 25), ('amount transferred to retained earnings', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), ('provision for taxation previous year', 20), (' income tax', 19), ('prior year ', 18), ('current tax', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 22), ('provision for taxation previous year', 22), (' income tax benefit', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax', 30), (' income tax benefit', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('prior year ', 19), ('earlier year', 9)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' income tax expense', 52), (' tax (expense)/benefit', 48), (' income tax benefit/(expense)', 40), ('deferred tax', 30), ('prior year ', 29), ('current tax', 27), ('amount transferred to retained earnings', 26), ('provision for taxation previous year', 25), (' income tax benefit', 21), (' income tax', 20), ('minimum alternate tax credit entitlement', 19), ('earlier year', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('prior year ', 39), (' tax (expense)/benefit', 36), (' income tax', 33), ('current tax', 31), (' income tax benefit/(expense)', 31), ('minimum alternate tax credit entitlement', 30), ('amount transferred to retained earnings', 29), ('provision for taxation previous year', 28), (' income tax expense', 27), (' income tax benefit', 21), ('deferred tax', 20), ('earlier year', 18)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [(' income tax expense', 59), (' income tax benefit/(expense)', 58), ('amount transferred to retained earnings', 54), (' tax (expense)/benefit', 51), (' income tax benefit', 37), ('provision for taxation previous year', 32), ('earlier year', 30), ('deferred tax', 27), (' income tax', 27), ('current tax', 19), ('minimum alternate tax credit entitlement', 15), ('prior year ', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), (' tax (expense)/benefit', 53), ('current tax', 52), ('provision for taxation previous year', 49), (' income tax benefit/(expense)', 45), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 31), ('earlier year', 29), ('amount transferred to retained earnings', 23)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('provision for taxation previous year', 22), ('amount transferred to retained earnings', 19), ('earlier year', 14)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 55), ('current tax', 40), ('earlier year', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29), ('amount transferred to retained earnings', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('prior year ', 31), ('current tax', 30), (' tax (expense)/benefit', 30), ('earlier year', 24), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), (' income tax benefit', 46), ('provision for taxation previous year', 44), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('earlier year', 34), ('current tax', 30), ('deferred tax', 27), (' tax (expense)/benefit', 26), ('amount transferred to retained earnings', 16)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': -2475839.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['10'], 'line_item_value': [-2475839.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('current tax', 35), (' income tax benefit', 34), (' tax (expense)/benefit', 33), ('provision for taxation previous year', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 19), ('prior year ', 18), (' income tax expense', 14)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), ('prior year ', 25), ('provision for taxation previous year', 23), ('earlier year', 22), ('amount transferred to retained earnings', 18), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax', 13), (' income tax benefit/(expense)', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), ('provision for taxation previous year', 26), (' income tax benefit', 23), ('amount transferred to retained earnings', 22), (' tax (expense)/benefit', 22), (' income tax benefit/(expense)', 18), ('minimum alternate tax credit entitlement', 15), ('deferred tax', 11), ('earlier year', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 34), (' income tax expense', 29), ('prior year ', 27), ('current tax', 26), ('minimum alternate tax credit entitlement', 23), (' income tax benefit', 21), (' tax (expense)/benefit', 20), ('deferred tax', 19), (' income tax', 19), ('earlier year', 17), (' income tax benefit/(expense)', 17), ('amount transferred to retained earnings', 10)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('earlier year', 40), ('deferred tax', 35), (' income tax', 35), ('amount transferred to retained earnings', 34), ('current tax', 32), ('minimum alternate tax credit entitlement', 25), (' income tax expense', 25), (' income tax benefit', 24), (' tax (expense)/benefit', 23), ('provision for taxation previous year', 22), ('prior year ', 22), (' income tax benefit/(expense)', 19)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('amount transferred to retained earnings', 43), (' income tax benefit', 39), (' income tax', 36), (' income tax benefit/(expense)', 33), (' tax (expense)/benefit', 32), (' income tax expense', 29), ('earlier year', 26), ('provision for taxation previous year', 25), ('deferred tax', 21), ('minimum alternate tax credit entitlement', 20), ('current tax', 7), ('prior year ', 7)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 45), (' income tax expense', 38), ('amount transferred to retained earnings', 33), ('prior year ', 31), ('provision for taxation previous year', 27), ('minimum alternate tax credit entitlement', 25), ('deferred tax', 24), ('current tax', 22), (' income tax benefit', 18), (' income tax', 16), ('earlier year', 14)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' income tax expense', 62), (' tax (expense)/benefit', 52), (' income tax benefit/(expense)', 49), ('deferred tax', 36), ('prior year ', 35), ('earlier year', 32), ('provision for taxation previous year', 29), ('minimum alternate tax credit entitlement', 27), (' income tax', 27), (' income tax benefit', 27), ('current tax', 25), ('amount transferred to retained earnings', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), ('provision for taxation previous year', 20), (' income tax', 19), ('prior year ', 18), ('current tax', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 22), ('provision for taxation previous year', 22), (' income tax benefit', 12)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax', 30), (' income tax benefit', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('prior year ', 19), ('earlier year', 9)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' income tax expense', 52), (' tax (expense)/benefit', 48), (' income tax benefit/(expense)', 40), ('deferred tax', 30), ('prior year ', 29), ('current tax', 27), ('amount transferred to retained earnings', 26), ('provision for taxation previous year', 25), (' income tax benefit', 21), (' income tax', 20), ('minimum alternate tax credit entitlement', 19), ('earlier year', 17)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('prior year ', 39), (' tax (expense)/benefit', 36), (' income tax', 33), ('current tax', 31), (' income tax benefit/(expense)', 31), ('minimum alternate tax credit entitlement', 30), ('amount transferred to retained earnings', 29), ('provision for taxation previous year', 28), (' income tax expense', 27), (' income tax benefit', 21), ('deferred tax', 20), ('earlier year', 18)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [(' income tax expense', 59), (' income tax benefit/(expense)', 58), ('amount transferred to retained earnings', 54), (' tax (expense)/benefit', 51), (' income tax benefit', 37), ('provision for taxation previous year', 32), ('earlier year', 30), ('deferred tax', 27), (' income tax', 27), ('current tax', 19), ('minimum alternate tax credit entitlement', 15), ('prior year ', 13)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), (' tax (expense)/benefit', 53), ('current tax', 52), ('provision for taxation previous year', 49), (' income tax benefit/(expense)', 45), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 31), ('earlier year', 29), ('amount transferred to retained earnings', 23)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('provision for taxation previous year', 22), ('amount transferred to retained earnings', 19), ('earlier year', 14)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 55), ('current tax', 40), ('earlier year', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29), ('amount transferred to retained earnings', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('prior year ', 31), ('current tax', 30), (' tax (expense)/benefit', 30), ('earlier year', 24), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 11)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), (' income tax benefit', 46), ('provision for taxation previous year', 44), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('earlier year', 34), ('current tax', 30), ('deferred tax', 27), (' tax (expense)/benefit', 26), ('amount transferred to retained earnings', 16)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': -3655385.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['10'], 'line_item_value': [-3655385.0]}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefito, current year , res_fuzz_match = [('income tax expense', 100), (' total income tax expense / (benefit)', 77), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 76), (' income tax expense on continuing operations', 69), (' total tax (expense)/benefit in income statement', 63), (' deferred income tax', 60), (' current income tax', 53)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = income tax expense(denefit) - prior year's adjustment , res_fuzz_match = [('income tax expense', 100), (' total income tax expense / (benefit)', 73), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 64), (' income tax expense on continuing operations', 62), (' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 60), (' current income tax', 53)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit) current year , res_fuzz_match = [('income tax expense', 69), (' current income tax', 62), (' total tax (expense)/benefit in income statement', 62), (' deferred income tax', 60), (' total income tax expense / (benefit)', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 58), (' income tax expense on continuing operations', 52)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit), prior year's adjustment , res_fuzz_match = [('income tax expense', 69), (' total tax (expense)/benefit in income statement', 62), (' deferred income tax', 60), (' total income tax expense / (benefit)', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 52), (' income tax expense on continuing operations', 48), (' current income tax', 29)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 75), (' total income tax expense / (benefit)', 75), (' total tax (expense)/benefit in income statement', 75), ('income tax expense', 69), (' deferred income tax', 60), (' income tax expense on continuing operations', 54), (' current income tax', 29)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) income tax expense , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 80), (' current income tax', 76), (' total tax (expense)/benefit in income statement', 75), (' income tax expense on continuing operations', 71), (' total income tax expense / (benefit)', 69), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense , res_fuzz_match = [('income tax expense', 75), (' deferred income tax', 73), (' current income tax', 65), (' income tax expense on continuing operations', 65), (' total income tax expense / (benefit)', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' total tax (expense)/benefit in income statement', 46)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense profit before tax , res_fuzz_match = [('income tax expense', 75), (' deferred income tax', 73), (' total income tax expense / (benefit)', 70), (' income tax expense on continuing operations', 69), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 62), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense tax at the rate of 30% (2021: 30%) , res_fuzz_match = [('income tax expense', 75), (' deferred income tax', 73), (' income tax expense on continuing operations', 69), (' total income tax expense / (benefit)', 67), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 53)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense non-deductible entertainment , res_fuzz_match = [('income tax expense', 62), (' income tax expense on continuing operations', 55), (' total income tax expense / (benefit)', 43), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of current tax liability in prior year , res_fuzz_match = [(' current income tax', 65), ('income tax expense', 62), (' income tax expense on continuing operations', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total tax (expense)/benefit in income statement', 45), (' deferred income tax', 40), (' total income tax expense / (benefit)', 37)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of deferred tax in prior year , res_fuzz_match = [('income tax expense', 62), (' deferred income tax', 60), (' income tax expense on continuing operations', 48), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 36), (' current income tax', 35)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense tax expense for the year , res_fuzz_match = [('income tax expense', 75), (' income tax expense on continuing operations', 63), (' deferred income tax', 53), (' total income tax expense / (benefit)', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' total tax (expense)/benefit in income statement', 47), (' current income tax', 41)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = 10.3 current tax assets and liabilities , res_fuzz_match = [(' current income tax', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), ('income tax expense', 50), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 39), (' total income tax expense / (benefit)', 36), (' income tax expense on continuing operations', 29)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): income tax recelvable/payable) , res_fuzz_match = [('income tax expense', 75), (' deferred income tax', 67), (' current income tax', 65), (' total income tax expense / (benefit)', 55), (' total tax (expense)/benefit in income statement', 52), (' income tax expense on continuing operations', 46), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): , res_fuzz_match = [(' current income tax', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 58), (' total tax (expense)/benefit in income statement', 46), ('income tax expense', 44), (' deferred income tax', 40), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefito, current year , res_fuzz_match = [('income tax expense', 100), (' total income tax expense / (benefit)', 77), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 76), (' income tax expense on continuing operations', 69), (' total tax (expense)/benefit in income statement', 63), (' deferred income tax', 60), (' current income tax', 53)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = income tax expense(denefit) - prior year's adjustment , res_fuzz_match = [('income tax expense', 100), (' total income tax expense / (benefit)', 73), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 64), (' income tax expense on continuing operations', 62), (' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 60), (' current income tax', 53)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit) current year , res_fuzz_match = [('income tax expense', 69), (' current income tax', 62), (' total tax (expense)/benefit in income statement', 62), (' deferred income tax', 60), (' total income tax expense / (benefit)', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 58), (' income tax expense on continuing operations', 52)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) deferred tax expense(benefit), prior year's adjustment , res_fuzz_match = [('income tax expense', 69), (' total tax (expense)/benefit in income statement', 62), (' deferred income tax', 60), (' total income tax expense / (benefit)', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 52), (' income tax expense on continuing operations', 48), (' current income tax', 29)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 75), (' total income tax expense / (benefit)', 75), (' total tax (expense)/benefit in income statement', 75), ('income tax expense', 69), (' deferred income tax', 60), (' income tax expense on continuing operations', 54), (' current income tax', 29)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = deferred tax expense(benefit) income tax expense , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 80), (' current income tax', 76), (' total tax (expense)/benefit in income statement', 75), (' income tax expense on continuing operations', 71), (' total income tax expense / (benefit)', 69), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense , res_fuzz_match = [('income tax expense', 75), (' deferred income tax', 73), (' current income tax', 65), (' income tax expense on continuing operations', 65), (' total income tax expense / (benefit)', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' total tax (expense)/benefit in income statement', 46)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense profit before tax , res_fuzz_match = [('income tax expense', 75), (' deferred income tax', 73), (' total income tax expense / (benefit)', 70), (' income tax expense on continuing operations', 69), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 62), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense tax at the rate of 30% (2021: 30%) , res_fuzz_match = [('income tax expense', 75), (' deferred income tax', 73), (' income tax expense on continuing operations', 69), (' total income tax expense / (benefit)', 67), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 53)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense non-deductible entertainment , res_fuzz_match = [('income tax expense', 62), (' income tax expense on continuing operations', 55), (' total income tax expense / (benefit)', 43), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of current tax liability in prior year , res_fuzz_match = [(' current income tax', 65), ('income tax expense', 62), (' income tax expense on continuing operations', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total tax (expense)/benefit in income statement', 45), (' deferred income tax', 40), (' total income tax expense / (benefit)', 37)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of deferred tax in prior year , res_fuzz_match = [('income tax expense', 62), (' deferred income tax', 60), (' income tax expense on continuing operations', 48), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 36), (' current income tax', 35)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense tax expense for the year , res_fuzz_match = [('income tax expense', 75), (' income tax expense on continuing operations', 63), (' deferred income tax', 53), (' total income tax expense / (benefit)', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' total tax (expense)/benefit in income statement', 47), (' current income tax', 41)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = 10.3 current tax assets and liabilities , res_fuzz_match = [(' current income tax', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), ('income tax expense', 50), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 39), (' total income tax expense / (benefit)', 36), (' income tax expense on continuing operations', 29)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): income tax recelvable/payable) , res_fuzz_match = [('income tax expense', 75), (' deferred income tax', 67), (' current income tax', 65), (' total income tax expense / (benefit)', 55), (' total tax (expense)/benefit in income statement', 52), (' income tax expense on continuing operations', 46), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = current tax assets/liabilities): , res_fuzz_match = [(' current income tax', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 58), (' total tax (expense)/benefit in income statement', 46), ('income tax expense', 44), (' deferred income tax', 40), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 6, 17, 18, 23], 'score': [100, 100, 100, 100, 100, 100], 'value': [3876839.0, 4173.0, 3655385.0, 2808004.0, 188467.0, 2475839.0], 'label': [' Income tax expense(benefito, current year', " Income tax expense(Denefit) - prior year's adjustment", 'Deferred tax expense(benefit) Income tax expense', ' Income tax expense(benefito, current year', " Income tax expense(Denefit) - prior year's adjustment", 'Deferred tax expense(benefit) Income tax expense'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-04-23 14:01:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-04-23 14:01:19+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 41), ('income tax expense', 31), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 31), (' total tax (expense)/benefit in income statement', 31), (' income tax expense on continuing operations', 29), (' total income tax expense / (benefit)', 21)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [(' deferred income tax', 85), ('income tax expense', 48), (' current income tax', 47), (' total tax (expense)/benefit in income statement', 39), (' total income tax expense / (benefit)', 31), (' income tax expense on continuing operations', 29), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 24)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 33), ('income tax expense', 31), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 31), (' total income tax expense / (benefit)', 30), (' income tax expense on continuing operations', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [(' deferred income tax', 53), ('income tax expense', 45), (' current income tax', 41), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 36), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 35), (' total tax (expense)/benefit in income statement', 35)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), (' total income tax expense / (benefit)', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 36), ('income tax expense', 31), (' income tax expense on continuing operations', 31), (' total tax (expense)/benefit in income statement', 30)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), ('income tax expense', 38), (' total income tax expense / (benefit)', 32), (' total tax (expense)/benefit in income statement', 30), (' income tax expense on continuing operations', 28), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total tax (expense)/benefit in income statement', 41), (' total income tax expense / (benefit)', 40), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), ('income tax expense', 32), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 32), (' total tax (expense)/benefit in income statement', 32), (' income tax expense on continuing operations', 25), (' total income tax expense / (benefit)', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [(' deferred income tax', 53), ('income tax expense', 41), (' current income tax', 35), (' total income tax expense / (benefit)', 33), (' income tax expense on continuing operations', 31), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 30), (' total tax (expense)/benefit in income statement', 30)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [(' deferred income tax', 53), (' income tax expense on continuing operations', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 35), ('income tax expense', 34), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 28), (' total tax (expense)/benefit in income statement', 27)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 37), (' total income tax expense / (benefit)', 32), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 30), (' income tax expense on continuing operations', 28)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [(' deferred income tax', 53), (' income tax expense on continuing operations', 39), (' total income tax expense / (benefit)', 38), (' current income tax', 35), ('income tax expense', 31), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 27), (' total tax (expense)/benefit in income statement', 27)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 35), (' total income tax expense / (benefit)', 35), (' income tax expense on continuing operations', 34), ('income tax expense', 31), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 28), (' total tax (expense)/benefit in income statement', 25)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 30), (' total income tax expense / (benefit)', 29), (' income tax expense on continuing operations', 27)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 37), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 26), (' total income tax expense / (benefit)', 26)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [(' deferred income tax', 50), (' current income tax', 36), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), ('income tax expense', 31), (' total income tax expense / (benefit)', 29), (' total tax (expense)/benefit in income statement', 24)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:19+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 41), ('income tax expense', 31), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 31), (' total tax (expense)/benefit in income statement', 31), (' income tax expense on continuing operations', 29), (' total income tax expense / (benefit)', 21)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [(' deferred income tax', 85), ('income tax expense', 48), (' current income tax', 47), (' total tax (expense)/benefit in income statement', 39), (' total income tax expense / (benefit)', 31), (' income tax expense on continuing operations', 29), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 24)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 33), ('income tax expense', 31), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 31), (' total income tax expense / (benefit)', 30), (' income tax expense on continuing operations', 26)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [(' deferred income tax', 53), ('income tax expense', 45), (' current income tax', 41), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 36), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 35), (' total tax (expense)/benefit in income statement', 35)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), (' total income tax expense / (benefit)', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 36), ('income tax expense', 31), (' income tax expense on continuing operations', 31), (' total tax (expense)/benefit in income statement', 30)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), ('income tax expense', 38), (' total income tax expense / (benefit)', 32), (' total tax (expense)/benefit in income statement', 30), (' income tax expense on continuing operations', 28), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 26)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total tax (expense)/benefit in income statement', 41), (' total income tax expense / (benefit)', 40), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), ('income tax expense', 32), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 32), (' total tax (expense)/benefit in income statement', 32), (' income tax expense on continuing operations', 25), (' total income tax expense / (benefit)', 25)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [(' deferred income tax', 53), ('income tax expense', 41), (' current income tax', 35), (' total income tax expense / (benefit)', 33), (' income tax expense on continuing operations', 31), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 30), (' total tax (expense)/benefit in income statement', 30)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [(' deferred income tax', 53), (' income tax expense on continuing operations', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 35), ('income tax expense', 34), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 28), (' total tax (expense)/benefit in income statement', 27)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 37), (' total income tax expense / (benefit)', 32), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 30), (' income tax expense on continuing operations', 28)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [(' deferred income tax', 53), (' income tax expense on continuing operations', 39), (' total income tax expense / (benefit)', 38), (' current income tax', 35), ('income tax expense', 31), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 27), (' total tax (expense)/benefit in income statement', 27)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 35), (' total income tax expense / (benefit)', 35), (' income tax expense on continuing operations', 34), ('income tax expense', 31), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 28), (' total tax (expense)/benefit in income statement', 25)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 30), (' total income tax expense / (benefit)', 29), (' income tax expense on continuing operations', 27)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 37), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 26), (' total income tax expense / (benefit)', 26)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [(' deferred income tax', 50), (' current income tax', 36), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), ('income tax expense', 31), (' total income tax expense / (benefit)', 29), (' total tax (expense)/benefit in income statement', 24)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 41), ('income tax expense', 31), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 31), (' total tax (expense)/benefit in income statement', 31), (' income tax expense on continuing operations', 29), (' total income tax expense / (benefit)', 21)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [(' deferred income tax', 85), ('income tax expense', 48), (' current income tax', 47), (' total tax (expense)/benefit in income statement', 39), (' total income tax expense / (benefit)', 31), (' income tax expense on continuing operations', 29), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 24)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 33), ('income tax expense', 31), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 31), (' total income tax expense / (benefit)', 30), (' income tax expense on continuing operations', 26)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [(' deferred income tax', 53), ('income tax expense', 45), (' current income tax', 41), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 36), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 35), (' total tax (expense)/benefit in income statement', 35)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), (' total income tax expense / (benefit)', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 36), ('income tax expense', 31), (' income tax expense on continuing operations', 31), (' total tax (expense)/benefit in income statement', 30)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), ('income tax expense', 38), (' total income tax expense / (benefit)', 32), (' total tax (expense)/benefit in income statement', 30), (' income tax expense on continuing operations', 28), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 26)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total tax (expense)/benefit in income statement', 41), (' total income tax expense / (benefit)', 40), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), ('income tax expense', 32), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 32), (' total tax (expense)/benefit in income statement', 32), (' income tax expense on continuing operations', 25), (' total income tax expense / (benefit)', 25)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [(' deferred income tax', 53), ('income tax expense', 41), (' current income tax', 35), (' total income tax expense / (benefit)', 33), (' income tax expense on continuing operations', 31), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 30), (' total tax (expense)/benefit in income statement', 30)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [(' deferred income tax', 53), (' income tax expense on continuing operations', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 35), ('income tax expense', 34), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 28), (' total tax (expense)/benefit in income statement', 27)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 37), (' total income tax expense / (benefit)', 32), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 30), (' income tax expense on continuing operations', 28)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [(' deferred income tax', 53), (' income tax expense on continuing operations', 39), (' total income tax expense / (benefit)', 38), (' current income tax', 35), ('income tax expense', 31), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 27), (' total tax (expense)/benefit in income statement', 27)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 35), (' total income tax expense / (benefit)', 35), (' income tax expense on continuing operations', 34), ('income tax expense', 31), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 28), (' total tax (expense)/benefit in income statement', 25)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 30), (' total income tax expense / (benefit)', 29), (' income tax expense on continuing operations', 27)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 37), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 26), (' total income tax expense / (benefit)', 26)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [(' deferred income tax', 50), (' current income tax', 36), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), ('income tax expense', 31), (' total income tax expense / (benefit)', 29), (' total tax (expense)/benefit in income statement', 24)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 17, 33], 'score': [85, 85, 85], 'value': [44058.0, 59293.0, -15235.0], 'label': ['Timing difference arising from: Deferred Income', 'Timing difference arising from: Deferred Income', 'Timing difference arising from: Deferred Income'], 'year': [], 'colname_found': ['rows', 'rows', 'rows']}
2023-04-23 14:01:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-04-23 14:01:20+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-04-23 14:01:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-04-23 14:01:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-04-23 14:01:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:20+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('share of', 31), ('share in', 31)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:20+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('share of', 31), ('share in', 31)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-04-23 14:01:20+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-04-23 14:01:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-04-23 14:01:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-04-23 14:01:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:20+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 25), ('exceptional', 11)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 13), ('prior period', 10)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('exceptional', 43), ('prior period', 20)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('prior period', 13), ('exceptional', 8)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 14)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('exceptional', 42), ('prior period', 24)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 33)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 14)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('exceptional', 24), ('prior period', 9)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('exceptional', 35), ('prior period', 26)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('prior period', 36), ('exceptional', 15)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('exceptional', 30), ('prior period', 18)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 18)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('exceptional', 21), ('prior period', 18)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('prior period', 21), ('exceptional', 20)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:20+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 25), ('exceptional', 11)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 13), ('prior period', 10)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('exceptional', 43), ('prior period', 20)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('prior period', 13), ('exceptional', 8)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 14)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('exceptional', 42), ('prior period', 24)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 33)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 14)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('exceptional', 24), ('prior period', 9)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('exceptional', 35), ('prior period', 26)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('prior period', 36), ('exceptional', 15)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('exceptional', 30), ('prior period', 18)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 18)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('exceptional', 21), ('prior period', 18)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('prior period', 21), ('exceptional', 20)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-04-23 14:01:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-04-23 14:01:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-04-23 14:01:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-04-23 14:01:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-04-23 14:01:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-04-23 14:01:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-04-23 14:01:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:20+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('NULL', 17)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('NULL', 17)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('NULL', 40)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('NULL', 16)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('NULL', 8)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-04-23 14:01:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-04-23 14:01:20+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('NULL', 17)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('NULL', 17)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('NULL', 40)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('NULL', 16)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('NULL', 8)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-04-23 14:01:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}

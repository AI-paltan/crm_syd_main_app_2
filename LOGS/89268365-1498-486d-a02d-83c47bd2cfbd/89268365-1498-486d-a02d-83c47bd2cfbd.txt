2023-07-27 11:38:22+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-07-27 11:38:22+0530 - sLogger - DEBUG - process_main_pages started
2023-07-27 11:38:22+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-27 11:38:22+0530 - sLogger - DEBUG - start_refactoring started
2023-07-27 11:38:22+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-27 11:38:22+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-27 11:38:22+0530 - sLogger - DEBUG - start_refactoring started
2023-07-27 11:38:22+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-07-27 11:38:22+0530 - sLogger - ERROR - error occured: zero-size array to reduction operation maximum which has no identity
2023-07-27 11:38:22+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: ideal_format_processing
2023-07-27 11:38:22+0530 - sLogger - ERROR - error occured: list index out of range
2023-07-27 11:38:22+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-27 11:38:22+0530 - sLogger - ERROR - error occured: local variable 'standard_df' referenced before assignment
2023-07-27 11:38:22+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-27 11:38:38+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-07-27 11:38:38+0530 - sLogger - DEBUG - process_main_pages started
2023-07-27 11:38:38+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-27 11:38:38+0530 - sLogger - DEBUG - start_refactoring started
2023-07-27 11:38:38+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-27 11:38:38+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-27 11:38:38+0530 - sLogger - DEBUG - start_refactoring started
2023-07-27 11:38:38+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-27 11:38:38+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-27 11:38:38+0530 - sLogger - DEBUG - start_refactoring started
2023-07-27 11:38:38+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-27 11:38:38+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-27 11:38:38+0530 - sLogger - DEBUG - start_refactoring started
2023-07-27 11:38:38+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-27 11:38:38+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-07-27 11:38:38+0530 - sLogger - DEBUG - set_section_details started
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('current assets', 56), ('noncurrent assets', 56), ('equity', 36), ('equity and liabilities', 27), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Current assets | [('current assets', 100), ('noncurrent assets', 77), ('assets', 56), ('current liabilities', 52), ('noncurrent liabilities', 44), ('equity', 32), ('equity and liabilities', 27), ('equity liabilities', 23), ('liabilities', 11)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current assets | score 100
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current liabilities | score 67
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent assets | score 90
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent liabilities | score 61
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current assets | score 95
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current liabilities | score 86
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity and liabilities | score 33
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equity liabilities', 35), ('assets', 31), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrent liabilities', 23), ('liabilities', 22)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Shortterm investments | [('noncurrent assets', 41), ('current assets', 34), ('noncurrent liabilities', 33), ('assets', 29), ('equity and liabilities', 24), ('equity liabilities', 21), ('current liabilities', 20), ('equity', 18), ('liabilities', 9)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Shortterm investments | MATCH WORD current assets | score 43
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Shortterm investments | MATCH WORD current liabilities | score 35
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Shortterm investments | MATCH WORD noncurrent assets | score 42
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Shortterm investments | MATCH WORD noncurrent liabilities | score 37
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Shortterm investments | MATCH WORD non current assets | score 41
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Shortterm investments | MATCH WORD non current liabilities | score 36
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Shortterm investments | MATCH WORD equity and liabilities | score 28
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Shortterm investments | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Trade and other receivables | [('equity and liabilities', 41), ('current assets', 34), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('liabilities', 14)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Inventories | [('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equity and liabilities', 31), ('assets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Other assets | [('noncurrent assets', 67), ('assets', 62), ('current assets', 58), ('noncurrent liabilities', 32), ('equity and liabilities', 29), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('liabilities', 12)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current assets | score 64
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current liabilities | score 32
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent assets | score 64
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent liabilities | score 36
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current assets | score 86
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current liabilities | score 34
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity and liabilities | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equity', 24), ('liabilities', 16)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Noncurrent assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('current liabilities', 30), ('equity and liabilities', 27), ('equity liabilities', 23), ('equity', 21), ('liabilities', 11)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current assets | score 90
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current liabilities | score 61
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent assets | score 100
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent liabilities | score 72
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current assets | score 97
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current liabilities | score 70
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Other assets | [('noncurrent assets', 67), ('assets', 62), ('current assets', 58), ('noncurrent liabilities', 32), ('equity and liabilities', 29), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('liabilities', 12)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current assets | score 64
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current liabilities | score 32
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent assets | score 64
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent liabilities | score 36
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current assets | score 86
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current liabilities | score 34
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity and liabilities | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('current assets', 38), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 38), ('equity', 33), ('noncurrent liabilities', 31), ('liabilities', 22)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current assets | score 58
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current liabilities | score 42
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent assets | score 59
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent liabilities | score 36
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current assets | score 57
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current liabilities | score 38
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity and liabilities | score 46
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('liabilities', 19)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 21), ('equity', 19), ('liabilities', 10)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 42), ('equity and liabilities', 33), ('equity liabilities', 31), ('equity', 24), ('liabilities', 16)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Liabilities and equity | [('equity and liabilities', 100), ('equity liabilities', 87), ('current liabilities', 58), ('liabilities', 52), ('equity', 52), ('noncurrent liabilities', 39), ('assets', 27), ('current assets', 27), ('noncurrent assets', 27)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD current assets | score 32
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD current liabilities | score 69
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD noncurrent assets | score 26
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD noncurrent liabilities | score 65
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD non current assets | score 25
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD non current liabilities | score 64
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD equity and liabilities | score 95
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD equity | score 90
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Current liabilities | [('current liabilities', 100), ('equity liabilities', 67), ('liabilities', 60), ('equity and liabilities', 58), ('current assets', 52), ('noncurrent liabilities', 43), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current assets | score 67
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current liabilities | score 100
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent assets | score 61
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent liabilities | score 93
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current assets | score 59
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current liabilities | score 95
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity and liabilities | score 69
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrent liabilities', 28), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Contract liabilities | [('current liabilities', 69), ('liabilities', 57), ('equity liabilities', 57), ('equity and liabilities', 56), ('noncurrent liabilities', 41), ('current assets', 21), ('noncurrent assets', 21), ('assets', 20), ('equity', 19)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current assets | score 41
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current liabilities | score 77
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent assets | score 43
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent liabilities | score 76
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current assets | score 42
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current liabilities | score 74
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity and liabilities | score 67
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Income tax payable | [('liabilities', 36), ('equity liabilities', 34), ('current liabilities', 33), ('noncurrent liabilities', 33), ('equity and liabilities', 30), ('current assets', 21), ('assets', 19), ('equity', 18), ('noncurrent assets', 14)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD current assets | score 38
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD current liabilities | score 43
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD noncurrent assets | score 40
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD noncurrent liabilities | score 45
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD non current assets | score 39
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD non current liabilities | score 44
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD equity and liabilities | score 40
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('equity liabilities', 55), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Noncurrent liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('equity', 20), ('assets', 11)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current assets | score 61
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current liabilities | score 93
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent assets | score 72
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent liabilities | score 100
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current assets | score 70
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current liabilities | score 98
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity and liabilities | score 65
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrent assets', 55), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('equity liabilities', 36), ('equity and liabilities', 32), ('assets', 16), ('equity', 15)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 22)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equity liabilities', 63), ('equity and liabilities', 52), ('assets', 36), ('liabilities', 33), ('current assets', 32), ('current liabilities', 30), ('noncurrent assets', 21), ('noncurrent liabilities', 20)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('equity and liabilities', 37), ('current assets', 35), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('liabilities', 25)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 36
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 36
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 32
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 39
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 31
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 39
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Share premium | [('current assets', 31), ('equity liabilities', 31), ('current liabilities', 30), ('equity and liabilities', 27), ('noncurrent assets', 23), ('assets', 22), ('noncurrent liabilities', 22), ('liabilities', 21), ('equity', 21)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Share premium | MATCH WORD current assets | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Share premium | MATCH WORD current liabilities | score 29
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Share premium | MATCH WORD noncurrent assets | score 27
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Share premium | MATCH WORD noncurrent liabilities | score 28
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Share premium | MATCH WORD non current assets | score 26
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Share premium | MATCH WORD non current liabilities | score 28
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Share premium | MATCH WORD equity and liabilities | score 27
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Share premium | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('current liabilities', 48), ('current assets', 42), ('assets', 38), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Tax reserve | [('assets', 40), ('current assets', 35), ('current liabilities', 33), ('noncurrent assets', 26), ('equity liabilities', 26), ('equity', 25), ('equity and liabilities', 22), ('noncurrent liabilities', 17), ('liabilities', 12)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Tax reserve | MATCH WORD current assets | score 38
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Tax reserve | MATCH WORD current liabilities | score 31
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Tax reserve | MATCH WORD noncurrent assets | score 34
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Tax reserve | MATCH WORD noncurrent liabilities | score 34
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Tax reserve | MATCH WORD non current assets | score 38
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Tax reserve | MATCH WORD non current liabilities | score 32
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Tax reserve | MATCH WORD equity and liabilities | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Tax reserve | MATCH WORD equity | score 28
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Other components of equity | [('equity and liabilities', 50), ('equity', 48), ('equity liabilities', 44), ('noncurrent assets', 31), ('current liabilities', 30), ('noncurrent liabilities', 30), ('current assets', 25), ('assets', 17), ('liabilities', 16)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other components of equity | MATCH WORD current assets | score 39
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other components of equity | MATCH WORD current liabilities | score 34
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other components of equity | MATCH WORD noncurrent assets | score 42
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other components of equity | MATCH WORD noncurrent liabilities | score 33
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other components of equity | MATCH WORD non current assets | score 41
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other components of equity | MATCH WORD non current liabilities | score 37
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other components of equity | MATCH WORD equity and liabilities | score 44
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Other components of equity | MATCH WORD equity | score 90
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('assets', 24)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-07-27 11:38:38+0530 - sLogger - DEBUG - Total liabilities and equity | [('equity and liabilities', 85), ('equity liabilities', 72), ('current liabilities', 49), ('noncurrent liabilities', 43), ('liabilities', 41), ('equity', 41), ('current assets', 28), ('noncurrent assets', 28), ('assets', 21)]
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total liabilities and equity | MATCH WORD current assets | score 32
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total liabilities and equity | MATCH WORD current liabilities | score 69
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total liabilities and equity | MATCH WORD noncurrent assets | score 32
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total liabilities and equity | MATCH WORD noncurrent liabilities | score 64
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total liabilities and equity | MATCH WORD non current assets | score 30
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total liabilities and equity | MATCH WORD non current liabilities | score 62
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total liabilities and equity | MATCH WORD equity and liabilities | score 95
2023-07-27 11:38:38+0530 - sLogger - DEBUG - particular_text Total liabilities and equity | MATCH WORD equity | score 90
2023-07-27 11:38:38+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-07-27 11:38:38+0530 - sLogger - DEBUG - set_section_details started
2023-07-27 11:38:38+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Operating activities | working capital adjustments
2023-07-27 11:38:38+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-07-27 11:38:38+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-07-27 11:38:38+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid | movements in working capital
2023-07-27 11:38:38+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax refunded/(paid) | adiustments for movements in working capital
2023-07-27 11:38:38+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in operating activities | operating cash flow before working capital changes
2023-07-27 11:38:38+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Investing activities | movements in working capital
2023-07-27 11:38:38+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Purchase of property, plant and equipment | changes in operating assets and liabilities
2023-07-27 11:38:38+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Purchase of intangible assets | changes in assets liabilities
2023-07-27 11:38:38+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from sale of property, plant and equipment | operating profit before changes in assets and liabilities
2023-07-27 11:38:38+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Purchase of short term investments | adiustments for movements in working capital
2023-07-27 11:38:38+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-07-27 11:38:38+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows from investing activities | adjustments for increase decrease in operating assets
2023-07-27 11:38:38+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Financing activities | changes in working capital
2023-07-27 11:38:38+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of principal portion of lease liabilities | operating profit before changes in assets and liabilities
2023-07-27 11:38:38+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in financing activities | operating cash flow before working capital changes
2023-07-27 11:38:38+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net decrease in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-07-27 11:38:38+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at 1 April | changes in operating assets and liabilities
2023-07-27 11:38:38+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at 31 March | changes in operating assets and liabilities
2023-07-27 11:38:41+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-27 11:38:41+0530 - sLogger - ERROR - error occured: 'value'
2023-07-27 11:38:42+0530 - sLogger - DEBUG - process_main_pages completed
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = short-term investments , res_fuzz_match = [('cash and short term deposits', 65), ('other bank balances', 36), ('cash and cash equivalents', 32), (' cash and cash equivalents', 32), ('bank balances other than cash and cash equivalents', 30), ('bank balances other than above', 28), ('cash and bank balances', 22)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other bank balances', 50), ('cash and short term deposits', 47), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 44129828.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['6'], 'line_item_value': [44129828.0]}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = short-term investments , res_fuzz_match = [('cash and short term deposits', 65), ('other bank balances', 36), ('cash and cash equivalents', 32), (' cash and cash equivalents', 32), ('bank balances other than cash and cash equivalents', 30), ('bank balances other than above', 28), ('cash and bank balances', 22)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other bank balances', 50), ('cash and short term deposits', 47), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 36863801.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['6'], 'line_item_value': [36863801.0]}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:30+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = short-term investments , res_fuzz_match = [('inventories', 56)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 22)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 3476968.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [3476968.0]}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = short-term investments , res_fuzz_match = [('inventories', 56)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 22)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 9314381.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [9314381.0]}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = finished goods at cost , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' finished goods', 100), (' goods in transit', 67), (' stores and other consumables at cost', 50), (' provision for inventory obsolescence', 38), (' inventories', 33), (' work in progress', 31), (' cranes - in transit', 23), ('raw materials', 20), (' raw materials', 20), (' cranes', 20), (' spare parts', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = finished goods total , res_fuzz_match = [(' finished goods', 100), (' finished goods', 100), (' finished goods at cost', 88), (' goods in transit', 64), (' provision for inventory obsolescence', 41), (' stores and other consumables at cost', 36), (' inventories', 33), (' cranes - in transit', 31), (' spare parts', 30), (' work in progress', 23), ('raw materials', 20), (' raw materials', 20), (' cranes', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = spare parts at cost , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 53), (' finished goods at cost', 47), (' work in progress', 46), (' cranes - in transit', 46), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' goods in transit', 33), (' provision for inventory obsolescence', 33), (' inventories', 33), (' finished goods', 18), (' finished goods', 18)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = spare parts total , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 50), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' work in progress', 38), (' provision for inventory obsolescence', 38), (' cranes - in transit', 38), (' finished goods at cost', 31), (' goods in transit', 25), (' inventories', 22), (' finished goods', 18), (' finished goods', 18)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = spare parts total inventory at the lower of costs and net realisable value , res_fuzz_match = [(' inventories', 100), (' spare parts', 100), (' provision for inventory obsolescence', 59), (' finished goods at cost', 56), (' stores and other consumables at cost', 52), (' goods in transit', 50), (' cranes - in transit', 46), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = finished goods at cost , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' finished goods', 100), (' goods in transit', 67), (' stores and other consumables at cost', 50), (' provision for inventory obsolescence', 38), (' inventories', 33), (' work in progress', 31), (' cranes - in transit', 23), ('raw materials', 20), (' raw materials', 20), (' cranes', 20), (' spare parts', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = finished goods total , res_fuzz_match = [(' finished goods', 100), (' finished goods', 100), (' finished goods at cost', 88), (' goods in transit', 64), (' provision for inventory obsolescence', 41), (' stores and other consumables at cost', 36), (' inventories', 33), (' cranes - in transit', 31), (' spare parts', 30), (' work in progress', 23), ('raw materials', 20), (' raw materials', 20), (' cranes', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = spare parts at cost , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 53), (' finished goods at cost', 47), (' work in progress', 46), (' cranes - in transit', 46), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' goods in transit', 33), (' provision for inventory obsolescence', 33), (' inventories', 33), (' finished goods', 18), (' finished goods', 18)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = spare parts total , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 50), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' work in progress', 38), (' provision for inventory obsolescence', 38), (' cranes - in transit', 38), (' finished goods at cost', 31), (' goods in transit', 25), (' inventories', 22), (' finished goods', 18), (' finished goods', 18)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = spare parts total inventory at the lower of costs and net realisable value , res_fuzz_match = [(' inventories', 100), (' spare parts', 100), (' provision for inventory obsolescence', 59), (' finished goods at cost', 56), (' stores and other consumables at cost', 52), (' goods in transit', 50), (' cranes - in transit', 46), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [9164848.0, 9164848.0, 149533.0, 149533.0, 9314381.0, 3326388.0, 3326388.0, 150580.0, 150580.0, 3476968.0], 'label': ['Finished goods At cost', 'Finished goods Total', 'Spare parts At cost', 'Spare parts Total', 'Spare parts Total inventory at the lower of costs and net realisable value', 'Finished goods At cost', 'Finished goods Total', 'Spare parts At cost', 'Spare parts Total', 'Spare parts Total inventory at the lower of costs and net realisable value'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:30+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = short-term investments , res_fuzz_match = [('other assets', 52), ('other current assets', 46), ('other financial assets', 40), ('other current financial assets', 37), ('prepayments', 18)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), ('other financial assets', 73), ('other current financial assets', 58), ('prepayments', 12)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 6], 'score': 100, 'value': 1236754.0, 'line_item_label': ['Current assets', 'Other assets'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 1236754.0]}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = short-term investments , res_fuzz_match = [('other assets', 52), ('other current assets', 46), ('other financial assets', 40), ('other current financial assets', 37), ('prepayments', 18)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), ('other financial assets', 73), ('other current financial assets', 58), ('prepayments', 12)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 6], 'score': 100, 'value': 754690.0, 'line_item_label': ['Current assets', 'Other assets'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 754690.0]}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current prepayments , res_fuzz_match = [('current', 100), ('prepayments', 100), ('prepaid', 77), ('other prepayments', 67), ('prepaid expense', 38), ('prepaid expenditure', 36)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = non-current lease guarantee deposits , res_fuzz_match = [('current', 71), ('prepaid expense', 43), ('prepaid', 43), ('other prepayments', 42), ('prepaid expenditure', 41), ('prepayments', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = non-current financial assets at fair value through oci , res_fuzz_match = [('current', 57), ('prepaid', 43), ('prepaid expense', 36), ('prepaid expenditure', 33), ('prepayments', 33), ('other prepayments', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('current', 71), ('other prepayments', 33), ('prepaid', 29), ('prepaid expenditure', 23), ('prepayments', 17), ('prepaid expense', 15)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current prepayments , res_fuzz_match = [('current', 100), ('prepayments', 100), ('prepaid', 77), ('other prepayments', 67), ('prepaid expense', 38), ('prepaid expenditure', 36)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = non-current lease guarantee deposits , res_fuzz_match = [('current', 71), ('prepaid expense', 43), ('prepaid', 43), ('other prepayments', 42), ('prepaid expenditure', 41), ('prepayments', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = non-current financial assets at fair value through oci , res_fuzz_match = [('current', 57), ('prepaid', 43), ('prepaid expense', 36), ('prepaid expenditure', 33), ('prepayments', 33), ('other prepayments', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('current', 71), ('other prepayments', 33), ('prepaid', 29), ('prepaid expenditure', 23), ('prepayments', 17), ('prepaid expense', 15)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4], 'score': [100, 100], 'value': [754690.0, 1236754.0], 'label': ['Current Prepayments', 'Current Prepayments'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:30+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = short-term investments , res_fuzz_match = [('other assets', 52), ('other current assets', 46), (' other current assets', 46), (' other financial assets', 40), (' deferred operating expenditure', 32), (' trade and other receivables', 32), (' income tax receivable from related parties', 29), (' biological assets', 29), (' financial assets', 21)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), (' other current assets', 73), (' other financial assets', 73), (' biological assets', 61), (' financial assets', 50), (' trade and other receivables', 42), (' deferred operating expenditure', 38), (' income tax receivable from related parties', 23)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4, 6], 'score': 100, 'value': 13283238.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other assets'], 'note_numbers': [nan, '8', '10'], 'line_item_value': [0.0, 12046484.0, 1236754.0]}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = short-term investments , res_fuzz_match = [('other assets', 52), ('other current assets', 46), (' other current assets', 46), (' other financial assets', 40), (' deferred operating expenditure', 32), (' trade and other receivables', 32), (' income tax receivable from related parties', 29), (' biological assets', 29), (' financial assets', 21)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), (' other current assets', 73), (' other financial assets', 73), (' biological assets', 61), (' financial assets', 50), (' trade and other receivables', 42), (' deferred operating expenditure', 38), (' income tax receivable from related parties', 23)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4, 6], 'score': 100, 'value': 12050331.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other assets'], 'note_numbers': [nan, '8', '10'], 'line_item_value': [0.0, 11295641.0, 754690.0]}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [('current', 100), (' interest receivable', 73), (' related party receivable', 67), (' current investments', 64), (' income tax receivable from related parties', 55), (' other deposits receivable - related party', 55), (' rental bond', 55), (' long service leave receivable', 51), ('foreign exchange derivatives at fair value', 50), (' amount receivable from controlling entity', 50), (' other debtors and prepayments', 46), (' other receivables - related party', 45), (' accrued rebates', 45), (' accrued interest', 43), (' condensate', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 40), (' other', 40), (' derivative contracts - fair value', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' bank guarantee', 38), ('other assets', 36), (' related party disclosures', 35), (' lng', 33), (' deposits', 29)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current receivable from related parties (note 20) , res_fuzz_match = [('current', 100), (' income tax receivable from related parties', 79), (' other receivables - related party', 79), (' related party receivable', 76), (' current investments', 71), (' related party disclosures', 70), (' other deposits receivable - related party', 69), (' interest receivable', 67), (' amount receivable from controlling entity', 66), (' other', 60), (' accrued rebates', 55), (' bank guarantee', 54), (' electricity derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' foreign exchange forward contracts', 47), ('foreign exchange derivatives at fair value', 45), (' rental bond', 45), (' accrued interest', 43), (' condensate', 43), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' long service leave receivable', 39), (' other debtors and prepayments', 39), ('other assets', 36), (' lng', 33), (' deposits', 29)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [('current', 100), (' other', 100), (' interest receivable', 73), (' related party receivable', 67), ('other assets', 64), (' current investments', 64), (' other deposits receivable - related party', 55), (' rental bond', 55), (' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' amount receivable from controlling entity', 50), ('foreign exchange derivatives at fair value', 45), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' share of jv prepayments', 42), (' other debtors and prepayments', 41), (' electricity derivatives at fair value', 40), (' forward exchange contracts', 40), (' related party disclosures', 35), (' derivative contracts - fair value', 35), (' foreign exchange forward contracts', 35), (' lng', 33), (' bank guarantee', 31)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current investments', 62), (' rental bond', 57), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), (' accrued rebates', 45), (' condensate', 43), (' accrued interest', 40), (' other', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' other debtors and prepayments', 38), (' share of jv prepayments', 33), (' lng', 33), (' related party disclosures', 31), (' interest receivable', 31), (' bank guarantee', 31), (' deposits', 29), ('other assets', 27), (' long service leave receivable', 23), (' related party receivable', 23)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [('current', 100), (' interest receivable', 73), (' related party receivable', 67), (' current investments', 64), (' income tax receivable from related parties', 55), (' other deposits receivable - related party', 55), (' rental bond', 55), (' long service leave receivable', 51), ('foreign exchange derivatives at fair value', 50), (' amount receivable from controlling entity', 50), (' other debtors and prepayments', 46), (' other receivables - related party', 45), (' accrued rebates', 45), (' accrued interest', 43), (' condensate', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 40), (' other', 40), (' derivative contracts - fair value', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' bank guarantee', 38), ('other assets', 36), (' related party disclosures', 35), (' lng', 33), (' deposits', 29)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current receivable from related parties (note 20) , res_fuzz_match = [('current', 100), (' income tax receivable from related parties', 79), (' other receivables - related party', 79), (' related party receivable', 76), (' current investments', 71), (' related party disclosures', 70), (' other deposits receivable - related party', 69), (' interest receivable', 67), (' amount receivable from controlling entity', 66), (' other', 60), (' accrued rebates', 55), (' bank guarantee', 54), (' electricity derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' foreign exchange forward contracts', 47), ('foreign exchange derivatives at fair value', 45), (' rental bond', 45), (' accrued interest', 43), (' condensate', 43), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' long service leave receivable', 39), (' other debtors and prepayments', 39), ('other assets', 36), (' lng', 33), (' deposits', 29)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [('current', 100), (' other', 100), (' interest receivable', 73), (' related party receivable', 67), ('other assets', 64), (' current investments', 64), (' other deposits receivable - related party', 55), (' rental bond', 55), (' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' amount receivable from controlling entity', 50), ('foreign exchange derivatives at fair value', 45), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' share of jv prepayments', 42), (' other debtors and prepayments', 41), (' electricity derivatives at fair value', 40), (' forward exchange contracts', 40), (' related party disclosures', 35), (' derivative contracts - fair value', 35), (' foreign exchange forward contracts', 35), (' lng', 33), (' bank guarantee', 31)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current investments', 62), (' rental bond', 57), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), (' accrued rebates', 45), (' condensate', 43), (' accrued interest', 40), (' other', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' other debtors and prepayments', 38), (' share of jv prepayments', 33), (' lng', 33), (' related party disclosures', 31), (' interest receivable', 31), (' bank guarantee', 31), (' deposits', 29), ('other assets', 27), (' long service leave receivable', 23), (' related party receivable', 23)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [6861283.0, 4400617.0, 33741.0, 11295641.0, 8463813.0, 3578211.0, 4460.0, 12046484.0], 'label': ['Current Trade receivables', 'Current Receivable from related parties (Note 20)', 'Current Other receivables', 'Current Total', 'Current Trade receivables', 'Current Receivable from related parties (Note 20)', 'Current Other receivables', 'Current Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [(' ', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current receivable from related parties (note 20) , res_fuzz_match = [(' ', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [(' ', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' ', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [(' ', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current receivable from related parties (note 20) , res_fuzz_match = [(' ', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [(' ', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' ', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [6861283.0, 4400617.0, 33741.0, 11295641.0, 8463813.0, 3578211.0, 4460.0, 12046484.0], 'label': ['', '', '', '', '', '', '', ''], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current prepayments , res_fuzz_match = [('current', 100), (' share of jv prepayments', 75), (' current investments', 64), (' other debtors and prepayments', 64), (' income tax receivable from related parties', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' related party receivable', 50), (' rental bond', 45), (' accrued rebates', 45), ('foreign exchange derivatives at fair value', 43), (' accrued interest', 43), (' related party disclosures', 43), (' amount receivable from controlling entity', 43), (' interest receivable', 43), (' condensate', 43), (' foreign exchange forward contracts', 43), (' other', 40), (' bank guarantee', 38), (' electricity derivatives at fair value', 36), (' derivative contracts - fair value', 36), (' long service leave receivable', 36), (' forward exchange contracts', 36), (' lng', 33), (' deposits', 29), ('other assets', 27)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = non-current lease guarantee deposits , res_fuzz_match = [(' deposits', 100), (' bank guarantee', 77), ('current', 71), (' accrued interest', 57), (' related party disclosures', 52), (' related party receivable', 50), (' share of jv prepayments', 50), (' current investments', 50), ('other assets', 45), (' rental bond', 45), (' accrued rebates', 45), (' long service leave receivable', 43), (' condensate', 43), (' other receivables - related party', 42), (' forward exchange contracts', 42), (' other', 40), (' interest receivable', 40), (' other debtors and prepayments', 39), (' other deposits receivable - related party', 38), (' amount receivable from controlling entity', 38), (' foreign exchange forward contracts', 38), (' electricity derivatives at fair value', 36), ('foreign exchange derivatives at fair value', 34), (' income tax receivable from related parties', 34), (' lng', 33), (' derivative contracts - fair value', 30)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = non-current financial assets at fair value through oci , res_fuzz_match = [(' derivative contracts - fair value', 62), (' other', 60), (' electricity derivatives at fair value', 59), ('foreign exchange derivatives at fair value', 58), ('current', 57), ('other assets', 55), (' current investments', 50), (' other receivables - related party', 46), (' rental bond', 45), (' accrued rebates', 45), (' related party disclosures', 43), (' share of jv prepayments', 42), (' other deposits receivable - related party', 41), (' amount receivable from controlling entity', 40), (' interest receivable', 40), (' income tax receivable from related parties', 39), (' long service leave receivable', 39), (' related party receivable', 39), (' other debtors and prepayments', 39), (' bank guarantee', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' accrued interest', 36), (' lng', 33), (' deposits', 29), (' condensate', 29)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('current', 71), (' foreign exchange forward contracts', 54), (' amount receivable from controlling entity', 46), (' other', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' accrued interest', 38), (' income tax receivable from related parties', 38), (' derivative contracts - fair value', 38), (' long service leave receivable', 38), (' current investments', 38), (' forward exchange contracts', 38), (' other debtors and prepayments', 38), ('other assets', 36), (' rental bond', 36), (' accrued rebates', 36), (' lng', 33), (' other receivables - related party', 31), (' other deposits receivable - related party', 31), (' bank guarantee', 31), (' deposits', 29), (' condensate', 29), (' share of jv prepayments', 26), (' related party disclosures', 23), (' interest receivable', 23), (' related party receivable', 15)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current prepayments , res_fuzz_match = [('current', 100), (' share of jv prepayments', 75), (' current investments', 64), (' other debtors and prepayments', 64), (' income tax receivable from related parties', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' related party receivable', 50), (' rental bond', 45), (' accrued rebates', 45), ('foreign exchange derivatives at fair value', 43), (' accrued interest', 43), (' related party disclosures', 43), (' amount receivable from controlling entity', 43), (' interest receivable', 43), (' condensate', 43), (' foreign exchange forward contracts', 43), (' other', 40), (' bank guarantee', 38), (' electricity derivatives at fair value', 36), (' derivative contracts - fair value', 36), (' long service leave receivable', 36), (' forward exchange contracts', 36), (' lng', 33), (' deposits', 29), ('other assets', 27)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = non-current lease guarantee deposits , res_fuzz_match = [(' deposits', 100), (' bank guarantee', 77), ('current', 71), (' accrued interest', 57), (' related party disclosures', 52), (' related party receivable', 50), (' share of jv prepayments', 50), (' current investments', 50), ('other assets', 45), (' rental bond', 45), (' accrued rebates', 45), (' long service leave receivable', 43), (' condensate', 43), (' other receivables - related party', 42), (' forward exchange contracts', 42), (' other', 40), (' interest receivable', 40), (' other debtors and prepayments', 39), (' other deposits receivable - related party', 38), (' amount receivable from controlling entity', 38), (' foreign exchange forward contracts', 38), (' electricity derivatives at fair value', 36), ('foreign exchange derivatives at fair value', 34), (' income tax receivable from related parties', 34), (' lng', 33), (' derivative contracts - fair value', 30)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = non-current financial assets at fair value through oci , res_fuzz_match = [(' derivative contracts - fair value', 62), (' other', 60), (' electricity derivatives at fair value', 59), ('foreign exchange derivatives at fair value', 58), ('current', 57), ('other assets', 55), (' current investments', 50), (' other receivables - related party', 46), (' rental bond', 45), (' accrued rebates', 45), (' related party disclosures', 43), (' share of jv prepayments', 42), (' other deposits receivable - related party', 41), (' amount receivable from controlling entity', 40), (' interest receivable', 40), (' income tax receivable from related parties', 39), (' long service leave receivable', 39), (' related party receivable', 39), (' other debtors and prepayments', 39), (' bank guarantee', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' accrued interest', 36), (' lng', 33), (' deposits', 29), (' condensate', 29)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('current', 71), (' foreign exchange forward contracts', 54), (' amount receivable from controlling entity', 46), (' other', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' accrued interest', 38), (' income tax receivable from related parties', 38), (' derivative contracts - fair value', 38), (' long service leave receivable', 38), (' current investments', 38), (' forward exchange contracts', 38), (' other debtors and prepayments', 38), ('other assets', 36), (' rental bond', 36), (' accrued rebates', 36), (' lng', 33), (' other receivables - related party', 31), (' other deposits receivable - related party', 31), (' bank guarantee', 31), (' deposits', 29), (' condensate', 29), (' share of jv prepayments', 26), (' related party disclosures', 23), (' interest receivable', 23), (' related party receivable', 15)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 4, 5], 'score': [100, 100, 100, 100], 'value': [754690.0, 7690.0, 1236754.0, 14490.0], 'label': ['Current Prepayments', 'Non-current Lease guarantee deposits', 'Current Prepayments', 'Non-current Lease guarantee deposits'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current prepayments , res_fuzz_match = [(' ', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = non-current lease guarantee deposits , res_fuzz_match = [(' ', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = non-current financial assets at fair value through oci , res_fuzz_match = [(' ', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' ', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = current prepayments , res_fuzz_match = [(' ', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = non-current lease guarantee deposits , res_fuzz_match = [(' ', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = non-current financial assets at fair value through oci , res_fuzz_match = [(' ', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' ', 0)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [754690.0, 7690.0, 25000.0, 32690.0, 1236754.0, 14490.0, 20000.0, 34490.0], 'label': ['', '', '', '', '', '', '', ''], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:30+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = short-term investments , res_fuzz_match = [('current assets', 34)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('current assets', 58)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = short-term investments , res_fuzz_match = [('current assets', 34)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('current assets', 58)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:30+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 95127.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [95127.0]}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 201467.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [201467.0]}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost at 1 april 2022 , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 30)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 30), ('depreciatio', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at 1 april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost at 1 april 2022 , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 30)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 30), ('depreciatio', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at 1 april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost at 1 april 2022 , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 30)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 30), ('depreciatio', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at 1 april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5, 6, 7, 14, 15, 16, 17, 24, 25, 26, 27], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [579226.0, 59645.0, -48315.0, 590556.0, 823948.0, 299.0, -28649.0, 795598.0, 1403174.0, 59944.0, -76964.0, 1386154.0], 'label': ['Accumulated depreciation At 1 April 2022', 'Accumulated depreciation Depreciation charge for the year', 'Accumulated depreciation Disposals', 'Accumulated depreciation At: 31 March 2023', 'Accumulated depreciation At 1 April 2022', 'Accumulated depreciation Depreciation charge for the year', 'Accumulated depreciation Disposals', 'Accumulated depreciation At: 31 March 2023', 'Accumulated depreciation At 1 April 2022', 'Accumulated depreciation Depreciation charge for the year', 'Accumulated depreciation Disposals', 'Accumulated depreciation At: 31 March 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost at 31 march 2023 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 32)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at 1 april 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 march 2023 , res_fuzz_match = [('net value', 38), ('cost', 25), ('net book value', 23), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2023 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('cost', 25), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('cost', 25), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost at 31 march 2023 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 32)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at 1 april 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 march 2023 , res_fuzz_match = [('net value', 38), ('cost', 25), ('net book value', 23), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2023 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('cost', 25), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('cost', 25), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = cost at 31 march 2023 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 32)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at 1 april 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 march 2023 , res_fuzz_match = [('net value', 38), ('cost', 25), ('net book value', 23), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2023 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('cost', 25), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('cost', 25), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [674353.0, 101575.0, -48706.0, 727222.0, 136666.0, 95127.0, 823948.0, 65100.0, -28649.0, 860399.0, 64801.0, 0.0, 1498301.0, 166675.0, -77355.0, 1587621.0, 201467.0, 95127.0], 'label': ['Cost At 1 April 2022', 'Cost Additions', 'Cost Disposals', 'Cost At 31 March 2023', 'Net book value At 31 March 2023', 'Net book value At31 March 2022', 'Cost At 1 April 2022', 'Cost Additions', 'Cost Disposals', 'Cost At 31 March 2023', 'Net book value At 31 March 2023', 'Net book value At31 March 2022', 'Cost At 1 April 2022', 'Cost Additions', 'Cost Disposals', 'Cost At 31 March 2023', 'Net book value At 31 March 2023', 'Net book value At31 March 2022'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:30+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 95127.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [95127.0]}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 201467.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [201467.0]}
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:30+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-27 11:41:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:30+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('capital work-in-progress', 36), ('capital workinprogress', 36), ('capital work in progress', 36), ('work in progress', 36), ('tangible', 29), ('rightofuse', 22), ('righttouse', 22)]
2023-07-27 11:41:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible', 57), ('right of use', 44), ('right to use', 44), ('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 25), ('work in progress', 25), ('rightofuse', 22), ('righttouse', 22)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('work in progress', 31), ('tangible', 29)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('work in progress', 31), ('tangible', 29), ('capital work in progress', 27), ('capital work-in-progress', 20), ('capital workinprogress', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 1423406.0, 'line_item_label': ['Right-of-use assets'], 'note_numbers': ['13'], 'line_item_value': [1423406.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('capital work-in-progress', 36), ('capital workinprogress', 36), ('capital work in progress', 36), ('work in progress', 36), ('tangible', 29), ('rightofuse', 22), ('righttouse', 22)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible', 57), ('right of use', 44), ('right to use', 44), ('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 25), ('work in progress', 25), ('rightofuse', 22), ('righttouse', 22)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('work in progress', 31), ('tangible', 29)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('work in progress', 31), ('tangible', 29), ('capital work in progress', 27), ('capital work-in-progress', 20), ('capital workinprogress', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 915945.0, 'line_item_label': ['Right-of-use assets'], 'note_numbers': ['13'], 'line_item_value': [915945.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('tangible assets', 58)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 80, 'value': 61956.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['12'], 'line_item_value': [61956.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('tangible assets', 58)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 80, 'value': 37362.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['12'], 'line_item_value': [37362.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('intangible assets under development', 64), ('intangible under development', 36), ('intangible', 17)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible', 33), ('intangible under development', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible', 33), ('intangible under development', 33), ('intangible assets under development', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': 61956.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['12'], 'line_item_value': [61956.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('intangible assets under development', 64), ('intangible under development', 36), ('intangible', 17)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible', 33), ('intangible under development', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible', 33), ('intangible under development', 33), ('intangible assets under development', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': 37362.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['12'], 'line_item_value': [37362.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('donations', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('donations', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' investments accounted for using the equity method', 55), ('joint ventures and associates', 45), (' investment in joint venture', 45), (' investment in associate', 45), ('derivative financial instruments', 36), ('investment', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' investments accounted for using the equity method', 55), ('joint ventures and associates', 45), (' investment in joint venture', 45), (' investment in associate', 45), ('derivative financial instruments', 36), ('investment', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('deferred tax assets', 62), ('deferred charges', 36), ('deferred tax', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 100, 'value': 1535945.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['5'], 'line_item_value': [1535945.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('deferred tax assets', 62), ('deferred charges', 36), ('deferred tax', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 100, 'value': 1756332.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['5'], 'line_item_value': [1756332.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), (' other assets', 100), (' other non-current assets', 73), (' other non-current assets', 73), (' leased assets', 67), (' financial assets', 50), (' exploration and evaluation expenditure', 32), (' loan receivables', 27), (' leases', 27), ('non-current', 22)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9, 11], 'score': 80, 'value': 96446.0, 'line_item_label': ['Non-current assets', 'Other assets', 'Intangible assets'], 'note_numbers': [nan, '10', '12'], 'line_item_value': [0.0, 34490.0, 61956.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), (' other assets', 100), (' other non-current assets', 73), (' other non-current assets', 73), (' leased assets', 67), (' financial assets', 50), (' exploration and evaluation expenditure', 32), (' loan receivables', 27), (' leases', 27), ('non-current', 22)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9, 11], 'score': 80, 'value': 70052.0, 'line_item_label': ['Non-current assets', 'Other assets', 'Intangible assets'], 'note_numbers': [nan, '10', '12'], 'line_item_value': [0.0, 32690.0, 37362.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current prepayments , res_fuzz_match = [(' defined benefit plans', 46), (' allowance for expected credit losses', 43), (' total. properties', 38), (' electricity derivatives at fair value', 36), (' exploration and evaluation expenditure', 36), ('finance receivables', 32), ('non-current', 29), (' right-of-use-assets', 29), (' warehouse and office equipment', 29), (' motor vehicles', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = non-current lease guarantee deposits , res_fuzz_match = [('non-current', 100), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' warehouse and office equipment', 38), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' total. properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = non-current financial assets at fair value through oci , res_fuzz_match = [('non-current', 100), ('finance receivables', 62), (' electricity derivatives at fair value', 59), (' right-of-use-assets', 47), (' defined benefit plans', 44), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' warehouse and office equipment', 38), (' total. properties', 36), (' allowance for expected credit losses', 32)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('non-current', 100), (' electricity derivatives at fair value', 38), (' exploration and evaluation expenditure', 38), (' total. properties', 38), (' motor vehicles', 33), ('finance receivables', 31), (' allowance for expected credit losses', 31), (' defined benefit plans', 31), (' warehouse and office equipment', 31), (' right-of-use-assets', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current prepayments , res_fuzz_match = [(' defined benefit plans', 46), (' allowance for expected credit losses', 43), (' total. properties', 38), (' electricity derivatives at fair value', 36), (' exploration and evaluation expenditure', 36), ('finance receivables', 32), ('non-current', 29), (' right-of-use-assets', 29), (' warehouse and office equipment', 29), (' motor vehicles', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = non-current lease guarantee deposits , res_fuzz_match = [('non-current', 100), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' warehouse and office equipment', 38), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' total. properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = non-current financial assets at fair value through oci , res_fuzz_match = [('non-current', 100), ('finance receivables', 62), (' electricity derivatives at fair value', 59), (' right-of-use-assets', 47), (' defined benefit plans', 44), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' warehouse and office equipment', 38), (' total. properties', 36), (' allowance for expected credit losses', 32)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('non-current', 100), (' electricity derivatives at fair value', 38), (' exploration and evaluation expenditure', 38), (' total. properties', 38), (' motor vehicles', 33), ('finance receivables', 31), (' allowance for expected credit losses', 31), (' defined benefit plans', 31), (' warehouse and office equipment', 31), (' right-of-use-assets', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 3, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100], 'value': [7690.0, 25000.0, 32690.0, 14490.0, 20000.0, 34490.0], 'label': ['Non-current Lease guarantee deposits', 'Non-current Financial assets at fair value through OCI', 'Non-current Total', 'Non-current Lease guarantee deposits', 'Non-current Financial assets at fair value through OCI', 'Non-current Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost at 1 april 2022 , res_fuzz_match = [(' allowance for expected credit losses', 50), (' electricity derivatives at fair value', 50), (' total. properties', 50), ('finance receivables', 40), (' defined benefit plans', 40), (' warehouse and office equipment', 40), (' motor vehicles', 40), (' right-of-use-assets', 30), (' exploration and evaluation expenditure', 30), ('non-current', 14)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total. properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('non-current', 29), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' allowance for expected credit losses', 60), (' electricity derivatives at fair value', 50), (' warehouse and office equipment', 50), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 30), (' defined benefit plans', 30), (' total. properties', 30), ('non-current', 14)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total. properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('non-current', 29), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost at 31 march 2023 , res_fuzz_match = [('finance receivables', 40), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' total. properties', 40), (' warehouse and office equipment', 40), (' motor vehicles', 40), (' defined benefit plans', 30), (' right-of-use-assets', 30), (' exploration and evaluation expenditure', 30), ('non-current', 14)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total. properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('non-current', 29), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation at 1a april 2022 , res_fuzz_match = [(' total. properties', 50), (' electricity derivatives at fair value', 43), (' allowance for expected credit losses', 39), (' exploration and evaluation expenditure', 39), ('finance receivables', 38), (' warehouse and office equipment', 35), (' motor vehicles', 33), ('non-current', 29), (' defined benefit plans', 28), (' right-of-use-assets', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total. properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('non-current', 29), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation amortisation , res_fuzz_match = [(' total. properties', 50), (' motor vehicles', 42), (' allowance for expected credit losses', 39), (' warehouse and office equipment', 35), (' electricity derivatives at fair value', 33), (' right-of-use-assets', 33), ('finance receivables', 31), ('non-current', 29), (' exploration and evaluation expenditure', 26), (' defined benefit plans', 22)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total. properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('non-current', 29), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation at 31 march 2023 , res_fuzz_match = [(' total. properties', 43), (' motor vehicles', 42), (' allowance for expected credit losses', 38), (' electricity derivatives at fair value', 33), (' warehouse and office equipment', 33), ('finance receivables', 31), ('non-current', 29), (' right-of-use-assets', 27), (' exploration and evaluation expenditure', 24), (' defined benefit plans', 22)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total. properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('non-current', 29), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2023 , res_fuzz_match = [(' exploration and evaluation expenditure', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 38), (' total. properties', 36), (' defined benefit plans', 33), (' warehouse and office equipment', 32), ('finance receivables', 31), ('non-current', 29), (' allowance for expected credit losses', 26), (' right-of-use-assets', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total. properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('non-current', 29), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [(' total. properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' electricity derivatives at fair value', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' warehouse and office equipment', 32), ('finance receivables', 31), ('non-current', 29), (' allowance for expected credit losses', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total. properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('non-current', 29), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('non-current assets total', 53)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('non-current assets total', 58)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('non-current assets total', 53)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('non-current assets total', 59)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('non-current assets total', 53)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('non-current assets total', 58)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('non-current assets total', 53)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('non-current assets total', 59)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('lease liabilities', 62), (' loans and borrowings', 33), (' bank overdraft', 28), ('short term debt', 27), ('short-term debt', 21), ('shortterm debt', 21), (' leases', 21), ('borrowings', 19), ('shortterm borrowings', 19)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' loans and borrowings', 32), ('lease liabilities', 30), (' bank overdraft', 27), ('short-term debt', 20), ('shortterm debt', 20), (' leases', 20), ('short term debt', 19), ('shortterm borrowings', 19), ('borrowings', 9)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [21], 'score': 100, 'value': 550258.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': [nan], 'line_item_value': [550258.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('lease liabilities', 62), (' loans and borrowings', 33), (' bank overdraft', 28), ('short term debt', 27), ('short-term debt', 21), ('shortterm debt', 21), (' leases', 21), ('borrowings', 19), ('shortterm borrowings', 19)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' loans and borrowings', 32), ('lease liabilities', 30), (' bank overdraft', 27), ('short-term debt', 20), ('shortterm debt', 20), (' leases', 20), ('short term debt', 19), ('shortterm borrowings', 19), ('borrowings', 9)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [21], 'score': 100, 'value': 352764.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': [nan], 'line_item_value': [352764.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('note payable(debt)', 39)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('note payable(debt)', 62)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('note payable(debt)', 39)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('note payable(debt)', 62)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('accounts payable', 55), ('other trade payables', 42), ('small enterprises', 40), ('trade and other payables', 38), ('micro enterprises', 33), ('micro enterprises and small enterprises', 32), ('other than micro and small enterprises', 31), ('trade payable', 30), ('outstanding dues of creditors other than', 30), ('outstanding dues of micro enterprises and small enterprises', 25), ('outstanding dues of creditors other than micro enterprises and small enterprises', 24), ('total outstanding due of other creditors other than micro and small', 24)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('other trade payables', 65), ('trade payable', 64), ('trade and other payables', 63), ('accounts payable', 60), ('other than micro and small enterprises', 35), ('outstanding dues of creditors other than', 29), ('total outstanding due of other creditors other than micro and small', 29), ('micro enterprises and small enterprises', 27), ('outstanding dues of creditors other than micro enterprises and small enterprises', 26), ('small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 25), ('micro enterprises', 19)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than', 19), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 8002100.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['14'], 'line_item_value': [8002100.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('accounts payable', 55), ('other trade payables', 42), ('small enterprises', 40), ('trade and other payables', 38), ('micro enterprises', 33), ('micro enterprises and small enterprises', 32), ('other than micro and small enterprises', 31), ('trade payable', 30), ('outstanding dues of creditors other than', 30), ('outstanding dues of micro enterprises and small enterprises', 25), ('outstanding dues of creditors other than micro enterprises and small enterprises', 24), ('total outstanding due of other creditors other than micro and small', 24)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('other trade payables', 65), ('trade payable', 64), ('trade and other payables', 63), ('accounts payable', 60), ('other than micro and small enterprises', 35), ('outstanding dues of creditors other than', 29), ('total outstanding due of other creditors other than micro and small', 29), ('micro enterprises and small enterprises', 27), ('outstanding dues of creditors other than micro enterprises and small enterprises', 26), ('small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 25), ('micro enterprises', 19)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than', 19), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 8641833.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['14'], 'line_item_value': [8641833.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current trade payables , res_fuzz_match = [('current', 100), (' trade payables', 100), (' trade payables', 100), (' other trade payables', 78), (' related party payables', 67), (' trade and other payables', 60), (' trade payables - related parties', 60), (' trade payables - other parties', 60), (' amounts payable to controlling entity', 50), ('trade creditors', 46)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current payables to related parties (note 20) , res_fuzz_match = [('current', 100), (' trade payables - related parties', 88), (' trade payables', 75), (' trade payables', 75), (' related party payables', 71), (' trade payables - other parties', 71), (' amounts payable to controlling entity', 59), (' other trade payables', 56), (' trade and other payables', 50), ('trade creditors', 43)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current accrued expenses and other payables , res_fuzz_match = [('current', 100), (' trade and other payables', 82), (' trade payables', 75), (' trade payables', 75), (' other trade payables', 67), (' related party payables', 56), (' trade payables - other parties', 54), ('trade creditors', 43), (' trade payables - related parties', 42), (' amounts payable to controlling entity', 39)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current goods and services tax , res_fuzz_match = [('current', 100), (' trade and other payables', 50), ('trade creditors', 43), (' other trade payables', 39), (' trade payables - other parties', 38), (' amounts payable to controlling entity', 37), (' related party payables', 36), (' trade payables - related parties', 35), (' trade payables', 33), (' trade payables', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' trade and other payables', 46), (' amounts payable to controlling entity', 46), (' trade payables', 43), (' trade payables', 43), ('trade creditors', 38), (' related party payables', 38), (' trade payables - related parties', 38), (' trade payables - other parties', 38), (' other trade payables', 38)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current trade payables , res_fuzz_match = [('current', 100), (' trade payables', 100), (' trade payables', 100), (' other trade payables', 78), (' related party payables', 67), (' trade and other payables', 60), (' trade payables - related parties', 60), (' trade payables - other parties', 60), (' amounts payable to controlling entity', 50), ('trade creditors', 46)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current payables to related parties (note 20) , res_fuzz_match = [('current', 100), (' trade payables - related parties', 88), (' trade payables', 75), (' trade payables', 75), (' related party payables', 71), (' trade payables - other parties', 71), (' amounts payable to controlling entity', 59), (' other trade payables', 56), (' trade and other payables', 50), ('trade creditors', 43)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current accrued expenses and other payables , res_fuzz_match = [('current', 100), (' trade and other payables', 82), (' trade payables', 75), (' trade payables', 75), (' other trade payables', 67), (' related party payables', 56), (' trade payables - other parties', 54), ('trade creditors', 43), (' trade payables - related parties', 42), (' amounts payable to controlling entity', 39)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current goods and services tax , res_fuzz_match = [('current', 100), (' trade and other payables', 50), ('trade creditors', 43), (' other trade payables', 39), (' trade payables - other parties', 38), (' amounts payable to controlling entity', 37), (' related party payables', 36), (' trade payables - related parties', 35), (' trade payables', 33), (' trade payables', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' trade and other payables', 46), (' amounts payable to controlling entity', 46), (' trade payables', 43), (' trade payables', 43), ('trade creditors', 38), (' related party payables', 38), (' trade payables - related parties', 38), (' trade payables - other parties', 38), (' other trade payables', 38)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [2053402.0, 3057397.0, 3284351.0, 246683.0, 8641833.0, 1441515.0, 3378274.0, 3002463.0, 179848.0, 8002100.0], 'label': ['Current Trade payables', 'Current Payables to related parties (Note 20)', 'Current Accrued expenses and other payables', 'Current Goods and services tax', 'Current Total', 'Current Trade payables', 'Current Payables to related parties (Note 20)', 'Current Accrued expenses and other payables', 'Current Goods and services tax', 'Current Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other current liabilities', 57), ('other financial liabilities', 57), ('other current financial liabilities', 56), ('other liabilities', 44), ('trade and other payables', 38)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('trade and other payables', 63), ('other financial liabilities', 50), ('other liabilities', 43), ('other current financial liabilities', 41), ('other current liabilities', 39)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18], 'score': 100, 'value': 8002100.0, 'line_item_label': ['Current liabilities', 'Trade and other payables'], 'note_numbers': [nan, '14'], 'line_item_value': [0.0, 8002100.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other current liabilities', 57), ('other financial liabilities', 57), ('other current financial liabilities', 56), ('other liabilities', 44), ('trade and other payables', 38)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('trade and other payables', 63), ('other financial liabilities', 50), ('other liabilities', 43), ('other current financial liabilities', 41), ('other current liabilities', 39)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18], 'score': 100, 'value': 8641833.0, 'line_item_label': ['Current liabilities', 'Trade and other payables'], 'note_numbers': [nan, '14'], 'line_item_value': [0.0, 8641833.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current trade payables , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current payables to related parties (note 20) , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current accrued expenses and other payables , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 57)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current goods and services tax , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('interest accrued', 38), ('accrued expenses', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current trade payables , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current payables to related parties (note 20) , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current accrued expenses and other payables , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 57)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current goods and services tax , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('interest accrued', 38), ('accrued expenses', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 7], 'score': [100, 100], 'value': [3284351.0, 3002463.0], 'label': ['Current Accrued expenses and other payables', 'Current Accrued expenses and other payables'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current tax liabilities', 67), ('tax', 67), (' income tax payable', 55)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' income tax payable', 100), ('tax', 100), ('current tax liabilities', 56)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 387614.0, 'line_item_label': ['Income tax payable'], 'note_numbers': [nan], 'line_item_value': [387614.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current tax liabilities', 67), ('tax', 67), (' income tax payable', 55)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' income tax payable', 100), ('tax', 100), ('current tax liabilities', 56)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 246569.0, 'line_item_label': ['Income tax payable'], 'note_numbers': [nan], 'line_item_value': [246569.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' foreign exchange contract liability', 65), ('other current liabilities', 57), (' other current liabilities', 57), (' other financial liabilities', 57), (' trade and other payables', 38), (' customer deposits', 28), (' employee benefits', 27), ('provisions', 19), (' deferred revenue', 15)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' trade and other payables', 63), (' other financial liabilities', 50), (' financial liabilities', 47), (' customer deposits', 40), ('other current liabilities', 39), (' other current liabilities', 39), (' foreign exchange contract liability', 30), (' employee benefits', 26), ('provisions', 9), (' deferred revenue', 7)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18, 22], 'score': 100, 'value': 10040190.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions'], 'note_numbers': [nan, '14', '16'], 'line_item_value': [0.0, 8002100.0, 2038090.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' foreign exchange contract liability', 65), ('other current liabilities', 57), (' other current liabilities', 57), (' other financial liabilities', 57), (' trade and other payables', 38), (' customer deposits', 28), (' employee benefits', 27), ('provisions', 19), (' deferred revenue', 15)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' trade and other payables', 63), (' other financial liabilities', 50), (' financial liabilities', 47), (' customer deposits', 40), ('other current liabilities', 39), (' other current liabilities', 39), (' foreign exchange contract liability', 30), (' employee benefits', 26), ('provisions', 9), (' deferred revenue', 7)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18, 22], 'score': 100, 'value': 10845815.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions'], 'note_numbers': [nan, '14', '16'], 'line_item_value': [0.0, 8641833.0, 2203982.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current trade payables , res_fuzz_match = [('current', 100), (' gst payables', 70), (' share of joint venture payables', 60), (' rebates', 60), (' total current employee benefits', 60), ('other creditors and accruals', 55), (' current - liability for annual and long service leave', 55), (' restructuring', 50), (' warranty', 50), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' contract liabilites - current', 45), (' provisions - current', 43), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 40), (' gst payable and accruals', 40), (' employee benefits - payroll', 40), (' gst liabilities', 40), (' forward exchange contracts', 40), (' other', 40), (' ultimate parent entity', 37), (' other creditors', 36), (' loans from related party', 36), (' other creditors', 36), (' other creditors', 36), (' employee benefits - current', 35), (' gst', 33), (' make good provisions', 31), (' abandonment and decommissioning costs', 30), (' arising from service contracts', 30), (' provision for associate funding', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current payables to related parties (note 20) , res_fuzz_match = [('current', 100), (' gst payables', 80), (' rebates', 80), (' other related parties', 71), (' loan payable to relayed party under tax funding agreement', 71), (' loans from related party', 67), (' other', 60), (' gst payable and accruals', 59), (' current - liability for annual and long service leave', 55), (' ultimate parent entity', 53), (' gst liabilities', 50), (' warranty', 50), (' employee benefits - payroll', 45), (' total current employee benefits', 45), (' contract liabilites - current', 44), (' share of joint venture payables', 44), (' provisions - current', 43), (' secured long-term bank loans', 42), (' restructuring', 40), (' employee benefits - current', 39), (' derivative contracts - at fair value', 38), (' make good provisions', 38), (' other creditors', 36), (' other creditors', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' abandonment and decommissioning costs', 35), (' gst', 33), (' forward exchange contracts', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current accrued expenses and other payables , res_fuzz_match = [('current', 100), (' other', 100), (' gst payables', 70), (' rebates', 60), (' share of joint venture payables', 56), (' current - liability for annual and long service leave', 51), (' restructuring', 50), (' warranty', 50), (' other related parties', 47), (' forward exchange contracts', 46), (' employee benefits - payroll', 45), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' gst liabilities', 42), (' gst payable and accruals', 41), (' employee benefits - current', 39), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' total current employee benefits', 38), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' make good provisions', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current goods and services tax , res_fuzz_match = [('current', 100), (' rebates', 60), (' make good provisions', 56), (' total current employee benefits', 56), (' arising from service contracts', 53), (' current - liability for annual and long service leave', 52), (' warranty', 50), ('other creditors and accruals', 46), (' abandonment and decommissioning costs', 46), (' loan payable to relayed party under tax funding agreement', 44), (' provisions - current', 43), (' forward exchange contracts', 42), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' loans from related party', 38), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' other creditors', 36), (' other related parties', 35), (' employee benefits - current', 35), (' derivative contracts - at fair value', 34), (' gst', 33), (' contract liabilites - current', 32), (' gst payables', 30), (' gst liabilities', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current - liability for annual and long service leave', 69), (' total current employee benefits', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' gst payables', 42), (' gst liabilities', 42), (' restructuring', 40), (' other', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current trade payables , res_fuzz_match = [('current', 100), (' gst payables', 70), (' share of joint venture payables', 60), (' rebates', 60), (' total current employee benefits', 60), ('other creditors and accruals', 55), (' current - liability for annual and long service leave', 55), (' restructuring', 50), (' warranty', 50), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' contract liabilites - current', 45), (' provisions - current', 43), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 40), (' gst payable and accruals', 40), (' employee benefits - payroll', 40), (' gst liabilities', 40), (' forward exchange contracts', 40), (' other', 40), (' ultimate parent entity', 37), (' other creditors', 36), (' loans from related party', 36), (' other creditors', 36), (' other creditors', 36), (' employee benefits - current', 35), (' gst', 33), (' make good provisions', 31), (' abandonment and decommissioning costs', 30), (' arising from service contracts', 30), (' provision for associate funding', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current payables to related parties (note 20) , res_fuzz_match = [('current', 100), (' gst payables', 80), (' rebates', 80), (' other related parties', 71), (' loan payable to relayed party under tax funding agreement', 71), (' loans from related party', 67), (' other', 60), (' gst payable and accruals', 59), (' current - liability for annual and long service leave', 55), (' ultimate parent entity', 53), (' gst liabilities', 50), (' warranty', 50), (' employee benefits - payroll', 45), (' total current employee benefits', 45), (' contract liabilites - current', 44), (' share of joint venture payables', 44), (' provisions - current', 43), (' secured long-term bank loans', 42), (' restructuring', 40), (' employee benefits - current', 39), (' derivative contracts - at fair value', 38), (' make good provisions', 38), (' other creditors', 36), (' other creditors', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' abandonment and decommissioning costs', 35), (' gst', 33), (' forward exchange contracts', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current accrued expenses and other payables , res_fuzz_match = [('current', 100), (' other', 100), (' gst payables', 70), (' rebates', 60), (' share of joint venture payables', 56), (' current - liability for annual and long service leave', 51), (' restructuring', 50), (' warranty', 50), (' other related parties', 47), (' forward exchange contracts', 46), (' employee benefits - payroll', 45), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' gst liabilities', 42), (' gst payable and accruals', 41), (' employee benefits - current', 39), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' total current employee benefits', 38), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' make good provisions', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current goods and services tax , res_fuzz_match = [('current', 100), (' rebates', 60), (' make good provisions', 56), (' total current employee benefits', 56), (' arising from service contracts', 53), (' current - liability for annual and long service leave', 52), (' warranty', 50), ('other creditors and accruals', 46), (' abandonment and decommissioning costs', 46), (' loan payable to relayed party under tax funding agreement', 44), (' provisions - current', 43), (' forward exchange contracts', 42), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' loans from related party', 38), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' other creditors', 36), (' other related parties', 35), (' employee benefits - current', 35), (' derivative contracts - at fair value', 34), (' gst', 33), (' contract liabilites - current', 32), (' gst payables', 30), (' gst liabilities', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current - liability for annual and long service leave', 69), (' total current employee benefits', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' gst payables', 42), (' gst liabilities', 42), (' restructuring', 40), (' other', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [2053402.0, 3057397.0, 3284351.0, 246683.0, 8641833.0, 1441515.0, 3378274.0, 3002463.0, 179848.0, 8002100.0], 'label': ['Current Trade payables', 'Current Payables to related parties (Note 20)', 'Current Accrued expenses and other payables', 'Current Goods and services tax', 'Current Total', 'Current Trade payables', 'Current Payables to related parties (Note 20)', 'Current Accrued expenses and other payables', 'Current Goods and services tax', 'Current Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current employee benefits , res_fuzz_match = [('current', 100), (' total current employee benefits', 100), (' employee benefits - payroll', 81), (' employee benefits - current', 79), (' rebates', 60), (' current - liability for annual and long service leave', 52), (' warranty', 50), (' ultimate parent entity', 49), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' secured long-term bank loans', 44), (' provisions - current', 43), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), (' other related parties', 35), (' loan payable to relayed party under tax funding agreement', 35), (' contract liabilites - current', 35), (' forward exchange contracts', 35), (' loans from related party', 33), (' gst', 33), ('other creditors and accruals', 31), (' abandonment and decommissioning costs', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current warranty , res_fuzz_match = [('current', 100), (' warranty', 100), (' other related parties', 62), (' current - liability for annual and long service leave', 62), (' rebates', 60), (' loans from related party', 56), (' ultimate parent entity', 53), (' employee benefits - current', 52), (' secured long-term bank loans', 50), (' restructuring', 50), (' total current employee benefits', 50), (' contract liabilites - current', 45), ('other creditors and accruals', 44), (' derivative contracts - at fair value', 44), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' provisions - current', 43), (' gst payables', 40), (' employee benefits - payroll', 40), (' gst liabilities', 40), (' other', 40), (' arising from service contracts', 39), (' forward exchange contracts', 39), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current restructuring and relocation costs , res_fuzz_match = [('current', 100), (' restructuring', 100), (' gst', 67), (' rebates', 60), (' current - liability for annual and long service leave', 52), ('other creditors and accruals', 50), (' abandonment and decommissioning costs', 50), (' warranty', 50), (' share of joint venture payables', 48), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' contract liabilites - current', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' other related parties', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' forward exchange contracts', 42), (' gst payable and accruals', 41), (' total current employee benefits', 41), (' arising from service contracts', 40), (' other', 40), (' loans from related party', 39), (' employee benefits - current', 39), (' make good provisions', 38), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' gst payables', 30), (' gst liabilities', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current - liability for annual and long service leave', 69), (' total current employee benefits', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' gst payables', 42), (' gst liabilities', 42), (' restructuring', 40), (' other', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits , res_fuzz_match = [(' total current employee benefits', 87), (' employee benefits - payroll', 81), (' employee benefits - current', 79), ('current', 71), (' ultimate parent entity', 47), (' other creditors', 43), (' secured long-term bank loans', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' gst payables', 40), (' rebates', 40), (' other', 40), (' current - liability for annual and long service leave', 39), (' loans from related party', 38), (' other related parties', 35), (' loan payable to relayed party under tax funding agreement', 35), (' contract liabilites - current', 35), (' share of joint venture payables', 35), (' abandonment and decommissioning costs', 35), (' forward exchange contracts', 35), (' gst', 33), ('other creditors and accruals', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' provision for associate funding', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25), (' warranty', 25), (' gst payable and accruals', 23), (' restructuring', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = non-current restructuring and relocation costs , res_fuzz_match = [(' restructuring', 100), ('current', 71), (' gst', 67), (' rebates', 60), ('other creditors and accruals', 54), (' other creditors', 50), (' secured long-term bank loans', 50), (' other creditors', 50), (' abandonment and decommissioning costs', 50), (' other creditors', 50), (' other related parties', 47), (' current - liability for annual and long service leave', 45), (' contract liabilites - current', 44), (' loans from related party', 43), (' provisions - current', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' forward exchange contracts', 42), (' gst payable and accruals', 41), (' total current employee benefits', 41), (' share of joint venture payables', 40), (' arising from service contracts', 40), (' other', 40), (' make good provisions', 38), (' warranty', 38), (' ultimate parent entity', 37), (' provision for associate funding', 36), (' employee benefits - current', 35), (' employee benefits - payroll', 32), (' gst payables', 30), (' gst liabilities', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('current', 71), (' secured long-term bank loans', 46), (' employee benefits - current', 46), (' current - liability for annual and long service leave', 46), (' provisions - current', 46), (' share of joint venture payables', 46), (' total current employee benefits', 46), (' rebates', 40), (' other', 40), ('other creditors and accruals', 38), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other related parties', 31), (' employee benefits - payroll', 31), (' provision for associate funding', 31), (' gst liabilities', 30), (' restructuring', 30), (' make good provisions', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current employee benefits , res_fuzz_match = [('current', 100), (' total current employee benefits', 100), (' employee benefits - payroll', 81), (' employee benefits - current', 79), (' rebates', 60), (' current - liability for annual and long service leave', 52), (' warranty', 50), (' ultimate parent entity', 49), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' secured long-term bank loans', 44), (' provisions - current', 43), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), (' other related parties', 35), (' loan payable to relayed party under tax funding agreement', 35), (' contract liabilites - current', 35), (' forward exchange contracts', 35), (' loans from related party', 33), (' gst', 33), ('other creditors and accruals', 31), (' abandonment and decommissioning costs', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current warranty , res_fuzz_match = [('current', 100), (' warranty', 100), (' other related parties', 62), (' current - liability for annual and long service leave', 62), (' rebates', 60), (' loans from related party', 56), (' ultimate parent entity', 53), (' employee benefits - current', 52), (' secured long-term bank loans', 50), (' restructuring', 50), (' total current employee benefits', 50), (' contract liabilites - current', 45), ('other creditors and accruals', 44), (' derivative contracts - at fair value', 44), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' provisions - current', 43), (' gst payables', 40), (' employee benefits - payroll', 40), (' gst liabilities', 40), (' other', 40), (' arising from service contracts', 39), (' forward exchange contracts', 39), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current restructuring and relocation costs , res_fuzz_match = [('current', 100), (' restructuring', 100), (' gst', 67), (' rebates', 60), (' current - liability for annual and long service leave', 52), ('other creditors and accruals', 50), (' abandonment and decommissioning costs', 50), (' warranty', 50), (' share of joint venture payables', 48), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' contract liabilites - current', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' other related parties', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' forward exchange contracts', 42), (' gst payable and accruals', 41), (' total current employee benefits', 41), (' arising from service contracts', 40), (' other', 40), (' loans from related party', 39), (' employee benefits - current', 39), (' make good provisions', 38), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' gst payables', 30), (' gst liabilities', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current - liability for annual and long service leave', 69), (' total current employee benefits', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' gst payables', 42), (' gst liabilities', 42), (' restructuring', 40), (' other', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits , res_fuzz_match = [(' total current employee benefits', 87), (' employee benefits - payroll', 81), (' employee benefits - current', 79), ('current', 71), (' ultimate parent entity', 47), (' other creditors', 43), (' secured long-term bank loans', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' gst payables', 40), (' rebates', 40), (' other', 40), (' current - liability for annual and long service leave', 39), (' loans from related party', 38), (' other related parties', 35), (' loan payable to relayed party under tax funding agreement', 35), (' contract liabilites - current', 35), (' share of joint venture payables', 35), (' abandonment and decommissioning costs', 35), (' forward exchange contracts', 35), (' gst', 33), ('other creditors and accruals', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' provision for associate funding', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25), (' warranty', 25), (' gst payable and accruals', 23), (' restructuring', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = non-current restructuring and relocation costs , res_fuzz_match = [(' restructuring', 100), ('current', 71), (' gst', 67), (' rebates', 60), ('other creditors and accruals', 54), (' other creditors', 50), (' secured long-term bank loans', 50), (' other creditors', 50), (' abandonment and decommissioning costs', 50), (' other creditors', 50), (' other related parties', 47), (' current - liability for annual and long service leave', 45), (' contract liabilites - current', 44), (' loans from related party', 43), (' provisions - current', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' forward exchange contracts', 42), (' gst payable and accruals', 41), (' total current employee benefits', 41), (' share of joint venture payables', 40), (' arising from service contracts', 40), (' other', 40), (' make good provisions', 38), (' warranty', 38), (' ultimate parent entity', 37), (' provision for associate funding', 36), (' employee benefits - current', 35), (' employee benefits - payroll', 32), (' gst payables', 30), (' gst liabilities', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('current', 71), (' secured long-term bank loans', 46), (' employee benefits - current', 46), (' current - liability for annual and long service leave', 46), (' provisions - current', 46), (' share of joint venture payables', 46), (' total current employee benefits', 46), (' rebates', 40), (' other', 40), ('other creditors and accruals', 38), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other related parties', 31), (' employee benefits - payroll', 31), (' provision for associate funding', 31), (' gst liabilities', 30), (' restructuring', 30), (' make good provisions', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12], 'score': [100, 100, 100, 100, 87, 100, 100, 100, 100, 100, 87, 100], 'value': [1282684.0, 766473.0, 154825.0, 2203982.0, 203908.0, 248556.0, 1095787.0, 756962.0, 185341.0, 2038090.0, 123872.0, 238961.0], 'label': ['Current Employee benefits', 'Current Warranty', 'Current Restructuring and relocation costs', 'Current Total', 'Non-current Employee benefits', 'Non-current Restructuring and relocation costs', 'Current Employee benefits', 'Current Warranty', 'Current Restructuring and relocation costs', 'Current Total', 'Non-current Employee benefits', 'Non-current Restructuring and relocation costs'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none at 1 april 2022 , res_fuzz_match = [('other creditors and accruals', 50), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' gst payable and accruals', 50), (' current - liability for annual and long service leave', 50), (' abandonment and decommissioning costs', 50), (' make good provisions', 50), (' other creditors', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' other creditors', 40), (' contract liabilites - current', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' rebates', 40), (' forward exchange contracts', 40), (' other creditors', 40), (' other', 40), (' total current employee benefits', 40), (' warranty', 38), (' ultimate parent entity', 30), (' employee benefits - current', 30), (' provisions - current', 30), (' share of joint venture payables', 30), (' gst payables', 30), (' restructuring', 20), ('current', 14), (' gst', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation warranty $ , res_fuzz_match = [(' restructuring', 100), (' warranty', 100), (' gst', 67), (' rebates', 60), ('current', 57), (' other related parties', 53), (' loans from related party', 52), ('other creditors and accruals', 50), (' provisions - current', 50), (' contract liabilites - current', 48), (' secured long-term bank loans', 47), (' loan payable to relayed party under tax funding agreement', 46), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' total current employee benefits', 42), (' gst payable and accruals', 41), (' current - liability for annual and long service leave', 41), (' other', 40), (' share of joint venture payables', 36), (' arising from service contracts', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' provision for associate funding', 32), (' make good provisions', 31), (' gst payables', 30), (' gst liabilities', 30), (' employee benefits - payroll', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none arising during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), ('current', 57), (' provisions - current', 57), (' loan payable to relayed party under tax funding agreement', 48), (' loans from related party', 48), (' other related parties', 47), ('other creditors and accruals', 43), (' other creditors', 43), (' other creditors', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' other creditors', 43), (' total current employee benefits', 43), (' gst payables', 40), (' restructuring', 40), (' derivative contracts - at fair value', 39), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' contract liabilites - current', 39), (' share of joint venture payables', 39), (' warranty', 38), (' ultimate parent entity', 37), (' employee benefits - payroll', 36), (' secured long-term bank loans', 35), (' forward exchange contracts', 35), (' provision for associate funding', 33), (' gst', 33), (' gst payable and accruals', 32), (' make good provisions', 31), (' gst liabilities', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation warranty $ , res_fuzz_match = [(' restructuring', 100), (' warranty', 100), (' gst', 67), (' rebates', 60), ('current', 57), (' other related parties', 53), (' loans from related party', 52), ('other creditors and accruals', 50), (' provisions - current', 50), (' contract liabilites - current', 48), (' secured long-term bank loans', 47), (' loan payable to relayed party under tax funding agreement', 46), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' total current employee benefits', 42), (' gst payable and accruals', 41), (' current - liability for annual and long service leave', 41), (' other', 40), (' share of joint venture payables', 36), (' arising from service contracts', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' provision for associate funding', 32), (' make good provisions', 31), (' gst payables', 30), (' gst liabilities', 30), (' employee benefits - payroll', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none utilised , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation warranty $ , res_fuzz_match = [(' restructuring', 100), (' warranty', 100), (' gst', 67), (' rebates', 60), ('current', 57), (' other related parties', 53), (' loans from related party', 52), ('other creditors and accruals', 50), (' provisions - current', 50), (' contract liabilites - current', 48), (' secured long-term bank loans', 47), (' loan payable to relayed party under tax funding agreement', 46), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' total current employee benefits', 42), (' gst payable and accruals', 41), (' current - liability for annual and long service leave', 41), (' other', 40), (' share of joint venture payables', 36), (' arising from service contracts', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' provision for associate funding', 32), (' make good provisions', 31), (' gst payables', 30), (' gst liabilities', 30), (' employee benefits - payroll', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none at 31 march 2023 , res_fuzz_match = [('other creditors and accruals', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), (' other related parties', 40), (' other creditors', 40), (' derivative contracts - at fair value', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' employee benefits - current', 40), (' current - liability for annual and long service leave', 40), (' contract liabilites - current', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other creditors', 40), (' other', 40), (' ultimate parent entity', 30), (' provisions - current', 30), (' share of joint venture payables', 30), (' make good provisions', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' gst payables', 21), (' gst liabilities', 20), ('current', 14), (' gst', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation warranty $ , res_fuzz_match = [(' restructuring', 100), (' warranty', 100), (' gst', 67), (' rebates', 60), ('current', 57), (' other related parties', 53), (' loans from related party', 52), ('other creditors and accruals', 50), (' provisions - current', 50), (' contract liabilites - current', 48), (' secured long-term bank loans', 47), (' loan payable to relayed party under tax funding agreement', 46), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' total current employee benefits', 42), (' gst payable and accruals', 41), (' current - liability for annual and long service leave', 41), (' other', 40), (' share of joint venture payables', 36), (' arising from service contracts', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' provision for associate funding', 32), (' make good provisions', 31), (' gst payables', 30), (' gst liabilities', 30), (' employee benefits - payroll', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none at 1 april 2022 , res_fuzz_match = [('other creditors and accruals', 50), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' gst payable and accruals', 50), (' current - liability for annual and long service leave', 50), (' abandonment and decommissioning costs', 50), (' make good provisions', 50), (' other creditors', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' other creditors', 40), (' contract liabilites - current', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' rebates', 40), (' forward exchange contracts', 40), (' other creditors', 40), (' other', 40), (' total current employee benefits', 40), (' warranty', 38), (' ultimate parent entity', 30), (' employee benefits - current', 30), (' provisions - current', 30), (' share of joint venture payables', 30), (' gst payables', 30), (' restructuring', 20), ('current', 14), (' gst', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation cost $ , res_fuzz_match = [(' restructuring', 100), (' gst', 67), (' rebates', 60), ('current', 57), ('other creditors and accruals', 50), (' abandonment and decommissioning costs', 48), (' loan payable to relayed party under tax funding agreement', 44), (' current - liability for annual and long service leave', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' other related parties', 42), (' secured long-term bank loans', 42), (' forward exchange contracts', 42), (' gst payable and accruals', 41), (' contract liabilites - current', 40), (' arising from service contracts', 40), (' other', 40), (' total current employee benefits', 40), (' loans from related party', 39), (' derivative contracts - at fair value', 38), (' make good provisions', 38), (' warranty', 38), (' ultimate parent entity', 37), (' share of joint venture payables', 36), (' provision for associate funding', 33), (' employee benefits - current', 30), (' gst payables', 30), (' gst liabilities', 30), (' employee benefits - payroll', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none arising during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), ('current', 57), (' provisions - current', 57), (' loan payable to relayed party under tax funding agreement', 48), (' loans from related party', 48), (' other related parties', 47), ('other creditors and accruals', 43), (' other creditors', 43), (' other creditors', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' other creditors', 43), (' total current employee benefits', 43), (' gst payables', 40), (' restructuring', 40), (' derivative contracts - at fair value', 39), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' contract liabilites - current', 39), (' share of joint venture payables', 39), (' warranty', 38), (' ultimate parent entity', 37), (' employee benefits - payroll', 36), (' secured long-term bank loans', 35), (' forward exchange contracts', 35), (' provision for associate funding', 33), (' gst', 33), (' gst payable and accruals', 32), (' make good provisions', 31), (' gst liabilities', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation cost $ , res_fuzz_match = [(' restructuring', 100), (' gst', 67), (' rebates', 60), ('current', 57), ('other creditors and accruals', 50), (' abandonment and decommissioning costs', 48), (' loan payable to relayed party under tax funding agreement', 44), (' current - liability for annual and long service leave', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' other related parties', 42), (' secured long-term bank loans', 42), (' forward exchange contracts', 42), (' gst payable and accruals', 41), (' contract liabilites - current', 40), (' arising from service contracts', 40), (' other', 40), (' total current employee benefits', 40), (' loans from related party', 39), (' derivative contracts - at fair value', 38), (' make good provisions', 38), (' warranty', 38), (' ultimate parent entity', 37), (' share of joint venture payables', 36), (' provision for associate funding', 33), (' employee benefits - current', 30), (' gst payables', 30), (' gst liabilities', 30), (' employee benefits - payroll', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none utilised , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation cost $ , res_fuzz_match = [(' restructuring', 100), (' gst', 67), (' rebates', 60), ('current', 57), ('other creditors and accruals', 50), (' abandonment and decommissioning costs', 48), (' loan payable to relayed party under tax funding agreement', 44), (' current - liability for annual and long service leave', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' other related parties', 42), (' secured long-term bank loans', 42), (' forward exchange contracts', 42), (' gst payable and accruals', 41), (' contract liabilites - current', 40), (' arising from service contracts', 40), (' other', 40), (' total current employee benefits', 40), (' loans from related party', 39), (' derivative contracts - at fair value', 38), (' make good provisions', 38), (' warranty', 38), (' ultimate parent entity', 37), (' share of joint venture payables', 36), (' provision for associate funding', 33), (' employee benefits - current', 30), (' gst payables', 30), (' gst liabilities', 30), (' employee benefits - payroll', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none at 31 march 2023 , res_fuzz_match = [('other creditors and accruals', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), (' other related parties', 40), (' other creditors', 40), (' derivative contracts - at fair value', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' employee benefits - current', 40), (' current - liability for annual and long service leave', 40), (' contract liabilites - current', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other creditors', 40), (' other', 40), (' ultimate parent entity', 30), (' provisions - current', 30), (' share of joint venture payables', 30), (' make good provisions', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' gst payables', 21), (' gst liabilities', 20), ('current', 14), (' gst', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation cost $ , res_fuzz_match = [(' restructuring', 100), (' gst', 67), (' rebates', 60), ('current', 57), ('other creditors and accruals', 50), (' abandonment and decommissioning costs', 48), (' loan payable to relayed party under tax funding agreement', 44), (' current - liability for annual and long service leave', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' other related parties', 42), (' secured long-term bank loans', 42), (' forward exchange contracts', 42), (' gst payable and accruals', 41), (' contract liabilites - current', 40), (' arising from service contracts', 40), (' other', 40), (' total current employee benefits', 40), (' loans from related party', 39), (' derivative contracts - at fair value', 38), (' make good provisions', 38), (' warranty', 38), (' ultimate parent entity', 37), (' share of joint venture payables', 36), (' provision for associate funding', 33), (' employee benefits - current', 30), (' gst payables', 30), (' gst liabilities', 30), (' employee benefits - payroll', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none at 1 april 2022 , res_fuzz_match = [('other creditors and accruals', 50), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' gst payable and accruals', 50), (' current - liability for annual and long service leave', 50), (' abandonment and decommissioning costs', 50), (' make good provisions', 50), (' other creditors', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' other creditors', 40), (' contract liabilites - current', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' rebates', 40), (' forward exchange contracts', 40), (' other creditors', 40), (' other', 40), (' total current employee benefits', 40), (' warranty', 38), (' ultimate parent entity', 30), (' employee benefits - current', 30), (' provisions - current', 30), (' share of joint venture payables', 30), (' gst payables', 30), (' restructuring', 20), ('current', 14), (' gst', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation total $ , res_fuzz_match = [(' restructuring', 100), (' gst', 67), (' rebates', 60), ('current', 57), ('other creditors and accruals', 50), (' other related parties', 47), (' secured long-term bank loans', 46), (' other creditors', 43), (' derivative contracts - at fair value', 43), (' other creditors', 43), (' current - liability for annual and long service leave', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 42), (' forward exchange contracts', 42), (' gst payable and accruals', 41), (' abandonment and decommissioning costs', 41), (' contract liabilites - current', 40), (' other', 40), (' loans from related party', 38), (' arising from service contracts', 38), (' warranty', 38), (' total current employee benefits', 38), (' share of joint venture payables', 37), (' employee benefits - current', 35), (' employee benefits - payroll', 33), (' provision for associate funding', 32), (' make good provisions', 32), (' gst payables', 30), (' gst liabilities', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none arising during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), ('current', 57), (' provisions - current', 57), (' loan payable to relayed party under tax funding agreement', 48), (' loans from related party', 48), (' other related parties', 47), ('other creditors and accruals', 43), (' other creditors', 43), (' other creditors', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' other creditors', 43), (' total current employee benefits', 43), (' gst payables', 40), (' restructuring', 40), (' derivative contracts - at fair value', 39), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' contract liabilites - current', 39), (' share of joint venture payables', 39), (' warranty', 38), (' ultimate parent entity', 37), (' employee benefits - payroll', 36), (' secured long-term bank loans', 35), (' forward exchange contracts', 35), (' provision for associate funding', 33), (' gst', 33), (' gst payable and accruals', 32), (' make good provisions', 31), (' gst liabilities', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation total $ , res_fuzz_match = [(' restructuring', 100), (' gst', 67), (' rebates', 60), ('current', 57), ('other creditors and accruals', 50), (' other related parties', 47), (' secured long-term bank loans', 46), (' other creditors', 43), (' derivative contracts - at fair value', 43), (' other creditors', 43), (' current - liability for annual and long service leave', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 42), (' forward exchange contracts', 42), (' gst payable and accruals', 41), (' abandonment and decommissioning costs', 41), (' contract liabilites - current', 40), (' other', 40), (' loans from related party', 38), (' arising from service contracts', 38), (' warranty', 38), (' total current employee benefits', 38), (' share of joint venture payables', 37), (' employee benefits - current', 35), (' employee benefits - payroll', 33), (' provision for associate funding', 32), (' make good provisions', 32), (' gst payables', 30), (' gst liabilities', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none utilised , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation total $ , res_fuzz_match = [(' restructuring', 100), (' gst', 67), (' rebates', 60), ('current', 57), ('other creditors and accruals', 50), (' other related parties', 47), (' secured long-term bank loans', 46), (' other creditors', 43), (' derivative contracts - at fair value', 43), (' other creditors', 43), (' current - liability for annual and long service leave', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 42), (' forward exchange contracts', 42), (' gst payable and accruals', 41), (' abandonment and decommissioning costs', 41), (' contract liabilites - current', 40), (' other', 40), (' loans from related party', 38), (' arising from service contracts', 38), (' warranty', 38), (' total current employee benefits', 38), (' share of joint venture payables', 37), (' employee benefits - current', 35), (' employee benefits - payroll', 33), (' provision for associate funding', 32), (' make good provisions', 32), (' gst payables', 30), (' gst liabilities', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none at 31 march 2023 , res_fuzz_match = [('other creditors and accruals', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), (' other related parties', 40), (' other creditors', 40), (' derivative contracts - at fair value', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' employee benefits - current', 40), (' current - liability for annual and long service leave', 40), (' contract liabilites - current', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other creditors', 40), (' other', 40), (' ultimate parent entity', 30), (' provisions - current', 30), (' share of joint venture payables', 30), (' make good provisions', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' gst payables', 21), (' gst liabilities', 20), ('current', 14), (' gst', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation total $ , res_fuzz_match = [(' restructuring', 100), (' gst', 67), (' rebates', 60), ('current', 57), ('other creditors and accruals', 50), (' other related parties', 47), (' secured long-term bank loans', 46), (' other creditors', 43), (' derivative contracts - at fair value', 43), (' other creditors', 43), (' current - liability for annual and long service leave', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 42), (' forward exchange contracts', 42), (' gst payable and accruals', 41), (' abandonment and decommissioning costs', 41), (' contract liabilites - current', 40), (' other', 40), (' loans from related party', 38), (' arising from service contracts', 38), (' warranty', 38), (' total current employee benefits', 38), (' share of joint venture payables', 37), (' employee benefits - current', 35), (' employee benefits - payroll', 33), (' provision for associate funding', 32), (' make good provisions', 32), (' gst payables', 30), (' gst liabilities', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [756962.0, 119419.0, -109908.0, 766473.0, 424302.0, 104633.0, -125554.0, 403381.0, 1181264.0, 224052.0, -235462.0, 1169854.0], 'label': ['Restructuring and relocation Warranty $', 'Restructuring and relocation Warranty $', 'Restructuring and relocation Warranty $', 'Restructuring and relocation Warranty $', 'Restructuring and relocation cost $', 'Restructuring and relocation cost $', 'Restructuring and relocation cost $', 'Restructuring and relocation cost $', 'Restructuring and relocation Total $', 'Restructuring and relocation Total $', 'Restructuring and relocation Total $', 'Restructuring and relocation Total $'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current liabilities', 69)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('current liabilities', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [17], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current liabilities', 69)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('current liabilities', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [17], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [25], 'score': 100, 'value': 875650.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': [nan], 'line_item_value': [875650.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [25], 'score': 100, 'value': 564664.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': [nan], 'line_item_value': [564664.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [25], 'score': 100, 'value': 875650.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': [nan], 'line_item_value': [875650.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [25], 'score': 100, 'value': 564664.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': [nan], 'line_item_value': [564664.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [24, 26], 'score': 100, 'value': 362833.0, 'line_item_label': ['Non-current liabilities', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 362833.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [24, 26], 'score': 100, 'value': 452464.0, 'line_item_label': ['Non-current liabilities', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 452464.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current employee benefits , res_fuzz_match = [(' total non-current employee benefits', 87), (' employee benefits - payroll', 81), (' employee benefits - non current', 65), ('non-current trade and other payables', 43), (' non-current - liability for long-service leave', 43), (' electricity derivatives at fair value through oci', 35), (' contract liabilites - non-current', 35), (' trade payables - related parties', 35), (' abandonment and decommissioning costs', 30), (' provisions - non-current', 29), (' provision for associate funding', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current warranty , res_fuzz_match = [('non-current trade and other payables', 50), (' trade payables - related parties', 50), (' employee benefits - non current', 45), (' derivative contracts - at fair value', 44), (' non-current - liability for long-service leave', 44), (' contract liabilites - non-current', 44), (' total non-current employee benefits', 44), (' employee benefits - payroll', 40), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' provisions - non-current', 29), (' make good provisions', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current restructuring and relocation costs , res_fuzz_match = [(' abandonment and decommissioning costs', 50), (' trade payables - related parties', 43), (' derivative contracts - at fair value', 42), ('non-current trade and other payables', 41), (' contract liabilites - non-current', 40), (' electricity derivatives at fair value through oci', 39), (' total non-current employee benefits', 39), (' non-current - liability for long-service leave', 38), (' make good provisions', 38), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' employee benefits - non current', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('non-current trade and other payables', 54), (' employee benefits - non current', 54), (' non-current - liability for long-service leave', 54), (' employee benefits - payroll', 46), (' total non-current employee benefits', 46), (' electricity derivatives at fair value through oci', 38), (' derivative contracts - at fair value', 38), (' contract liabilites - non-current', 38), (' trade payables - related parties', 38), (' provisions - non-current', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits , res_fuzz_match = [(' total non-current employee benefits', 100), (' employee benefits - payroll', 81), (' employee benefits - non current', 65), ('non-current trade and other payables', 52), (' non-current - liability for long-service leave', 52), (' electricity derivatives at fair value through oci', 35), (' contract liabilites - non-current', 35), (' abandonment and decommissioning costs', 35), (' trade payables - related parties', 30), (' provisions - non-current', 29), (' provision for associate funding', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = non-current restructuring and relocation costs , res_fuzz_match = [('non-current trade and other payables', 57), (' abandonment and decommissioning costs', 50), (' non-current - liability for long-service leave', 45), (' trade payables - related parties', 43), (' derivative contracts - at fair value', 42), (' total non-current employee benefits', 41), (' contract liabilites - non-current', 40), (' electricity derivatives at fair value through oci', 39), (' make good provisions', 38), (' provisions - non-current', 36), (' provision for associate funding', 36), (' employee benefits - non current', 33), (' employee benefits - payroll', 32)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('non-current trade and other payables', 77), (' non-current - liability for long-service leave', 69), (' total non-current employee benefits', 69), (' employee benefits - non current', 67), (' provisions - non-current', 54), (' contract liabilites - non-current', 54), (' electricity derivatives at fair value through oci', 38), (' derivative contracts - at fair value', 38), (' abandonment and decommissioning costs', 38), (' employee benefits - payroll', 31), (' provision for associate funding', 31), (' make good provisions', 23), (' trade payables - related parties', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current employee benefits , res_fuzz_match = [(' total non-current employee benefits', 87), (' employee benefits - payroll', 81), (' employee benefits - non current', 65), ('non-current trade and other payables', 43), (' non-current - liability for long-service leave', 43), (' electricity derivatives at fair value through oci', 35), (' contract liabilites - non-current', 35), (' trade payables - related parties', 35), (' abandonment and decommissioning costs', 30), (' provisions - non-current', 29), (' provision for associate funding', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current warranty , res_fuzz_match = [('non-current trade and other payables', 50), (' trade payables - related parties', 50), (' employee benefits - non current', 45), (' derivative contracts - at fair value', 44), (' non-current - liability for long-service leave', 44), (' contract liabilites - non-current', 44), (' total non-current employee benefits', 44), (' employee benefits - payroll', 40), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' provisions - non-current', 29), (' make good provisions', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current restructuring and relocation costs , res_fuzz_match = [(' abandonment and decommissioning costs', 50), (' trade payables - related parties', 43), (' derivative contracts - at fair value', 42), ('non-current trade and other payables', 41), (' contract liabilites - non-current', 40), (' electricity derivatives at fair value through oci', 39), (' total non-current employee benefits', 39), (' non-current - liability for long-service leave', 38), (' make good provisions', 38), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' employee benefits - non current', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('non-current trade and other payables', 54), (' employee benefits - non current', 54), (' non-current - liability for long-service leave', 54), (' employee benefits - payroll', 46), (' total non-current employee benefits', 46), (' electricity derivatives at fair value through oci', 38), (' derivative contracts - at fair value', 38), (' contract liabilites - non-current', 38), (' trade payables - related parties', 38), (' provisions - non-current', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits , res_fuzz_match = [(' total non-current employee benefits', 100), (' employee benefits - payroll', 81), (' employee benefits - non current', 65), ('non-current trade and other payables', 52), (' non-current - liability for long-service leave', 52), (' electricity derivatives at fair value through oci', 35), (' contract liabilites - non-current', 35), (' abandonment and decommissioning costs', 35), (' trade payables - related parties', 30), (' provisions - non-current', 29), (' provision for associate funding', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = non-current restructuring and relocation costs , res_fuzz_match = [('non-current trade and other payables', 57), (' abandonment and decommissioning costs', 50), (' non-current - liability for long-service leave', 45), (' trade payables - related parties', 43), (' derivative contracts - at fair value', 42), (' total non-current employee benefits', 41), (' contract liabilites - non-current', 40), (' electricity derivatives at fair value through oci', 39), (' make good provisions', 38), (' provisions - non-current', 36), (' provision for associate funding', 36), (' employee benefits - non current', 33), (' employee benefits - payroll', 32)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('non-current trade and other payables', 77), (' non-current - liability for long-service leave', 69), (' total non-current employee benefits', 69), (' employee benefits - non current', 67), (' provisions - non-current', 54), (' contract liabilites - non-current', 54), (' electricity derivatives at fair value through oci', 38), (' derivative contracts - at fair value', 38), (' abandonment and decommissioning costs', 38), (' employee benefits - payroll', 31), (' provision for associate funding', 31), (' make good provisions', 23), (' trade payables - related parties', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4, 7, 11], 'score': [87, 100, 87, 100], 'value': [1282684.0, 203908.0, 1095787.0, 123872.0], 'label': ['Current Employee benefits', 'Non-current Employee benefits', 'Current Employee benefits', 'Non-current Employee benefits'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none at 1 april 2022 , res_fuzz_match = [('non-current trade and other payables', 50), (' employee benefits - non current', 50), (' non-current - liability for long-service leave', 50), (' abandonment and decommissioning costs', 50), (' make good provisions', 50), (' trade payables - related parties', 50), (' electricity derivatives at fair value through oci', 40), (' derivative contracts - at fair value', 40), (' provisions - non-current', 40), (' contract liabilites - non-current', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' total non-current employee benefits', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation warranty $ , res_fuzz_match = [(' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 44), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 41), (' total non-current employee benefits', 39), (' non-current - liability for long-service leave', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' abandonment and decommissioning costs', 35), (' provision for associate funding', 32), (' make good provisions', 31), (' employee benefits - payroll', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none arising during the year , res_fuzz_match = [('non-current trade and other payables', 52), (' electricity derivatives at fair value through oci', 43), (' provisions - non-current', 43), (' abandonment and decommissioning costs', 43), (' trade payables - related parties', 43), (' derivative contracts - at fair value', 39), (' employee benefits - non current', 39), (' non-current - liability for long-service leave', 39), (' total non-current employee benefits', 39), (' employee benefits - payroll', 36), (' contract liabilites - non-current', 35), (' provision for associate funding', 33), (' make good provisions', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation warranty $ , res_fuzz_match = [(' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 44), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 41), (' total non-current employee benefits', 39), (' non-current - liability for long-service leave', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' abandonment and decommissioning costs', 35), (' provision for associate funding', 32), (' make good provisions', 31), (' employee benefits - payroll', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none utilised , res_fuzz_match = [(' employee benefits - non current', 55), (' non-current - liability for long-service leave', 55), ('non-current trade and other payables', 45), (' contract liabilites - non-current', 45), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' trade payables - related parties', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci', 27), (' derivative contracts - at fair value', 27), (' provision for associate funding', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation warranty $ , res_fuzz_match = [(' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 44), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 41), (' total non-current employee benefits', 39), (' non-current - liability for long-service leave', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' abandonment and decommissioning costs', 35), (' provision for associate funding', 32), (' make good provisions', 31), (' employee benefits - payroll', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none at 31 march 2023 , res_fuzz_match = [('non-current trade and other payables', 50), (' employee benefits - non current', 50), (' non-current - liability for long-service leave', 50), (' abandonment and decommissioning costs', 50), (' total non-current employee benefits', 50), (' electricity derivatives at fair value through oci', 40), (' derivative contracts - at fair value', 40), (' provisions - non-current', 40), (' contract liabilites - non-current', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' make good provisions', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation warranty $ , res_fuzz_match = [(' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 44), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 41), (' total non-current employee benefits', 39), (' non-current - liability for long-service leave', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' abandonment and decommissioning costs', 35), (' provision for associate funding', 32), (' make good provisions', 31), (' employee benefits - payroll', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none at 1 april 2022 , res_fuzz_match = [('non-current trade and other payables', 50), (' employee benefits - non current', 50), (' non-current - liability for long-service leave', 50), (' abandonment and decommissioning costs', 50), (' make good provisions', 50), (' trade payables - related parties', 50), (' electricity derivatives at fair value through oci', 40), (' derivative contracts - at fair value', 40), (' provisions - non-current', 40), (' contract liabilites - non-current', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' total non-current employee benefits', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation cost $ , res_fuzz_match = [(' abandonment and decommissioning costs', 48), ('non-current trade and other payables', 44), (' electricity derivatives at fair value through oci', 44), (' trade payables - related parties', 43), (' non-current - liability for long-service leave', 40), (' derivative contracts - at fair value', 38), (' make good provisions', 38), (' provisions - non-current', 36), (' contract liabilites - non-current', 36), (' total non-current employee benefits', 36), (' provision for associate funding', 33), (' employee benefits - non current', 32), (' employee benefits - payroll', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none arising during the year , res_fuzz_match = [('non-current trade and other payables', 52), (' electricity derivatives at fair value through oci', 43), (' provisions - non-current', 43), (' abandonment and decommissioning costs', 43), (' trade payables - related parties', 43), (' derivative contracts - at fair value', 39), (' employee benefits - non current', 39), (' non-current - liability for long-service leave', 39), (' total non-current employee benefits', 39), (' employee benefits - payroll', 36), (' contract liabilites - non-current', 35), (' provision for associate funding', 33), (' make good provisions', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation cost $ , res_fuzz_match = [(' abandonment and decommissioning costs', 48), ('non-current trade and other payables', 44), (' electricity derivatives at fair value through oci', 44), (' trade payables - related parties', 43), (' non-current - liability for long-service leave', 40), (' derivative contracts - at fair value', 38), (' make good provisions', 38), (' provisions - non-current', 36), (' contract liabilites - non-current', 36), (' total non-current employee benefits', 36), (' provision for associate funding', 33), (' employee benefits - non current', 32), (' employee benefits - payroll', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none utilised , res_fuzz_match = [(' employee benefits - non current', 55), (' non-current - liability for long-service leave', 55), ('non-current trade and other payables', 45), (' contract liabilites - non-current', 45), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' trade payables - related parties', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci', 27), (' derivative contracts - at fair value', 27), (' provision for associate funding', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation cost $ , res_fuzz_match = [(' abandonment and decommissioning costs', 48), ('non-current trade and other payables', 44), (' electricity derivatives at fair value through oci', 44), (' trade payables - related parties', 43), (' non-current - liability for long-service leave', 40), (' derivative contracts - at fair value', 38), (' make good provisions', 38), (' provisions - non-current', 36), (' contract liabilites - non-current', 36), (' total non-current employee benefits', 36), (' provision for associate funding', 33), (' employee benefits - non current', 32), (' employee benefits - payroll', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none at 31 march 2023 , res_fuzz_match = [('non-current trade and other payables', 50), (' employee benefits - non current', 50), (' non-current - liability for long-service leave', 50), (' abandonment and decommissioning costs', 50), (' total non-current employee benefits', 50), (' electricity derivatives at fair value through oci', 40), (' derivative contracts - at fair value', 40), (' provisions - non-current', 40), (' contract liabilites - non-current', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' make good provisions', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation cost $ , res_fuzz_match = [(' abandonment and decommissioning costs', 48), ('non-current trade and other payables', 44), (' electricity derivatives at fair value through oci', 44), (' trade payables - related parties', 43), (' non-current - liability for long-service leave', 40), (' derivative contracts - at fair value', 38), (' make good provisions', 38), (' provisions - non-current', 36), (' contract liabilites - non-current', 36), (' total non-current employee benefits', 36), (' provision for associate funding', 33), (' employee benefits - non current', 32), (' employee benefits - payroll', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none at 1 april 2022 , res_fuzz_match = [('non-current trade and other payables', 50), (' employee benefits - non current', 50), (' non-current - liability for long-service leave', 50), (' abandonment and decommissioning costs', 50), (' make good provisions', 50), (' trade payables - related parties', 50), (' electricity derivatives at fair value through oci', 40), (' derivative contracts - at fair value', 40), (' provisions - non-current', 40), (' contract liabilites - non-current', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' total non-current employee benefits', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation total $ , res_fuzz_match = [('non-current trade and other payables', 50), (' electricity derivatives at fair value through oci', 46), (' derivative contracts - at fair value', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 41), (' contract liabilites - non-current', 38), (' provisions - non-current', 36), (' non-current - liability for long-service leave', 35), (' total non-current employee benefits', 35), (' employee benefits - payroll', 33), (' provision for associate funding', 32), (' make good provisions', 32), (' employee benefits - non current', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none arising during the year , res_fuzz_match = [('non-current trade and other payables', 52), (' electricity derivatives at fair value through oci', 43), (' provisions - non-current', 43), (' abandonment and decommissioning costs', 43), (' trade payables - related parties', 43), (' derivative contracts - at fair value', 39), (' employee benefits - non current', 39), (' non-current - liability for long-service leave', 39), (' total non-current employee benefits', 39), (' employee benefits - payroll', 36), (' contract liabilites - non-current', 35), (' provision for associate funding', 33), (' make good provisions', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation total $ , res_fuzz_match = [('non-current trade and other payables', 50), (' electricity derivatives at fair value through oci', 46), (' derivative contracts - at fair value', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 41), (' contract liabilites - non-current', 38), (' provisions - non-current', 36), (' non-current - liability for long-service leave', 35), (' total non-current employee benefits', 35), (' employee benefits - payroll', 33), (' provision for associate funding', 32), (' make good provisions', 32), (' employee benefits - non current', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none utilised , res_fuzz_match = [(' employee benefits - non current', 55), (' non-current - liability for long-service leave', 55), ('non-current trade and other payables', 45), (' contract liabilites - non-current', 45), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' trade payables - related parties', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci', 27), (' derivative contracts - at fair value', 27), (' provision for associate funding', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation total $ , res_fuzz_match = [('non-current trade and other payables', 50), (' electricity derivatives at fair value through oci', 46), (' derivative contracts - at fair value', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 41), (' contract liabilites - non-current', 38), (' provisions - non-current', 36), (' non-current - liability for long-service leave', 35), (' total non-current employee benefits', 35), (' employee benefits - payroll', 33), (' provision for associate funding', 32), (' make good provisions', 32), (' employee benefits - non current', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none at 31 march 2023 , res_fuzz_match = [('non-current trade and other payables', 50), (' employee benefits - non current', 50), (' non-current - liability for long-service leave', 50), (' abandonment and decommissioning costs', 50), (' total non-current employee benefits', 50), (' electricity derivatives at fair value through oci', 40), (' derivative contracts - at fair value', 40), (' provisions - non-current', 40), (' contract liabilites - non-current', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' make good provisions', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = restructuring and relocation total $ , res_fuzz_match = [('non-current trade and other payables', 50), (' electricity derivatives at fair value through oci', 46), (' derivative contracts - at fair value', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 41), (' contract liabilites - non-current', 38), (' provisions - non-current', 36), (' non-current - liability for long-service leave', 35), (' total non-current employee benefits', 35), (' employee benefits - payroll', 33), (' provision for associate funding', 32), (' make good provisions', 32), (' employee benefits - non current', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 32)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 32)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('equity share capital', 57), ('contributed equity', 48), ('contributed equity', 48), ('perpetual equity instrument', 38), (' issued capital', 37), ('share capital', 36), (' share capital ', 36), ('common stock', 21)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital', 100), ('share capital', 67), (' share capital ', 67), ('equity share capital', 57), ('contributed equity', 38), ('contributed equity', 38), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = share premium , res_fuzz_match = [('share capital', 67), (' share capital ', 67), ('equity share capital', 58), ('perpetual equity instrument', 37), (' issued capital', 35), ('contributed equity', 34), ('contributed equity', 34), ('common stock', 32)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('contributed equity', 37), ('contributed equity', 37), ('share capital', 36), (' share capital ', 36), ('equity share capital', 34), (' issued capital', 29), ('common stock', 26)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = tax reserve , res_fuzz_match = [('perpetual equity instrument', 29), ('contributed equity', 23), ('contributed equity', 23), ('equity share capital', 21), ('share capital', 19), (' share capital ', 19), ('common stock', 18), (' issued capital', 10)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other components of equity , res_fuzz_match = [('equity share capital', 65), ('contributed equity', 57), ('contributed equity', 57), ('common stock', 52), ('share capital', 47), (' share capital ', 47), ('perpetual equity instrument', 45), (' issued capital', 34)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [30], 'score': 100, 'value': 1900000.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['17'], 'line_item_value': [1900000.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('equity share capital', 57), ('contributed equity', 48), ('contributed equity', 48), ('perpetual equity instrument', 38), (' issued capital', 37), ('share capital', 36), (' share capital ', 36), ('common stock', 21)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital', 100), ('share capital', 67), (' share capital ', 67), ('equity share capital', 57), ('contributed equity', 38), ('contributed equity', 38), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = share premium , res_fuzz_match = [('share capital', 67), (' share capital ', 67), ('equity share capital', 58), ('perpetual equity instrument', 37), (' issued capital', 35), ('contributed equity', 34), ('contributed equity', 34), ('common stock', 32)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('contributed equity', 37), ('contributed equity', 37), ('share capital', 36), (' share capital ', 36), ('equity share capital', 34), (' issued capital', 29), ('common stock', 26)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = tax reserve , res_fuzz_match = [('perpetual equity instrument', 29), ('contributed equity', 23), ('contributed equity', 23), ('equity share capital', 21), ('share capital', 19), (' share capital ', 19), ('common stock', 18), (' issued capital', 10)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other components of equity , res_fuzz_match = [('equity share capital', 65), ('contributed equity', 57), ('contributed equity', 57), ('common stock', 52), ('share capital', 47), (' share capital ', 47), ('perpetual equity instrument', 45), (' issued capital', 34)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [30], 'score': 100, 'value': 1900000.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['17'], 'line_item_value': [1900000.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none 1,900,000 (2022: 1,900,000) fully paid ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 100), (' ordinary shares fully paid', 56), (' issued and paid-up share capital', 48), (' retained profits', 38), (' total issued capital', 38)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none share premium , res_fuzz_match = [('ordinary shares', 57), (' issued and paid-up share capital', 53), (' ordinary shares fully paid', 50), (' retained profits', 46), (' fully paid ordinary shares', 44), (' total issued capital', 38)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' total issued capital', 50), (' retained profits', 40), ('ordinary shares', 30), (' fully paid ordinary shares', 30), (' issued and paid-up share capital', 30), (' ordinary shares fully paid', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none 1,900,000 (2022: 1,900,000) fully paid ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 100), (' ordinary shares fully paid', 56), (' issued and paid-up share capital', 48), (' retained profits', 38), (' total issued capital', 38)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none share premium , res_fuzz_match = [('ordinary shares', 57), (' issued and paid-up share capital', 53), (' ordinary shares fully paid', 50), (' retained profits', 46), (' fully paid ordinary shares', 44), (' total issued capital', 38)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' total issued capital', 50), (' retained profits', 40), ('ordinary shares', 30), (' fully paid ordinary shares', 30), (' issued and paid-up share capital', 30), (' ordinary shares fully paid', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': [100, 100], 'value': [1900000.0, 1900000.0], 'label': ['None 1,900,000 (2022: 1,900,000) fully paid ordinary shares', 'None 1,900,000 (2022: 1,900,000) fully paid ordinary shares'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('other equity', 48), ('additional paid in capital', 48), ('additional paid up capital', 48), ('reserves and surplus', 41), ('other reserves', 14)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = share premium , res_fuzz_match = [('other equity', 40), ('reserves and surplus', 33), ('other reserves', 32), ('additional paid in capital', 28), ('additional paid up capital', 28)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('additional paid in capital', 37), ('additional paid up capital', 37), ('reserves and surplus', 36), ('other equity', 26)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = tax reserve , res_fuzz_match = [('other reserves', 55), ('reserves and surplus', 52), ('other equity', 27), ('additional paid in capital', 23), ('additional paid up capital', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other components of equity , res_fuzz_match = [('other equity', 77), ('other reserves', 32), ('additional paid in capital', 29), ('additional paid up capital', 29), ('reserves and surplus', 28)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('other equity', 48), ('additional paid in capital', 48), ('additional paid up capital', 48), ('reserves and surplus', 41), ('other reserves', 14)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = share premium , res_fuzz_match = [('other equity', 40), ('reserves and surplus', 33), ('other reserves', 32), ('additional paid in capital', 28), ('additional paid up capital', 28)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('additional paid in capital', 37), ('additional paid up capital', 37), ('reserves and surplus', 36), ('other equity', 26)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = tax reserve , res_fuzz_match = [('other reserves', 55), ('reserves and surplus', 52), ('other equity', 27), ('additional paid in capital', 23), ('additional paid up capital', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other components of equity , res_fuzz_match = [('other equity', 77), ('other reserves', 32), ('additional paid in capital', 29), ('additional paid up capital', 29), ('reserves and surplus', 28)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('other reserves ', 14), (' reserves', 9)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' reserves', 12)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = share premium , res_fuzz_match = [(' reserves', 42), ('other reserves ', 32)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' reserves', 24)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = tax reserve , res_fuzz_match = [(' reserves', 75), ('other reserves ', 55)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other components of equity , res_fuzz_match = [('other reserves ', 32), (' reserves', 24)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('other reserves ', 14), (' reserves', 9)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' reserves', 12)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = share premium , res_fuzz_match = [(' reserves', 42), ('other reserves ', 32)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' reserves', 24)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = tax reserve , res_fuzz_match = [(' reserves', 75), ('other reserves ', 55)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other components of equity , res_fuzz_match = [('other reserves ', 32), (' reserves', 24)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('retained earnings', 50), ('other equity', 48), (' accumulated losses', 28), ('reserves surplus', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = share premium , res_fuzz_match = [('other equity', 40), ('reserves surplus', 38), ('retained earnings', 33), (' accumulated losses', 32)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = tax reserve , res_fuzz_match = [('reserves surplus', 61), ('retained earnings', 48), ('other equity', 27), (' accumulated losses', 9)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other components of equity , res_fuzz_match = [('other equity', 77), ('retained earnings', 33), (' accumulated losses', 32), ('reserves surplus', 19)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [32], 'score': 100, 'value': 41072875.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [41072875.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('retained earnings', 50), ('other equity', 48), (' accumulated losses', 28), ('reserves surplus', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = share premium , res_fuzz_match = [('other equity', 40), ('reserves surplus', 38), ('retained earnings', 33), (' accumulated losses', 32)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = tax reserve , res_fuzz_match = [('reserves surplus', 61), ('retained earnings', 48), ('other equity', 27), (' accumulated losses', 9)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other components of equity , res_fuzz_match = [('other equity', 77), ('retained earnings', 33), (' accumulated losses', 32), ('reserves surplus', 19)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [32], 'score': 100, 'value': 38884464.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [38884464.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('minority interest', 32), ('minority interest', 32), ('noncontrolling interest', 28), (' non-controlling interest', 28), ('non controlling interest', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest', 33), ('non controlling interest', 33), ('minority interest', 33), ('noncontrolling interest', 21), (' non-controlling interest', 21)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = share premium , res_fuzz_match = [('minority interest', 37), ('minority interest', 37), ('noncontrolling interest', 25), (' non-controlling interest', 25), ('non controlling interest', 24)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest', 48), ('minority interest', 48), ('non controlling interest', 39), ('noncontrolling interest', 33), (' non-controlling interest', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = tax reserve , res_fuzz_match = [('noncontrolling interest', 34), (' non-controlling interest', 34), ('minority interest', 33), ('minority interest', 33), ('non controlling interest', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other components of equity , res_fuzz_match = [('non controlling interest', 41), ('noncontrolling interest', 37), (' non-controlling interest', 37), ('minority interest', 36), ('minority interest', 36)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('minority interest', 32), ('minority interest', 32), ('noncontrolling interest', 28), (' non-controlling interest', 28), ('non controlling interest', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest', 33), ('non controlling interest', 33), ('minority interest', 33), ('noncontrolling interest', 21), (' non-controlling interest', 21)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = share premium , res_fuzz_match = [('minority interest', 37), ('minority interest', 37), ('noncontrolling interest', 25), (' non-controlling interest', 25), ('non controlling interest', 24)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest', 48), ('minority interest', 48), ('non controlling interest', 39), ('noncontrolling interest', 33), (' non-controlling interest', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = tax reserve , res_fuzz_match = [('noncontrolling interest', 34), (' non-controlling interest', 34), ('minority interest', 33), ('minority interest', 33), ('non controlling interest', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other components of equity , res_fuzz_match = [('non controlling interest', 41), ('noncontrolling interest', 37), (' non-controlling interest', 37), ('minority interest', 36), ('minority interest', 36)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('shareholders equity(a)', 47)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = share premium , res_fuzz_match = [('shareholders equity(a)', 53)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = tax reserve , res_fuzz_match = [('shareholders equity(a)', 22)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other components of equity , res_fuzz_match = [('shareholders equity(a)', 44)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('shareholders equity(a)', 47)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = share premium , res_fuzz_match = [('shareholders equity(a)', 53)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = tax reserve , res_fuzz_match = [('shareholders equity(a)', 22)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other components of equity , res_fuzz_match = [('shareholders equity(a)', 44)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 95127.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [95127.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 201467.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [201467.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['cost', 'gross'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost at 1 april 2022 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost at 31 march 2023 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at 1 april 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost at 1 april 2022 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost at 31 march 2023 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at 1 april 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost at 1 april 2022 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost at 31 march 2023 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at 1 april 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 10, 11, 12, 13, 20, 21, 22, 23], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [674353.0, 101575.0, -48706.0, 727222.0, 823948.0, 65100.0, -28649.0, 860399.0, 1498301.0, 166675.0, -77355.0, 1587621.0], 'label': ['Cost At 1 April 2022', 'Cost Additions', 'Cost Disposals', 'Cost At 31 March 2023', 'Cost At 1 April 2022', 'Cost Additions', 'Cost Disposals', 'Cost At 31 March 2023', 'Cost At 1 April 2022', 'Cost Additions', 'Cost Disposals', 'Cost At 31 March 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('net book value', 40), ('depreciatio', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost at 31 march 2023 , res_fuzz_match = [('net value', 38), ('net book value', 32), ('accumulated depreciation', 30), ('depreciatio', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at 1 april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38), ('net book value', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38), ('net book value', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2023 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = plant and machinery $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('net book value', 40), ('depreciatio', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost at 31 march 2023 , res_fuzz_match = [('net value', 38), ('net book value', 32), ('accumulated depreciation', 30), ('depreciatio', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at 1 april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38), ('net book value', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38), ('net book value', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2023 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $ , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('net book value', 40), ('depreciatio', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = cost at 31 march 2023 , res_fuzz_match = [('net value', 38), ('net book value', 32), ('accumulated depreciation', 30), ('depreciatio', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at 1 april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38), ('net book value', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 31)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38), ('net book value', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2023 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5, 6, 7, 8, 9, 14, 15, 16, 17, 18, 19, 24, 25, 26, 27, 28, 29], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [579226.0, 59645.0, -48315.0, 590556.0, 136666.0, 95127.0, 823948.0, 299.0, -28649.0, 795598.0, 64801.0, 0.0, 1403174.0, 59944.0, -76964.0, 1386154.0, 201467.0, 95127.0], 'label': ['Accumulated depreciation At 1 April 2022', 'Accumulated depreciation Depreciation charge for the year', 'Accumulated depreciation Disposals', 'Accumulated depreciation At: 31 March 2023', 'Net book value At 31 March 2023', 'Net book value At31 March 2022', 'Accumulated depreciation At 1 April 2022', 'Accumulated depreciation Depreciation charge for the year', 'Accumulated depreciation Disposals', 'Accumulated depreciation At: 31 March 2023', 'Net book value At 31 March 2023', 'Net book value At31 March 2022', 'Accumulated depreciation At 1 April 2022', 'Accumulated depreciation Depreciation charge for the year', 'Accumulated depreciation Disposals', 'Accumulated depreciation At: 31 March 2023', 'Net book value At 31 March 2023', 'Net book value At31 March 2022'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-27 11:41:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = short-term investments , res_fuzz_match = [('receivable', 50), ('trade and other receivables', 45), ('trade receivables', 42), ('government subsidies receivable', 38), ('account receivables', 36), ('billed', 25), ('unbilled', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('trade and other receivables', 64), ('government subsidies receivable', 55), ('account receivables', 36), ('trade receivables', 36), ('receivable', 33), ('billed', 0), ('unbilled', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 12046484.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['8'], 'line_item_value': [12046484.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = short-term investments , res_fuzz_match = [('receivable', 50), ('trade and other receivables', 45), ('trade receivables', 42), ('government subsidies receivable', 38), ('account receivables', 36), ('billed', 25), ('unbilled', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('trade and other receivables', 64), ('government subsidies receivable', 55), ('account receivables', 36), ('trade receivables', 36), ('receivable', 33), ('billed', 0), ('unbilled', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 11295641.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['8'], 'line_item_value': [11295641.0]}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-27 11:41:31+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [('current', 100), ('trade receivables', 100), (' related party receivables', 67), (' net trade debtors', 62), (' share of joint venture receivables', 60), (' other debtors', 42)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current receivable from related parties (note 20) , res_fuzz_match = [('current', 100), (' related party receivables', 76), ('trade receivables', 75), (' share of joint venture receivables', 44), (' net trade debtors', 44), (' other debtors', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [('current', 100), ('trade receivables', 75), (' related party receivables', 67), (' share of joint venture receivables', 60), (' other debtors', 58), (' net trade debtors', 44)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' share of joint venture receivables', 38), (' net trade debtors', 38), (' other debtors', 33), ('trade receivables', 25), (' related party receivables', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [('current', 100), ('trade receivables', 100), (' related party receivables', 67), (' net trade debtors', 62), (' share of joint venture receivables', 60), (' other debtors', 42)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current receivable from related parties (note 20) , res_fuzz_match = [('current', 100), (' related party receivables', 76), ('trade receivables', 75), (' share of joint venture receivables', 44), (' net trade debtors', 44), (' other debtors', 33)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [('current', 100), ('trade receivables', 75), (' related party receivables', 67), (' share of joint venture receivables', 60), (' other debtors', 58), (' net trade debtors', 44)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' share of joint venture receivables', 38), (' net trade debtors', 38), (' other debtors', 33), ('trade receivables', 25), (' related party receivables', 23)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-27 11:41:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [6861283.0, 4400617.0, 33741.0, 11295641.0, 8463813.0, 3578211.0, 4460.0, 12046484.0], 'label': ['Current Trade receivables', 'Current Receivable from related parties (Note 20)', 'Current Other receivables', 'Current Total', 'Current Trade receivables', 'Current Receivable from related parties (Note 20)', 'Current Other receivables', 'Current Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-27 11:41:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-27 11:41:31+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-27 11:41:31+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [('net sales', 50), ('sale of products', 38), ('from trading business', 32), (' Sale of coal', 31), (' Sales revenue', 27), ('revenue from operations', 20), (' Revenue', 20), ('revenue from contracts with customers', 17), ('Revenue from contract with customers', 17), ('transmission and distribution business', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('revenue from contracts with customers', 100), ('Revenue from contract with customers', 100), ('revenue from operations', 50), ('from trading business', 43), ('transmission and distribution business', 33), (' Sales revenue', 33), (' Revenue', 32), (' Sale of coal', 29), ('sale of products', 27), ('net sales', 25)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('revenue from operations', 42), ('net sales', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 32), (' Sales revenue', 30), ('sale of products', 24), ('transmission and distribution business', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('revenue from operations', 38), ('transmission and distribution business', 37), ('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), (' Sales revenue', 27), ('sale of products', 26), (' Revenue', 25), ('net sales', 24), ('from trading business', 24), (' Sale of coal', 23)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), ('from trading business', 37), ('sale of products', 33), (' Revenue', 33), ('net sales', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('transmission and distribution business', 25), (' Sale of coal', 19)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('from trading business', 41), ('net sales', 38), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 31), ('revenue from operations', 30), (' Sales revenue', 29), (' Sale of coal', 24), ('sale of products', 22), (' Revenue', 20)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [('revenue from contracts with customers', 42), ('Revenue from contract with customers', 42), ('revenue from operations', 33), ('transmission and distribution business', 33), ('from trading business', 30), ('sale of products', 25), (' Sales revenue', 21), ('net sales', 19), (' Sale of coal', 19), (' Revenue', 16)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 59084896.0, 'line_item_label': ['Revenue from contracts with customers'], 'note_numbers': [], 'line_item_value': [59084896.0]}
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [('net sales', 50), ('sale of products', 38), ('from trading business', 32), (' Sale of coal', 31), (' Sales revenue', 27), ('revenue from operations', 20), (' Revenue', 20), ('revenue from contracts with customers', 17), ('Revenue from contract with customers', 17), ('transmission and distribution business', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('revenue from contracts with customers', 100), ('Revenue from contract with customers', 100), ('revenue from operations', 50), ('from trading business', 43), ('transmission and distribution business', 33), (' Sales revenue', 33), (' Revenue', 32), (' Sale of coal', 29), ('sale of products', 27), ('net sales', 25)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('revenue from operations', 42), ('net sales', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 32), (' Sales revenue', 30), ('sale of products', 24), ('transmission and distribution business', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('revenue from operations', 38), ('transmission and distribution business', 37), ('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), (' Sales revenue', 27), ('sale of products', 26), (' Revenue', 25), ('net sales', 24), ('from trading business', 24), (' Sale of coal', 23)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), ('from trading business', 37), ('sale of products', 33), (' Revenue', 33), ('net sales', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('transmission and distribution business', 25), (' Sale of coal', 19)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('from trading business', 41), ('net sales', 38), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 31), ('revenue from operations', 30), (' Sales revenue', 29), (' Sale of coal', 24), ('sale of products', 22), (' Revenue', 20)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [('revenue from contracts with customers', 42), ('Revenue from contract with customers', 42), ('revenue from operations', 33), ('transmission and distribution business', 33), ('from trading business', 30), ('sale of products', 25), (' Sales revenue', 21), ('net sales', 19), (' Sale of coal', 19), (' Revenue', 16)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 4.1, 'line_item_label': ['Revenue from contracts with customers'], 'note_numbers': [], 'line_item_value': [4.1]}
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [('cost of sales', 46), ('Cost of sales', 46), ('total expenses', 38), (' Personnel costs', 33), ('total expenditure', 30), ('expenditure', 29), (' Cost of goods and services sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 22), ('expense', 20), (' Cost of product sold', 19), ('purchase of stock-in-trade', 17)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 35), ('purchase of stock-in-trade', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 24), ('total expenses', 23), ('expense', 16)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), ('purchase of stock-in-trade', 15)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Cost of goods and services sold', 43), (' Cost of inventory sold', 40), ('expense', 38), (' Cost of product sold', 37), ('total expenses', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 27), ('total expenditure', 24)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('total expenses', 56), ('total expenditure', 45), ('expenditure', 41), ('expense', 40), ('purchase of stock-in-trade', 33), (' Personnel costs', 32), (' Cost of goods and services sold', 29), (' Cost of inventory sold', 28), ('cost of sales', 24), ('Cost of sales', 24), (' Cost of product sold', 24), (' cost of coal sold', 21)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [(' Cost of goods and services sold', 37), ('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Personnel costs', 34), ('total expenditure', 33), (' Cost of product sold', 32), (' cost of coal sold', 31), ('total expenses', 28), ('expenditure', 22), ('cost of sales', 22), ('Cost of sales', 22), ('expense', 16)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [('cost of sales', 46), ('Cost of sales', 46), ('total expenses', 38), (' Personnel costs', 33), ('total expenditure', 30), ('expenditure', 29), (' Cost of goods and services sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 22), ('expense', 20), (' Cost of product sold', 19), ('purchase of stock-in-trade', 17)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 35), ('purchase of stock-in-trade', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 24), ('total expenses', 23), ('expense', 16)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), ('purchase of stock-in-trade', 15)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Cost of goods and services sold', 43), (' Cost of inventory sold', 40), ('expense', 38), (' Cost of product sold', 37), ('total expenses', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 27), ('total expenditure', 24)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('total expenses', 56), ('total expenditure', 45), ('expenditure', 41), ('expense', 40), ('purchase of stock-in-trade', 33), (' Personnel costs', 32), (' Cost of goods and services sold', 29), (' Cost of inventory sold', 28), ('cost of sales', 24), ('Cost of sales', 24), (' Cost of product sold', 24), (' cost of coal sold', 21)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [(' Cost of goods and services sold', 37), ('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Personnel costs', 34), ('total expenditure', 33), (' Cost of product sold', 32), (' cost of coal sold', 31), ('total expenses', 28), ('expenditure', 22), ('cost of sales', 22), ('Cost of sales', 22), ('expense', 16)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [('other expenses', 50), (' Other expenses', 50), (' Other expenses', 50), (' Amortisation expenses', 33), (' Sales and marketing', 32), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 25), (' Logistics and distribution', 25), (' Marketing expenses', 24), (' Occupancy ', 22), (' Advertising expenses', 21), ('Distribution expenses', 20), (' depreciation', 18), (' Selling & distribution expenses', 16), (' Management expenses', 12), (' Depreciation expenses', 11), (' Depreciation expenses', 11)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses', 38), (' Amortisation expenses', 35), (' Logistics and distribution', 35), (' Selling & distribution expenses', 34), ('Distribution expenses', 33), (' Administrative expenses', 33), (' Administration expenses', 33), (' Marketing expenses', 31), (' Advertising expenses', 30), ('other expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Sales and marketing', 26), (' Occupancy expenses', 23), (' Management expenses', 23), (' Occupancy ', 22), (' Lease expenses', 19), (' Selling Expenses', 19), (' depreciation', 15)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Administrative expenses', 53), (' Administration expenses', 53), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative and other expenses', 46), (' Selling & distribution expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 21), (' Occupancy ', 15)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Depreciation expenses', 70), (' Depreciation expenses', 70), (' Amortisation expenses', 70), (' Advertising expenses', 59), (' Administrative and other expenses', 58), (' Administrative expenses', 57), (' Administration expenses', 57), ('Distribution expenses', 52), (' Selling & distribution expenses', 47), (' depreciation', 42), (' Logistics and distribution', 39), (' Sales and marketing', 39), ('other expenses', 32), (' Occupancy expenses', 32), (' Other expenses', 32), (' Lease expenses', 32), (' Selling Expenses', 32), (' Management expenses', 32), (' Other expenses', 32), (' Marketing expenses', 31), (' Occupancy ', 19)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Occupancy ', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' Depreciation expenses', 53), (' Depreciation expenses', 53), (' Administrative and other expenses', 52), ('other expenses', 50), (' Administrative expenses', 50), (' Other expenses', 50), (' Administration expenses', 50), (' Management expenses', 50), (' Other expenses', 50), (' Marketing expenses', 49), (' Lease expenses', 46), (' Advertising expenses', 46), ('Distribution expenses', 45), (' Occupancy expenses', 44), (' Selling & distribution expenses', 44), (' Amortisation expenses', 42), (' Selling Expenses', 40), (' Sales and marketing', 31), (' Logistics and distribution', 27), (' depreciation', 26), (' Occupancy ', 7)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [(' Administrative and other expenses', 37), ('other expenses', 35), (' Other expenses', 35), (' Other expenses', 35), (' Marketing expenses', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Management expenses', 28), (' Depreciation expenses', 27), (' Depreciation expenses', 27), (' Sales and marketing', 27), (' Occupancy expenses', 25), (' Lease expenses', 25), (' Selling Expenses', 25), (' Logistics and distribution', 25), (' Selling & distribution expenses', 24), (' Amortisation expenses', 24), ('Distribution expenses', 20), (' depreciation', 19), (' Advertising expenses', 17), (' Occupancy ', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -5924589.0, 'line_item_label': ['Other expenses'], 'note_numbers': [], 'line_item_value': [-5924589.0]}
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [('other expenses', 50), (' Other expenses', 50), (' Other expenses', 50), (' Amortisation expenses', 33), (' Sales and marketing', 32), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 25), (' Logistics and distribution', 25), (' Marketing expenses', 24), (' Occupancy ', 22), (' Advertising expenses', 21), ('Distribution expenses', 20), (' depreciation', 18), (' Selling & distribution expenses', 16), (' Management expenses', 12), (' Depreciation expenses', 11), (' Depreciation expenses', 11)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses', 38), (' Amortisation expenses', 35), (' Logistics and distribution', 35), (' Selling & distribution expenses', 34), ('Distribution expenses', 33), (' Administrative expenses', 33), (' Administration expenses', 33), (' Marketing expenses', 31), (' Advertising expenses', 30), ('other expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Sales and marketing', 26), (' Occupancy expenses', 23), (' Management expenses', 23), (' Occupancy ', 22), (' Lease expenses', 19), (' Selling Expenses', 19), (' depreciation', 15)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Administrative expenses', 53), (' Administration expenses', 53), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative and other expenses', 46), (' Selling & distribution expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 21), (' Occupancy ', 15)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Depreciation expenses', 70), (' Depreciation expenses', 70), (' Amortisation expenses', 70), (' Advertising expenses', 59), (' Administrative and other expenses', 58), (' Administrative expenses', 57), (' Administration expenses', 57), ('Distribution expenses', 52), (' Selling & distribution expenses', 47), (' depreciation', 42), (' Logistics and distribution', 39), (' Sales and marketing', 39), ('other expenses', 32), (' Occupancy expenses', 32), (' Other expenses', 32), (' Lease expenses', 32), (' Selling Expenses', 32), (' Management expenses', 32), (' Other expenses', 32), (' Marketing expenses', 31), (' Occupancy ', 19)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Occupancy ', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' Depreciation expenses', 53), (' Depreciation expenses', 53), (' Administrative and other expenses', 52), ('other expenses', 50), (' Administrative expenses', 50), (' Other expenses', 50), (' Administration expenses', 50), (' Management expenses', 50), (' Other expenses', 50), (' Marketing expenses', 49), (' Lease expenses', 46), (' Advertising expenses', 46), ('Distribution expenses', 45), (' Occupancy expenses', 44), (' Selling & distribution expenses', 44), (' Amortisation expenses', 42), (' Selling Expenses', 40), (' Sales and marketing', 31), (' Logistics and distribution', 27), (' depreciation', 26), (' Occupancy ', 7)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [(' Administrative and other expenses', 37), ('other expenses', 35), (' Other expenses', 35), (' Other expenses', 35), (' Marketing expenses', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Management expenses', 28), (' Depreciation expenses', 27), (' Depreciation expenses', 27), (' Sales and marketing', 27), (' Occupancy expenses', 25), (' Lease expenses', 25), (' Selling Expenses', 25), (' Logistics and distribution', 25), (' Selling & distribution expenses', 24), (' Amortisation expenses', 24), ('Distribution expenses', 20), (' depreciation', 19), (' Advertising expenses', 17), (' Occupancy ', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': 4.5, 'line_item_label': ['Other expenses'], 'note_numbers': [], 'line_item_value': [4.5]}
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [('Rent', 50), (' Administration expenses', 30), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 22)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses', 33), (' Rental expenses', 31), (' Occupancy expenses', 23), ('Rent', 22), (' Occupancy', 22)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Administration expenses', 57), (' Occupancy expenses', 32), (' Rental expenses', 31), ('Rent', 20), (' Occupancy', 19)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' Rental expenses', 54), (' Administration expenses', 50), (' Occupancy expenses', 44), ('Rent', 21), (' Occupancy', 7)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [(' Rental expenses', 31), (' Administration expenses', 30), (' Occupancy expenses', 25), ('Rent', 16), (' Occupancy', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [('Rent', 50), (' Administration expenses', 30), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 22)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses', 33), (' Rental expenses', 31), (' Occupancy expenses', 23), ('Rent', 22), (' Occupancy', 22)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Administration expenses', 57), (' Occupancy expenses', 32), (' Rental expenses', 31), ('Rent', 20), (' Occupancy', 19)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' Rental expenses', 54), (' Administration expenses', 50), (' Occupancy expenses', 44), ('Rent', 21), (' Occupancy', 7)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [(' Rental expenses', 31), (' Administration expenses', 30), (' Occupancy expenses', 25), ('Rent', 16), (' Occupancy', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [(' Other income', 53), ('other operating', 43), ('Other revenue', 38)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 29)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('Other revenue', 42), ('other operating', 28), (' Other income', 27)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' Other income', 40), ('other operating', 29), ('Other revenue', 28)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [(' Other income', 39), ('other operating', 33), ('Other revenue', 28)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 4.2, 'line_item_label': ['Other income'], 'note_numbers': [], 'line_item_value': [4.2]}
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [(' Other income', 53), ('other operating', 43), ('Other revenue', 38)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 29)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('Other revenue', 42), ('other operating', 28), (' Other income', 27)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' Other income', 40), ('other operating', 29), ('Other revenue', 28)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [(' Other income', 39), ('other operating', 33), ('Other revenue', 28)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 0.0, 'line_item_label': ['Other income'], 'note_numbers': [], 'line_item_value': [0.0]}
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [('other income', 53), (' Interest revenue', 32), (' Net finance costs', 32), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Finance income and finance costs', 19)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), (' Finance income and costs', 38), (' Net finance costs', 38), ('other income', 37), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Finance income and costs', 23), (' Net finance costs', 22)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Interest revenue', 44), (' Net finance costs', 39), (' Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32), ('other income', 27)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('finance income', 50), ('Finance income', 50), (' Finance income and costs', 44), (' Finance income and finance costs', 42), ('other income', 40), (' Interest revenue', 36), (' Net finance costs', 36)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [(' Finance income and costs', 45), (' Finance income and finance costs', 41), ('other income', 39), (' Net finance costs', 37), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 27)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 8, 9], 'score': 85, 'value': 973659.2, 'line_item_label': ['Other income', 'Finance income', 'Finance costs'], 'note_numbers': [], 'line_item_value': [4.2, 988213.0, -14558.0]}
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [('other income', 53), (' Interest revenue', 32), (' Net finance costs', 32), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Finance income and finance costs', 19)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), (' Finance income and costs', 38), (' Net finance costs', 38), ('other income', 37), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Finance income and costs', 23), (' Net finance costs', 22)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Interest revenue', 44), (' Net finance costs', 39), (' Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32), ('other income', 27)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('finance income', 50), ('Finance income', 50), (' Finance income and costs', 44), (' Finance income and finance costs', 42), ('other income', 40), (' Interest revenue', 36), (' Net finance costs', 36)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [(' Finance income and costs', 45), (' Finance income and finance costs', 41), ('other income', 39), (' Net finance costs', 37), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 27)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 8, 9], 'score': 85, 'value': 9.3, 'line_item_label': ['Other income', 'Finance income', 'Finance costs'], 'note_numbers': [], 'line_item_value': [0.0, 4.6, 4.7]}
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Lease liabilities interest expense']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 31)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 36), ('finance cost', 29), ('finance costs', 29)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [(' net finance costs ', 37), (' finance expenses', 31), ('finance cost', 29), ('finance costs', 29)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -14558.0, 'line_item_label': ['Finance costs'], 'note_numbers': [], 'line_item_value': [-14558.0]}
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 31)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 36), ('finance cost', 29), ('finance costs', 29)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [(' net finance costs ', 37), (' finance expenses', 31), ('finance cost', 29), ('finance costs', 29)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': 4.7, 'line_item_label': ['Finance costs'], 'note_numbers': [], 'line_item_value': [4.7]}
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 31)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 36), ('finance cost', 29), ('finance costs', 29)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [(' net finance costs ', 37), (' finance expenses', 31), ('finance cost', 29), ('finance costs', 29)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -14558.0, 'line_item_label': ['Finance costs'], 'note_numbers': [], 'line_item_value': [-14558.0]}
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 31)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 36), ('finance cost', 29), ('finance costs', 29)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [(' net finance costs ', 37), (' finance expenses', 31), ('finance cost', 29), ('finance costs', 29)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': 4.7, 'line_item_label': ['Finance costs'], 'note_numbers': [], 'line_item_value': [4.7]}
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [('NULL', 25)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('NULL', 7)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('NULL', 7)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [('NULL', 25)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('NULL', 7)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [('NULL', 7)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-27 11:41:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-27 11:41:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [(' income tax', 46), (' income tax expense', 30), ('prior year ', 29), (' income tax benefit', 29), ('current tax', 27), (' tax (expense)/benefit', 27), (' income tax benefit/(expense)', 21), ('amount transferred to retained earnings', 19), ('provision for taxation previous year', 18), ('minimum alternate tax credit entitlement', 17), ('deferred tax', 15), ('earlier year', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('minimum alternate tax credit entitlement', 38), ('current tax', 37), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), (' income tax expense', 29), (' income tax', 29), ('prior year ', 24), ('deferred tax', 20), ('earlier year', 18)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('amount transferred to retained earnings', 53), (' tax (expense)/benefit', 45), (' income tax benefit/(expense)', 40), ('earlier year', 37), ('provision for taxation previous year', 36), ('minimum alternate tax credit entitlement', 34), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('prior year ', 28), (' income tax benefit', 28), ('current tax', 27)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' income tax benefit/(expense)', 100), (' tax (expense)/benefit', 86), (' income tax benefit', 83), (' income tax expense', 80), ('minimum alternate tax credit entitlement', 57), (' income tax', 55), ('amount transferred to retained earnings', 43), ('deferred tax', 42), ('current tax', 40), ('provision for taxation previous year', 38), ('prior year ', 29), ('earlier year', 28)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [(' income tax expense', 46), (' income tax benefit/(expense)', 46), ('minimum alternate tax credit entitlement', 42), (' income tax benefit', 42), ('provision for taxation previous year', 41), ('amount transferred to retained earnings', 36), (' income tax', 33), ('current tax', 32), (' tax (expense)/benefit', 32), ('prior year ', 29), ('deferred tax', 26), ('earlier year', 25)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': 1016697.0, 'line_item_label': ['Income tax benefit/(expense)'], 'note_numbers': [], 'line_item_value': [1016697.0]}
2023-07-27 11:41:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-27 11:41:32+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = notes , res_fuzz_match = [(' income tax', 46), (' income tax expense', 30), ('prior year ', 29), (' income tax benefit', 29), ('current tax', 27), (' tax (expense)/benefit', 27), (' income tax benefit/(expense)', 21), ('amount transferred to retained earnings', 19), ('provision for taxation previous year', 18), ('minimum alternate tax credit entitlement', 17), ('deferred tax', 15), ('earlier year', 12)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('minimum alternate tax credit entitlement', 38), ('current tax', 37), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), (' income tax expense', 29), (' income tax', 29), ('prior year ', 24), ('deferred tax', 20), ('earlier year', 18)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('amount transferred to retained earnings', 53), (' tax (expense)/benefit', 45), (' income tax benefit/(expense)', 40), ('earlier year', 37), ('provision for taxation previous year', 36), ('minimum alternate tax credit entitlement', 34), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('prior year ', 28), (' income tax benefit', 28), ('current tax', 27)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax benefit/(expense) , res_fuzz_match = [(' income tax benefit/(expense)', 100), (' tax (expense)/benefit', 86), (' income tax benefit', 83), (' income tax expense', 80), ('minimum alternate tax credit entitlement', 57), (' income tax', 55), ('amount transferred to retained earnings', 43), ('deferred tax', 42), ('current tax', 40), ('provision for taxation previous year', 38), ('prior year ', 29), ('earlier year', 28)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - txt_particular = income tax relating to component of other comprehensive income , res_fuzz_match = [(' income tax expense', 46), (' income tax benefit/(expense)', 46), ('minimum alternate tax credit entitlement', 42), (' income tax benefit', 42), ('provision for taxation previous year', 41), ('amount transferred to retained earnings', 36), (' income tax', 33), ('current tax', 32), (' tax (expense)/benefit', 32), ('prior year ', 29), ('deferred tax', 26), ('earlier year', 25)]
2023-07-27 11:41:32+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': 5.0, 'line_item_label': ['Income tax benefit/(expense)'], 'note_numbers': [], 'line_item_value': [5.0]}
2023-07-27 11:42:31+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-07-27 11:42:31+0530 - sLogger - DEBUG - process_main_pages started
2023-07-27 11:42:31+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-27 11:42:31+0530 - sLogger - DEBUG - start_refactoring started
2023-07-27 11:42:31+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-27 11:42:31+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-27 11:42:31+0530 - sLogger - DEBUG - start_refactoring started
2023-07-27 11:42:31+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-27 11:42:31+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-27 11:42:31+0530 - sLogger - DEBUG - start_refactoring started
2023-07-27 11:42:31+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-27 11:42:31+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-27 11:42:31+0530 - sLogger - DEBUG - start_refactoring started
2023-07-27 11:42:31+0530 - sLogger - DEBUG - start_refactoring completed

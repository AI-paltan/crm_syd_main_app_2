2023-07-28 13:04:23+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-07-28 13:04:23+0530 - sLogger - DEBUG - {'fileid': '8616f50d-18c4-44a8-9636-5f3545e8ffd8', 'filename': 'Suzuki FY23 - Financial Statement - signed 080523.pdf', 'filepath': '/home/jayesh/mgs_ai/crm_syd_1/CRM_SYD_main_app_2/classification/../FILE_DB/FILES/Suzuki FY23 - Financial Statement - signed 080523.pdf', 'status': 'Processing'}
2023-07-28 13:04:23+0530 - sLogger - DEBUG - save file completed
2023-07-28 13:04:23+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-07-28 13:04:23+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-07-28 13:04:23+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-07-28 13:04:23+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-07-28 13:04:23+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-07-28 13:04:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:04:23+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:04:25+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:04:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:04:25+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:04:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:04:25+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:04:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:04:25+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:04:31+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:04:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:04:31+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:04:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:04:31+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:04:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:04:31+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:04:37+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:04:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:04:37+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:04:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:04:37+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:04:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:04:37+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:04:40+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:04:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:04:40+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:04:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:04:40+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:04:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:04:40+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:04:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:04:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:04:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:04:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:04:43+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:04:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:04:43+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:04:46+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:04:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:04:46+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:04:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:04:46+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:04:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:04:46+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:04:50+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:04:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:04:50+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:04:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:04:50+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:04:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:04:50+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:04:52+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:04:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:04:52+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:04:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:04:52+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:04:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:04:52+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:04:56+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:04:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:04:56+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:04:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:04:56+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:04:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:04:56+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:05:02+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:05:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:05:02+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:05:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:05:02+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:05:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:05:02+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:05:08+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:05:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:05:08+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:05:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:05:08+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:05:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:05:09+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:05:14+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:05:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:05:14+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:05:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:05:14+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:05:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:05:14+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:05:21+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:05:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:05:21+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:05:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:05:21+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:05:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:05:21+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:05:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:05:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:05:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:05:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:05:27+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:05:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:05:27+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:05:31+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:05:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:05:31+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:05:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:05:31+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:05:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:05:32+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:05:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:05:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:05:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:05:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:05:35+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:05:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:05:35+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:05:37+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:05:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:05:37+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:05:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:05:37+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:05:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:05:37+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:05:42+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:05:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:05:42+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:05:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:05:42+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:05:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:05:42+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:05:46+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:05:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:05:46+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:05:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:05:46+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:05:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:05:46+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:05:52+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:05:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:05:52+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:05:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:05:52+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:05:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:05:52+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:05:56+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:05:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:05:56+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:05:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:05:56+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:05:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:05:56+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:06:00+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:06:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:06:00+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:06:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:06:00+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:06:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:06:00+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:06:06+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:06:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:06:06+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:06:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:06:06+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:06:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:06:06+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:06:10+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:06:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:06:10+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:06:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:06:10+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:06:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:06:10+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:06:14+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:06:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:06:14+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:06:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:06:14+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:06:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:06:14+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:06:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:06:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:06:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:06:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:06:19+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:06:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:06:19+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:06:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:06:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:06:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:06:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:06:23+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:06:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:06:23+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:06:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:06:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:06:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:06:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:06:26+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:06:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:06:26+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:06:32+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:06:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:06:32+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:06:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:06:32+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:06:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 13:06:32+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 13:06:39+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 13:06:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 13:06:39+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 13:06:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 13:06:39+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 13:06:39+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-07-28 13:06:39+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [6], 'predicted_cpl_pages': [5, 15, 16], 'predicted_ccf_pages': [8, 23], 'filtered_cbs_pages': [6], 'filtered_cpl_pages': [5], 'filtered_ccf_pages': [8], 'month': 'march', 'status': 'Page Classification Completed'}
2023-07-28 13:06:39+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-07-28 13:06:39+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-07-28 13:06:39+0530 - sLogger - DEBUG - process file completed
2023-07-28 13:06:39+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-07-28 13:09:12+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-07-28 13:09:12+0530 - sLogger - DEBUG - TE process file started
2023-07-28 13:14:02+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-07-28 13:14:02+0530 - sLogger - DEBUG - TE process file started
2023-07-28 13:19:26+0530 - sLogger - DEBUG - TE Proces file completed
2023-07-28 13:19:40+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-07-28 13:19:40+0530 - sLogger - DEBUG - process_main_pages started
2023-07-28 13:19:40+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-28 13:19:40+0530 - sLogger - DEBUG - start_refactoring started
2023-07-28 13:19:40+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-28 13:19:40+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-28 13:19:40+0530 - sLogger - DEBUG - start_refactoring started
2023-07-28 13:19:40+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-28 13:19:40+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-28 13:19:40+0530 - sLogger - DEBUG - start_refactoring started
2023-07-28 13:19:40+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-28 13:19:40+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-07-28 13:19:40+0530 - sLogger - DEBUG - set_section_details started
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('current assets', 56), ('noncurrent assets', 56), ('equity', 36), ('equity and liabilities', 27), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 31
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 28
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 47), ('assets', 31), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('current liabilities', 17), ('liabilities', 7), ('noncurrent liabilities', 6)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 29
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 36
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 33
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 46
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Trade and other receivables | [('equity and liabilities', 41), ('current assets', 34), ('current liabilities', 28), ('noncurrent assets', 23), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('liabilities', 14), ('noncurrent liabilities', 11)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 39
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 35
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 34
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Inventories | [('noncurrent assets', 36), ('current liabilities', 35), ('assets', 29), ('current assets', 27), ('liabilities', 27), ('equity', 27), ('equity and liabilities', 23), ('equity liabilities', 18), ('noncurrent liabilities', 17)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 32
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 40
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 40
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 45
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Income tax receivables | [('current liabilities', 33), ('current assets', 28), ('equity liabilities', 28), ('equity', 27), ('noncurrent liabilities', 27), ('noncurrent assets', 21), ('liabilities', 18), ('assets', 10), ('equity and liabilities', 6)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Income tax receivables | MATCH WORD current assets | score 37
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Income tax receivables | MATCH WORD current liabilities | score 44
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Income tax receivables | MATCH WORD noncurrent assets | score 31
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Income tax receivables | MATCH WORD noncurrent liabilities | score 45
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Income tax receivables | MATCH WORD non current assets | score 35
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Income tax receivables | MATCH WORD non current liabilities | score 49
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Income tax receivables | MATCH WORD equity and liabilities | score 39
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Income tax receivables | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 55), ('assets', 42), ('noncurrent liabilities', 36), ('equity liabilities', 31), ('equity and liabilities', 28), ('equity', 24), ('liabilities', 8)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 29
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Noncurrent assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('current liabilities', 30), ('equity', 21), ('equity and liabilities', 20), ('equity liabilities', 15), ('liabilities', 11)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current assets | score 90
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current liabilities | score 61
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent assets | score 100
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent liabilities | score 72
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current assets | score 97
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current liabilities | score 70
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity | score 31
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Propertyplant  equipment | [('equity', 45), ('equity liabilities', 41), ('equity and liabilities', 36), ('current liabilities', 33), ('assets', 19), ('current assets', 14), ('noncurrent assets', 14), ('liabilities', 9), ('noncurrent liabilities', 7)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Propertyplant  equipment | MATCH WORD current assets | score 34
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Propertyplant  equipment | MATCH WORD current liabilities | score 36
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Propertyplant  equipment | MATCH WORD noncurrent assets | score 24
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Propertyplant  equipment | MATCH WORD noncurrent liabilities | score 22
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Propertyplant  equipment | MATCH WORD non current assets | score 32
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Propertyplant  equipment | MATCH WORD non current liabilities | score 33
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Propertyplant  equipment | MATCH WORD equity and liabilities | score 38
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Propertyplant  equipment | MATCH WORD equity | score 60
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Rightofuseassets | [('assets', 50), ('current assets', 36), ('noncurrent assets', 36), ('current liabilities', 21), ('liabilities', 19), ('equity', 19), ('equity and liabilities', 19), ('noncurrent liabilities', 14), ('equity liabilities', 14)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Rightofuseassets | MATCH WORD current assets | score 53
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Rightofuseassets | MATCH WORD current liabilities | score 23
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Rightofuseassets | MATCH WORD noncurrent assets | score 55
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Rightofuseassets | MATCH WORD noncurrent liabilities | score 26
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Rightofuseassets | MATCH WORD non current assets | score 53
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Rightofuseassets | MATCH WORD non current liabilities | score 26
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Rightofuseassets | MATCH WORD equity and liabilities | score 20
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Rightofuseassets | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 21), ('equity', 19), ('liabilities', 10)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 29
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 36), ('equity and liabilities', 28), ('equity liabilities', 25), ('equity', 24), ('liabilities', 8)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 27
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('equity liabilities', 33), ('current liabilities', 32), ('equity and liabilities', 29), ('equity', 24), ('liabilities', 12), ('noncurrent liabilities', 8)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 22
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 40
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Current liabilities | [('current liabilities', 100), ('equity liabilities', 67), ('liabilities', 60), ('equity and liabilities', 58), ('current assets', 52), ('noncurrent liabilities', 43), ('noncurrent assets', 30), ('equity', 30), ('assets', 11)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current assets | score 64
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current liabilities | score 100
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent assets | score 56
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent liabilities | score 93
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current assets | score 54
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current liabilities | score 95
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity and liabilities | score 69
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current assets', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('noncurrent assets', 23), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 39
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 37
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 28
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 39
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 28
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 34
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Employee benefits | [('equity liabilities', 36), ('current liabilities', 34), ('current assets', 29), ('noncurrent assets', 29), ('equity', 29), ('equity and liabilities', 25), ('assets', 20), ('noncurrent liabilities', 14), ('liabilities', 10)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 28
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 34
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 25
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 22
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 26
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 36
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 22
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Contract Liabilities | [('current liabilities', 69), ('liabilities', 57), ('equity liabilities', 57), ('equity and liabilities', 56), ('noncurrent liabilities', 41), ('current assets', 21), ('noncurrent assets', 21), ('assets', 20), ('equity', 19)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Contract Liabilities | MATCH WORD current assets | score 35
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Contract Liabilities | MATCH WORD current liabilities | score 77
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Contract Liabilities | MATCH WORD noncurrent assets | score 38
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Contract Liabilities | MATCH WORD noncurrent liabilities | score 76
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Contract Liabilities | MATCH WORD non current assets | score 37
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Contract Liabilities | MATCH WORD non current liabilities | score 74
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Contract Liabilities | MATCH WORD equity and liabilities | score 67
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Contract Liabilities | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Lease Liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD current assets | score 26
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD current liabilities | score 75
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrent assets | score 24
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrent liabilities | score 75
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD non current assets | score 23
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD non current liabilities | score 75
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equity and liabilities | score 75
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Income tax payables | [('liabilities', 36), ('equity liabilities', 34), ('current liabilities', 33), ('noncurrent liabilities', 33), ('equity and liabilities', 24), ('assets', 19), ('equity', 18), ('current assets', 14), ('noncurrent assets', 14)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Income tax payables | MATCH WORD current assets | score 36
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Income tax payables | MATCH WORD current liabilities | score 47
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Income tax payables | MATCH WORD noncurrent assets | score 39
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Income tax payables | MATCH WORD noncurrent liabilities | score 49
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Income tax payables | MATCH WORD non current assets | score 27
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Income tax payables | MATCH WORD non current liabilities | score 48
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Income tax payables | MATCH WORD equity and liabilities | score 39
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Income tax payables | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Total currentliabilities | [('current liabilities', 76), ('current assets', 50), ('liabilities', 38), ('equity liabilities', 36), ('equity and liabilities', 31), ('noncurrent assets', 29), ('equity', 29), ('noncurrent liabilities', 28), ('assets', 10)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total currentliabilities | MATCH WORD current assets | score 51
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total currentliabilities | MATCH WORD current liabilities | score 84
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total currentliabilities | MATCH WORD noncurrent assets | score 49
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total currentliabilities | MATCH WORD noncurrent liabilities | score 83
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total currentliabilities | MATCH WORD non current assets | score 52
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total currentliabilities | MATCH WORD non current liabilities | score 85
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total currentliabilities | MATCH WORD equity and liabilities | score 57
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total currentliabilities | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Noncurrent liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('assets', 11), ('equity', 10)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current assets | score 61
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current liabilities | score 93
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent assets | score 70
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent liabilities | score 100
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current assets | score 65
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current liabilities | score 98
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity and liabilities | score 65
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 22
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 26
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 36
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 22
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Contract Liabilities | [('current liabilities', 69), ('liabilities', 57), ('equity liabilities', 57), ('equity and liabilities', 56), ('noncurrent liabilities', 41), ('current assets', 21), ('noncurrent assets', 21), ('assets', 20), ('equity', 19)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Contract Liabilities | MATCH WORD current assets | score 35
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Contract Liabilities | MATCH WORD current liabilities | score 77
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Contract Liabilities | MATCH WORD noncurrent assets | score 38
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Contract Liabilities | MATCH WORD noncurrent liabilities | score 76
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Contract Liabilities | MATCH WORD non current assets | score 37
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Contract Liabilities | MATCH WORD non current liabilities | score 74
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Contract Liabilities | MATCH WORD equity and liabilities | score 67
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Contract Liabilities | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Lease Liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD current assets | score 26
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD current liabilities | score 75
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrent assets | score 24
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrent liabilities | score 75
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD non current assets | score 23
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD non current liabilities | score 75
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equity and liabilities | score 75
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Deferred tax liabilities | [('liabilities', 55), ('equity and liabilities', 55), ('equity liabilities', 55), ('current liabilities', 53), ('noncurrent liabilities', 47), ('equity', 27), ('assets', 19), ('current assets', 14), ('noncurrent assets', 14)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD current assets | score 39
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD current liabilities | score 74
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrent assets | score 34
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrent liabilities | score 70
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD non current assets | score 33
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD non current liabilities | score 68
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equity and liabilities | score 65
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Employee benefits | [('equity liabilities', 36), ('current liabilities', 34), ('current assets', 29), ('noncurrent assets', 29), ('equity', 29), ('equity and liabilities', 25), ('assets', 20), ('noncurrent liabilities', 14), ('liabilities', 10)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 28
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 34
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 25
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Total noncurrentlabilities | [('current liabilities', 58), ('current assets', 47), ('noncurrent assets', 47), ('noncurrent liabilities', 45), ('equity liabilities', 27), ('liabilities', 26), ('equity', 17), ('equity and liabilities', 12), ('assets', 9)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total noncurrentlabilities | MATCH WORD current assets | score 58
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total noncurrentlabilities | MATCH WORD current liabilities | score 76
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total noncurrentlabilities | MATCH WORD noncurrent assets | score 64
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total noncurrentlabilities | MATCH WORD noncurrent liabilities | score 83
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total noncurrentlabilities | MATCH WORD non current assets | score 55
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total noncurrentlabilities | MATCH WORD non current liabilities | score 82
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total noncurrentlabilities | MATCH WORD equity and liabilities | score 51
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total noncurrentlabilities | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 22)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 33
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 32
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('equity and liabilities', 31), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('liabilities', 13)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equity liabilities', 63), ('equity and liabilities', 52), ('assets', 36), ('liabilities', 33), ('current liabilities', 30), ('current assets', 21), ('noncurrent assets', 21), ('noncurrent liabilities', 20)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 31
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 31
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('current assets', 35), ('noncurrent assets', 35), ('current liabilities', 33), ('equity and liabilities', 30), ('equity liabilities', 26), ('liabilities', 25), ('noncurrent liabilities', 25)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 29
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 34
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 26
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 25
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 27
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Retained profits | [('liabilities', 32), ('equity', 32), ('current liabilities', 30), ('noncurrent liabilities', 30), ('current assets', 23), ('noncurrent assets', 23), ('equity liabilities', 23), ('assets', 22), ('equity and liabilities', 20)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD current assets | score 40
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD current liabilities | score 40
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrent assets | score 36
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrent liabilities | score 37
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD non current assets | score 35
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD non current liabilities | score 36
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD equity and liabilities | score 25
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD equity | score 30
2023-07-28 13:19:40+0530 - sLogger - DEBUG - Total equity | [('equity', 67), ('equity liabilities', 64), ('equity and liabilities', 55), ('current liabilities', 31), ('assets', 12), ('liabilities', 11), ('current assets', 8), ('noncurrent assets', 8), ('noncurrent liabilities', 8)]
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 15
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 21
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 32
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-07-28 13:19:40+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-07-28 13:19:40+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-07-28 13:19:40+0530 - sLogger - DEBUG - set_section_details started
2023-07-28 13:19:40+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from operating activities | operating cash flow before working capital changes
2023-07-28 13:19:40+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash receipts from customers | adiustments for movements in working capital
2023-07-28 13:19:40+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash payments to suppliers and employees | changes in operating assets and liabilities
2023-07-28 13:19:40+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid | working capital adjustments
2023-07-28 13:19:40+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax paid | changes in working capital
2023-07-28 13:19:40+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash inflow/(outflow) from operatingactivities | operating cash flow before working capital changes
2023-07-28 13:19:40+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from investing activities | operating cash flow before working capital changes
2023-07-28 13:19:40+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from sale of property, plant and equipment | changes in operating assets and liabilities
2023-07-28 13:19:40+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | adiustments for movements in working capital
2023-07-28 13:19:40+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Acquisition of property, plant and equipment | adiustments for movements in working capital
2023-07-28 13:19:40+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash (outflow/inflow from investingactivities | operating cash flow before working capital changes
2023-07-28 13:19:40+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from financingactivities | operating cash flow before working capital changes
2023-07-28 13:19:40+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of Dividend | adiustments for movements in working capital
2023-07-28 13:19:40+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment oflease liability | changes in operating assets and liabilities
2023-07-28 13:19:40+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash outflow from financing activities | operating cash flow before working capital changes
2023-07-28 13:19:40+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net (Decrease)/increase in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-07-28 13:19:40+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at 1 April | operating cash flow before working capital changes
2023-07-28 13:19:40+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at 31 March | adjustments for increase decrease in operating liabilities
2023-07-28 13:19:43+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-07-28 13:19:43+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-07-28 13:19:43+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-07-28 13:19:43+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-28 13:19:43+0530 - sLogger - ERROR - error occured: 'value'
2023-07-28 13:19:43+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-28 13:19:43+0530 - sLogger - ERROR - error occured: 'year'
2023-07-28 13:19:43+0530 - sLogger - DEBUG - process_main_pages completed
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:51+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-28 13:19:51+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:51+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-28 13:19:51+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:51+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-28 13:19:51+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:51+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('other bank balances', 18), ('cash and bank balances', 16), ('bank balances other than above', 12)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and short term deposits', 54), ('cash and bank balances', 39), ('bank balances other than above', 17), ('other bank balances', 11)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('bank balances other than above', 45), ('cash and cash equivalents', 42), (' cash and cash equivalents', 42), ('other bank balances', 41), ('bank balances other than cash and cash equivalents', 36), ('cash and short term deposits', 33), ('cash and bank balances', 24)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('cash and bank balances', 14), ('bank balances other than cash and cash equivalents', 11), ('bank balances other than above', 11)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('cash and cash equivalents', 38), (' cash and cash equivalents', 38), ('bank balances other than cash and cash equivalents', 33), ('cash and short term deposits', 33), ('other bank balances', 24), ('cash and bank balances', 22), ('bank balances other than above', 19)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 26925.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['19(a)'], 'line_item_value': [26925.0]}
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:51+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('other bank balances', 18), ('cash and bank balances', 16), ('bank balances other than above', 12)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and short term deposits', 54), ('cash and bank balances', 39), ('bank balances other than above', 17), ('other bank balances', 11)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('bank balances other than above', 45), ('cash and cash equivalents', 42), (' cash and cash equivalents', 42), ('other bank balances', 41), ('bank balances other than cash and cash equivalents', 36), ('cash and short term deposits', 33), ('cash and bank balances', 24)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('cash and bank balances', 14), ('bank balances other than cash and cash equivalents', 11), ('bank balances other than above', 11)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('cash and cash equivalents', 38), (' cash and cash equivalents', 38), ('bank balances other than cash and cash equivalents', 33), ('cash and short term deposits', 33), ('other bank balances', 24), ('cash and bank balances', 22), ('bank balances other than above', 19)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 13478.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['19(a)'], 'line_item_value': [13478.0]}
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:51+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:51+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-28 13:19:51+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:51+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-28 13:19:51+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:51+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-28 13:19:51+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:51+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 31)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 36)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('inventories', 33)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 118675.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [118675.0]}
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:51+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 31)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 36)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('inventories', 33)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 116252.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [116252.0]}
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:51+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:51+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-28 13:19:51+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:51+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-28 13:19:51+0530 - sLogger - DEBUG - list_target_keywords = ['prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:51+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-28 13:19:51+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:51+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other financial assets', 30), ('other current financial assets', 29), ('other current assets', 25), ('other assets', 25), ('prepayments', 15)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current assets', 39), ('other financial assets', 39), ('other current financial assets', 33), ('prepayments', 21)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 29), ('other current financial assets', 22), ('prepayments', 13)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('prepayments', 27), ('other current assets', 23), ('other current financial assets', 23), ('other financial assets', 17), ('other assets', 7)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:51+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other financial assets', 30), ('other current financial assets', 29), ('other current assets', 25), ('other assets', 25), ('prepayments', 15)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current assets', 39), ('other financial assets', 39), ('other current financial assets', 33), ('prepayments', 21)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 29), ('other current financial assets', 22), ('prepayments', 13)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('prepayments', 27), ('other current assets', 23), ('other current financial assets', 23), ('other financial assets', 17), ('other assets', 7)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:51+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:51+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-28 13:19:51+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:51+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-28 13:19:51+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:51+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-28 13:19:51+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:51+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' deferred operating expenditure', 15), (' trade and other receivables', 15), (' income tax receivable from related parties', 11)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 42), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), (' other financial assets', 30), ('other current assets', 25), ('other assets', 25), (' other current assets', 25), (' deferred operating expenditure', 19)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets', 42), (' income tax receivable from related parties', 40), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' deferred operating expenditure', 37), (' financial assets', 23), (' biological assets', 18)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' biological assets', 29), (' other financial assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24), (' deferred operating expenditure', 20)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [(' income tax receivable from related parties', 65), (' trade and other receivables', 63), ('other current assets', 23), (' other current assets', 23), (' deferred operating expenditure', 22), (' financial assets', 21), (' other financial assets', 17), ('other assets', 7), (' biological assets', 7)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 7002.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['8'], 'line_item_value': [7002.0]}
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:51+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' deferred operating expenditure', 15), (' trade and other receivables', 15), (' income tax receivable from related parties', 11)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 42), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), (' other financial assets', 30), ('other current assets', 25), ('other assets', 25), (' other current assets', 25), (' deferred operating expenditure', 19)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets', 42), (' income tax receivable from related parties', 40), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' deferred operating expenditure', 37), (' financial assets', 23), (' biological assets', 18)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' biological assets', 29), (' other financial assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24), (' deferred operating expenditure', 20)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [(' income tax receivable from related parties', 65), (' trade and other receivables', 63), ('other current assets', 23), (' other current assets', 23), (' deferred operating expenditure', 22), (' financial assets', 21), (' other financial assets', 17), ('other assets', 7), (' biological assets', 7)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 7183.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['8'], 'line_item_value': [7183.0]}
2023-07-28 13:19:51+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:51+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_rows = current gross trade receivables , res_fuzz_match = [('current', 100), (' current investments', 64), (' interest receivable', 62), (' rental bond', 55), (' related party receivable', 51), (' long service leave receivable', 50), (' other receivables - related party', 50), (' income tax receivable from related parties', 46), (' other deposits receivable - related party', 46), (' accrued interest', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 42), (' other debtors and prepayments', 41), (' other', 40), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' amount receivable from controlling entity', 38), (' bank guarantee', 38), (' accrued rebates', 38), ('other assets', 36), (' electricity derivatives at fair value', 36), (' share of jv prepayments', 33), (' lng', 33), (' foreign exchange forward contracts', 33), (' deposits', 29), (' forward exchange contracts', 29)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:51+0530 - sLogger - DEBUG - txt_rows = current loss allowance , res_fuzz_match = [('current', 100), (' current investments', 64), (' rental bond', 45), (' accrued rebates', 45), (' condensate', 43), (' electricity derivatives at fair value', 39), (' derivative contracts - fair value', 39), (' accrued interest', 36), (' income tax receivable from related parties', 34), (' other receivables - related party', 34), (' other deposits receivable - related party', 34), (' related party disclosures', 33), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31), ('other assets', 30), (' related party receivable', 30), ('foreign exchange derivatives at fair value', 29), (' deposits', 29), (' amount receivable from controlling entity', 29), (' interest receivable', 28), (' foreign exchange forward contracts', 28), (' forward exchange contracts', 28), (' other debtors and prepayments', 24), (' other', 20), (' long service leave receivable', 19)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = current amount receivable from parent entity suzuki motor corporation , res_fuzz_match = [('current', 100), (' amount receivable from controlling entity', 85), (' related party receivable', 72), (' current investments', 71), (' other receivables - related party', 67), (' income tax receivable from related parties', 64), (' rental bond', 64), (' other', 60), (' interest receivable', 60), (' other deposits receivable - related party', 53), (' related party disclosures', 48), (' bank guarantee', 46), (' electricity derivatives at fair value', 45), (' accrued rebates', 45), ('foreign exchange derivatives at fair value', 42), (' share of jv prepayments', 42), (' long service leave receivable', 39), (' other debtors and prepayments', 39), (' derivative contracts - fair value', 38), (' forward exchange contracts', 38), ('other assets', 36), (' accrued interest', 36), (' deposits', 33), (' lng', 33), (' condensate', 31), (' foreign exchange forward contracts', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = current other receivables and prepayments , res_fuzz_match = [('current', 100), (' other', 100), (' other debtors and prepayments', 78), (' interest receivable', 73), (' other receivables - related party', 72), (' related party receivable', 67), (' share of jv prepayments', 67), ('other assets', 64), (' current investments', 64), (' other deposits receivable - related party', 55), (' rental bond', 55), (' electricity derivatives at fair value', 47), (' income tax receivable from related parties', 45), (' amount receivable from controlling entity', 45), (' accrued rebates', 45), ('foreign exchange derivatives at fair value', 43), (' accrued interest', 43), (' long service leave receivable', 43), (' deposits', 43), (' condensate', 43), (' derivative contracts - fair value', 36), (' bank guarantee', 33), (' lng', 33), (' related party disclosures', 29), (' forward exchange contracts', 29), (' foreign exchange forward contracts', 20)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current investments', 62), (' rental bond', 57), (' lng', 50), (' accrued rebates', 45), (' other', 44), (' deposits', 43), (' amount receivable from controlling entity', 43), (' condensate', 43), ('other assets', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' accrued interest', 38), (' income tax receivable from related parties', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' related party receivable', 38), (' foreign exchange forward contracts', 38), (' other debtors and prepayments', 38), (' forward exchange contracts', 36), (' share of jv prepayments', 35), (' related party disclosures', 32), (' interest receivable', 31), (' bank guarantee', 31), (' long service leave receivable', 23)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = current gross trade receivables , res_fuzz_match = [('current', 100), (' current investments', 64), (' interest receivable', 62), (' rental bond', 55), (' related party receivable', 51), (' long service leave receivable', 50), (' other receivables - related party', 50), (' income tax receivable from related parties', 46), (' other deposits receivable - related party', 46), (' accrued interest', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 42), (' other debtors and prepayments', 41), (' other', 40), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' amount receivable from controlling entity', 38), (' bank guarantee', 38), (' accrued rebates', 38), ('other assets', 36), (' electricity derivatives at fair value', 36), (' share of jv prepayments', 33), (' lng', 33), (' foreign exchange forward contracts', 33), (' deposits', 29), (' forward exchange contracts', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = current loss allowance , res_fuzz_match = [('current', 100), (' current investments', 64), (' rental bond', 45), (' accrued rebates', 45), (' condensate', 43), (' electricity derivatives at fair value', 39), (' derivative contracts - fair value', 39), (' accrued interest', 36), (' income tax receivable from related parties', 34), (' other receivables - related party', 34), (' other deposits receivable - related party', 34), (' related party disclosures', 33), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31), ('other assets', 30), (' related party receivable', 30), ('foreign exchange derivatives at fair value', 29), (' deposits', 29), (' amount receivable from controlling entity', 29), (' interest receivable', 28), (' foreign exchange forward contracts', 28), (' forward exchange contracts', 28), (' other debtors and prepayments', 24), (' other', 20), (' long service leave receivable', 19)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = current amount receivable from parent entity suzuki motor corporation , res_fuzz_match = [('current', 100), (' amount receivable from controlling entity', 85), (' related party receivable', 72), (' current investments', 71), (' other receivables - related party', 67), (' income tax receivable from related parties', 64), (' rental bond', 64), (' other', 60), (' interest receivable', 60), (' other deposits receivable - related party', 53), (' related party disclosures', 48), (' bank guarantee', 46), (' electricity derivatives at fair value', 45), (' accrued rebates', 45), ('foreign exchange derivatives at fair value', 42), (' share of jv prepayments', 42), (' long service leave receivable', 39), (' other debtors and prepayments', 39), (' derivative contracts - fair value', 38), (' forward exchange contracts', 38), ('other assets', 36), (' accrued interest', 36), (' deposits', 33), (' lng', 33), (' condensate', 31), (' foreign exchange forward contracts', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = current other receivables and prepayments , res_fuzz_match = [('current', 100), (' other', 100), (' other debtors and prepayments', 78), (' interest receivable', 73), (' other receivables - related party', 72), (' related party receivable', 67), (' share of jv prepayments', 67), ('other assets', 64), (' current investments', 64), (' other deposits receivable - related party', 55), (' rental bond', 55), (' electricity derivatives at fair value', 47), (' income tax receivable from related parties', 45), (' amount receivable from controlling entity', 45), (' accrued rebates', 45), ('foreign exchange derivatives at fair value', 43), (' accrued interest', 43), (' long service leave receivable', 43), (' deposits', 43), (' condensate', 43), (' derivative contracts - fair value', 36), (' bank guarantee', 33), (' lng', 33), (' related party disclosures', 29), (' forward exchange contracts', 29), (' foreign exchange forward contracts', 20)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current investments', 62), (' rental bond', 57), (' lng', 50), (' accrued rebates', 45), (' other', 44), (' deposits', 43), (' amount receivable from controlling entity', 43), (' condensate', 43), ('other assets', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' accrued interest', 38), (' income tax receivable from related parties', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' related party receivable', 38), (' foreign exchange forward contracts', 38), (' other debtors and prepayments', 38), (' forward exchange contracts', 36), (' share of jv prepayments', 35), (' related party disclosures', 32), (' interest receivable', 31), (' bank guarantee', 31), (' long service leave receivable', 23)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [6409.0, -118.0, 0.0, 892.0, 7183.0, 5876.0, -132.0, 18.0, 1240.0, 7002.0], 'label': ['Current Gross trade receivables', 'Current Loss Allowance', 'Current Amount receivable from parent entity Suzuki Motor Corporation', 'Current Other receivables and prepayments', 'Current Total', 'Current Gross trade receivables', 'Current Loss Allowance', 'Current Amount receivable from parent entity Suzuki Motor Corporation', 'Current Other receivables and prepayments', 'Current Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = freehold land carrying amount at beginning of year , res_fuzz_match = [(' current investments', 50), (' bank guarantee', 46), (' rental bond', 45), (' related party receivable', 44), ('current', 43), (' accrued interest', 43), (' related party disclosures', 43), (' other receivables - related party', 42), (' electricity derivatives at fair value', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' derivative contracts - fair value', 38), (' foreign exchange forward contracts', 38), (' long service leave receivable', 36), (' interest receivable', 36), (' accrued rebates', 36), (' other debtors and prepayments', 35), (' share of jv prepayments', 33), (' lng', 33), (' forward exchange contracts', 33), (' amount receivable from controlling entity', 32), (' other deposits receivable - related party', 31), (' income tax receivable from related parties', 30), (' deposits', 29), (' condensate', 29), ('other assets', 27)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = depreciation carrying amount at the end ofyear , res_fuzz_match = [(' other', 60), (' deposits', 57), ('other assets', 55), (' current investments', 50), (' other debtors and prepayments', 48), ('current', 43), (' accrued interest', 43), (' other receivables - related party', 42), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' amount receivable from controlling entity', 41), (' related party receivable', 39), (' derivative contracts - fair value', 38), (' bank guarantee', 38), (' forward exchange contracts', 38), (' rental bond', 36), (' accrued rebates', 36), (' long service leave receivable', 35), (' other deposits receivable - related party', 35), (' foreign exchange forward contracts', 34), (' income tax receivable from related parties', 33), (' interest receivable', 33), (' lng', 33), ('foreign exchange derivatives at fair value', 29), (' related party disclosures', 29), (' condensate', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = buildings carrying amount at beginning of year , res_fuzz_match = [(' current investments', 50), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' condensate', 43), (' electricity derivatives at fair value', 41), (' amount receivable from controlling entity', 41), (' other', 40), (' related party receivable', 39), (' bank guarantee', 38), (' long service leave receivable', 37), (' interest receivable', 36), (' accrued rebates', 36), (' other debtors and prepayments', 35), (' derivative contracts - fair value', 33), (' share of jv prepayments', 33), (' lng', 33), (' foreign exchange forward contracts', 33), (' forward exchange contracts', 33), (' related party disclosures', 29), (' deposits', 29), ('other assets', 27), ('foreign exchange derivatives at fair value', 27), (' other receivables - related party', 26), (' income tax receivable from related parties', 25), (' other deposits receivable - related party', 25)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = buildings additions , res_fuzz_match = [(' deposits', 43), (' related party disclosures', 36), (' income tax receivable from related parties', 36), (' other receivables - related party', 36), (' amount receivable from controlling entity', 36), (' foreign exchange forward contracts', 36), (' lng', 33), (' bank guarantee', 32), (' other debtors and prepayments', 32), (' accrued interest', 29), (' other', 29), (' related party receivable', 29), ('other assets', 27), (' long service leave receivable', 27), (' other deposits receivable - related party', 27), (' forward exchange contracts', 27), (' accrued rebates', 25), (' share of jv prepayments', 21), (' current investments', 21), (' interest receivable', 18), ('foreign exchange derivatives at fair value', 15), (' electricity derivatives at fair value', 15), (' derivative contracts - fair value', 15), ('current', 14), (' condensate', 14), (' rental bond', 13)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = disposals depreciation , res_fuzz_match = [(' other deposits receivable - related party', 57), (' deposits', 57), (' related party disclosures', 52), (' related party receivable', 52), (' long service leave receivable', 50), (' interest receivable', 50), (' share of jv prepayments', 45), (' income tax receivable from related parties', 43), (' other receivables - related party', 43), (' amount receivable from controlling entity', 43), (' condensate', 43), (' other', 40), ('other assets', 38), ('foreign exchange derivatives at fair value', 36), (' electricity derivatives at fair value', 36), (' other debtors and prepayments', 36), (' accrued interest', 30), ('current', 29), (' derivative contracts - fair value', 29), (' current investments', 29), (' foreign exchange forward contracts', 29), (' accrued rebates', 29), (' rental bond', 27), (' bank guarantee', 24), (' forward exchange contracts', 24), (' lng', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = disposals carrying gamountat the end ofyear , res_fuzz_match = [(' other', 60), (' deposits', 57), (' other debtors and prepayments', 47), (' bank guarantee', 46), ('other assets', 45), ('current', 43), (' accrued interest', 43), (' derivative contracts - fair value', 42), (' forward exchange contracts', 42), (' other receivables - related party', 41), (' interest receivable', 40), (' amount receivable from controlling entity', 39), (' related party receivable', 39), (' long service leave receivable', 36), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), (' other deposits receivable - related party', 35), (' foreign exchange forward contracts', 34), (' related party disclosures', 33), (' share of jv prepayments', 33), (' lng', 33), (' electricity derivatives at fair value', 32), (' condensate', 29), ('foreign exchange derivatives at fair value', 26), (' income tax receivable from related parties', 26)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines carrying amount at beginning of year , res_fuzz_match = [(' lng', 67), (' other', 60), (' current investments', 50), (' forward exchange contracts', 50), (' foreign exchange forward contracts', 47), (' other receivables - related party', 46), ('other assets', 45), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), ('foreign exchange derivatives at fair value', 39), (' related party receivable', 39), (' derivative contracts - fair value', 38), (' bank guarantee', 38), (' long service leave receivable', 37), (' accrued rebates', 36), (' related party disclosures', 33), (' electricity derivatives at fair value', 32), (' amount receivable from controlling entity', 32), (' interest receivable', 32), (' other deposits receivable - related party', 31), (' income tax receivable from related parties', 27)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines additions , res_fuzz_match = [(' lng', 67), (' other', 60), (' foreign exchange forward contracts', 47), (' forward exchange contracts', 47), (' other receivables - related party', 46), ('other assets', 45), (' rental bond', 45), ('current', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), (' related party receivable', 39), (' derivative contracts - fair value', 38), (' accrued interest', 36), (' related party disclosures', 36), (' accrued rebates', 36), (' long service leave receivable', 35), (' amount receivable from controlling entity', 33), (' other deposits receivable - related party', 31), (' bank guarantee', 31), ('foreign exchange derivatives at fair value', 29), (' electricity derivatives at fair value', 27), (' interest receivable', 26), (' income tax receivable from related parties', 20)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines disposals , res_fuzz_match = [(' lng', 67), (' other', 60), (' deposits', 57), (' related party disclosures', 50), (' forward exchange contracts', 47), (' other receivables - related party', 46), ('other assets', 45), (' rental bond', 45), (' foreign exchange forward contracts', 44), ('current', 43), (' accrued interest', 43), (' current investments', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' related party receivable', 39), (' derivative contracts - fair value', 38), (' accrued rebates', 36), (' long service leave receivable', 35), (' amount receivable from controlling entity', 33), (' share of jv prepayments', 33), (' other deposits receivable - related party', 31), (' bank guarantee', 31), ('foreign exchange derivatives at fair value', 29), (' electricity derivatives at fair value', 27), (' interest receivable', 25), (' income tax receivable from related parties', 14)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines depreciation , res_fuzz_match = [(' lng', 67), (' other', 60), (' deposits', 57), (' interest receivable', 56), (' accrued interest', 50), (' forward exchange contracts', 48), (' related party receivable', 47), (' long service leave receivable', 46), (' other receivables - related party', 46), ('other assets', 45), (' foreign exchange forward contracts', 44), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' current investments', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), (' other deposits receivable - related party', 40), (' derivative contracts - fair value', 38), (' accrued rebates', 36), (' electricity derivatives at fair value', 34), (' income tax receivable from related parties', 33), (' amount receivable from controlling entity', 33), (' bank guarantee', 31), (' rental bond', 27), (' related party disclosures', 24)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines carrying amo ount at end ofyear , res_fuzz_match = [(' lng', 67), (' other', 60), (' forward exchange contracts', 50), (' foreign exchange forward contracts', 47), (' other receivables - related party', 46), ('other assets', 45), (' rental bond', 45), ('current', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), (' long service leave receivable', 41), ('foreign exchange derivatives at fair value', 39), (' related party receivable', 39), (' derivative contracts - fair value', 38), (' accrued interest', 36), (' accrued rebates', 36), (' other deposits receivable - related party', 35), (' amount receivable from controlling entity', 35), (' related party disclosures', 33), (' income tax receivable from related parties', 33), (' bank guarantee', 31), (' electricity derivatives at fair value', 27), (' interest receivable', 27)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines total carrying amount at end of year , res_fuzz_match = [(' lng', 67), (' other', 60), (' forward exchange contracts', 50), (' foreign exchange forward contracts', 47), (' other receivables - related party', 46), ('other assets', 45), (' rental bond', 45), (' income tax receivable from related parties', 44), ('current', 43), (' accrued interest', 43), (' long service leave receivable', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' other debtors and prepayments', 43), ('foreign exchange derivatives at fair value', 42), (' electricity derivatives at fair value', 41), (' related party receivable', 39), (' related party disclosures', 38), (' amount receivable from controlling entity', 38), (' other deposits receivable - related party', 37), (' accrued rebates', 36), (' derivative contracts - fair value', 33), (' interest receivable', 33), (' share of jv prepayments', 33), (' bank guarantee', 31)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = equipment opening balance at beginning of year , res_fuzz_match = [(' lng', 67), (' rental bond', 55), (' accrued interest', 50), (' bank guarantee', 46), ('foreign exchange derivatives at fair value', 43), (' deposits', 43), (' condensate', 43), (' income tax receivable from related parties', 42), (' other', 40), (' other debtors and prepayments', 39), (' other deposits receivable - related party', 38), (' long service leave receivable', 37), ('other assets', 36), (' interest receivable', 36), (' current investments', 36), (' accrued rebates', 36), (' other receivables - related party', 35), (' derivative contracts - fair value', 33), (' foreign exchange forward contracts', 32), (' related party receivable', 30), ('current', 29), (' related party disclosures', 29), (' amount receivable from controlling entity', 27), (' share of jv prepayments', 25), (' electricity derivatives at fair value', 23), (' forward exchange contracts', 13)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = equipment additions , res_fuzz_match = [(' deposits', 55), (' other receivables - related party', 45), ('other assets', 36), ('foreign exchange derivatives at fair value', 36), (' related party disclosures', 36), (' derivative contracts - fair value', 36), (' long service leave receivable', 36), (' other deposits receivable - related party', 36), (' foreign exchange forward contracts', 36), (' other debtors and prepayments', 36), (' share of jv prepayments', 32), (' forward exchange contracts', 30), (' other', 29), (' current investments', 29), (' income tax receivable from related parties', 27), (' amount receivable from controlling entity', 27), (' related party receivable', 27), (' accrued interest', 25), (' interest receivable', 25), (' accrued rebates', 25), (' electricity derivatives at fair value', 18), (' rental bond', 18), (' bank guarantee', 17), ('current', 14), (' condensate', 14), (' lng', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = equipment revaluation , res_fuzz_match = [('foreign exchange derivatives at fair value', 58), (' electricity derivatives at fair value', 58), (' derivative contracts - fair value', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' related party receivable', 48), (' rental bond', 47), (' accrued rebates', 45), ('current', 43), (' long service leave receivable', 42), (' amount receivable from controlling entity', 42), (' interest receivable', 42), (' foreign exchange forward contracts', 42), (' lng', 40), (' other debtors and prepayments', 36), (' accrued interest', 35), (' income tax receivable from related parties', 33), (' current investments', 33), (' deposits', 29), (' share of jv prepayments', 29), ('other assets', 27), (' forward exchange contracts', 27), (' related party disclosures', 25), (' other', 20), (' bank guarantee', 15), (' condensate', 14)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = equipment depreciation , res_fuzz_match = [(' deposits', 57), (' other deposits receivable - related party', 54), (' related party receivable', 50), (' interest receivable', 48), ('foreign exchange derivatives at fair value', 46), (' electricity derivatives at fair value', 46), (' long service leave receivable', 46), (' other receivables - related party', 46), (' amount receivable from controlling entity', 46), (' share of jv prepayments', 42), (' other', 40), (' related party disclosures', 38), (' income tax receivable from related parties', 38), (' other debtors and prepayments', 38), (' accrued rebates', 36), (' accrued interest', 33), ('other assets', 32), (' derivative contracts - fair value', 31), (' current investments', 31), ('current', 29), (' condensate', 29), (' rental bond', 27), (' bank guarantee', 24), (' foreign exchange forward contracts', 23), (' forward exchange contracts', 23), (' lng', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = equipment carrying am ount at end ofyear , res_fuzz_match = [(' current investments', 50), (' bank guarantee', 46), (' accrued rebates', 45), ('current', 43), (' accrued interest', 43), (' condensate', 43), (' long service leave receivable', 42), (' other', 40), (' amount receivable from controlling entity', 40), (' derivative contracts - fair value', 38), ('foreign exchange derivatives at fair value', 37), (' other debtors and prepayments', 37), ('other assets', 36), (' electricity derivatives at fair value', 36), (' lng', 33), (' forward exchange contracts', 31), (' foreign exchange forward contracts', 30), (' deposits', 29), (' interest receivable', 29), (' related party receivable', 28), (' rental bond', 27), (' income tax receivable from related parties', 26), (' other receivables - related party', 26), (' other deposits receivable - related party', 26), (' related party disclosures', 25), (' share of jv prepayments', 25)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = lease liabilities current , res_fuzz_match = [('current', 100), (' current investments', 67), (' rental bond', 53), (' accrued rebates', 53), (' bank guarantee', 50), (' deposits', 43), (' condensate', 43), (' long service leave receivable', 40), (' foreign exchange forward contracts', 37), (' accrued interest', 36), (' lng', 33), (' forward exchange contracts', 33), (' related party disclosures', 32), (' derivative contracts - fair value', 32), (' other deposits receivable - related party', 32), (' amount receivable from controlling entity', 32), (' other', 29), ('other assets', 27), (' related party receivable', 27), (' other debtors and prepayments', 27), (' electricity derivatives at fair value', 26), (' income tax receivable from related parties', 26), (' other receivables - related party', 26), (' share of jv prepayments', 25), (' interest receivable', 22), ('foreign exchange derivatives at fair value', 16)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = lease liabilities non-current , res_fuzz_match = [('current', 73), (' rental bond', 45), (' current investments', 44), (' deposits', 43), (' other', 40), (' accrued rebates', 38), (' related party disclosures', 37), (' foreign exchange forward contracts', 37), (' long service leave receivable', 33), (' bank guarantee', 33), (' lng', 33), (' forward exchange contracts', 33), (' accrued interest', 32), (' derivative contracts - fair value', 32), (' amount receivable from controlling entity', 32), (' interest receivable', 32), (' other receivables - related party', 29), (' other deposits receivable - related party', 29), (' condensate', 29), ('other assets', 27), (' electricity derivatives at fair value', 26), (' income tax receivable from related parties', 26), (' share of jv prepayments', 25), (' other debtors and prepayments', 21), (' related party receivable', 20), ('foreign exchange derivatives at fair value', 19)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = lease liabilities total , res_fuzz_match = [(' other', 44), (' deposits', 43), ('other assets', 40), (' derivative contracts - fair value', 40), (' accrued interest', 36), (' long service leave receivable', 36), (' rental bond', 36), (' accrued rebates', 36), (' other debtors and prepayments', 35), (' lng', 33), ('foreign exchange derivatives at fair value', 31), (' electricity derivatives at fair value', 31), (' amount receivable from controlling entity', 30), (' related party disclosures', 29), (' foreign exchange forward contracts', 29), (' forward exchange contracts', 29), (' share of jv prepayments', 26), (' income tax receivable from related parties', 24), (' other receivables - related party', 24), (' other deposits receivable - related party', 24), (' interest receivable', 24), (' current investments', 21), (' bank guarantee', 18), (' related party receivable', 18), (' condensate', 17), ('current', 14)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: within one year , res_fuzz_match = [(' other receivables - related party', 50), (' related party receivable', 50), (' other deposits receivable - related party', 47), ('other assets', 45), (' rental bond', 45), (' accrued rebates', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' amount receivable from controlling entity', 42), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' electricity derivatives at fair value', 41), (' other', 40), (' interest receivable', 40), (' long service leave receivable', 39), (' other debtors and prepayments', 39), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' bank guarantee', 38), (' income tax receivable from related parties', 36), (' lng', 33), (' foreign exchange forward contracts', 33), ('foreign exchange derivatives at fair value', 32)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: later than one year but not latert than five years , res_fuzz_match = [(' other', 60), (' other receivables - related party', 50), (' related party receivable', 50), (' other debtors and prepayments', 48), (' other deposits receivable - related party', 47), (' interest receivable', 47), ('other assets', 45), ('foreign exchange derivatives at fair value', 45), (' rental bond', 45), (' accrued rebates', 45), (' foreign exchange forward contracts', 44), ('current', 43), (' accrued interest', 43), (' current investments', 43), (' condensate', 43), (' electricity derivatives at fair value', 42), (' amount receivable from controlling entity', 42), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' income tax receivable from related parties', 39), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' bank guarantee', 38), (' long service leave receivable', 35), (' lng', 33), (' deposits', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = later than five years total , res_fuzz_match = [(' interest receivable', 47), (' other receivables - related party', 46), ('other assets', 45), (' electricity derivatives at fair value', 45), ('foreign exchange derivatives at fair value', 44), (' other', 44), (' related party receivable', 44), (' foreign exchange forward contracts', 44), (' derivative contracts - fair value', 43), (' deposits', 43), (' current investments', 43), (' share of jv prepayments', 42), (' income tax receivable from related parties', 40), (' other deposits receivable - related party', 40), (' forward exchange contracts', 39), (' bank guarantee', 38), (' accrued interest', 36), (' rental bond', 36), (' accrued rebates', 36), (' long service leave receivable', 35), (' amount receivable from controlling entity', 35), (' related party disclosures', 34), (' lng', 33), (' other debtors and prepayments', 30), ('current', 29), (' condensate', 17)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = freehold land carrying amount at beginning of year , res_fuzz_match = [(' current investments', 50), (' bank guarantee', 46), (' rental bond', 45), (' related party receivable', 44), ('current', 43), (' accrued interest', 43), (' related party disclosures', 43), (' other receivables - related party', 42), (' electricity derivatives at fair value', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' derivative contracts - fair value', 38), (' foreign exchange forward contracts', 38), (' long service leave receivable', 36), (' interest receivable', 36), (' accrued rebates', 36), (' other debtors and prepayments', 35), (' share of jv prepayments', 33), (' lng', 33), (' forward exchange contracts', 33), (' amount receivable from controlling entity', 32), (' other deposits receivable - related party', 31), (' income tax receivable from related parties', 30), (' deposits', 29), (' condensate', 29), ('other assets', 27)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = depreciation carrying amount at the end ofyear , res_fuzz_match = [(' other', 60), (' deposits', 57), ('other assets', 55), (' current investments', 50), (' other debtors and prepayments', 48), ('current', 43), (' accrued interest', 43), (' other receivables - related party', 42), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' amount receivable from controlling entity', 41), (' related party receivable', 39), (' derivative contracts - fair value', 38), (' bank guarantee', 38), (' forward exchange contracts', 38), (' rental bond', 36), (' accrued rebates', 36), (' long service leave receivable', 35), (' other deposits receivable - related party', 35), (' foreign exchange forward contracts', 34), (' income tax receivable from related parties', 33), (' interest receivable', 33), (' lng', 33), ('foreign exchange derivatives at fair value', 29), (' related party disclosures', 29), (' condensate', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = buildings carrying amount at beginning of year , res_fuzz_match = [(' current investments', 50), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' condensate', 43), (' electricity derivatives at fair value', 41), (' amount receivable from controlling entity', 41), (' other', 40), (' related party receivable', 39), (' bank guarantee', 38), (' long service leave receivable', 37), (' interest receivable', 36), (' accrued rebates', 36), (' other debtors and prepayments', 35), (' derivative contracts - fair value', 33), (' share of jv prepayments', 33), (' lng', 33), (' foreign exchange forward contracts', 33), (' forward exchange contracts', 33), (' related party disclosures', 29), (' deposits', 29), ('other assets', 27), ('foreign exchange derivatives at fair value', 27), (' other receivables - related party', 26), (' income tax receivable from related parties', 25), (' other deposits receivable - related party', 25)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = buildings additions , res_fuzz_match = [(' deposits', 43), (' related party disclosures', 36), (' income tax receivable from related parties', 36), (' other receivables - related party', 36), (' amount receivable from controlling entity', 36), (' foreign exchange forward contracts', 36), (' lng', 33), (' bank guarantee', 32), (' other debtors and prepayments', 32), (' accrued interest', 29), (' other', 29), (' related party receivable', 29), ('other assets', 27), (' long service leave receivable', 27), (' other deposits receivable - related party', 27), (' forward exchange contracts', 27), (' accrued rebates', 25), (' share of jv prepayments', 21), (' current investments', 21), (' interest receivable', 18), ('foreign exchange derivatives at fair value', 15), (' electricity derivatives at fair value', 15), (' derivative contracts - fair value', 15), ('current', 14), (' condensate', 14), (' rental bond', 13)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = disposals depreciation , res_fuzz_match = [(' other deposits receivable - related party', 57), (' deposits', 57), (' related party disclosures', 52), (' related party receivable', 52), (' long service leave receivable', 50), (' interest receivable', 50), (' share of jv prepayments', 45), (' income tax receivable from related parties', 43), (' other receivables - related party', 43), (' amount receivable from controlling entity', 43), (' condensate', 43), (' other', 40), ('other assets', 38), ('foreign exchange derivatives at fair value', 36), (' electricity derivatives at fair value', 36), (' other debtors and prepayments', 36), (' accrued interest', 30), ('current', 29), (' derivative contracts - fair value', 29), (' current investments', 29), (' foreign exchange forward contracts', 29), (' accrued rebates', 29), (' rental bond', 27), (' bank guarantee', 24), (' forward exchange contracts', 24), (' lng', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = disposals carrying gamountat the end ofyear , res_fuzz_match = [(' other', 60), (' deposits', 57), (' other debtors and prepayments', 47), (' bank guarantee', 46), ('other assets', 45), ('current', 43), (' accrued interest', 43), (' derivative contracts - fair value', 42), (' forward exchange contracts', 42), (' other receivables - related party', 41), (' interest receivable', 40), (' amount receivable from controlling entity', 39), (' related party receivable', 39), (' long service leave receivable', 36), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), (' other deposits receivable - related party', 35), (' foreign exchange forward contracts', 34), (' related party disclosures', 33), (' share of jv prepayments', 33), (' lng', 33), (' electricity derivatives at fair value', 32), (' condensate', 29), ('foreign exchange derivatives at fair value', 26), (' income tax receivable from related parties', 26)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines carrying amount at beginning of year , res_fuzz_match = [(' lng', 67), (' other', 60), (' current investments', 50), (' forward exchange contracts', 50), (' foreign exchange forward contracts', 47), (' other receivables - related party', 46), ('other assets', 45), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), ('foreign exchange derivatives at fair value', 39), (' related party receivable', 39), (' derivative contracts - fair value', 38), (' bank guarantee', 38), (' long service leave receivable', 37), (' accrued rebates', 36), (' related party disclosures', 33), (' electricity derivatives at fair value', 32), (' amount receivable from controlling entity', 32), (' interest receivable', 32), (' other deposits receivable - related party', 31), (' income tax receivable from related parties', 27)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines additions , res_fuzz_match = [(' lng', 67), (' other', 60), (' foreign exchange forward contracts', 47), (' forward exchange contracts', 47), (' other receivables - related party', 46), ('other assets', 45), (' rental bond', 45), ('current', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), (' related party receivable', 39), (' derivative contracts - fair value', 38), (' accrued interest', 36), (' related party disclosures', 36), (' accrued rebates', 36), (' long service leave receivable', 35), (' amount receivable from controlling entity', 33), (' other deposits receivable - related party', 31), (' bank guarantee', 31), ('foreign exchange derivatives at fair value', 29), (' electricity derivatives at fair value', 27), (' interest receivable', 26), (' income tax receivable from related parties', 20)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines disposals , res_fuzz_match = [(' lng', 67), (' other', 60), (' deposits', 57), (' related party disclosures', 50), (' forward exchange contracts', 47), (' other receivables - related party', 46), ('other assets', 45), (' rental bond', 45), (' foreign exchange forward contracts', 44), ('current', 43), (' accrued interest', 43), (' current investments', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' related party receivable', 39), (' derivative contracts - fair value', 38), (' accrued rebates', 36), (' long service leave receivable', 35), (' amount receivable from controlling entity', 33), (' share of jv prepayments', 33), (' other deposits receivable - related party', 31), (' bank guarantee', 31), ('foreign exchange derivatives at fair value', 29), (' electricity derivatives at fair value', 27), (' interest receivable', 25), (' income tax receivable from related parties', 14)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines depreciation , res_fuzz_match = [(' lng', 67), (' other', 60), (' deposits', 57), (' interest receivable', 56), (' accrued interest', 50), (' forward exchange contracts', 48), (' related party receivable', 47), (' long service leave receivable', 46), (' other receivables - related party', 46), ('other assets', 45), (' foreign exchange forward contracts', 44), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' current investments', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), (' other deposits receivable - related party', 40), (' derivative contracts - fair value', 38), (' accrued rebates', 36), (' electricity derivatives at fair value', 34), (' income tax receivable from related parties', 33), (' amount receivable from controlling entity', 33), (' bank guarantee', 31), (' rental bond', 27), (' related party disclosures', 24)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines carrying amo ount at end ofyear , res_fuzz_match = [(' lng', 67), (' other', 60), (' forward exchange contracts', 50), (' foreign exchange forward contracts', 47), (' other receivables - related party', 46), ('other assets', 45), (' rental bond', 45), ('current', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), (' long service leave receivable', 41), ('foreign exchange derivatives at fair value', 39), (' related party receivable', 39), (' derivative contracts - fair value', 38), (' accrued interest', 36), (' accrued rebates', 36), (' other deposits receivable - related party', 35), (' amount receivable from controlling entity', 35), (' related party disclosures', 33), (' income tax receivable from related parties', 33), (' bank guarantee', 31), (' electricity derivatives at fair value', 27), (' interest receivable', 27)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines total carrying amount at end of year , res_fuzz_match = [(' lng', 67), (' other', 60), (' forward exchange contracts', 50), (' foreign exchange forward contracts', 47), (' other receivables - related party', 46), ('other assets', 45), (' rental bond', 45), (' income tax receivable from related parties', 44), ('current', 43), (' accrued interest', 43), (' long service leave receivable', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' other debtors and prepayments', 43), ('foreign exchange derivatives at fair value', 42), (' electricity derivatives at fair value', 41), (' related party receivable', 39), (' related party disclosures', 38), (' amount receivable from controlling entity', 38), (' other deposits receivable - related party', 37), (' accrued rebates', 36), (' derivative contracts - fair value', 33), (' interest receivable', 33), (' share of jv prepayments', 33), (' bank guarantee', 31)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = equipment opening balance at beginning of year , res_fuzz_match = [(' lng', 67), (' rental bond', 55), (' accrued interest', 50), (' bank guarantee', 46), ('foreign exchange derivatives at fair value', 43), (' deposits', 43), (' condensate', 43), (' income tax receivable from related parties', 42), (' other', 40), (' other debtors and prepayments', 39), (' other deposits receivable - related party', 38), (' long service leave receivable', 37), ('other assets', 36), (' interest receivable', 36), (' current investments', 36), (' accrued rebates', 36), (' other receivables - related party', 35), (' derivative contracts - fair value', 33), (' foreign exchange forward contracts', 32), (' related party receivable', 30), ('current', 29), (' related party disclosures', 29), (' amount receivable from controlling entity', 27), (' share of jv prepayments', 25), (' electricity derivatives at fair value', 23), (' forward exchange contracts', 13)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = equipment additions , res_fuzz_match = [(' deposits', 55), (' other receivables - related party', 45), ('other assets', 36), ('foreign exchange derivatives at fair value', 36), (' related party disclosures', 36), (' derivative contracts - fair value', 36), (' long service leave receivable', 36), (' other deposits receivable - related party', 36), (' foreign exchange forward contracts', 36), (' other debtors and prepayments', 36), (' share of jv prepayments', 32), (' forward exchange contracts', 30), (' other', 29), (' current investments', 29), (' income tax receivable from related parties', 27), (' amount receivable from controlling entity', 27), (' related party receivable', 27), (' accrued interest', 25), (' interest receivable', 25), (' accrued rebates', 25), (' electricity derivatives at fair value', 18), (' rental bond', 18), (' bank guarantee', 17), ('current', 14), (' condensate', 14), (' lng', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = equipment revaluation , res_fuzz_match = [('foreign exchange derivatives at fair value', 58), (' electricity derivatives at fair value', 58), (' derivative contracts - fair value', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' related party receivable', 48), (' rental bond', 47), (' accrued rebates', 45), ('current', 43), (' long service leave receivable', 42), (' amount receivable from controlling entity', 42), (' interest receivable', 42), (' foreign exchange forward contracts', 42), (' lng', 40), (' other debtors and prepayments', 36), (' accrued interest', 35), (' income tax receivable from related parties', 33), (' current investments', 33), (' deposits', 29), (' share of jv prepayments', 29), ('other assets', 27), (' forward exchange contracts', 27), (' related party disclosures', 25), (' other', 20), (' bank guarantee', 15), (' condensate', 14)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = equipment depreciation , res_fuzz_match = [(' deposits', 57), (' other deposits receivable - related party', 54), (' related party receivable', 50), (' interest receivable', 48), ('foreign exchange derivatives at fair value', 46), (' electricity derivatives at fair value', 46), (' long service leave receivable', 46), (' other receivables - related party', 46), (' amount receivable from controlling entity', 46), (' share of jv prepayments', 42), (' other', 40), (' related party disclosures', 38), (' income tax receivable from related parties', 38), (' other debtors and prepayments', 38), (' accrued rebates', 36), (' accrued interest', 33), ('other assets', 32), (' derivative contracts - fair value', 31), (' current investments', 31), ('current', 29), (' condensate', 29), (' rental bond', 27), (' bank guarantee', 24), (' foreign exchange forward contracts', 23), (' forward exchange contracts', 23), (' lng', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = equipment carrying am ount at end ofyear , res_fuzz_match = [(' current investments', 50), (' bank guarantee', 46), (' accrued rebates', 45), ('current', 43), (' accrued interest', 43), (' condensate', 43), (' long service leave receivable', 42), (' other', 40), (' amount receivable from controlling entity', 40), (' derivative contracts - fair value', 38), ('foreign exchange derivatives at fair value', 37), (' other debtors and prepayments', 37), ('other assets', 36), (' electricity derivatives at fair value', 36), (' lng', 33), (' forward exchange contracts', 31), (' foreign exchange forward contracts', 30), (' deposits', 29), (' interest receivable', 29), (' related party receivable', 28), (' rental bond', 27), (' income tax receivable from related parties', 26), (' other receivables - related party', 26), (' other deposits receivable - related party', 26), (' related party disclosures', 25), (' share of jv prepayments', 25)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = lease liabilities current , res_fuzz_match = [('current', 100), (' current investments', 67), (' rental bond', 53), (' accrued rebates', 53), (' bank guarantee', 50), (' deposits', 43), (' condensate', 43), (' long service leave receivable', 40), (' foreign exchange forward contracts', 37), (' accrued interest', 36), (' lng', 33), (' forward exchange contracts', 33), (' related party disclosures', 32), (' derivative contracts - fair value', 32), (' other deposits receivable - related party', 32), (' amount receivable from controlling entity', 32), (' other', 29), ('other assets', 27), (' related party receivable', 27), (' other debtors and prepayments', 27), (' electricity derivatives at fair value', 26), (' income tax receivable from related parties', 26), (' other receivables - related party', 26), (' share of jv prepayments', 25), (' interest receivable', 22), ('foreign exchange derivatives at fair value', 16)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = lease liabilities non-current , res_fuzz_match = [('current', 73), (' rental bond', 45), (' current investments', 44), (' deposits', 43), (' other', 40), (' accrued rebates', 38), (' related party disclosures', 37), (' foreign exchange forward contracts', 37), (' long service leave receivable', 33), (' bank guarantee', 33), (' lng', 33), (' forward exchange contracts', 33), (' accrued interest', 32), (' derivative contracts - fair value', 32), (' amount receivable from controlling entity', 32), (' interest receivable', 32), (' other receivables - related party', 29), (' other deposits receivable - related party', 29), (' condensate', 29), ('other assets', 27), (' electricity derivatives at fair value', 26), (' income tax receivable from related parties', 26), (' share of jv prepayments', 25), (' other debtors and prepayments', 21), (' related party receivable', 20), ('foreign exchange derivatives at fair value', 19)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = lease liabilities total , res_fuzz_match = [(' other', 44), (' deposits', 43), ('other assets', 40), (' derivative contracts - fair value', 40), (' accrued interest', 36), (' long service leave receivable', 36), (' rental bond', 36), (' accrued rebates', 36), (' other debtors and prepayments', 35), (' lng', 33), ('foreign exchange derivatives at fair value', 31), (' electricity derivatives at fair value', 31), (' amount receivable from controlling entity', 30), (' related party disclosures', 29), (' foreign exchange forward contracts', 29), (' forward exchange contracts', 29), (' share of jv prepayments', 26), (' income tax receivable from related parties', 24), (' other receivables - related party', 24), (' other deposits receivable - related party', 24), (' interest receivable', 24), (' current investments', 21), (' bank guarantee', 18), (' related party receivable', 18), (' condensate', 17), ('current', 14)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: within one year , res_fuzz_match = [(' other receivables - related party', 50), (' related party receivable', 50), (' other deposits receivable - related party', 47), ('other assets', 45), (' rental bond', 45), (' accrued rebates', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' amount receivable from controlling entity', 42), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' electricity derivatives at fair value', 41), (' other', 40), (' interest receivable', 40), (' long service leave receivable', 39), (' other debtors and prepayments', 39), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' bank guarantee', 38), (' income tax receivable from related parties', 36), (' lng', 33), (' foreign exchange forward contracts', 33), ('foreign exchange derivatives at fair value', 32)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: later than one year but not latert than five years , res_fuzz_match = [(' other', 60), (' other receivables - related party', 50), (' related party receivable', 50), (' other debtors and prepayments', 48), (' other deposits receivable - related party', 47), (' interest receivable', 47), ('other assets', 45), ('foreign exchange derivatives at fair value', 45), (' rental bond', 45), (' accrued rebates', 45), (' foreign exchange forward contracts', 44), ('current', 43), (' accrued interest', 43), (' current investments', 43), (' condensate', 43), (' electricity derivatives at fair value', 42), (' amount receivable from controlling entity', 42), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' income tax receivable from related parties', 39), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' bank guarantee', 38), (' long service leave receivable', 35), (' lng', 33), (' deposits', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = later than five years total , res_fuzz_match = [(' interest receivable', 47), (' other receivables - related party', 46), ('other assets', 45), (' electricity derivatives at fair value', 45), ('foreign exchange derivatives at fair value', 44), (' other', 44), (' related party receivable', 44), (' foreign exchange forward contracts', 44), (' derivative contracts - fair value', 43), (' deposits', 43), (' current investments', 43), (' share of jv prepayments', 42), (' income tax receivable from related parties', 40), (' other deposits receivable - related party', 40), (' forward exchange contracts', 39), (' bank guarantee', 38), (' accrued interest', 36), (' rental bond', 36), (' accrued rebates', 36), (' long service leave receivable', 35), (' amount receivable from controlling entity', 35), (' related party disclosures', 34), (' lng', 33), (' other debtors and prepayments', 30), ('current', 29), (' condensate', 17)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 40], 'score': [100, 100], 'value': [40.0, 64.0], 'label': ['Lease Liabilities Current', 'Lease Liabilities Current'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = current finished goods at net realisable value , res_fuzz_match = [('current', 100), (' current investments', 79), (' rental bond', 55), (' interest receivable', 53), (' derivative contracts - fair value', 46), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' other', 40), (' related party receivable', 39), (' related party disclosures', 38), (' bank guarantee', 38), (' foreign exchange forward contracts', 38), (' income tax receivable from related parties', 37), (' long service leave receivable', 37), (' other receivables - related party', 37), ('other assets', 36), (' electricity derivatives at fair value', 36), ('foreign exchange derivatives at fair value', 35), (' other deposits receivable - related party', 35), (' amount receivable from controlling entity', 35), (' share of jv prepayments', 33), (' lng', 33), (' other debtors and prepayments', 33), (' forward exchange contracts', 32)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = current stock in transit , res_fuzz_match = [('current', 100), (' current investments', 71), ('other assets', 55), (' rental bond', 55), (' bank guarantee', 48), (' interest receivable', 47), (' forward exchange contracts', 46), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' other', 40), (' amount receivable from controlling entity', 39), ('foreign exchange derivatives at fair value', 38), (' income tax receivable from related parties', 38), (' other receivables - related party', 38), (' related party receivable', 33), (' lng', 33), (' foreign exchange forward contracts', 33), (' related party disclosures', 31), (' derivative contracts - fair value', 31), (' long service leave receivable', 29), (' other deposits receivable - related party', 29), (' electricity derivatives at fair value', 25), (' share of jv prepayments', 25), (' other debtors and prepayments', 21)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current investments', 62), (' rental bond', 57), (' lng', 50), (' accrued rebates', 45), (' other', 44), (' deposits', 43), (' amount receivable from controlling entity', 43), (' condensate', 43), ('other assets', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' accrued interest', 38), (' income tax receivable from related parties', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' related party receivable', 38), (' foreign exchange forward contracts', 38), (' other debtors and prepayments', 38), (' forward exchange contracts', 36), (' share of jv prepayments', 35), (' related party disclosures', 32), (' interest receivable', 31), (' bank guarantee', 31), (' long service leave receivable', 23)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = current finished goods at net realisable value , res_fuzz_match = [('current', 100), (' current investments', 79), (' rental bond', 55), (' interest receivable', 53), (' derivative contracts - fair value', 46), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' other', 40), (' related party receivable', 39), (' related party disclosures', 38), (' bank guarantee', 38), (' foreign exchange forward contracts', 38), (' income tax receivable from related parties', 37), (' long service leave receivable', 37), (' other receivables - related party', 37), ('other assets', 36), (' electricity derivatives at fair value', 36), ('foreign exchange derivatives at fair value', 35), (' other deposits receivable - related party', 35), (' amount receivable from controlling entity', 35), (' share of jv prepayments', 33), (' lng', 33), (' other debtors and prepayments', 33), (' forward exchange contracts', 32)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = current stock in transit , res_fuzz_match = [('current', 100), (' current investments', 71), ('other assets', 55), (' rental bond', 55), (' bank guarantee', 48), (' interest receivable', 47), (' forward exchange contracts', 46), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' other', 40), (' amount receivable from controlling entity', 39), ('foreign exchange derivatives at fair value', 38), (' income tax receivable from related parties', 38), (' other receivables - related party', 38), (' related party receivable', 33), (' lng', 33), (' foreign exchange forward contracts', 33), (' related party disclosures', 31), (' derivative contracts - fair value', 31), (' long service leave receivable', 29), (' other deposits receivable - related party', 29), (' electricity derivatives at fair value', 25), (' share of jv prepayments', 25), (' other debtors and prepayments', 21)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current investments', 62), (' rental bond', 57), (' lng', 50), (' accrued rebates', 45), (' other', 44), (' deposits', 43), (' amount receivable from controlling entity', 43), (' condensate', 43), ('other assets', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' accrued interest', 38), (' income tax receivable from related parties', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' related party receivable', 38), (' foreign exchange forward contracts', 38), (' other debtors and prepayments', 38), (' forward exchange contracts', 36), (' share of jv prepayments', 35), (' related party disclosures', 32), (' interest receivable', 31), (' bank guarantee', 31), (' long service leave receivable', 23)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [71812.0, 44440.0, 116252.0, 54607.0, 64068.0, 118675.0], 'label': ['Current Finished goods at net realisable value', 'Current Stock in transit', 'Current Total', 'Current Finished goods at net realisable value', 'Current Stock in transit', 'Current Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:52+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('current assets', 28)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('current assets', 28)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:52+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('plant property equipment', 72), ('property plant equipment', 72)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('plant property equipment', 17), ('property plant equipment', 17)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('plant property equipment', 72), ('property plant equipment', 72)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('plant property equipment', 17), ('property plant equipment', 17)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:52+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('plant property equipment', 72), ('property plant equipment', 72)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('plant property equipment', 17), ('property plant equipment', 17)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('plant property equipment', 72), ('property plant equipment', 72)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('plant property equipment', 17), ('property plant equipment', 17)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:52+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('right of use', 47), ('right to use', 47), ('capital work-in-progress', 45), ('capital workinprogress', 45), ('capital work in progress', 38), ('work in progress', 38), ('tangible', 25), ('rightofuse', 24), ('righttouse', 24)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('work in progress', 38), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('tangible', 29), ('rightofuse', 22), ('righttouse', 22), ('right of use', 22), ('right to use', 22)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 45), ('capital workinprogress', 45), ('capital work in progress', 45), ('work in progress', 33), ('tangible', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('capital work-in-progress', 32), ('capital workinprogress', 32), ('capital work in progress', 32), ('work in progress', 31), ('tangible', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': 159.0, 'line_item_label': ['Right-of-use-assets'], 'note_numbers': ['11(a)'], 'line_item_value': [159.0]}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('right of use', 47), ('right to use', 47), ('capital work-in-progress', 45), ('capital workinprogress', 45), ('capital work in progress', 38), ('work in progress', 38), ('tangible', 25), ('rightofuse', 24), ('righttouse', 24)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('work in progress', 38), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('tangible', 29), ('rightofuse', 22), ('righttouse', 22), ('right of use', 22), ('right to use', 22)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 45), ('capital workinprogress', 45), ('capital work in progress', 45), ('work in progress', 33), ('tangible', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('capital work-in-progress', 32), ('capital workinprogress', 32), ('capital work in progress', 32), ('work in progress', 31), ('tangible', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': 93.0, 'line_item_label': ['Right-of-use-assets'], 'note_numbers': ['11(a)'], 'line_item_value': [93.0]}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:52+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('tangible assets', 21)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('tangible assets', 36)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('tangible assets', 21)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('tangible assets', 36)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:52+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('goodwill', 29), ('goodwill on consolidatio', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 20), ('goodwill', 14)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('goodwill', 29), ('goodwill on consolidatio', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 20), ('goodwill', 14)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:52+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 33)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('intangible', 25), ('intangible under development', 23), ('intangible assets under development', 23)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('intangible assets under development', 47), ('intangible', 33), ('intangible under development', 17)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible under development', 38), ('intangible', 33)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 33)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('intangible', 25), ('intangible under development', 23), ('intangible assets under development', 23)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('intangible assets under development', 47), ('intangible', 33), ('intangible under development', 17)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible under development', 38), ('intangible', 33)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:52+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('donations', 19)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('donations', 30)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('donations', 19)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('donations', 30)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:52+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), (' investment in associate', 40), ('investment', 36), (' investment in joint venture', 33), ('derivative financial instruments', 31)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [(' investments accounted for using the equity method', 50), ('investment', 25), ('derivative financial instruments', 25), ('joint ventures and associates', 21), (' investment in associate', 13), (' investment in joint venture', 11)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('investment', 50), (' investments accounted for using the equity method', 40), (' investment in associate', 38), ('joint ventures and associates', 30), ('derivative financial instruments', 27), (' investment in joint venture', 12)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 27), (' investment in joint venture', 20)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), (' investment in associate', 40), ('investment', 36), (' investment in joint venture', 33), ('derivative financial instruments', 31)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [(' investments accounted for using the equity method', 50), ('investment', 25), ('derivative financial instruments', 25), ('joint ventures and associates', 21), (' investment in associate', 13), (' investment in joint venture', 11)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('investment', 50), (' investments accounted for using the equity method', 40), (' investment in associate', 38), ('joint ventures and associates', 30), ('derivative financial instruments', 27), (' investment in joint venture', 12)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 27), (' investment in joint venture', 20)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:52+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('deferred tax', 32), ('deferred tax assets', 32), ('deferred charges', 22)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('deferred tax assets', 33), ('deferred tax', 25), ('deferred charges', 23)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': 6161.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['7(b)'], 'line_item_value': [6161.0]}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('deferred tax', 32), ('deferred tax assets', 32), ('deferred charges', 22)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('deferred tax assets', 33), ('deferred tax', 25), ('deferred charges', 23)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': 6652.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['7(b)'], 'line_item_value': [6652.0]}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = provisions and accrued employee entitlements not currently deductible , res_fuzz_match = [('deferred tax assets', 29), (' deferred tax balances', 27)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = provisions and accrued employee entitlements not lease liabilities , res_fuzz_match = [(' deferred tax balances', 31), ('deferred tax assets', 20)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = provisions and accrued employee entitlements not total , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = dta expected to be recovered within 12 months dta expected to be recovered after more than 12 months , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = provisions and accrued employee entitlements not currently deductible , res_fuzz_match = [('deferred tax assets', 29), (' deferred tax balances', 27)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = provisions and accrued employee entitlements not lease liabilities , res_fuzz_match = [(' deferred tax balances', 31), ('deferred tax assets', 20)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = provisions and accrued employee entitlements not total , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = dta expected to be recovered within 12 months dta expected to be recovered after more than 12 months , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:52+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 30), (' loan receivables', 25), (' leases', 24)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('other assets', 37), (' other assets', 37), (' other non-current assets', 29), (' other non-current assets', 29), (' exploration and evaluation expenditure', 28), (' leased assets', 23), ('non-current', 17), (' financial assets', 14), (' leases', 10), (' loan receivables', 7)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [(' leased assets', 40), ('other assets', 38), (' other assets', 38), (' financial assets', 36), (' leases', 32), (' other non-current assets', 29), (' other non-current assets', 29), (' loan receivables', 23), ('non-current', 18), (' exploration and evaluation expenditure', 14)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 33), (' loan receivables', 23), (' leases', 21), ('non-current', 9)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 30), (' loan receivables', 25), (' leases', 24)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('other assets', 37), (' other assets', 37), (' other non-current assets', 29), (' other non-current assets', 29), (' exploration and evaluation expenditure', 28), (' leased assets', 23), ('non-current', 17), (' financial assets', 14), (' leases', 10), (' loan receivables', 7)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [(' leased assets', 40), ('other assets', 38), (' other assets', 38), (' financial assets', 36), (' leases', 32), (' other non-current assets', 29), (' other non-current assets', 29), (' loan receivables', 23), ('non-current', 18), (' exploration and evaluation expenditure', 14)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 33), (' loan receivables', 23), (' leases', 21), ('non-current', 9)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:52+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('non-current assets total', 17)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('non-current assets total', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('non-current assets total', 59)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('non-current assets total', 17)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('non-current assets total', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('non-current assets total', 59)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:52+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), ('borrowings', 20), ('shortterm borrowings', 20), (' bank overdraft', 7)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' bank overdraft', 44), (' loans and borrowings', 38), ('lease liabilities', 30), ('shortterm borrowings', 21), (' leases', 15), ('borrowings', 14), ('short term debt', 11), ('short-term debt', 11), ('shortterm debt', 11)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), (' leases', 21), ('borrowings', 19), ('shortterm borrowings', 19), ('lease liabilities', 15)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('lease liabilities', 62), (' bank overdraft', 28), (' loans and borrowings', 27), (' leases', 21), ('short-term debt', 14), ('shortterm debt', 14), ('short term debt', 13), ('borrowings', 10), ('shortterm borrowings', 6)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), ('short-term debt', 16), ('shortterm debt', 16), ('short term debt', 15), ('borrowings', 12), (' bank overdraft', 8), ('shortterm borrowings', 7)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = income tax payables , res_fuzz_match = [('lease liabilities', 30), (' leases', 20), ('short term debt', 19), ('shortterm borrowings', 19), (' loans and borrowings', 19), ('short-term debt', 13), ('shortterm debt', 13), (' bank overdraft', 13), ('borrowings', 9)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = total currentliabilities , res_fuzz_match = [('lease liabilities', 38), ('short-term debt', 34), ('shortterm debt', 34), ('borrowings', 29), ('short term debt', 27), (' loans and borrowings', 27), ('shortterm borrowings', 26), (' leases', 21), (' bank overdraft', 7)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [17], 'score': 100, 'value': 64.0, 'line_item_label': ['Lease Liabilities'], 'note_numbers': ['11(b)'], 'line_item_value': [64.0]}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), ('borrowings', 20), ('shortterm borrowings', 20), (' bank overdraft', 7)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' bank overdraft', 44), (' loans and borrowings', 38), ('lease liabilities', 30), ('shortterm borrowings', 21), (' leases', 15), ('borrowings', 14), ('short term debt', 11), ('short-term debt', 11), ('shortterm debt', 11)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), (' leases', 21), ('borrowings', 19), ('shortterm borrowings', 19), ('lease liabilities', 15)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('lease liabilities', 62), (' bank overdraft', 28), (' loans and borrowings', 27), (' leases', 21), ('short-term debt', 14), ('shortterm debt', 14), ('short term debt', 13), ('borrowings', 10), ('shortterm borrowings', 6)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), ('short-term debt', 16), ('shortterm debt', 16), ('short term debt', 15), ('borrowings', 12), (' bank overdraft', 8), ('shortterm borrowings', 7)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = income tax payables , res_fuzz_match = [('lease liabilities', 30), (' leases', 20), ('short term debt', 19), ('shortterm borrowings', 19), (' loans and borrowings', 19), ('short-term debt', 13), ('shortterm debt', 13), (' bank overdraft', 13), ('borrowings', 9)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = total currentliabilities , res_fuzz_match = [('lease liabilities', 38), ('short-term debt', 34), ('shortterm debt', 34), ('borrowings', 29), ('short term debt', 27), (' loans and borrowings', 27), ('shortterm borrowings', 26), (' leases', 21), (' bank overdraft', 7)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [17], 'score': 100, 'value': 40.0, 'line_item_label': ['Lease Liabilities'], 'note_numbers': ['11(b)'], 'line_item_value': [40.0]}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = lease liabilities current , res_fuzz_match = [('current', 100), (' leases', 100), (' current', 100), (' lease liabilities - current', 100), (' lease liabilities', 100), (' utilised – bank borrowings', 39), (' loans from related party', 37), ('bank borrowings', 36), (' secured long-term bank loans', 32), (' balance at the end of period', 26), (' bank overdraft', 24), (' not later than 1 year', 22)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = lease liabilities non-current , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' lease liabilities - current', 84), ('current', 73), (' current', 73), ('bank borrowings', 45), (' utilised – bank borrowings', 44), (' bank overdraft', 40), (' loans from related party', 32), (' not later than 1 year', 31), (' secured long-term bank loans', 26), (' balance at the end of period', 26)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = lease liabilities total , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' lease liabilities - current', 71), (' utilised – bank borrowings', 35), (' secured long-term bank loans', 32), (' loans from related party', 30), (' balance at the end of period', 24), ('bank borrowings', 20), (' not later than 1 year', 19), (' bank overdraft', 17), ('current', 14), (' current', 14)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: within one year , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' lease liabilities - current', 68), (' not later than 1 year', 53), (' loans from related party', 48), ('bank borrowings', 45), ('current', 43), (' current', 43), (' balance at the end of period', 43), (' bank overdraft', 38), (' utilised – bank borrowings', 35), (' secured long-term bank loans', 33)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: later than one year but not latert than five years , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' not later than 1 year', 79), (' lease liabilities - current', 68), (' loans from related party', 48), (' secured long-term bank loans', 46), (' bank overdraft', 44), ('current', 43), (' current', 43), (' balance at the end of period', 43), ('bank borrowings', 36), (' utilised – bank borrowings', 35)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = later than five years total , res_fuzz_match = [(' not later than 1 year', 74), (' leases', 50), (' loans from related party', 44), (' bank overdraft', 43), (' balance at the end of period', 43), (' secured long-term bank loans', 38), (' lease liabilities', 38), (' utilised – bank borrowings', 30), ('current', 29), ('bank borrowings', 29), (' current', 29), (' lease liabilities - current', 28)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = lease liabilities current , res_fuzz_match = [('current', 100), (' leases', 100), (' current', 100), (' lease liabilities - current', 100), (' lease liabilities', 100), (' utilised – bank borrowings', 39), (' loans from related party', 37), ('bank borrowings', 36), (' secured long-term bank loans', 32), (' balance at the end of period', 26), (' bank overdraft', 24), (' not later than 1 year', 22)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = lease liabilities non-current , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' lease liabilities - current', 84), ('current', 73), (' current', 73), ('bank borrowings', 45), (' utilised – bank borrowings', 44), (' bank overdraft', 40), (' loans from related party', 32), (' not later than 1 year', 31), (' secured long-term bank loans', 26), (' balance at the end of period', 26)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = lease liabilities total , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' lease liabilities - current', 71), (' utilised – bank borrowings', 35), (' secured long-term bank loans', 32), (' loans from related party', 30), (' balance at the end of period', 24), ('bank borrowings', 20), (' not later than 1 year', 19), (' bank overdraft', 17), ('current', 14), (' current', 14)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: within one year , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' lease liabilities - current', 68), (' not later than 1 year', 53), (' loans from related party', 48), ('bank borrowings', 45), ('current', 43), (' current', 43), (' balance at the end of period', 43), (' bank overdraft', 38), (' utilised – bank borrowings', 35), (' secured long-term bank loans', 33)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: later than one year but not latert than five years , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' not later than 1 year', 79), (' lease liabilities - current', 68), (' loans from related party', 48), (' secured long-term bank loans', 46), (' bank overdraft', 44), ('current', 43), (' current', 43), (' balance at the end of period', 43), ('bank borrowings', 36), (' utilised – bank borrowings', 35)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = later than five years total , res_fuzz_match = [(' not later than 1 year', 74), (' leases', 50), (' loans from related party', 44), (' bank overdraft', 43), (' balance at the end of period', 43), (' secured long-term bank loans', 38), (' lease liabilities', 38), (' utilised – bank borrowings', 30), ('current', 29), ('bank borrowings', 29), (' current', 29), (' lease liabilities - current', 28)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 6, 7, 8, 9, 10], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [40.0, 54.0, 94.0, 40.0, 54.0, 64.0, 95.0, 159.0, 64.0, 95.0], 'label': ['Lease Liabilities Current', 'Lease Liabilities Non-current', 'Lease Liabilities Total', 'Future lease payments in relation to lease liabilities as at period end are as follows: Within one year', 'Future lease payments in relation to lease liabilities as at period end are as follows: Later than one year but not latert than five years', 'Lease Liabilities Current', 'Lease Liabilities Non-current', 'Lease Liabilities Total', 'Future lease payments in relation to lease liabilities as at period end are as follows: Within one year', 'Future lease payments in relation to lease liabilities as at period end are as follows: Later than one year but not latert than five years'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none current leave obligations expected to be settled after 12 months , res_fuzz_match = [('current', 100), (' current', 100), (' leases', 75), (' lease liabilities', 55), (' not later than 1 year', 53), (' loans from related party', 48), (' lease liabilities - current', 47), (' secured long-term bank loans', 38), ('bank borrowings', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 29), (' balance at the end of period', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': [100], 'value': [838.0], 'label': ['None Current leave obligations expected to be settled after 12 months'], 'year': [], 'colname_found': ['rows']}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = warranty carrying amount at beginning of year , res_fuzz_match = [(' not later than 1 year', 61), ('current', 57), (' current', 57), (' leases', 50), ('bank borrowings', 45), (' bank overdraft', 43), (' loans from related party', 33), (' balance at the end of period', 33), (' utilised – bank borrowings', 32), (' secured long-term bank loans', 29), (' lease liabilities', 27), (' lease liabilities - current', 26)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = warranty payments made during the year , res_fuzz_match = [(' not later than 1 year', 63), ('current', 57), (' current', 57), (' leases', 50), (' balance at the end of period', 41), (' loans from related party', 38), (' secured long-term bank loans', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 35), (' lease liabilities - current', 32), ('bank borrowings', 27), (' lease liabilities', 27)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = warranty provisions made during the year , res_fuzz_match = [(' not later than 1 year', 63), ('current', 57), (' current', 57), (' leases', 50), ('bank borrowings', 45), (' loans from related party', 43), (' bank overdraft', 43), (' balance at the end of period', 41), (' secured long-term bank loans', 36), (' utilised – bank borrowings', 35), (' lease liabilities', 27), (' lease liabilities - current', 26)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = warranty carrying am ount at end of year , res_fuzz_match = [(' not later than 1 year', 65), ('current', 57), (' current', 57), (' balance at the end of period', 51), (' leases', 50), ('bank borrowings', 45), (' bank overdraft', 36), (' utilised – bank borrowings', 35), (' loans from related party', 33), (' secured long-term bank loans', 29), (' lease liabilities', 27), (' lease liabilities - current', 26)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = warranty current , res_fuzz_match = [('current', 100), (' current', 100), (' lease liabilities - current', 62), ('bank borrowings', 45), (' balance at the end of period', 44), (' loans from related party', 38), (' bank overdraft', 38), (' secured long-term bank loans', 31), (' leases', 25), (' utilised – bank borrowings', 22), (' not later than 1 year', 21), (' lease liabilities', 13)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = warranty non-current , res_fuzz_match = [('current', 73), (' current', 73), (' lease liabilities - current', 50), (' bank overdraft', 46), ('bank borrowings', 45), (' loans from related party', 38), (' balance at the end of period', 38), (' secured long-term bank loans', 31), (' utilised – bank borrowings', 30), (' leases', 25), (' not later than 1 year', 21), (' lease liabilities', 18)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = warranty total , res_fuzz_match = [('current', 57), (' current', 57), (' secured long-term bank loans', 46), (' loans from related party', 42), (' bank overdraft', 42), (' leases', 40), ('bank borrowings', 38), (' lease liabilities - current', 38), (' balance at the end of period', 36), (' utilised – bank borrowings', 32), (' not later than 1 year', 24), (' lease liabilities', 17)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = warranty carrying amount at beginning of year , res_fuzz_match = [(' not later than 1 year', 61), ('current', 57), (' current', 57), (' leases', 50), ('bank borrowings', 45), (' bank overdraft', 43), (' loans from related party', 33), (' balance at the end of period', 33), (' utilised – bank borrowings', 32), (' secured long-term bank loans', 29), (' lease liabilities', 27), (' lease liabilities - current', 26)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = warranty payments made during the year , res_fuzz_match = [(' not later than 1 year', 63), ('current', 57), (' current', 57), (' leases', 50), (' balance at the end of period', 41), (' loans from related party', 38), (' secured long-term bank loans', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 35), (' lease liabilities - current', 32), ('bank borrowings', 27), (' lease liabilities', 27)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = warranty provisions made during the year , res_fuzz_match = [(' not later than 1 year', 63), ('current', 57), (' current', 57), (' leases', 50), ('bank borrowings', 45), (' loans from related party', 43), (' bank overdraft', 43), (' balance at the end of period', 41), (' secured long-term bank loans', 36), (' utilised – bank borrowings', 35), (' lease liabilities', 27), (' lease liabilities - current', 26)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = warranty carrying am ount at end of year , res_fuzz_match = [(' not later than 1 year', 65), ('current', 57), (' current', 57), (' balance at the end of period', 51), (' leases', 50), ('bank borrowings', 45), (' bank overdraft', 36), (' utilised – bank borrowings', 35), (' loans from related party', 33), (' secured long-term bank loans', 29), (' lease liabilities', 27), (' lease liabilities - current', 26)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = warranty current , res_fuzz_match = [('current', 100), (' current', 100), (' lease liabilities - current', 62), ('bank borrowings', 45), (' balance at the end of period', 44), (' loans from related party', 38), (' bank overdraft', 38), (' secured long-term bank loans', 31), (' leases', 25), (' utilised – bank borrowings', 22), (' not later than 1 year', 21), (' lease liabilities', 13)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = warranty non-current , res_fuzz_match = [('current', 73), (' current', 73), (' lease liabilities - current', 50), (' bank overdraft', 46), ('bank borrowings', 45), (' loans from related party', 38), (' balance at the end of period', 38), (' secured long-term bank loans', 31), (' utilised – bank borrowings', 30), (' leases', 25), (' not later than 1 year', 21), (' lease liabilities', 18)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = warranty total , res_fuzz_match = [('current', 57), (' current', 57), (' secured long-term bank loans', 46), (' loans from related party', 42), (' bank overdraft', 42), (' leases', 40), ('bank borrowings', 38), (' lease liabilities - current', 38), (' balance at the end of period', 36), (' utilised – bank borrowings', 32), (' not later than 1 year', 24), (' lease liabilities', 17)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 11], 'score': [100, 100], 'value': [2126.0, 896.0], 'label': ['Warranty Current', 'Warranty Current'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none nan trade payables due to parent entity suzuki motor corporation , res_fuzz_match = [(' lease liabilities - current', 58), ('current', 57), (' current', 57), ('bank borrowings', 45), (' lease liabilities', 45), (' loans from related party', 43), (' not later than 1 year', 42), (' utilised – bank borrowings', 40), (' balance at the end of period', 38), (' bank overdraft', 36), (' secured long-term bank loans', 33), (' leases', 25)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none nan other trade payables , res_fuzz_match = [(' not later than 1 year', 58), (' bank overdraft', 57), (' loans from related party', 48), (' lease liabilities', 48), (' balance at the end of period', 48), ('bank borrowings', 45), ('current', 43), (' current', 43), (' leases', 40), (' utilised – bank borrowings', 35), (' lease liabilities - current', 34), (' secured long-term bank loans', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none nan accrued expenses , res_fuzz_match = [(' leases', 50), (' secured long-term bank loans', 46), ('current', 43), (' current', 43), (' loans from related party', 39), (' lease liabilities - current', 38), (' balance at the end of period', 38), (' not later than 1 year', 37), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 29), (' utilised – bank borrowings', 25)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none nan total trade and other payables , res_fuzz_match = [(' not later than 1 year', 51), (' leases', 50), (' bank overdraft', 50), (' lease liabilities', 48), (' balance at the end of period', 48), (' secured long-term bank loans', 38), ('bank borrowings', 36), (' loans from related party', 36), (' lease liabilities - current', 34), (' utilised – bank borrowings', 30), ('current', 29), (' current', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none employee benefits employee benefits , res_fuzz_match = [(' leases', 50), (' secured long-term bank loans', 46), ('current', 43), (' current', 43), (' balance at the end of period', 38), (' lease liabilities - current', 37), (' lease liabilities', 36), (' bank overdraft', 36), (' loans from related party', 33), (' not later than 1 year', 32), ('bank borrowings', 27), (' utilised – bank borrowings', 25)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [(' leases', 50), (' not later than 1 year', 50), (' secured long-term bank loans', 43), (' lease liabilities - current', 36), ('current', 29), ('bank borrowings', 29), (' utilised – bank borrowings', 29), (' current', 29), (' loans from related party', 29), (' balance at the end of period', 29), (' lease liabilities', 25), (' bank overdraft', 24)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none nan liability for annual and long-service leave , res_fuzz_match = [(' leases', 75), (' lease liabilities', 73), (' lease liabilities - current', 58), (' secured long-term bank loans', 46), (' balance at the end of period', 43), (' not later than 1 year', 42), (' utilised – bank borrowings', 40), (' loans from related party', 38), ('bank borrowings', 36), (' bank overdraft', 36), ('current', 31), (' current', 31)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [(' leases', 50), (' not later than 1 year', 50), (' secured long-term bank loans', 43), (' lease liabilities - current', 36), ('current', 29), ('bank borrowings', 29), (' utilised – bank borrowings', 29), (' current', 29), (' loans from related party', 29), (' balance at the end of period', 29), (' lease liabilities', 25), (' bank overdraft', 24)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none nan liability forlong-service leave , res_fuzz_match = [(' leases', 75), (' lease liabilities', 73), (' lease liabilities - current', 58), ('bank borrowings', 45), (' secured long-term bank loans', 45), (' not later than 1 year', 42), (' bank overdraft', 36), (' loans from related party', 33), ('current', 31), (' current', 31), (' utilised – bank borrowings', 30), (' balance at the end of period', 24)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [(' leases', 50), (' not later than 1 year', 50), (' secured long-term bank loans', 43), (' lease liabilities - current', 36), ('current', 29), ('bank borrowings', 29), (' utilised – bank borrowings', 29), (' current', 29), (' loans from related party', 29), (' balance at the end of period', 29), (' lease liabilities', 25), (' bank overdraft', 24)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none nan trade payables due to parent entity suzuki motor corporation , res_fuzz_match = [(' lease liabilities - current', 58), ('current', 57), (' current', 57), ('bank borrowings', 45), (' lease liabilities', 45), (' loans from related party', 43), (' not later than 1 year', 42), (' utilised – bank borrowings', 40), (' balance at the end of period', 38), (' bank overdraft', 36), (' secured long-term bank loans', 33), (' leases', 25)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none nan other trade payables , res_fuzz_match = [(' not later than 1 year', 58), (' bank overdraft', 57), (' loans from related party', 48), (' lease liabilities', 48), (' balance at the end of period', 48), ('bank borrowings', 45), ('current', 43), (' current', 43), (' leases', 40), (' utilised – bank borrowings', 35), (' lease liabilities - current', 34), (' secured long-term bank loans', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none nan accrued expenses , res_fuzz_match = [(' leases', 50), (' secured long-term bank loans', 46), ('current', 43), (' current', 43), (' loans from related party', 39), (' lease liabilities - current', 38), (' balance at the end of period', 38), (' not later than 1 year', 37), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 29), (' utilised – bank borrowings', 25)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none nan total trade and other payables , res_fuzz_match = [(' not later than 1 year', 51), (' leases', 50), (' bank overdraft', 50), (' lease liabilities', 48), (' balance at the end of period', 48), (' secured long-term bank loans', 38), ('bank borrowings', 36), (' loans from related party', 36), (' lease liabilities - current', 34), (' utilised – bank borrowings', 30), ('current', 29), (' current', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none employee benefits employee benefits , res_fuzz_match = [(' leases', 50), (' secured long-term bank loans', 46), ('current', 43), (' current', 43), (' balance at the end of period', 38), (' lease liabilities - current', 37), (' lease liabilities', 36), (' bank overdraft', 36), (' loans from related party', 33), (' not later than 1 year', 32), ('bank borrowings', 27), (' utilised – bank borrowings', 25)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [(' leases', 50), (' not later than 1 year', 50), (' secured long-term bank loans', 43), (' lease liabilities - current', 36), ('current', 29), ('bank borrowings', 29), (' utilised – bank borrowings', 29), (' current', 29), (' loans from related party', 29), (' balance at the end of period', 29), (' lease liabilities', 25), (' bank overdraft', 24)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none nan liability for annual and long-service leave , res_fuzz_match = [(' leases', 75), (' lease liabilities', 73), (' lease liabilities - current', 58), (' secured long-term bank loans', 46), (' balance at the end of period', 43), (' not later than 1 year', 42), (' utilised – bank borrowings', 40), (' loans from related party', 38), ('bank borrowings', 36), (' bank overdraft', 36), ('current', 31), (' current', 31)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [(' leases', 50), (' not later than 1 year', 50), (' secured long-term bank loans', 43), (' lease liabilities - current', 36), ('current', 29), ('bank borrowings', 29), (' utilised – bank borrowings', 29), (' current', 29), (' loans from related party', 29), (' balance at the end of period', 29), (' lease liabilities', 25), (' bank overdraft', 24)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none nan liability forlong-service leave , res_fuzz_match = [(' leases', 75), (' lease liabilities', 73), (' lease liabilities - current', 58), ('bank borrowings', 45), (' secured long-term bank loans', 45), (' not later than 1 year', 42), (' bank overdraft', 36), (' loans from related party', 33), ('current', 31), (' current', 31), (' utilised – bank borrowings', 30), (' balance at the end of period', 24)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [(' leases', 50), (' not later than 1 year', 50), (' secured long-term bank loans', 43), (' lease liabilities - current', 36), ('current', 29), ('bank borrowings', 29), (' utilised – bank borrowings', 29), (' current', 29), (' loans from related party', 29), (' balance at the end of period', 29), (' lease liabilities', 25), (' bank overdraft', 24)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:52+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['current maturities']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('other financial liabilities', 38), ('other current liabilities', 33), ('current maturities', 17), ('current maturities of long-term debt', 16), ('current maturities of longterm debt', 16)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('current maturities of long-term debt', 38), ('current maturities of longterm debt', 38), ('current maturities', 36), ('other financial liabilities', 34)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other financial liabilities', 57), ('other current liabilities', 57), ('current maturities', 36), ('current maturities of long-term debt', 33), ('current maturities of longterm debt', 33)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = income tax payables , res_fuzz_match = [('other financial liabilities', 44), ('other current liabilities', 39), ('current maturities of long-term debt', 28), ('current maturities of longterm debt', 28), ('current maturities', 21)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = total currentliabilities , res_fuzz_match = [('other current liabilities', 69), ('current maturities', 64), ('current maturities of long-term debt', 48), ('current maturities of longterm debt', 48), ('other financial liabilities', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 82, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:52+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('other financial liabilities', 38), ('other current liabilities', 33), ('current maturities', 17), ('current maturities of long-term debt', 16), ('current maturities of longterm debt', 16)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('current maturities of long-term debt', 38), ('current maturities of longterm debt', 38), ('current maturities', 36), ('other financial liabilities', 34)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other financial liabilities', 57), ('other current liabilities', 57), ('current maturities', 36), ('current maturities of long-term debt', 33), ('current maturities of longterm debt', 33)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = income tax payables , res_fuzz_match = [('other financial liabilities', 44), ('other current liabilities', 39), ('current maturities of long-term debt', 28), ('current maturities of longterm debt', 28), ('current maturities', 21)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - txt_particular = total currentliabilities , res_fuzz_match = [('other current liabilities', 69), ('current maturities', 64), ('current maturities of long-term debt', 48), ('current maturities of longterm debt', 48), ('other financial liabilities', 29)]
2023-07-28 13:19:52+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 82, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:52+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-28 13:19:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('note payable(debt)', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('note payable(debt)', 39)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = income tax payables , res_fuzz_match = [('note payable(debt)', 62)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total currentliabilities , res_fuzz_match = [('note payable(debt)', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('note payable(debt)', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('note payable(debt)', 39)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = income tax payables , res_fuzz_match = [('note payable(debt)', 62)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total currentliabilities , res_fuzz_match = [('note payable(debt)', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises', 34), ('other trade payables', 31), ('trade and other payables', 28), ('micro enterprises and small enterprises', 24), ('other than micro and small enterprises', 24), ('trade payable', 23), ('outstanding dues of micro enterprises and small enterprises', 23), ('outstanding dues of creditors other than micro enterprises and small enterprises', 22), ('outstanding dues of creditors other than', 22), ('total outstanding due of other creditors other than micro and small', 16)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('total outstanding due of other creditors other than micro and small', 39), ('small enterprises', 38), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36), ('micro enterprises and small enterprises', 35), ('micro enterprises', 32), ('outstanding dues of micro enterprises and small enterprises', 29)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('micro enterprises', 40), ('small enterprises', 40), ('accounts payable', 34), ('trade and other payables', 22), ('trade payable', 22), ('outstanding dues of creditors other than', 21), ('outstanding dues of creditors other than micro enterprises and small enterprises', 17), ('micro enterprises and small enterprises', 16), ('outstanding dues of micro enterprises and small enterprises', 16), ('total outstanding due of other creditors other than micro and small', 16), ('other than micro and small enterprises', 16), ('other trade payables', 12)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10), ('total outstanding due of other creditors other than micro and small', 9), ('other trade payables', 8), ('trade and other payables', 7)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('accounts payable', 48), ('small enterprises', 40), ('micro enterprises', 33), ('micro enterprises and small enterprises', 24), ('other trade payables', 24), ('other than micro and small enterprises', 24), ('trade and other payables', 22), ('trade payable', 22), ('outstanding dues of micro enterprises and small enterprises', 19), ('outstanding dues of creditors other than micro enterprises and small enterprises', 19), ('outstanding dues of creditors other than', 17), ('total outstanding due of other creditors other than micro and small', 13)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than', 14), ('total outstanding due of other creditors other than micro and small', 14)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = income tax payables , res_fuzz_match = [('other trade payables', 65), ('trade payable', 64), ('trade and other payables', 63), ('accounts payable', 60), ('outstanding dues of creditors other than', 25), ('other than micro and small enterprises', 23), ('small enterprises', 19), ('micro enterprises and small enterprises', 16), ('total outstanding due of other creditors other than micro and small', 16), ('outstanding dues of creditors other than micro enterprises and small enterprises', 14), ('micro enterprises', 13), ('outstanding dues of micro enterprises and small enterprises', 12)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total currentliabilities , res_fuzz_match = [('accounts payable', 48), ('small enterprises', 47), ('micro enterprises', 40), ('micro enterprises and small enterprises', 36), ('outstanding dues of micro enterprises and small enterprises', 35), ('other than micro and small enterprises', 35), ('outstanding dues of creditors other than', 34), ('trade and other payables', 32), ('outstanding dues of creditors other than micro enterprises and small enterprises', 31), ('trade payable', 30), ('total outstanding due of other creditors other than micro and small', 27), ('other trade payables', 24)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 100, 'value': 36847.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['12'], 'line_item_value': [36847.0]}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises', 34), ('other trade payables', 31), ('trade and other payables', 28), ('micro enterprises and small enterprises', 24), ('other than micro and small enterprises', 24), ('trade payable', 23), ('outstanding dues of micro enterprises and small enterprises', 23), ('outstanding dues of creditors other than micro enterprises and small enterprises', 22), ('outstanding dues of creditors other than', 22), ('total outstanding due of other creditors other than micro and small', 16)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('total outstanding due of other creditors other than micro and small', 39), ('small enterprises', 38), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36), ('micro enterprises and small enterprises', 35), ('micro enterprises', 32), ('outstanding dues of micro enterprises and small enterprises', 29)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('micro enterprises', 40), ('small enterprises', 40), ('accounts payable', 34), ('trade and other payables', 22), ('trade payable', 22), ('outstanding dues of creditors other than', 21), ('outstanding dues of creditors other than micro enterprises and small enterprises', 17), ('micro enterprises and small enterprises', 16), ('outstanding dues of micro enterprises and small enterprises', 16), ('total outstanding due of other creditors other than micro and small', 16), ('other than micro and small enterprises', 16), ('other trade payables', 12)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10), ('total outstanding due of other creditors other than micro and small', 9), ('other trade payables', 8), ('trade and other payables', 7)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('accounts payable', 48), ('small enterprises', 40), ('micro enterprises', 33), ('micro enterprises and small enterprises', 24), ('other trade payables', 24), ('other than micro and small enterprises', 24), ('trade and other payables', 22), ('trade payable', 22), ('outstanding dues of micro enterprises and small enterprises', 19), ('outstanding dues of creditors other than micro enterprises and small enterprises', 19), ('outstanding dues of creditors other than', 17), ('total outstanding due of other creditors other than micro and small', 13)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than', 14), ('total outstanding due of other creditors other than micro and small', 14)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = income tax payables , res_fuzz_match = [('other trade payables', 65), ('trade payable', 64), ('trade and other payables', 63), ('accounts payable', 60), ('outstanding dues of creditors other than', 25), ('other than micro and small enterprises', 23), ('small enterprises', 19), ('micro enterprises and small enterprises', 16), ('total outstanding due of other creditors other than micro and small', 16), ('outstanding dues of creditors other than micro enterprises and small enterprises', 14), ('micro enterprises', 13), ('outstanding dues of micro enterprises and small enterprises', 12)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total currentliabilities , res_fuzz_match = [('accounts payable', 48), ('small enterprises', 47), ('micro enterprises', 40), ('micro enterprises and small enterprises', 36), ('outstanding dues of micro enterprises and small enterprises', 35), ('other than micro and small enterprises', 35), ('outstanding dues of creditors other than', 34), ('trade and other payables', 32), ('outstanding dues of creditors other than micro enterprises and small enterprises', 31), ('trade payable', 30), ('total outstanding due of other creditors other than micro and small', 27), ('other trade payables', 24)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 100, 'value': 30491.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['12'], 'line_item_value': [30491.0]}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan trade payables due to parent entity suzuki motor corporation , res_fuzz_match = [(' trade payables', 100), (' trade payables', 100), (' trade payables - related parties', 79), (' trade payables - other parties', 79), (' other trade payables', 78), (' amounts payable to controlling entity', 64), ('current', 57), (' trade and other payables', 55), ('trade creditors', 50), (' related party payables', 50)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan other trade payables , res_fuzz_match = [(' trade payables', 100), (' trade payables', 100), (' other trade payables', 100), (' trade and other payables', 68), (' trade payables - related parties', 67), (' trade payables - other parties', 67), (' related party payables', 59), ('trade creditors', 46), ('current', 43), (' amounts payable to controlling entity', 35)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan accrued expenses , res_fuzz_match = [('current', 43), ('trade creditors', 36), (' amounts payable to controlling entity', 34), (' trade payables', 33), (' trade payables', 33), (' trade and other payables', 29), (' trade payables - related parties', 29), (' trade payables - other parties', 29), (' related party payables', 22), (' other trade payables', 22)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan total trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 70), (' other trade payables', 67), (' trade payables - related parties', 52), ('trade creditors', 50), (' related party payables', 50), (' amounts payable to controlling entity', 45), ('current', 29)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none employee benefits employee benefits , res_fuzz_match = [('current', 43), (' trade payables', 42), (' trade payables', 42), (' amounts payable to controlling entity', 40), (' trade payables - related parties', 38), ('trade creditors', 36), (' trade and other payables', 36), (' related party payables', 33), (' trade payables - other parties', 33), (' other trade payables', 33)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan trade payables due to parent entity suzuki motor corporation , res_fuzz_match = [(' trade payables', 100), (' trade payables', 100), (' trade payables - related parties', 79), (' trade payables - other parties', 79), (' other trade payables', 78), (' amounts payable to controlling entity', 64), ('current', 57), (' trade and other payables', 55), ('trade creditors', 50), (' related party payables', 50)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan other trade payables , res_fuzz_match = [(' trade payables', 100), (' trade payables', 100), (' other trade payables', 100), (' trade and other payables', 68), (' trade payables - related parties', 67), (' trade payables - other parties', 67), (' related party payables', 59), ('trade creditors', 46), ('current', 43), (' amounts payable to controlling entity', 35)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan accrued expenses , res_fuzz_match = [('current', 43), ('trade creditors', 36), (' amounts payable to controlling entity', 34), (' trade payables', 33), (' trade payables', 33), (' trade and other payables', 29), (' trade payables - related parties', 29), (' trade payables - other parties', 29), (' related party payables', 22), (' other trade payables', 22)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan total trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 70), (' other trade payables', 67), (' trade payables - related parties', 52), ('trade creditors', 50), (' related party payables', 50), (' amounts payable to controlling entity', 45), ('current', 29)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none employee benefits employee benefits , res_fuzz_match = [('current', 43), (' trade payables', 42), (' trade payables', 42), (' amounts payable to controlling entity', 40), (' trade payables - related parties', 38), ('trade creditors', 36), (' trade and other payables', 36), (' related party payables', 33), (' trade payables - other parties', 33), (' other trade payables', 33)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 5, 6, 8], 'score': [100, 100, 100, 100, 100, 100], 'value': [16654.0, 805.0, 30491.0, 18249.0, 2420.0, 36847.0], 'label': ['None nan Trade payables due to parent entity Suzuki Motor Corporation', 'None nan Other trade payables', 'None nan Total trade and other payables', 'None nan Trade payables due to parent entity Suzuki Motor Corporation', 'None nan Other trade payables', 'None nan Total trade and other payables'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 28)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other liabilities', 41), ('other financial liabilities', 38), ('other current liabilities', 33), ('other current financial liabilities', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('other financial liabilities', 34), ('other current financial liabilities', 33), ('trade and other payables', 22), ('other liabilities', 22)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8), ('trade and other payables', 7)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other current liabilities', 57), ('other financial liabilities', 57), ('other current financial liabilities', 56), ('other liabilities', 44), ('trade and other payables', 22)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = income tax payables , res_fuzz_match = [('trade and other payables', 63), ('other financial liabilities', 44), ('other liabilities', 43), ('other current liabilities', 39), ('other current financial liabilities', 36)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total currentliabilities , res_fuzz_match = [('other current liabilities', 69), ('other current financial liabilities', 51), ('other liabilities', 37), ('trade and other payables', 32), ('other financial liabilities', 29)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13], 'score': 100, 'value': 36847.0, 'line_item_label': ['Current liabilities', 'Trade and other payables'], 'note_numbers': [nan, '12'], 'line_item_value': [0.0, 36847.0]}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 28)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other liabilities', 41), ('other financial liabilities', 38), ('other current liabilities', 33), ('other current financial liabilities', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('other financial liabilities', 34), ('other current financial liabilities', 33), ('trade and other payables', 22), ('other liabilities', 22)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8), ('trade and other payables', 7)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other current liabilities', 57), ('other financial liabilities', 57), ('other current financial liabilities', 56), ('other liabilities', 44), ('trade and other payables', 22)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = income tax payables , res_fuzz_match = [('trade and other payables', 63), ('other financial liabilities', 44), ('other liabilities', 43), ('other current liabilities', 39), ('other current financial liabilities', 36)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total currentliabilities , res_fuzz_match = [('other current liabilities', 69), ('other current financial liabilities', 51), ('other liabilities', 37), ('trade and other payables', 32), ('other financial liabilities', 29)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13], 'score': 100, 'value': 30491.0, 'line_item_label': ['Current liabilities', 'Trade and other payables'], 'note_numbers': [nan, '12'], 'line_item_value': [0.0, 30491.0]}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan trade payables due to parent entity suzuki motor corporation , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 42)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan other trade payables , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan accrued expenses , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 57)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan total trade and other payables , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none employee benefits employee benefits , res_fuzz_match = [('accrued expenses', 33), ('interest accrued', 21)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan trade payables due to parent entity suzuki motor corporation , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 42)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan other trade payables , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan accrued expenses , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 57)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan total trade and other payables , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none employee benefits employee benefits , res_fuzz_match = [('accrued expenses', 33), ('interest accrued', 21)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 7], 'score': [100, 100], 'value': [13032.0, 16178.0], 'label': ['None nan Accrued expenses', 'None nan Accrued expenses'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 65), ('current tax liabilities', 41)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 50), (' income tax payable', 21), ('current tax liabilities', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current tax liabilities', 69), ('tax', 67), (' income tax payable', 55)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = income tax payables , res_fuzz_match = [(' income tax payable', 100), ('tax', 100), ('current tax liabilities', 60)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total currentliabilities , res_fuzz_match = [('tax', 67), ('current tax liabilities', 60), (' income tax payable', 28)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 3926.0, 'line_item_label': ['Income tax payables'], 'note_numbers': ['7(d)'], 'line_item_value': [3926.0]}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 65), ('current tax liabilities', 41)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 50), (' income tax payable', 21), ('current tax liabilities', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current tax liabilities', 69), ('tax', 67), (' income tax payable', 55)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = income tax payables , res_fuzz_match = [(' income tax payable', 100), ('tax', 100), ('current tax liabilities', 60)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total currentliabilities , res_fuzz_match = [('tax', 67), ('current tax liabilities', 60), (' income tax payable', 28)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 0.0, 'line_item_label': ['Income tax payables'], 'note_numbers': ['7(d)'], 'line_item_value': [0.0]}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' other financial liabilities', 47), (' foreign exchange contract liability', 44), (' customer deposits', 36), (' employee benefits', 34), (' deferred revenue', 31), (' trade and other payables', 28), ('provisions', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' other financial liabilities', 38), (' deferred revenue', 35), ('other current liabilities', 33), (' financial liabilities', 33), (' other current liabilities', 33), (' customer deposits', 22), (' foreign exchange contract liability', 19), ('provisions', 14), (' employee benefits', 11)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' other financial liabilities', 34), (' deferred revenue', 30), (' financial liabilities', 28), (' foreign exchange contract liability', 26), (' trade and other payables', 22), (' customer deposits', 21), ('provisions', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' deferred revenue', 22), ('other current liabilities', 15), (' other current liabilities', 15), (' foreign exchange contract liability', 11), (' financial liabilities', 10), (' employee benefits', 10), (' customer deposits', 10), (' other financial liabilities', 8), (' trade and other payables', 7)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' foreign exchange contract liability', 65), ('other current liabilities', 57), (' other current liabilities', 57), (' other financial liabilities', 57), (' customer deposits', 28), (' employee benefits', 27), (' trade and other payables', 22), ('provisions', 19), (' deferred revenue', 15)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 38), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = income tax payables , res_fuzz_match = [(' trade and other payables', 63), (' other financial liabilities', 44), (' financial liabilities', 40), (' customer deposits', 40), ('other current liabilities', 39), (' other current liabilities', 39), (' foreign exchange contract liability', 26), (' employee benefits', 13), ('provisions', 9), (' deferred revenue', 7)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total currentliabilities , res_fuzz_match = [('other current liabilities', 69), (' other current liabilities', 69), (' customer deposits', 34), (' employee benefits', 33), (' trade and other payables', 32), (' deferred revenue', 30), (' foreign exchange contract liability', 30), (' other financial liabilities', 29), (' financial liabilities', 28), ('provisions', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13, 14, 15], 'score': 100, 'value': 39783.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Employee benefits', 'Provisions'], 'note_numbers': [nan, '12', '13', '14'], 'line_item_value': [0.0, 36847.0, 2040.0, 896.0]}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' other financial liabilities', 47), (' foreign exchange contract liability', 44), (' customer deposits', 36), (' employee benefits', 34), (' deferred revenue', 31), (' trade and other payables', 28), ('provisions', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' other financial liabilities', 38), (' deferred revenue', 35), ('other current liabilities', 33), (' financial liabilities', 33), (' other current liabilities', 33), (' customer deposits', 22), (' foreign exchange contract liability', 19), ('provisions', 14), (' employee benefits', 11)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' other financial liabilities', 34), (' deferred revenue', 30), (' financial liabilities', 28), (' foreign exchange contract liability', 26), (' trade and other payables', 22), (' customer deposits', 21), ('provisions', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' deferred revenue', 22), ('other current liabilities', 15), (' other current liabilities', 15), (' foreign exchange contract liability', 11), (' financial liabilities', 10), (' employee benefits', 10), (' customer deposits', 10), (' other financial liabilities', 8), (' trade and other payables', 7)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' foreign exchange contract liability', 65), ('other current liabilities', 57), (' other current liabilities', 57), (' other financial liabilities', 57), (' customer deposits', 28), (' employee benefits', 27), (' trade and other payables', 22), ('provisions', 19), (' deferred revenue', 15)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 38), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = income tax payables , res_fuzz_match = [(' trade and other payables', 63), (' other financial liabilities', 44), (' financial liabilities', 40), (' customer deposits', 40), ('other current liabilities', 39), (' other current liabilities', 39), (' foreign exchange contract liability', 26), (' employee benefits', 13), ('provisions', 9), (' deferred revenue', 7)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total currentliabilities , res_fuzz_match = [('other current liabilities', 69), (' other current liabilities', 69), (' customer deposits', 34), (' employee benefits', 33), (' trade and other payables', 32), (' deferred revenue', 30), (' foreign exchange contract liability', 30), (' other financial liabilities', 29), (' financial liabilities', 28), ('provisions', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13, 14, 15], 'score': 100, 'value': 34610.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Employee benefits', 'Provisions'], 'note_numbers': [nan, '12', '13', '14'], 'line_item_value': [0.0, 30491.0, 1993.0, 2126.0]}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan trade payables due to parent entity suzuki motor corporation , res_fuzz_match = [(' ultimate parent entity', 79), (' gst payables', 70), (' rebates', 60), (' other', 60), ('current', 57), (' other creditors', 56), (' other creditors', 56), (' contract liabilites - current', 56), (' other creditors', 56), (' gst payable and accruals', 50), (' warranty', 50), (' share of joint venture payables', 48), (' total current employee benefits', 48), (' loan payable to relayed party under tax funding agreement', 46), (' loans from related party', 43), (' other related parties', 41), (' employee benefits - payroll', 41), (' gst liabilities', 40), (' restructuring', 40), (' employee benefits - current', 39), (' provisions - current', 36), ('other creditors and accruals', 35), (' forward exchange contracts', 35), (' current - liability for annual and long service leave', 34), (' derivative contracts - at fair value', 33), (' secured long-term bank loans', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 31), (' provision for associate funding', 29), (' abandonment and decommissioning costs', 27)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan other trade payables , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' other related parties', 65), (' other creditors', 57), (' other creditors', 57), (' other creditors', 57), ('other creditors and accruals', 55), (' share of joint venture payables', 53), (' derivative contracts - at fair value', 50), (' loans from related party', 48), (' gst payable and accruals', 44), ('current', 43), (' gst liabilities', 42), (' rebates', 40), (' arising from service contracts', 39), (' forward exchange contracts', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 37), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' current - liability for annual and long service leave', 35), (' gst', 33), (' provision for associate funding', 32), (' restructuring', 30), (' secured long-term bank loans', 29), (' ultimate parent entity', 26), (' employee benefits - current', 26), (' make good provisions', 25), (' total current employee benefits', 22), (' abandonment and decommissioning costs', 14), (' provisions - current', 10)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan accrued expenses , res_fuzz_match = [('other creditors and accruals', 54), (' gst payable and accruals', 49), (' secured long-term bank loans', 46), ('current', 43), (' gst', 40), (' rebates', 40), (' other', 40), (' loans from related party', 39), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' ultimate parent entity', 37), (' contract liabilites - current', 37), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' other related parties', 35), (' provision for associate funding', 34), (' provisions - current', 33), (' abandonment and decommissioning costs', 33), (' forward exchange contracts', 33), (' derivative contracts - at fair value', 31), (' employee benefits - payroll', 30), (' current - liability for annual and long service leave', 29), (' share of joint venture payables', 29), (' arising from service contracts', 28), (' make good provisions', 27), (' warranty', 25), (' total current employee benefits', 21), (' restructuring', 20), (' gst payables', 17), (' gst liabilities', 17)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan total trade and other payables , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' share of joint venture payables', 61), (' other related parties', 55), ('other creditors and accruals', 47), (' current - liability for annual and long service leave', 47), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' gst payable and accruals', 44), (' gst liabilities', 42), (' rebates', 40), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' warranty', 38), (' loans from related party', 36), (' contract liabilites - current', 36), (' total current employee benefits', 35), (' gst', 33), (' ultimate parent entity', 32), (' arising from service contracts', 32), (' restructuring', 30), ('current', 29), (' loan payable to relayed party under tax funding agreement', 27), (' provision for associate funding', 23), (' employee benefits - current', 22), (' provisions - current', 10)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none employee benefits employee benefits , res_fuzz_match = [(' employee benefits - payroll', 82), (' employee benefits - current', 74), (' total current employee benefits', 72), (' secured long-term bank loans', 46), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' other related parties', 41), (' gst payables', 40), (' rebates', 40), (' other', 40), (' ultimate parent entity', 38), (' contract liabilites - current', 36), (' share of joint venture payables', 36), ('other creditors and accruals', 35), (' loans from related party', 33), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' gst liabilities', 30), (' loan payable to relayed party under tax funding agreement', 27), (' provision for associate funding', 27), (' derivative contracts - at fair value', 25), (' warranty', 25), (' forward exchange contracts', 23), (' restructuring', 22), (' arising from service contracts', 20), (' current - liability for annual and long service leave', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan trade payables due to parent entity suzuki motor corporation , res_fuzz_match = [(' ultimate parent entity', 79), (' gst payables', 70), (' rebates', 60), (' other', 60), ('current', 57), (' other creditors', 56), (' other creditors', 56), (' contract liabilites - current', 56), (' other creditors', 56), (' gst payable and accruals', 50), (' warranty', 50), (' share of joint venture payables', 48), (' total current employee benefits', 48), (' loan payable to relayed party under tax funding agreement', 46), (' loans from related party', 43), (' other related parties', 41), (' employee benefits - payroll', 41), (' gst liabilities', 40), (' restructuring', 40), (' employee benefits - current', 39), (' provisions - current', 36), ('other creditors and accruals', 35), (' forward exchange contracts', 35), (' current - liability for annual and long service leave', 34), (' derivative contracts - at fair value', 33), (' secured long-term bank loans', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 31), (' provision for associate funding', 29), (' abandonment and decommissioning costs', 27)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan other trade payables , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' other related parties', 65), (' other creditors', 57), (' other creditors', 57), (' other creditors', 57), ('other creditors and accruals', 55), (' share of joint venture payables', 53), (' derivative contracts - at fair value', 50), (' loans from related party', 48), (' gst payable and accruals', 44), ('current', 43), (' gst liabilities', 42), (' rebates', 40), (' arising from service contracts', 39), (' forward exchange contracts', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 37), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' current - liability for annual and long service leave', 35), (' gst', 33), (' provision for associate funding', 32), (' restructuring', 30), (' secured long-term bank loans', 29), (' ultimate parent entity', 26), (' employee benefits - current', 26), (' make good provisions', 25), (' total current employee benefits', 22), (' abandonment and decommissioning costs', 14), (' provisions - current', 10)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan accrued expenses , res_fuzz_match = [('other creditors and accruals', 54), (' gst payable and accruals', 49), (' secured long-term bank loans', 46), ('current', 43), (' gst', 40), (' rebates', 40), (' other', 40), (' loans from related party', 39), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' ultimate parent entity', 37), (' contract liabilites - current', 37), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' other related parties', 35), (' provision for associate funding', 34), (' provisions - current', 33), (' abandonment and decommissioning costs', 33), (' forward exchange contracts', 33), (' derivative contracts - at fair value', 31), (' employee benefits - payroll', 30), (' current - liability for annual and long service leave', 29), (' share of joint venture payables', 29), (' arising from service contracts', 28), (' make good provisions', 27), (' warranty', 25), (' total current employee benefits', 21), (' restructuring', 20), (' gst payables', 17), (' gst liabilities', 17)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan total trade and other payables , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' share of joint venture payables', 61), (' other related parties', 55), ('other creditors and accruals', 47), (' current - liability for annual and long service leave', 47), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' gst payable and accruals', 44), (' gst liabilities', 42), (' rebates', 40), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' warranty', 38), (' loans from related party', 36), (' contract liabilites - current', 36), (' total current employee benefits', 35), (' gst', 33), (' ultimate parent entity', 32), (' arising from service contracts', 32), (' restructuring', 30), ('current', 29), (' loan payable to relayed party under tax funding agreement', 27), (' provision for associate funding', 23), (' employee benefits - current', 22), (' provisions - current', 10)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none employee benefits employee benefits , res_fuzz_match = [(' employee benefits - payroll', 82), (' employee benefits - current', 74), (' total current employee benefits', 72), (' secured long-term bank loans', 46), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' other related parties', 41), (' gst payables', 40), (' rebates', 40), (' other', 40), (' ultimate parent entity', 38), (' contract liabilites - current', 36), (' share of joint venture payables', 36), ('other creditors and accruals', 35), (' loans from related party', 33), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' gst liabilities', 30), (' loan payable to relayed party under tax funding agreement', 27), (' provision for associate funding', 27), (' derivative contracts - at fair value', 25), (' warranty', 25), (' forward exchange contracts', 23), (' restructuring', 22), (' arising from service contracts', 20), (' current - liability for annual and long service leave', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 4, 6, 8, 9], 'score': [100, 100, 82, 100, 100, 82], 'value': [805.0, 30491.0, 2023.0, 2420.0, 36847.0, 2022.0], 'label': ['None nan Other trade payables', 'None nan Total trade and other payables', 'None Employee benefits Employee benefits', 'None nan Other trade payables', 'None nan Total trade and other payables', 'None Employee benefits Employee benefits'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none current leave obligations expected to be settled after 12 months , res_fuzz_match = [('current', 100), (' gst', 67), (' provisions - current', 64), (' rebates', 60), (' other', 60), (' other creditors', 50), (' other creditors', 50), (' gst payables', 50), (' other creditors', 50), (' warranty', 50), (' loans from related party', 48), (' employee benefits - current', 48), (' other related parties', 47), (' employee benefits - payroll', 45), (' total current employee benefits', 45), (' ultimate parent entity', 42), (' current - liability for annual and long service leave', 40), (' contract liabilites - current', 40), (' gst liabilities', 40), (' secured long-term bank loans', 38), (' derivative contracts - at fair value', 36), (' loan payable to relayed party under tax funding agreement', 36), (' share of joint venture payables', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' forward exchange contracts', 33), (' gst payable and accruals', 32), ('other creditors and accruals', 31), (' restructuring', 30), (' abandonment and decommissioning costs', 27), (' make good provisions', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': [100], 'value': [838.0], 'label': ['None Current leave obligations expected to be settled after 12 months'], 'year': [], 'colname_found': ['rows']}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 28)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current liabilities', 69)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = income tax payables , res_fuzz_match = [('current liabilities', 33)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total currentliabilities , res_fuzz_match = [('current liabilities', 76)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 28)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current liabilities', 69)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = income tax payables , res_fuzz_match = [('current liabilities', 33)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total currentliabilities , res_fuzz_match = [('current liabilities', 76)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('long term debt', 21)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term debt', 40)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term debt', 41)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total non-currentlabilities , res_fuzz_match = [('long term debt', 26)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('long term debt', 21)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term debt', 40)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term debt', 41)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total non-currentlabilities , res_fuzz_match = [('long term debt', 26)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 35), (' borrowings', 33)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), (' loans and borrowings', 40), (' borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 40), (' loans and borrowings', 29), (' borrowings', 22)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 22)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 44), (' loans and borrowings', 29), (' borrowings', 22)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 40), (' lease liabilities', 36), (' lease liability', 36), (' loans and borrowings', 30), (' borrowings', 17)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total non-currentlabilities , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' loans and borrowings', 36), (' borrowings', 33), (' lease liabilities', 18), (' lease liability', 18)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [23], 'score': 100, 'value': 95.0, 'line_item_label': ['Lease Liabilities'], 'note_numbers': ['11(b)'], 'line_item_value': [95.0]}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 35), (' borrowings', 33)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), (' loans and borrowings', 40), (' borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 40), (' loans and borrowings', 29), (' borrowings', 22)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 22)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 44), (' loans and borrowings', 29), (' borrowings', 22)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 40), (' lease liabilities', 36), (' lease liability', 36), (' loans and borrowings', 30), (' borrowings', 17)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total non-currentlabilities , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' loans and borrowings', 36), (' borrowings', 33), (' lease liabilities', 18), (' lease liability', 18)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [23], 'score': 100, 'value': 54.0, 'line_item_label': ['Lease Liabilities'], 'note_numbers': ['11(b)'], 'line_item_value': [54.0]}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = lease liabilities current , res_fuzz_match = [('leases', 100), (' lease liabilities', 100), (' lease liability', 100), (' lease liabilities - non-current', 84), (' non current', 73), (' bank loan', 44), (' secured finance debt', 38), ('later than 1 year', 27), ('not later than 5 years', 22)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = lease liabilities non-current , res_fuzz_match = [('leases', 100), (' lease liabilities', 100), (' lease liability', 100), (' lease liabilities - non-current', 100), (' non current', 78), (' bank loan', 44), ('not later than 5 years', 31), ('later than 1 year', 27), (' secured finance debt', 26)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = lease liabilities total , res_fuzz_match = [('leases', 100), (' lease liabilities', 100), (' lease liability', 100), (' lease liabilities - non-current', 76), (' bank loan', 44), (' secured finance debt', 39), ('later than 1 year', 33), (' non current', 25), ('not later than 5 years', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: within one year , res_fuzz_match = [('leases', 100), (' lease liabilities', 100), (' lease liability', 100), (' lease liabilities - non-current', 68), ('later than 1 year', 53), ('not later than 5 years', 53), (' non current', 45), (' bank loan', 33), (' secured finance debt', 29)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: later than one year but not latert than five years , res_fuzz_match = [('leases', 100), (' lease liabilities', 100), (' lease liability', 100), ('later than 1 year', 80), ('not later than 5 years', 79), (' lease liabilities - non-current', 68), (' bank loan', 56), (' non current', 36), (' secured finance debt', 29)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = later than five years total , res_fuzz_match = [('later than 1 year', 80), ('not later than 5 years', 74), ('leases', 50), (' lease liabilities', 38), (' lease liability', 38), (' secured finance debt', 35), (' bank loan', 33), (' lease liabilities - non-current', 28), (' non current', 27)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = lease liabilities current , res_fuzz_match = [('leases', 100), (' lease liabilities', 100), (' lease liability', 100), (' lease liabilities - non-current', 84), (' non current', 73), (' bank loan', 44), (' secured finance debt', 38), ('later than 1 year', 27), ('not later than 5 years', 22)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = lease liabilities non-current , res_fuzz_match = [('leases', 100), (' lease liabilities', 100), (' lease liability', 100), (' lease liabilities - non-current', 100), (' non current', 78), (' bank loan', 44), ('not later than 5 years', 31), ('later than 1 year', 27), (' secured finance debt', 26)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = lease liabilities total , res_fuzz_match = [('leases', 100), (' lease liabilities', 100), (' lease liability', 100), (' lease liabilities - non-current', 76), (' bank loan', 44), (' secured finance debt', 39), ('later than 1 year', 33), (' non current', 25), ('not later than 5 years', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: within one year , res_fuzz_match = [('leases', 100), (' lease liabilities', 100), (' lease liability', 100), (' lease liabilities - non-current', 68), ('later than 1 year', 53), ('not later than 5 years', 53), (' non current', 45), (' bank loan', 33), (' secured finance debt', 29)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: later than one year but not latert than five years , res_fuzz_match = [('leases', 100), (' lease liabilities', 100), (' lease liability', 100), ('later than 1 year', 80), ('not later than 5 years', 79), (' lease liabilities - non-current', 68), (' bank loan', 56), (' non current', 36), (' secured finance debt', 29)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = later than five years total , res_fuzz_match = [('later than 1 year', 80), ('not later than 5 years', 74), ('leases', 50), (' lease liabilities', 38), (' lease liability', 38), (' secured finance debt', 35), (' bank loan', 33), (' lease liabilities - non-current', 28), (' non current', 27)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 'score': [100, 100, 100, 100, 100, 80, 100, 100, 100, 100, 100, 80], 'value': [40.0, 54.0, 94.0, 40.0, 54.0, 94.0, 64.0, 95.0, 159.0, 64.0, 95.0, 159.0], 'label': ['Lease Liabilities Current', 'Lease Liabilities Non-current', 'Lease Liabilities Total', 'Future lease payments in relation to lease liabilities as at period end are as follows: Within one year', 'Future lease payments in relation to lease liabilities as at period end are as follows: Later than one year but not latert than five years', 'Later than five years Total', 'Lease Liabilities Current', 'Lease Liabilities Non-current', 'Lease Liabilities Total', 'Future lease payments in relation to lease liabilities as at period end are as follows: Within one year', 'Future lease payments in relation to lease liabilities as at period end are as follows: Later than one year but not latert than five years', 'Later than five years Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none current leave obligations expected to be settled after 12 months , res_fuzz_match = [(' non current', 91), ('leases', 75), (' lease liabilities', 55), (' lease liability', 55), ('later than 1 year', 54), ('not later than 5 years', 53), (' secured finance debt', 47), (' bank loan', 44), (' lease liabilities - non-current', 37)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': [91], 'value': [838.0], 'label': ['None Current leave obligations expected to be settled after 12 months'], 'year': [], 'colname_found': ['rows']}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty carrying amount at beginning of year , res_fuzz_match = [('not later than 5 years', 61), ('later than 1 year', 59), ('leases', 50), (' non current', 45), (' bank loan', 44), (' secured finance debt', 30), (' lease liabilities', 27), (' lease liability', 27), (' lease liabilities - non-current', 26)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty payments made during the year , res_fuzz_match = [('later than 1 year', 67), ('not later than 5 years', 63), ('leases', 50), (' non current', 45), (' bank loan', 44), (' secured finance debt', 31), (' lease liabilities', 27), (' lease liability', 27), (' lease liabilities - non-current', 26)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty provisions made during the year , res_fuzz_match = [('later than 1 year', 67), ('not later than 5 years', 63), ('leases', 50), (' non current', 45), (' bank loan', 44), (' secured finance debt', 35), (' lease liabilities', 27), (' lease liability', 27), (' lease liabilities - non-current', 26)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty carrying am ount at end of year , res_fuzz_match = [('not later than 5 years', 65), ('later than 1 year', 53), ('leases', 50), (' non current', 45), (' bank loan', 44), (' secured finance debt', 35), (' lease liabilities', 27), (' lease liability', 27), (' lease liabilities - non-current', 26)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty current , res_fuzz_match = [(' non current', 82), (' lease liabilities - non-current', 43), ('later than 1 year', 40), (' bank loan', 33), (' secured finance debt', 31), ('leases', 25), ('not later than 5 years', 21), (' lease liabilities', 13), (' lease liability', 13)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty non-current , res_fuzz_match = [(' non current', 78), (' lease liabilities - non-current', 62), (' bank loan', 56), ('later than 1 year', 40), ('leases', 25), ('not later than 5 years', 21), (' secured finance debt', 19), (' lease liabilities', 18), (' lease liability', 18)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty total , res_fuzz_match = [(' bank loan', 56), ('leases', 40), (' non current', 36), (' secured finance debt', 29), (' lease liabilities - non-current', 29), ('later than 1 year', 24), ('not later than 5 years', 24), (' lease liabilities', 17), (' lease liability', 17)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty carrying amount at beginning of year , res_fuzz_match = [('not later than 5 years', 61), ('later than 1 year', 59), ('leases', 50), (' non current', 45), (' bank loan', 44), (' secured finance debt', 30), (' lease liabilities', 27), (' lease liability', 27), (' lease liabilities - non-current', 26)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty payments made during the year , res_fuzz_match = [('later than 1 year', 67), ('not later than 5 years', 63), ('leases', 50), (' non current', 45), (' bank loan', 44), (' secured finance debt', 31), (' lease liabilities', 27), (' lease liability', 27), (' lease liabilities - non-current', 26)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty provisions made during the year , res_fuzz_match = [('later than 1 year', 67), ('not later than 5 years', 63), ('leases', 50), (' non current', 45), (' bank loan', 44), (' secured finance debt', 35), (' lease liabilities', 27), (' lease liability', 27), (' lease liabilities - non-current', 26)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty carrying am ount at end of year , res_fuzz_match = [('not later than 5 years', 65), ('later than 1 year', 53), ('leases', 50), (' non current', 45), (' bank loan', 44), (' secured finance debt', 35), (' lease liabilities', 27), (' lease liability', 27), (' lease liabilities - non-current', 26)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty current , res_fuzz_match = [(' non current', 82), (' lease liabilities - non-current', 43), ('later than 1 year', 40), (' bank loan', 33), (' secured finance debt', 31), ('leases', 25), ('not later than 5 years', 21), (' lease liabilities', 13), (' lease liability', 13)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty non-current , res_fuzz_match = [(' non current', 78), (' lease liabilities - non-current', 62), (' bank loan', 56), ('later than 1 year', 40), ('leases', 25), ('not later than 5 years', 21), (' secured finance debt', 19), (' lease liabilities', 18), (' lease liability', 18)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty total , res_fuzz_match = [(' bank loan', 56), ('leases', 40), (' non current', 36), (' secured finance debt', 29), (' lease liabilities - non-current', 29), ('later than 1 year', 24), ('not later than 5 years', 24), (' lease liabilities', 17), (' lease liability', 17)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 11], 'score': [82, 82], 'value': [2126.0, 896.0], 'label': ['Warranty Current', 'Warranty Current'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan trade payables due to parent entity suzuki motor corporation , res_fuzz_match = [(' non current', 55), (' secured finance debt', 47), (' lease liabilities', 45), (' lease liability', 45), (' bank loan', 44), ('not later than 5 years', 42), ('later than 1 year', 40), (' lease liabilities - non-current', 32), ('leases', 25)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan other trade payables , res_fuzz_match = [('later than 1 year', 60), ('not later than 5 years', 58), (' non current', 55), (' lease liabilities', 48), (' lease liability', 48), (' secured finance debt', 47), (' bank loan', 44), ('leases', 40), (' lease liabilities - non-current', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan accrued expenses , res_fuzz_match = [('leases', 50), (' secured finance debt', 47), ('later than 1 year', 47), (' non current', 45), (' bank loan', 44), ('not later than 5 years', 37), (' lease liabilities', 36), (' lease liability', 36), (' lease liabilities - non-current', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan total trade and other payables , res_fuzz_match = [(' bank loan', 56), (' non current', 55), ('later than 1 year', 53), ('not later than 5 years', 51), ('leases', 50), (' lease liabilities', 48), (' lease liability', 48), (' secured finance debt', 41), (' lease liabilities - non-current', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none employee benefits employee benefits , res_fuzz_match = [('leases', 50), (' non current', 45), (' lease liabilities', 36), (' lease liability', 36), (' secured finance debt', 35), (' bank loan', 33), ('not later than 5 years', 32), (' lease liabilities - non-current', 21), ('later than 1 year', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [('leases', 50), ('not later than 5 years', 50), (' non current', 45), (' secured finance debt', 36), ('later than 1 year', 36), (' bank loan', 33), (' lease liabilities - non-current', 29), (' lease liabilities', 25), (' lease liability', 25)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan liability for annual and long-service leave , res_fuzz_match = [('leases', 75), (' lease liabilities', 73), (' lease liability', 73), (' bank loan', 67), (' lease liabilities - non-current', 63), (' non current', 45), ('not later than 5 years', 42), (' secured finance debt', 41), ('later than 1 year', 40)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [('leases', 50), ('not later than 5 years', 50), (' non current', 45), (' secured finance debt', 36), ('later than 1 year', 36), (' bank loan', 33), (' lease liabilities - non-current', 29), (' lease liabilities', 25), (' lease liability', 25)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan liability forlong-service leave , res_fuzz_match = [('leases', 75), (' lease liabilities', 73), (' lease liability', 73), (' lease liabilities - non-current', 63), (' bank loan', 56), (' non current', 45), ('not later than 5 years', 42), (' secured finance debt', 41), ('later than 1 year', 40)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [('leases', 50), ('not later than 5 years', 50), (' non current', 45), (' secured finance debt', 36), ('later than 1 year', 36), (' bank loan', 33), (' lease liabilities - non-current', 29), (' lease liabilities', 25), (' lease liability', 25)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan trade payables due to parent entity suzuki motor corporation , res_fuzz_match = [(' non current', 55), (' secured finance debt', 47), (' lease liabilities', 45), (' lease liability', 45), (' bank loan', 44), ('not later than 5 years', 42), ('later than 1 year', 40), (' lease liabilities - non-current', 32), ('leases', 25)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan other trade payables , res_fuzz_match = [('later than 1 year', 60), ('not later than 5 years', 58), (' non current', 55), (' lease liabilities', 48), (' lease liability', 48), (' secured finance debt', 47), (' bank loan', 44), ('leases', 40), (' lease liabilities - non-current', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan accrued expenses , res_fuzz_match = [('leases', 50), (' secured finance debt', 47), ('later than 1 year', 47), (' non current', 45), (' bank loan', 44), ('not later than 5 years', 37), (' lease liabilities', 36), (' lease liability', 36), (' lease liabilities - non-current', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan total trade and other payables , res_fuzz_match = [(' bank loan', 56), (' non current', 55), ('later than 1 year', 53), ('not later than 5 years', 51), ('leases', 50), (' lease liabilities', 48), (' lease liability', 48), (' secured finance debt', 41), (' lease liabilities - non-current', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none employee benefits employee benefits , res_fuzz_match = [('leases', 50), (' non current', 45), (' lease liabilities', 36), (' lease liability', 36), (' secured finance debt', 35), (' bank loan', 33), ('not later than 5 years', 32), (' lease liabilities - non-current', 21), ('later than 1 year', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [('leases', 50), ('not later than 5 years', 50), (' non current', 45), (' secured finance debt', 36), ('later than 1 year', 36), (' bank loan', 33), (' lease liabilities - non-current', 29), (' lease liabilities', 25), (' lease liability', 25)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan liability for annual and long-service leave , res_fuzz_match = [('leases', 75), (' lease liabilities', 73), (' lease liability', 73), (' bank loan', 67), (' lease liabilities - non-current', 63), (' non current', 45), ('not later than 5 years', 42), (' secured finance debt', 41), ('later than 1 year', 40)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [('leases', 50), ('not later than 5 years', 50), (' non current', 45), (' secured finance debt', 36), ('later than 1 year', 36), (' bank loan', 33), (' lease liabilities - non-current', 29), (' lease liabilities', 25), (' lease liability', 25)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan liability forlong-service leave , res_fuzz_match = [('leases', 75), (' lease liabilities', 73), (' lease liability', 73), (' lease liabilities - non-current', 63), (' bank loan', 56), (' non current', 45), ('not later than 5 years', 42), (' secured finance debt', 41), ('later than 1 year', 40)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [('leases', 50), ('not later than 5 years', 50), (' non current', 45), (' secured finance debt', 36), ('later than 1 year', 36), (' bank loan', 33), (' lease liabilities - non-current', 29), (' lease liabilities', 25), (' lease liability', 25)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 23)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 21)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 21)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total non-currentlabilities , res_fuzz_match = [('interest bearing loans and borrowings', 35), ('(bond)', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 26), ('(bond)', 15)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 23)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 21)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 21)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total non-currentlabilities , res_fuzz_match = [('interest bearing loans and borrowings', 35), ('(bond)', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 26), ('(bond)', 15)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total non-currentlabilities , res_fuzz_match = [('', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total non-currentlabilities , res_fuzz_match = [('', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), ('lease liabilities', 17)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 40)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 44)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 40), ('lease liabilities', 36)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total non-currentlabilities , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 18)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [23], 'score': 100, 'value': 95.0, 'line_item_label': ['Lease Liabilities'], 'note_numbers': ['11(b)'], 'line_item_value': [95.0]}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 40), ('lease liabilities', 17)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 40)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 44)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 40), ('lease liabilities', 36)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total non-currentlabilities , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 18)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [23], 'score': 100, 'value': 54.0, 'line_item_label': ['Lease Liabilities'], 'note_numbers': ['11(b)'], 'line_item_value': [54.0]}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = lease liabilities current , res_fuzz_match = [('deferred tax liabilities', 56), ('total deferred tax (assets) / liabilities', 55)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = lease liabilities non-current , res_fuzz_match = [('deferred tax liabilities', 56), ('total deferred tax (assets) / liabilities', 55)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = lease liabilities total , res_fuzz_match = [('total deferred tax (assets) / liabilities', 58), ('deferred tax liabilities', 56)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: within one year , res_fuzz_match = [('deferred tax liabilities', 62), ('total deferred tax (assets) / liabilities', 46)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: later than one year but not latert than five years , res_fuzz_match = [('deferred tax liabilities', 62), ('total deferred tax (assets) / liabilities', 46)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = later than five years total , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 38)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = lease liabilities current , res_fuzz_match = [('deferred tax liabilities', 56), ('total deferred tax (assets) / liabilities', 55)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = lease liabilities non-current , res_fuzz_match = [('deferred tax liabilities', 56), ('total deferred tax (assets) / liabilities', 55)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = lease liabilities total , res_fuzz_match = [('total deferred tax (assets) / liabilities', 58), ('deferred tax liabilities', 56)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: within one year , res_fuzz_match = [('deferred tax liabilities', 62), ('total deferred tax (assets) / liabilities', 46)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: later than one year but not latert than five years , res_fuzz_match = [('deferred tax liabilities', 62), ('total deferred tax (assets) / liabilities', 46)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = later than five years total , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 38)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none current leave obligations expected to be settled after 12 months , res_fuzz_match = [('total deferred tax (assets) / liabilities', 40), ('deferred tax liabilities', 38)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty carrying amount at beginning of year , res_fuzz_match = [('total deferred tax (assets) / liabilities', 33), ('deferred tax liabilities', 23)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty payments made during the year , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 33)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty provisions made during the year , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty carrying am ount at end of year , res_fuzz_match = [('deferred tax liabilities', 27), ('total deferred tax (assets) / liabilities', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty current , res_fuzz_match = [('total deferred tax (assets) / liabilities', 25), ('deferred tax liabilities', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty non-current , res_fuzz_match = [('total deferred tax (assets) / liabilities', 25), ('deferred tax liabilities', 14)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty total , res_fuzz_match = [('deferred tax liabilities', 36), ('total deferred tax (assets) / liabilities', 36)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty carrying amount at beginning of year , res_fuzz_match = [('total deferred tax (assets) / liabilities', 33), ('deferred tax liabilities', 23)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty payments made during the year , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 33)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty provisions made during the year , res_fuzz_match = [('deferred tax liabilities', 38), ('total deferred tax (assets) / liabilities', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty carrying am ount at end of year , res_fuzz_match = [('deferred tax liabilities', 27), ('total deferred tax (assets) / liabilities', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty current , res_fuzz_match = [('total deferred tax (assets) / liabilities', 25), ('deferred tax liabilities', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty non-current , res_fuzz_match = [('total deferred tax (assets) / liabilities', 25), ('deferred tax liabilities', 14)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = warranty total , res_fuzz_match = [('deferred tax liabilities', 36), ('total deferred tax (assets) / liabilities', 36)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan trade payables due to parent entity suzuki motor corporation , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 36)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan other trade payables , res_fuzz_match = [('deferred tax liabilities', 58), ('total deferred tax (assets) / liabilities', 44)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan accrued expenses , res_fuzz_match = [('total deferred tax (assets) / liabilities', 33), ('deferred tax liabilities', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan total trade and other payables , res_fuzz_match = [('total deferred tax (assets) / liabilities', 54), ('deferred tax liabilities', 52)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none employee benefits employee benefits , res_fuzz_match = [('deferred tax liabilities', 31), ('total deferred tax (assets) / liabilities', 29)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 43)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan liability for annual and long-service leave , res_fuzz_match = [('deferred tax liabilities', 62), ('total deferred tax (assets) / liabilities', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 43)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan liability forlong-service leave , res_fuzz_match = [('deferred tax liabilities', 62), ('total deferred tax (assets) / liabilities', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 43)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan trade payables due to parent entity suzuki motor corporation , res_fuzz_match = [('deferred tax liabilities', 44), ('total deferred tax (assets) / liabilities', 36)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan other trade payables , res_fuzz_match = [('deferred tax liabilities', 58), ('total deferred tax (assets) / liabilities', 44)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan accrued expenses , res_fuzz_match = [('total deferred tax (assets) / liabilities', 33), ('deferred tax liabilities', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan total trade and other payables , res_fuzz_match = [('total deferred tax (assets) / liabilities', 54), ('deferred tax liabilities', 52)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none employee benefits employee benefits , res_fuzz_match = [('deferred tax liabilities', 31), ('total deferred tax (assets) / liabilities', 29)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 43)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan liability for annual and long-service leave , res_fuzz_match = [('deferred tax liabilities', 62), ('total deferred tax (assets) / liabilities', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 43)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none nan liability forlong-service leave , res_fuzz_match = [('deferred tax liabilities', 62), ('total deferred tax (assets) / liabilities', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [('total deferred tax (assets) / liabilities', 50), ('deferred tax liabilities', 43)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('common stock', 23), ('contributed equity', 20), ('contributed equity', 20), ('equity share capital', 19), (' issued capital', 17), ('share capital', 16), (' share capital ', 16), ('perpetual equity instrument', 15)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' issued capital', 38), ('share capital', 35), (' share capital ', 35), ('equity share capital', 25), ('common stock', 22), ('contributed equity', 18), ('contributed equity', 18), ('perpetual equity instrument', 13)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('contributed equity', 58), ('contributed equity', 58), (' issued capital', 40), ('share capital', 38), (' share capital ', 38), ('equity share capital', 36), ('common stock', 30), ('perpetual equity instrument', 25)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' issued capital', 29), ('share capital', 27), (' share capital ', 27), ('contributed equity', 22), ('contributed equity', 22), ('equity share capital', 21), ('perpetual equity instrument', 17), ('common stock', 9)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('share capital', 30), (' share capital ', 30), ('equity share capital', 24), (' issued capital', 23), ('perpetual equity instrument', 20), ('common stock', 14), ('contributed equity', 6), ('contributed equity', 6)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('contributed equity', 32), ('contributed equity', 32), ('share capital', 31), (' share capital ', 31), ('equity share capital', 30), ('perpetual equity instrument', 30), (' issued capital', 24), ('common stock', 7)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total non-currentlabilities , res_fuzz_match = [('common stock', 34), ('perpetual equity instrument', 33), ('contributed equity', 30), ('contributed equity', 30), ('equity share capital', 23), ('share capital', 21), (' share capital ', 21), (' issued capital', 15)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('share capital', 40), (' share capital ', 40), ('equity share capital', 37), ('contributed equity', 32), (' issued capital', 32), ('contributed equity', 32), ('perpetual equity instrument', 29), ('common stock', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('common stock', 23), ('contributed equity', 20), ('contributed equity', 20), ('equity share capital', 19), (' issued capital', 17), ('share capital', 16), (' share capital ', 16), ('perpetual equity instrument', 15)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' issued capital', 38), ('share capital', 35), (' share capital ', 35), ('equity share capital', 25), ('common stock', 22), ('contributed equity', 18), ('contributed equity', 18), ('perpetual equity instrument', 13)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('contributed equity', 58), ('contributed equity', 58), (' issued capital', 40), ('share capital', 38), (' share capital ', 38), ('equity share capital', 36), ('common stock', 30), ('perpetual equity instrument', 25)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' issued capital', 29), ('share capital', 27), (' share capital ', 27), ('contributed equity', 22), ('contributed equity', 22), ('equity share capital', 21), ('perpetual equity instrument', 17), ('common stock', 9)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('share capital', 30), (' share capital ', 30), ('equity share capital', 24), (' issued capital', 23), ('perpetual equity instrument', 20), ('common stock', 14), ('contributed equity', 6), ('contributed equity', 6)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('contributed equity', 32), ('contributed equity', 32), ('share capital', 31), (' share capital ', 31), ('equity share capital', 30), ('perpetual equity instrument', 30), (' issued capital', 24), ('common stock', 7)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total non-currentlabilities , res_fuzz_match = [('common stock', 34), ('perpetual equity instrument', 33), ('contributed equity', 30), ('contributed equity', 30), ('equity share capital', 23), ('share capital', 21), (' share capital ', 21), (' issued capital', 15)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('share capital', 40), (' share capital ', 40), ('equity share capital', 37), ('contributed equity', 32), (' issued capital', 32), ('contributed equity', 32), ('perpetual equity instrument', 29), ('common stock', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('minority interest', 41)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 16)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('minority interest', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('minority interest', 34)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total non-currentlabilities , res_fuzz_match = [('minority interest', 26)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('minority interest', 41)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 16)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('minority interest', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('minority interest', 34)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total non-currentlabilities , res_fuzz_match = [('minority interest', 26)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('long term liabilities', 39)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term liabilities', 50)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term liabilities', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total non-currentlabilities , res_fuzz_match = [('long term liabilities', 18)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('long term liabilities', 39)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term liabilities', 50)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term liabilities', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = total non-currentlabilities , res_fuzz_match = [('long term liabilities', 18)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital', 100), ('share capital', 67), (' share capital ', 67), ('equity share capital', 50), ('contributed equity', 38), ('contributed equity', 38), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('share capital', 50), (' share capital ', 50), (' issued capital', 43), ('contributed equity', 41), ('contributed equity', 41), ('equity share capital', 39), ('perpetual equity instrument', 26), ('common stock', 16)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [30], 'score': 100, 'value': 22400.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['16'], 'line_item_value': [22400.0]}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital', 100), ('share capital', 67), (' share capital ', 67), ('equity share capital', 50), ('contributed equity', 38), ('contributed equity', 38), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('share capital', 50), (' share capital ', 50), (' issued capital', 43), ('contributed equity', 41), ('contributed equity', 41), ('equity share capital', 39), ('perpetual equity instrument', 26), ('common stock', 16)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [30], 'score': 100, 'value': 22400.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['16'], 'line_item_value': [22400.0]}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none opening balance , res_fuzz_match = [('ordinary shares', 29), (' total issued capital', 29), (' ordinary shares fully paid', 27), (' fully paid ordinary shares', 25), (' issued and paid-up share capital', 24), (' retained profits', 23)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none closing balance , res_fuzz_match = [(' ordinary shares fully paid', 32), (' issued and paid-up share capital', 30), ('ordinary shares', 29), (' retained profits', 29), (' total issued capital', 29), (' fully paid ordinary shares', 15)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = retained profits balance at 1 april , res_fuzz_match = [(' retained profits', 100), (' total issued capital', 47), ('ordinary shares', 43), (' issued and paid-up share capital', 35), (' ordinary shares fully paid', 33), (' fully paid ordinary shares', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = retained profits total recognised income and expense , res_fuzz_match = [(' retained profits', 100), (' total issued capital', 62), ('ordinary shares', 43), (' issued and paid-up share capital', 39), (' fully paid ordinary shares', 33), (' ordinary shares fully paid', 28)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = retained profits dividend paid , res_fuzz_match = [(' retained profits', 100), (' ordinary shares fully paid', 42), (' issued and paid-up share capital', 40), (' total issued capital', 38), ('ordinary shares', 36), (' fully paid ordinary shares', 34)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = retained profits balance at 31 march , res_fuzz_match = [(' retained profits', 100), ('ordinary shares', 43), (' total issued capital', 38), (' issued and paid-up share capital', 35), (' fully paid ordinary shares', 34), (' ordinary shares fully paid', 24)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = retained profits share capital , res_fuzz_match = [(' retained profits', 100), (' issued and paid-up share capital', 67), ('ordinary shares', 64), (' ordinary shares fully paid', 52), (' total issued capital', 50), (' fully paid ordinary shares', 43)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = retained profits total , res_fuzz_match = [(' retained profits', 100), (' total issued capital', 48), (' issued and paid-up share capital', 44), ('ordinary shares', 43), (' ordinary shares fully paid', 25), (' fully paid ordinary shares', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = retained profits total , res_fuzz_match = [(' retained profits', 100), (' total issued capital', 48), (' issued and paid-up share capital', 44), ('ordinary shares', 43), (' ordinary shares fully paid', 25), (' fully paid ordinary shares', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = retained profits on issue 1 april , res_fuzz_match = [(' retained profits', 100), (' total issued capital', 62), ('ordinary shares', 43), (' issued and paid-up share capital', 33), (' ordinary shares fully paid', 22), (' fully paid ordinary shares', 15)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = retained profits on issue 31 march , res_fuzz_match = [(' retained profits', 100), (' total issued capital', 55), ('ordinary shares', 43), (' issued and paid-up share capital', 33), (' ordinary shares fully paid', 22), (' fully paid ordinary shares', 15)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none opening balance , res_fuzz_match = [('ordinary shares', 29), (' total issued capital', 29), (' ordinary shares fully paid', 27), (' fully paid ordinary shares', 25), (' issued and paid-up share capital', 24), (' retained profits', 23)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = none closing balance , res_fuzz_match = [(' ordinary shares fully paid', 32), (' issued and paid-up share capital', 30), ('ordinary shares', 29), (' retained profits', 29), (' total issued capital', 29), (' fully paid ordinary shares', 15)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = retained profits balance at 1 april , res_fuzz_match = [(' retained profits', 100), (' total issued capital', 47), ('ordinary shares', 43), (' issued and paid-up share capital', 35), (' ordinary shares fully paid', 33), (' fully paid ordinary shares', 32)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = retained profits total recognised income and expense , res_fuzz_match = [(' retained profits', 100), (' total issued capital', 62), ('ordinary shares', 43), (' issued and paid-up share capital', 39), (' fully paid ordinary shares', 33), (' ordinary shares fully paid', 28)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = retained profits dividend paid , res_fuzz_match = [(' retained profits', 100), (' ordinary shares fully paid', 42), (' issued and paid-up share capital', 40), (' total issued capital', 38), ('ordinary shares', 36), (' fully paid ordinary shares', 34)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = retained profits balance at 31 march , res_fuzz_match = [(' retained profits', 100), ('ordinary shares', 43), (' total issued capital', 38), (' issued and paid-up share capital', 35), (' fully paid ordinary shares', 34), (' ordinary shares fully paid', 24)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = retained profits share capital , res_fuzz_match = [(' retained profits', 100), (' issued and paid-up share capital', 67), ('ordinary shares', 64), (' ordinary shares fully paid', 52), (' total issued capital', 50), (' fully paid ordinary shares', 43)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = retained profits total , res_fuzz_match = [(' retained profits', 100), (' total issued capital', 48), (' issued and paid-up share capital', 44), ('ordinary shares', 43), (' ordinary shares fully paid', 25), (' fully paid ordinary shares', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = retained profits total , res_fuzz_match = [(' retained profits', 100), (' total issued capital', 48), (' issued and paid-up share capital', 44), ('ordinary shares', 43), (' ordinary shares fully paid', 25), (' fully paid ordinary shares', 19)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = retained profits on issue 1 april , res_fuzz_match = [(' retained profits', 100), (' total issued capital', 62), ('ordinary shares', 43), (' issued and paid-up share capital', 33), (' ordinary shares fully paid', 22), (' fully paid ordinary shares', 15)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = retained profits on issue 31 march , res_fuzz_match = [(' retained profits', 100), (' total issued capital', 55), ('ordinary shares', 43), (' issued and paid-up share capital', 33), (' ordinary shares fully paid', 22), (' fully paid ordinary shares', 15)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [81732.0, 11823.0, -17703.0, 75852.0, 0.0, 0.0, 0.0, 22400.0, 22400.0, 64029.0, 17703.0, 0.0, 81732.0, 0.0, 0.0, 0.0, 22400.0, 22400.0], 'label': ['Retained profits Balance at 1 April', 'Retained profits Total recognised income and expense', 'Retained profits Dividend Paid', 'Retained profits Balance at 31 March', 'Retained profits Share Capital', 'Retained profits Total', 'Retained profits Total', 'Retained profits On issue 1 April', 'Retained profits On issue 31 March', 'Retained profits Balance at 1 April', 'Retained profits Total recognised income and expense', 'Retained profits Dividend Paid', 'Retained profits Balance at 31 March', 'Retained profits Share Capital', 'Retained profits Total', 'Retained profits Total', 'Retained profits On issue 1 April', 'Retained profits On issue 31 March'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('additional paid in capital', 41), ('additional paid up capital', 41), ('other reserves', 40), ('other equity', 24), ('reserves and surplus', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('additional paid in capital', 41), ('additional paid up capital', 41), ('other reserves', 40), ('other equity', 24), ('reserves and surplus', 20)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' reserves', 12)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('other reserves ', 40), (' reserves', 21)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' reserves', 12)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('other reserves ', 40), (' reserves', 21)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('retained earnings', 67), ('other equity', 24), ('reserves surplus', 15), (' accumulated losses', 8)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('retained earnings', 67), ('other equity', 24), ('reserves surplus', 15), (' accumulated losses', 8)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest', 33), ('non controlling interest', 33), ('minority interest', 33), ('noncontrolling interest', 21), (' non-controlling interest', 21)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('non controlling interest', 30), ('minority interest', 15), ('minority interest', 15), ('noncontrolling interest', 12), (' non-controlling interest', 12)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest', 33), ('non controlling interest', 33), ('minority interest', 33), ('noncontrolling interest', 21), (' non-controlling interest', 21)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('non controlling interest', 30), ('minority interest', 15), ('minority interest', 15), ('noncontrolling interest', 12), (' non-controlling interest', 12)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('shareholders equity(a)', 33)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('shareholders equity(a)', 33)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('plant property equipment', 72), ('property plant equipment', 72)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('plant property equipment', 17), ('property plant equipment', 17)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:53+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = property,plant & equipment , res_fuzz_match = [('plant property equipment', 72), ('property plant equipment', 72)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = right-of-use-assets , res_fuzz_match = [('plant property equipment', 17), ('property plant equipment', 17)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-07-28 13:19:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:53+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-07-28 13:19:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:53+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-28 13:19:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('receivable', 50), ('billed', 50), ('trade and other receivables', 48), ('account receivables', 36), ('trade receivables', 35), ('government subsidies receivable', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 61), ('billed', 29), ('unbilled', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('receivable', 50), ('account receivables', 44), ('unbilled', 40), ('trade receivables', 36), ('trade and other receivables', 36), ('government subsidies receivable', 33), ('billed', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('receivable', 100), ('trade receivables', 82), ('account receivables', 71), ('trade and other receivables', 65), ('government subsidies receivable', 62), ('billed', 25), ('unbilled', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4], 'score': 100, 'value': 7002.0, 'line_item_label': ['Trade and other receivables', 'Income tax receivables'], 'note_numbers': ['8', '7(d)'], 'line_item_value': [7002.0, 0.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('receivable', 50), ('billed', 50), ('trade and other receivables', 48), ('account receivables', 36), ('trade receivables', 35), ('government subsidies receivable', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 61), ('billed', 29), ('unbilled', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('receivable', 50), ('account receivables', 44), ('unbilled', 40), ('trade receivables', 36), ('trade and other receivables', 36), ('government subsidies receivable', 33), ('billed', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('receivable', 100), ('trade receivables', 82), ('account receivables', 71), ('trade and other receivables', 65), ('government subsidies receivable', 62), ('billed', 25), ('unbilled', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4], 'score': 100, 'value': 10486.0, 'line_item_label': ['Trade and other receivables', 'Income tax receivables'], 'note_numbers': ['8', '7(d)'], 'line_item_value': [7183.0, 3303.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = current gross trade receivables , res_fuzz_match = [('current', 100), ('trade receivables', 100), (' net trade debtors', 62), (' share of joint venture receivables', 52), (' related party receivables', 51), (' other debtors', 50)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = current loss allowance , res_fuzz_match = [('current', 100), (' net trade debtors', 34), (' related party receivables', 30), (' other debtors', 29), (' share of joint venture receivables', 28), ('trade receivables', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = current amount receivable from parent entity suzuki motor corporation , res_fuzz_match = [('current', 100), (' related party receivables', 72), ('trade receivables', 67), (' share of joint venture receivables', 56), (' net trade debtors', 44), (' other debtors', 33)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = current other receivables and prepayments , res_fuzz_match = [('current', 100), ('trade receivables', 75), (' related party receivables', 67), (' other debtors', 58), (' share of joint venture receivables', 56), (' net trade debtors', 44)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' net trade debtors', 42), (' related party receivables', 38), (' share of joint venture receivables', 38), ('trade receivables', 25), (' other debtors', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = current gross trade receivables , res_fuzz_match = [('current', 100), ('trade receivables', 100), (' net trade debtors', 62), (' share of joint venture receivables', 52), (' related party receivables', 51), (' other debtors', 50)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = current loss allowance , res_fuzz_match = [('current', 100), (' net trade debtors', 34), (' related party receivables', 30), (' other debtors', 29), (' share of joint venture receivables', 28), ('trade receivables', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = current amount receivable from parent entity suzuki motor corporation , res_fuzz_match = [('current', 100), (' related party receivables', 72), ('trade receivables', 67), (' share of joint venture receivables', 56), (' net trade debtors', 44), (' other debtors', 33)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = current other receivables and prepayments , res_fuzz_match = [('current', 100), ('trade receivables', 75), (' related party receivables', 67), (' other debtors', 58), (' share of joint venture receivables', 56), (' net trade debtors', 44)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' net trade debtors', 42), (' related party receivables', 38), (' share of joint venture receivables', 38), ('trade receivables', 25), (' other debtors', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [6409.0, -118.0, 0.0, 892.0, 7183.0, 5876.0, -132.0, 18.0, 1240.0, 7002.0], 'label': ['Current Gross trade receivables', 'Current Loss Allowance', 'Current Amount receivable from parent entity Suzuki Motor Corporation', 'Current Other receivables and prepayments', 'Current Total', 'Current Gross trade receivables', 'Current Loss Allowance', 'Current Amount receivable from parent entity Suzuki Motor Corporation', 'Current Other receivables and prepayments', 'Current Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = freehold land carrying amount at beginning of year , res_fuzz_match = [(' related party receivables', 44), ('current', 43), (' share of joint venture receivables', 43), (' other debtors', 33), (' net trade debtors', 27), ('trade receivables', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = depreciation carrying amount at the end ofyear , res_fuzz_match = [('trade receivables', 50), (' other debtors', 50), (' net trade debtors', 50), (' share of joint venture receivables', 44), ('current', 43), (' related party receivables', 39)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = buildings carrying amount at beginning of year , res_fuzz_match = [('current', 43), (' share of joint venture receivables', 43), (' related party receivables', 39), (' other debtors', 33), (' net trade debtors', 28), ('trade receivables', 17)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = buildings additions , res_fuzz_match = [(' net trade debtors', 45), (' related party receivables', 29), ('trade receivables', 27), (' other debtors', 27), (' share of joint venture receivables', 19), ('current', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = disposals depreciation , res_fuzz_match = [('trade receivables', 55), (' related party receivables', 52), (' other debtors', 45), (' share of joint venture receivables', 43), (' net trade debtors', 43), ('current', 29)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = disposals carrying gamountat the end ofyear , res_fuzz_match = [(' other debtors', 50), (' net trade debtors', 50), ('current', 43), ('trade receivables', 42), (' related party receivables', 39), (' share of joint venture receivables', 28)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines carrying amount at beginning of year , res_fuzz_match = [(' net trade debtors', 50), (' share of joint venture receivables', 44), ('current', 43), (' related party receivables', 39), (' other debtors', 33), ('trade receivables', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines additions , res_fuzz_match = [(' net trade debtors', 50), ('current', 43), (' related party receivables', 39), (' share of joint venture receivables', 36), (' other debtors', 33), ('trade receivables', 32)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines disposals , res_fuzz_match = [(' net trade debtors', 50), ('current', 43), ('trade receivables', 42), (' related party receivables', 39), (' share of joint venture receivables', 36), (' other debtors', 33)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines depreciation , res_fuzz_match = [('trade receivables', 55), (' net trade debtors', 50), (' related party receivables', 47), (' share of joint venture receivables', 46), ('current', 43), (' other debtors', 42)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines carrying amo ount at end ofyear , res_fuzz_match = [(' net trade debtors', 50), (' share of joint venture receivables', 44), ('current', 43), (' related party receivables', 39), (' other debtors', 33), ('trade receivables', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines total carrying amount at end of year , res_fuzz_match = [(' net trade debtors', 50), ('current', 43), (' share of joint venture receivables', 40), (' related party receivables', 39), (' other debtors', 33), ('trade receivables', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = equipment opening balance at beginning of year , res_fuzz_match = [(' other debtors', 33), (' related party receivables', 30), ('current', 29), (' net trade debtors', 27), ('trade receivables', 14), (' share of joint venture receivables', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = equipment additions , res_fuzz_match = [(' net trade debtors', 45), (' other debtors', 40), ('trade receivables', 27), (' related party receivables', 27), (' share of joint venture receivables', 27), ('current', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = equipment revaluation , res_fuzz_match = [(' share of joint venture receivables', 50), (' related party receivables', 48), ('current', 43), ('trade receivables', 42), (' net trade debtors', 33), (' other debtors', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = equipment depreciation , res_fuzz_match = [(' share of joint venture receivables', 56), ('trade receivables', 55), (' related party receivables', 50), (' net trade debtors', 43), (' other debtors', 42), ('current', 29)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = equipment carrying am ount at end ofyear , res_fuzz_match = [('current', 43), (' share of joint venture receivables', 43), (' other debtors', 42), (' related party receivables', 28), (' net trade debtors', 28), ('trade receivables', 17)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = lease liabilities current , res_fuzz_match = [('current', 100), (' share of joint venture receivables', 37), ('trade receivables', 33), (' related party receivables', 27), (' net trade debtors', 22), (' other debtors', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = lease liabilities non-current , res_fuzz_match = [('current', 73), (' share of joint venture receivables', 42), (' other debtors', 33), ('trade receivables', 27), (' net trade debtors', 26), (' related party receivables', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = lease liabilities total , res_fuzz_match = [(' share of joint venture receivables', 29), ('trade receivables', 25), (' other debtors', 25), (' net trade debtors', 25), (' related party receivables', 18), ('current', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: within one year , res_fuzz_match = [(' related party receivables', 50), ('current', 43), ('trade receivables', 42), (' other debtors', 42), (' share of joint venture receivables', 40), (' net trade debtors', 36)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: later than one year but not latert than five years , res_fuzz_match = [(' related party receivables', 50), (' other debtors', 50), (' net trade debtors', 50), ('current', 43), ('trade receivables', 42), (' share of joint venture receivables', 40)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = later than five years total , res_fuzz_match = [('trade receivables', 50), (' related party receivables', 44), (' net trade debtors', 44), (' other debtors', 42), (' share of joint venture receivables', 31), ('current', 29)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = freehold land carrying amount at beginning of year , res_fuzz_match = [(' related party receivables', 44), ('current', 43), (' share of joint venture receivables', 43), (' other debtors', 33), (' net trade debtors', 27), ('trade receivables', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = depreciation carrying amount at the end ofyear , res_fuzz_match = [('trade receivables', 50), (' other debtors', 50), (' net trade debtors', 50), (' share of joint venture receivables', 44), ('current', 43), (' related party receivables', 39)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = buildings carrying amount at beginning of year , res_fuzz_match = [('current', 43), (' share of joint venture receivables', 43), (' related party receivables', 39), (' other debtors', 33), (' net trade debtors', 28), ('trade receivables', 17)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = buildings additions , res_fuzz_match = [(' net trade debtors', 45), (' related party receivables', 29), ('trade receivables', 27), (' other debtors', 27), (' share of joint venture receivables', 19), ('current', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = disposals depreciation , res_fuzz_match = [('trade receivables', 55), (' related party receivables', 52), (' other debtors', 45), (' share of joint venture receivables', 43), (' net trade debtors', 43), ('current', 29)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = disposals carrying gamountat the end ofyear , res_fuzz_match = [(' other debtors', 50), (' net trade debtors', 50), ('current', 43), ('trade receivables', 42), (' related party receivables', 39), (' share of joint venture receivables', 28)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines carrying amount at beginning of year , res_fuzz_match = [(' net trade debtors', 50), (' share of joint venture receivables', 44), ('current', 43), (' related party receivables', 39), (' other debtors', 33), ('trade receivables', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines additions , res_fuzz_match = [(' net trade debtors', 50), ('current', 43), (' related party receivables', 39), (' share of joint venture receivables', 36), (' other debtors', 33), ('trade receivables', 32)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines disposals , res_fuzz_match = [(' net trade debtors', 50), ('current', 43), ('trade receivables', 42), (' related party receivables', 39), (' share of joint venture receivables', 36), (' other debtors', 33)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines depreciation , res_fuzz_match = [('trade receivables', 55), (' net trade debtors', 50), (' related party receivables', 47), (' share of joint venture receivables', 46), ('current', 43), (' other debtors', 42)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines carrying amo ount at end ofyear , res_fuzz_match = [(' net trade debtors', 50), (' share of joint venture receivables', 44), ('current', 43), (' related party receivables', 39), (' other debtors', 33), ('trade receivables', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = plant, equipment, motor vehicles and outboard engines total carrying amount at end of year , res_fuzz_match = [(' net trade debtors', 50), ('current', 43), (' share of joint venture receivables', 40), (' related party receivables', 39), (' other debtors', 33), ('trade receivables', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = equipment opening balance at beginning of year , res_fuzz_match = [(' other debtors', 33), (' related party receivables', 30), ('current', 29), (' net trade debtors', 27), ('trade receivables', 14), (' share of joint venture receivables', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = equipment additions , res_fuzz_match = [(' net trade debtors', 45), (' other debtors', 40), ('trade receivables', 27), (' related party receivables', 27), (' share of joint venture receivables', 27), ('current', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = equipment revaluation , res_fuzz_match = [(' share of joint venture receivables', 50), (' related party receivables', 48), ('current', 43), ('trade receivables', 42), (' net trade debtors', 33), (' other debtors', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = equipment depreciation , res_fuzz_match = [(' share of joint venture receivables', 56), ('trade receivables', 55), (' related party receivables', 50), (' net trade debtors', 43), (' other debtors', 42), ('current', 29)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = equipment carrying am ount at end ofyear , res_fuzz_match = [('current', 43), (' share of joint venture receivables', 43), (' other debtors', 42), (' related party receivables', 28), (' net trade debtors', 28), ('trade receivables', 17)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = lease liabilities current , res_fuzz_match = [('current', 100), (' share of joint venture receivables', 37), ('trade receivables', 33), (' related party receivables', 27), (' net trade debtors', 22), (' other debtors', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = lease liabilities non-current , res_fuzz_match = [('current', 73), (' share of joint venture receivables', 42), (' other debtors', 33), ('trade receivables', 27), (' net trade debtors', 26), (' related party receivables', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = lease liabilities total , res_fuzz_match = [(' share of joint venture receivables', 29), ('trade receivables', 25), (' other debtors', 25), (' net trade debtors', 25), (' related party receivables', 18), ('current', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: within one year , res_fuzz_match = [(' related party receivables', 50), ('current', 43), ('trade receivables', 42), (' other debtors', 42), (' share of joint venture receivables', 40), (' net trade debtors', 36)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = future lease payments in relation to lease liabilities as at period end are as follows: later than one year but not latert than five years , res_fuzz_match = [(' related party receivables', 50), (' other debtors', 50), (' net trade debtors', 50), ('current', 43), ('trade receivables', 42), (' share of joint venture receivables', 40)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = later than five years total , res_fuzz_match = [('trade receivables', 50), (' related party receivables', 44), (' net trade debtors', 44), (' other debtors', 42), (' share of joint venture receivables', 31), ('current', 29)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 40], 'score': [100, 100], 'value': [40.0, 64.0], 'label': ['Lease Liabilities Current', 'Lease Liabilities Current'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = current finished goods at net realisable value , res_fuzz_match = [('current', 100), ('trade receivables', 50), (' net trade debtors', 45), (' related party receivables', 39), (' share of joint venture receivables', 36), (' other debtors', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = current stock in transit , res_fuzz_match = [('current', 100), (' net trade debtors', 44), ('trade receivables', 42), (' other debtors', 42), (' share of joint venture receivables', 34), (' related party receivables', 33)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' net trade debtors', 42), (' related party receivables', 38), (' share of joint venture receivables', 38), ('trade receivables', 25), (' other debtors', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = current finished goods at net realisable value , res_fuzz_match = [('current', 100), ('trade receivables', 50), (' net trade debtors', 45), (' related party receivables', 39), (' share of joint venture receivables', 36), (' other debtors', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = current stock in transit , res_fuzz_match = [('current', 100), (' net trade debtors', 44), ('trade receivables', 42), (' other debtors', 42), (' share of joint venture receivables', 34), (' related party receivables', 33)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' net trade debtors', 42), (' related party receivables', 38), (' share of joint venture receivables', 38), ('trade receivables', 25), (' other debtors', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [71812.0, 44440.0, 116252.0, 54607.0, 64068.0, 118675.0], 'label': ['Current Finished goods at net realisable value', 'Current Stock in transit', 'Current Total', 'Current Finished goods at net realisable value', 'Current Stock in transit', 'Current Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 13:19:54+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 13:19:54+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('sale of products', 22), ('net sales', 14), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('sale of products', 33), ('from trading business', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 19), (' Sales revenue', 17), ('transmission and distribution business', 15), (' Revenue', 11), ('net sales', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 21), ('transmission and distribution business', 21), (' Revenue', 12), ('sale of products', 9), (' Sales revenue', 9)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('transmission and distribution business', 55), (' Sales revenue', 37), ('sale of products', 36), (' Revenue', 36), ('revenue from operations', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('net sales', 25), ('from trading business', 19), (' Sale of coal', 16)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('transmission and distribution business', 41), (' Sales revenue', 37), (' Revenue', 36), ('revenue from operations', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('from trading business', 26), ('net sales', 25), (' Sale of coal', 24), ('sale of products', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [('transmission and distribution business', 33), ('revenue from operations', 32), (' Sales revenue', 31), (' Revenue', 29), (' Sale of coal', 25), ('from trading business', 20), ('net sales', 17), ('revenue from contracts with customers', 17), ('Revenue from contract with customers', 17), ('sale of products', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), (' Revenue', 33), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('from trading business', 22), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), ('transmission and distribution business', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations', 68), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), ('from trading business', 43), ('sale of products', 24), (' Sales revenue', 24), (' Revenue', 21), (' Sale of coal', 19), ('transmission and distribution business', 16), ('net sales', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), (' Sales revenue', 17), ('revenue from contracts with customers', 14), ('Revenue from contract with customers', 14), (' Revenue', 11), ('sale of products', 8)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Sales revenue', 42), (' Revenue', 32), ('net sales', 29), ('from trading business', 29), ('revenue from operations', 28), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), ('sale of products', 16), ('transmission and distribution business', 10), (' Sale of coal', 9)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [('from trading business', 39), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), (' Sale of coal', 33), ('sale of products', 30), ('revenue from operations', 27), ('transmission and distribution business', 24), ('net sales', 21), (' Revenue', 7), (' Sales revenue', 6)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('net sales', 33), ('transmission and distribution business', 27), ('revenue from operations', 25), (' Sales revenue', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), (' Sale of coal', 16), (' Revenue', 9)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('sale of products', 29), ('transmission and distribution business', 27), (' Revenue', 27), ('net sales', 25), (' Sale of coal', 24), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), ('revenue from operations', 19)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [('revenue from operations', 44), ('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('from trading business', 35), ('sale of products', 32), ('net sales', 30), (' Sales revenue', 28), ('transmission and distribution business', 26), (' Revenue', 19), (' Sale of coal', 18)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), (' Sale of coal', 26), ('transmission and distribution business', 16), ('net sales', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('revenue from operations', 38), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('from trading business', 35), ('sale of products', 33), (' Sales revenue', 29), ('net sales', 27), ('transmission and distribution business', 22), (' Revenue', 19), (' Sale of coal', 17)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 399078.0, 'line_item_label': ['Revenue'], 'note_numbers': [nan], 'line_item_value': [399078.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('sale of products', 22), ('net sales', 14), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('sale of products', 33), ('from trading business', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 19), (' Sales revenue', 17), ('transmission and distribution business', 15), (' Revenue', 11), ('net sales', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 21), ('transmission and distribution business', 21), (' Revenue', 12), ('sale of products', 9), (' Sales revenue', 9)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('transmission and distribution business', 55), (' Sales revenue', 37), ('sale of products', 36), (' Revenue', 36), ('revenue from operations', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('net sales', 25), ('from trading business', 19), (' Sale of coal', 16)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('transmission and distribution business', 41), (' Sales revenue', 37), (' Revenue', 36), ('revenue from operations', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('from trading business', 26), ('net sales', 25), (' Sale of coal', 24), ('sale of products', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [('transmission and distribution business', 33), ('revenue from operations', 32), (' Sales revenue', 31), (' Revenue', 29), (' Sale of coal', 25), ('from trading business', 20), ('net sales', 17), ('revenue from contracts with customers', 17), ('Revenue from contract with customers', 17), ('sale of products', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), (' Revenue', 33), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('from trading business', 22), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), ('transmission and distribution business', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations', 68), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), ('from trading business', 43), ('sale of products', 24), (' Sales revenue', 24), (' Revenue', 21), (' Sale of coal', 19), ('transmission and distribution business', 16), ('net sales', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), (' Sales revenue', 17), ('revenue from contracts with customers', 14), ('Revenue from contract with customers', 14), (' Revenue', 11), ('sale of products', 8)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Sales revenue', 42), (' Revenue', 32), ('net sales', 29), ('from trading business', 29), ('revenue from operations', 28), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), ('sale of products', 16), ('transmission and distribution business', 10), (' Sale of coal', 9)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [('from trading business', 39), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), (' Sale of coal', 33), ('sale of products', 30), ('revenue from operations', 27), ('transmission and distribution business', 24), ('net sales', 21), (' Revenue', 7), (' Sales revenue', 6)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('net sales', 33), ('transmission and distribution business', 27), ('revenue from operations', 25), (' Sales revenue', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), (' Sale of coal', 16), (' Revenue', 9)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('sale of products', 29), ('transmission and distribution business', 27), (' Revenue', 27), ('net sales', 25), (' Sale of coal', 24), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), ('revenue from operations', 19)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [('revenue from operations', 44), ('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('from trading business', 35), ('sale of products', 32), ('net sales', 30), (' Sales revenue', 28), ('transmission and distribution business', 26), (' Revenue', 19), (' Sale of coal', 18)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), (' Sale of coal', 26), ('transmission and distribution business', 16), ('net sales', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('revenue from operations', 38), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('from trading business', 35), ('sale of products', 33), (' Sales revenue', 29), ('net sales', 27), ('transmission and distribution business', 22), (' Revenue', 19), (' Sale of coal', 17)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 496025.0, 'line_item_label': ['Revenue'], 'note_numbers': [nan], 'line_item_value': [496025.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('cost of sales', 13), ('Cost of sales', 13), ('purchase of stock-in-trade', 8), (' Cost of goods and services sold', 6), (' cost of coal sold', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Cost of product sold', 54), (' Personnel costs', 52), (' Cost of inventory sold', 43), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' cost of coal sold', 23), ('total expenditure', 21), (' Cost of inventory sold', 19), (' Cost of goods and services sold', 16), ('expense', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), ('total expenses', 35), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27), ('expenditure', 19), ('expense', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Cost of product sold', 42), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' cost of coal sold', 27), (' Cost of goods and services sold', 24), ('purchase of stock-in-trade', 23)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 23)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [('expense', 57), ('total expenses', 44), ('expenditure', 40), (' Cost of goods and services sold', 35), (' Personnel costs', 34), ('total expenditure', 32), ('cost of sales', 25), ('Cost of sales', 25), (' Cost of product sold', 25), ('purchase of stock-in-trade', 24), (' Cost of inventory sold', 24), (' cost of coal sold', 21)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of inventory sold', 26), (' Personnel costs', 23), (' Cost of product sold', 21), (' cost of coal sold', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Personnel costs', 44), (' Cost of goods and services sold', 43), (' Cost of product sold', 36), ('total expenditure', 26), ('cost of sales', 26), ('Cost of sales', 26), ('total expenses', 24), (' cost of coal sold', 22), ('expense', 21), (' Cost of inventory sold', 20), ('expenditure', 19), ('purchase of stock-in-trade', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of inventory sold', 32), (' Cost of goods and services sold', 27), ('total expenses', 25), ('total expenditure', 21), ('purchase of stock-in-trade', 19), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), (' cost of coal sold', 15), (' Personnel costs', 15), (' Cost of product sold', 14), ('expense', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('purchase of stock-in-trade', 38), (' Personnel costs', 37), (' Cost of inventory sold', 31), (' Cost of goods and services sold', 16), ('cost of sales', 9), ('Cost of sales', 9), (' Cost of product sold', 7), (' cost of coal sold', 7)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [('cost of sales', 47), ('Cost of sales', 47), (' Personnel costs', 46), (' Cost of inventory sold', 45), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' cost of coal sold', 34), ('purchase of stock-in-trade', 30), ('expenditure', 13), ('total expenses', 12), ('total expenditure', 11), ('expense', 7)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 23), (' Cost of goods and services sold', 20), (' Personnel costs', 20), ('expense', 18), ('purchase of stock-in-trade', 17)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of inventory sold', 29), (' Cost of goods and services sold', 24), (' cost of coal sold', 20), (' Personnel costs', 20), (' Cost of product sold', 18)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [(' Personnel costs', 41), ('total expenditure', 39), (' Cost of product sold', 38), (' Cost of inventory sold', 36), ('expenditure', 34), (' cost of coal sold', 31), (' Cost of goods and services sold', 28), ('total expenses', 27), ('cost of sales', 24), ('Cost of sales', 24), ('expense', 19), ('purchase of stock-in-trade', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), ('total expenses', 41), (' Cost of inventory sold', 39), ('expenditure', 38), ('total expenditure', 37), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of product sold', 31), ('expense', 29), (' Cost of goods and services sold', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' Cost of product sold', 44), ('total expenditure', 42), ('total expenses', 41), (' Cost of goods and services sold', 39), (' Personnel costs', 39), (' Cost of inventory sold', 36), ('purchase of stock-in-trade', 32), ('cost of sales', 30), ('Cost of sales', 30), ('expenditure', 21), ('expense', 19), (' cost of coal sold', 16)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -330276.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-330276.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('cost of sales', 13), ('Cost of sales', 13), ('purchase of stock-in-trade', 8), (' Cost of goods and services sold', 6), (' cost of coal sold', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Cost of product sold', 54), (' Personnel costs', 52), (' Cost of inventory sold', 43), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' cost of coal sold', 23), ('total expenditure', 21), (' Cost of inventory sold', 19), (' Cost of goods and services sold', 16), ('expense', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), ('total expenses', 35), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27), ('expenditure', 19), ('expense', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Cost of product sold', 42), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' cost of coal sold', 27), (' Cost of goods and services sold', 24), ('purchase of stock-in-trade', 23)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 23)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [('expense', 57), ('total expenses', 44), ('expenditure', 40), (' Cost of goods and services sold', 35), (' Personnel costs', 34), ('total expenditure', 32), ('cost of sales', 25), ('Cost of sales', 25), (' Cost of product sold', 25), ('purchase of stock-in-trade', 24), (' Cost of inventory sold', 24), (' cost of coal sold', 21)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of inventory sold', 26), (' Personnel costs', 23), (' Cost of product sold', 21), (' cost of coal sold', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Personnel costs', 44), (' Cost of goods and services sold', 43), (' Cost of product sold', 36), ('total expenditure', 26), ('cost of sales', 26), ('Cost of sales', 26), ('total expenses', 24), (' cost of coal sold', 22), ('expense', 21), (' Cost of inventory sold', 20), ('expenditure', 19), ('purchase of stock-in-trade', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of inventory sold', 32), (' Cost of goods and services sold', 27), ('total expenses', 25), ('total expenditure', 21), ('purchase of stock-in-trade', 19), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), (' cost of coal sold', 15), (' Personnel costs', 15), (' Cost of product sold', 14), ('expense', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('purchase of stock-in-trade', 38), (' Personnel costs', 37), (' Cost of inventory sold', 31), (' Cost of goods and services sold', 16), ('cost of sales', 9), ('Cost of sales', 9), (' Cost of product sold', 7), (' cost of coal sold', 7)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [('cost of sales', 47), ('Cost of sales', 47), (' Personnel costs', 46), (' Cost of inventory sold', 45), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' cost of coal sold', 34), ('purchase of stock-in-trade', 30), ('expenditure', 13), ('total expenses', 12), ('total expenditure', 11), ('expense', 7)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 23), (' Cost of goods and services sold', 20), (' Personnel costs', 20), ('expense', 18), ('purchase of stock-in-trade', 17)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of inventory sold', 29), (' Cost of goods and services sold', 24), (' cost of coal sold', 20), (' Personnel costs', 20), (' Cost of product sold', 18)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [(' Personnel costs', 41), ('total expenditure', 39), (' Cost of product sold', 38), (' Cost of inventory sold', 36), ('expenditure', 34), (' cost of coal sold', 31), (' Cost of goods and services sold', 28), ('total expenses', 27), ('cost of sales', 24), ('Cost of sales', 24), ('expense', 19), ('purchase of stock-in-trade', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), ('total expenses', 41), (' Cost of inventory sold', 39), ('expenditure', 38), ('total expenditure', 37), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of product sold', 31), ('expense', 29), (' Cost of goods and services sold', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' Cost of product sold', 44), ('total expenditure', 42), ('total expenses', 41), (' Cost of goods and services sold', 39), (' Personnel costs', 39), (' Cost of inventory sold', 36), ('purchase of stock-in-trade', 32), ('cost of sales', 30), ('Cost of sales', 30), ('expenditure', 21), ('expense', 19), (' cost of coal sold', 16)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -434227.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-434227.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Advertising expenses', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15), (' Sales and marketing', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Administrative and other expenses', 29), (' Logistics and distribution', 28), (' Advertising expenses', 17), (' Amortisation expenses', 17), (' Occupancy ', 14), (' depreciation', 12), ('other expenses', 10), (' Occupancy expenses', 10), (' Other expenses', 10), (' Management expenses', 10), (' Other expenses', 10), (' Marketing expenses', 9), (' Depreciation expenses', 9), (' Depreciation expenses', 9)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Logistics and distribution', 19), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), ('Distribution expenses', 14), (' Administrative expenses', 14), (' Administration expenses', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Administrative expenses', 30), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Amortisation expenses', 24), (' Sales and marketing', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Selling & distribution expenses', 19), (' Marketing expenses', 17), (' Depreciation expenses', 16), (' Depreciation expenses', 16), (' Advertising expenses', 15), (' Occupancy ', 12), (' Lease expenses', 9), (' Selling Expenses', 9), (' Management expenses', 9)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('Distribution expenses', 100), (' Selling & distribution expenses', 86), (' Administrative expenses', 75), (' Administration expenses', 75), (' Depreciation expenses', 67), (' Depreciation expenses', 67), (' Advertising expenses', 65), (' Logistics and distribution', 61), (' Amortisation expenses', 60), (' Administrative and other expenses', 57), (' Lease expenses', 44), (' Selling Expenses', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' depreciation', 35), (' Sales and marketing', 32), (' Occupancy ', 19)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' depreciation', 35), (' Sales and marketing', 32), (' Occupancy ', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [(' Advertising expenses', 100), (' Amortisation expenses', 83), (' Depreciation expenses', 76), (' Depreciation expenses', 76), (' Administrative expenses', 71), (' Administration expenses', 71), ('Distribution expenses', 65), (' Selling & distribution expenses', 56), (' Administrative and other expenses', 54), (' Lease expenses', 46), (' Selling Expenses', 46), ('other expenses', 44), (' Occupancy expenses', 44), (' Other expenses', 44), (' Management expenses', 44), (' Other expenses', 44), (' Marketing expenses', 43), (' depreciation', 36), (' Logistics and distribution', 34), (' Sales and marketing', 20), (' Occupancy ', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 25), (' Sales and marketing', 22), (' Occupancy ', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), (' Administrative and other expenses', 29), (' Advertising expenses', 27), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), (' Other expenses', 24), (' Marketing expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Management expenses', 18), (' Occupancy ', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Amortisation expenses', 15), (' Occupancy ', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Management expenses', 72), (' Lease expenses', 67), (' Occupancy expenses', 64), (' Marketing expenses', 62), (' Selling Expenses', 58), ('other expenses', 56), (' Other expenses', 56), (' Other expenses', 56), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Advertising expenses', 43), ('Distribution expenses', 41), (' Administrative expenses', 41), (' Selling & distribution expenses', 41), (' Administration expenses', 41), (' depreciation', 40), (' Administrative and other expenses', 36), (' Sales and marketing', 14), (' Logistics and distribution', 12), (' Occupancy ', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [(' Sales and marketing', 33), (' Administrative and other expenses', 30), (' Marketing expenses', 29), (' Logistics and distribution', 24), (' Occupancy ', 23), ('Distribution expenses', 22), (' Administrative expenses', 22), (' Administration expenses', 22), (' Selling & distribution expenses', 19), (' Management expenses', 18), (' Advertising expenses', 17), (' Amortisation expenses', 17), ('other expenses', 12), (' Other expenses', 12), (' Other expenses', 12), (' depreciation', 7), (' Occupancy expenses', 6), (' Depreciation expenses', 6), (' Lease expenses', 6), (' Selling Expenses', 6), (' Depreciation expenses', 6)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Sales and marketing', 32), (' Logistics and distribution', 28), ('Distribution expenses', 25), (' Selling & distribution expenses', 22), (' Administrative expenses', 19), (' Administrative and other expenses', 19), (' Occupancy ', 19), (' Administration expenses', 19), (' Lease expenses', 15), (' Selling Expenses', 15), ('other expenses', 14), (' Marketing expenses', 14), (' Occupancy expenses', 14), (' Other expenses', 14), (' Management expenses', 14), (' Other expenses', 14), (' Advertising expenses', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Occupancy ', 10), (' Logistics and distribution', 6), (' Sales and marketing', 6)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [('other expenses', 43), (' Other expenses', 43), (' Other expenses', 43), (' Administrative and other expenses', 39), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), ('Distribution expenses', 29), (' Lease expenses', 28), (' Selling Expenses', 28), (' Occupancy expenses', 27), (' Selling & distribution expenses', 26), (' depreciation', 25), (' Advertising expenses', 25), (' Sales and marketing', 25), (' Administrative expenses', 24), (' Administration expenses', 24), (' Management expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Occupancy ', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' depreciation', 28), ('Distribution expenses', 26), (' Logistics and distribution', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), (' Occupancy ', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('other expenses', 37), (' Other expenses', 37), (' Other expenses', 37), (' Administrative and other expenses', 35), (' Occupancy expenses', 33), (' Selling Expenses', 29), (' Management expenses', 29), (' Marketing expenses', 28), (' Selling & distribution expenses', 28), (' Sales and marketing', 27), (' Lease expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Amortisation expenses', 24), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Logistics and distribution', 21), ('Distribution expenses', 19), (' Advertising expenses', 15), (' Occupancy ', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5, 6, 7], 'score': 100, 'value': -46346.0, 'line_item_label': ['Distribution expenses', 'Administration expenses', 'Advertising expenses', 'Other expenses'], 'note_numbers': [nan, nan, nan, '4'], 'line_item_value': [-4675.0, -15271.0, -24936.0, -1464.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Advertising expenses', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15), (' Sales and marketing', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Administrative and other expenses', 29), (' Logistics and distribution', 28), (' Advertising expenses', 17), (' Amortisation expenses', 17), (' Occupancy ', 14), (' depreciation', 12), ('other expenses', 10), (' Occupancy expenses', 10), (' Other expenses', 10), (' Management expenses', 10), (' Other expenses', 10), (' Marketing expenses', 9), (' Depreciation expenses', 9), (' Depreciation expenses', 9)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Logistics and distribution', 19), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), ('Distribution expenses', 14), (' Administrative expenses', 14), (' Administration expenses', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Administrative expenses', 30), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Amortisation expenses', 24), (' Sales and marketing', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Selling & distribution expenses', 19), (' Marketing expenses', 17), (' Depreciation expenses', 16), (' Depreciation expenses', 16), (' Advertising expenses', 15), (' Occupancy ', 12), (' Lease expenses', 9), (' Selling Expenses', 9), (' Management expenses', 9)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('Distribution expenses', 100), (' Selling & distribution expenses', 86), (' Administrative expenses', 75), (' Administration expenses', 75), (' Depreciation expenses', 67), (' Depreciation expenses', 67), (' Advertising expenses', 65), (' Logistics and distribution', 61), (' Amortisation expenses', 60), (' Administrative and other expenses', 57), (' Lease expenses', 44), (' Selling Expenses', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' depreciation', 35), (' Sales and marketing', 32), (' Occupancy ', 19)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' depreciation', 35), (' Sales and marketing', 32), (' Occupancy ', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [(' Advertising expenses', 100), (' Amortisation expenses', 83), (' Depreciation expenses', 76), (' Depreciation expenses', 76), (' Administrative expenses', 71), (' Administration expenses', 71), ('Distribution expenses', 65), (' Selling & distribution expenses', 56), (' Administrative and other expenses', 54), (' Lease expenses', 46), (' Selling Expenses', 46), ('other expenses', 44), (' Occupancy expenses', 44), (' Other expenses', 44), (' Management expenses', 44), (' Other expenses', 44), (' Marketing expenses', 43), (' depreciation', 36), (' Logistics and distribution', 34), (' Sales and marketing', 20), (' Occupancy ', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 25), (' Sales and marketing', 22), (' Occupancy ', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), (' Administrative and other expenses', 29), (' Advertising expenses', 27), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), (' Other expenses', 24), (' Marketing expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Management expenses', 18), (' Occupancy ', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Amortisation expenses', 15), (' Occupancy ', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Management expenses', 72), (' Lease expenses', 67), (' Occupancy expenses', 64), (' Marketing expenses', 62), (' Selling Expenses', 58), ('other expenses', 56), (' Other expenses', 56), (' Other expenses', 56), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Advertising expenses', 43), ('Distribution expenses', 41), (' Administrative expenses', 41), (' Selling & distribution expenses', 41), (' Administration expenses', 41), (' depreciation', 40), (' Administrative and other expenses', 36), (' Sales and marketing', 14), (' Logistics and distribution', 12), (' Occupancy ', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [(' Sales and marketing', 33), (' Administrative and other expenses', 30), (' Marketing expenses', 29), (' Logistics and distribution', 24), (' Occupancy ', 23), ('Distribution expenses', 22), (' Administrative expenses', 22), (' Administration expenses', 22), (' Selling & distribution expenses', 19), (' Management expenses', 18), (' Advertising expenses', 17), (' Amortisation expenses', 17), ('other expenses', 12), (' Other expenses', 12), (' Other expenses', 12), (' depreciation', 7), (' Occupancy expenses', 6), (' Depreciation expenses', 6), (' Lease expenses', 6), (' Selling Expenses', 6), (' Depreciation expenses', 6)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Sales and marketing', 32), (' Logistics and distribution', 28), ('Distribution expenses', 25), (' Selling & distribution expenses', 22), (' Administrative expenses', 19), (' Administrative and other expenses', 19), (' Occupancy ', 19), (' Administration expenses', 19), (' Lease expenses', 15), (' Selling Expenses', 15), ('other expenses', 14), (' Marketing expenses', 14), (' Occupancy expenses', 14), (' Other expenses', 14), (' Management expenses', 14), (' Other expenses', 14), (' Advertising expenses', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Occupancy ', 10), (' Logistics and distribution', 6), (' Sales and marketing', 6)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [('other expenses', 43), (' Other expenses', 43), (' Other expenses', 43), (' Administrative and other expenses', 39), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), ('Distribution expenses', 29), (' Lease expenses', 28), (' Selling Expenses', 28), (' Occupancy expenses', 27), (' Selling & distribution expenses', 26), (' depreciation', 25), (' Advertising expenses', 25), (' Sales and marketing', 25), (' Administrative expenses', 24), (' Administration expenses', 24), (' Management expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Occupancy ', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' depreciation', 28), ('Distribution expenses', 26), (' Logistics and distribution', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), (' Occupancy ', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('other expenses', 37), (' Other expenses', 37), (' Other expenses', 37), (' Administrative and other expenses', 35), (' Occupancy expenses', 33), (' Selling Expenses', 29), (' Management expenses', 29), (' Marketing expenses', 28), (' Selling & distribution expenses', 28), (' Sales and marketing', 27), (' Lease expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Amortisation expenses', 24), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Logistics and distribution', 21), ('Distribution expenses', 19), (' Advertising expenses', 15), (' Occupancy ', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5, 6, 7], 'score': 100, 'value': -46714.0, 'line_item_label': ['Distribution expenses', 'Administration expenses', 'Advertising expenses', 'Other expenses'], 'note_numbers': [nan, nan, nan, '4'], 'line_item_value': [-7507.0, -16070.0, -21597.0, -1540.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), ('Rent', 15), (' Occupancy', 14), (' Occupancy expenses', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), (' Occupancy expenses', 26), (' Rental expenses', 17), ('Rent', 13), (' Occupancy', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Administration expenses', 75), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 19)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [(' Administration expenses', 71), (' Occupancy expenses', 44), (' Rental expenses', 43), ('Rent', 32), (' Occupancy', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), ('Rent', 12), (' Occupancy', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 64), (' Administration expenses', 41), ('Rent', 24), (' Occupancy', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [(' Occupancy', 23), (' Administration expenses', 22), ('Rent', 16), (' Rental expenses', 12), (' Occupancy expenses', 6)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), ('Rent', 20), (' Administration expenses', 19), (' Occupancy', 19), (' Occupancy expenses', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [(' Rental expenses', 32), (' Occupancy expenses', 27), (' Administration expenses', 24), ('Rent', 21), (' Occupancy', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Occupancy expenses', 35), (' Rental expenses', 34), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' Rental expenses', 40), (' Occupancy expenses', 33), (' Administration expenses', 23), ('Rent', 20), (' Occupancy', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': -15271.0, 'line_item_label': ['Administration expenses'], 'note_numbers': [nan], 'line_item_value': [-15271.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), ('Rent', 15), (' Occupancy', 14), (' Occupancy expenses', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), (' Occupancy expenses', 26), (' Rental expenses', 17), ('Rent', 13), (' Occupancy', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Administration expenses', 75), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 19)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [(' Administration expenses', 71), (' Occupancy expenses', 44), (' Rental expenses', 43), ('Rent', 32), (' Occupancy', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), ('Rent', 12), (' Occupancy', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 64), (' Administration expenses', 41), ('Rent', 24), (' Occupancy', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [(' Occupancy', 23), (' Administration expenses', 22), ('Rent', 16), (' Rental expenses', 12), (' Occupancy expenses', 6)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), ('Rent', 20), (' Administration expenses', 19), (' Occupancy', 19), (' Occupancy expenses', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [(' Rental expenses', 32), (' Occupancy expenses', 27), (' Administration expenses', 24), ('Rent', 21), (' Occupancy', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Occupancy expenses', 35), (' Rental expenses', 34), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' Rental expenses', 40), (' Occupancy expenses', 33), (' Administration expenses', 23), ('Rent', 20), (' Occupancy', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': -16070.0, 'line_item_label': ['Administration expenses'], 'note_numbers': [nan], 'line_item_value': [-16070.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 29), ('other operating', 21)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), ('Other revenue', 17), (' Other income', 17)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('Other revenue', 29), ('other operating', 15), (' Other income', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [('Other revenue', 44), ('other operating', 16), (' Other income', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 9), ('Other revenue', 8)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [(' Other income', 44), ('other operating', 19), ('Other revenue', 18)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), ('Other revenue', 29), (' Other income', 22)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [('other operating', 51), (' Other income', 39), ('Other revenue', 22)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' Other income', 42), ('other operating', 34), ('Other revenue', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 1336.0, 'line_item_label': ['Other income'], 'note_numbers': ['3'], 'line_item_value': [1336.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 29), ('other operating', 21)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), ('Other revenue', 17), (' Other income', 17)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('Other revenue', 29), ('other operating', 15), (' Other income', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [('Other revenue', 44), ('other operating', 16), (' Other income', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 9), ('Other revenue', 8)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [(' Other income', 44), ('other operating', 19), ('Other revenue', 18)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), ('Other revenue', 29), (' Other income', 22)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [('other operating', 51), (' Other income', 39), ('Other revenue', 22)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' Other income', 42), ('other operating', 34), ('Other revenue', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 1455.0, 'line_item_label': ['Other income'], 'note_numbers': ['3'], 'line_item_value': [1455.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['Other income', ' Commission revenue', ' Rent'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = 3 gain/(loss) on sale property plantand equipment sundry income , res_fuzz_match = [('Other income', 64), (' Rent', 50), (' Commission revenue', 35)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = 3 gain/(loss) on sale property plantand equipment sundry income , res_fuzz_match = [('Other income', 64), (' Rent', 50), (' Commission revenue', 35)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = 3 total , res_fuzz_match = [('Other income', 40), (' Rent', 25), (' Commission revenue', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = 3 gain/(loss) on sale property plantand equipment sundry income , res_fuzz_match = [('Other income', 64), (' Rent', 50), (' Commission revenue', 35)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = 3 gain/(loss) on sale property plantand equipment sundry income , res_fuzz_match = [('Other income', 64), (' Rent', 50), (' Commission revenue', 35)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = 3 total , res_fuzz_match = [('Other income', 40), (' Rent', 25), (' Commission revenue', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 30), (' Finance income and finance costs', 25), ('other income', 17), ('finance income', 17), ('Finance income', 17), (' Interest revenue', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Finance income and costs', 31), (' Net finance costs', 31), (' Finance income and finance costs', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Interest revenue', 45), (' Finance income and costs', 27), (' Net finance costs', 26), (' Finance income and finance costs', 23), ('other income', 15), ('finance income', 14), ('Finance income', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), ('other income', 30), (' Finance income and finance costs', 27), (' Net finance costs', 26), ('finance income', 21), ('Finance income', 21)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [(' Interest revenue', 33), (' Net finance costs', 20), (' Finance income and costs', 17), ('other income', 15), ('finance income', 15), ('Finance income', 15), (' Finance income and finance costs', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Net finance costs', 38), (' Finance income and costs', 33), (' Interest revenue', 32), (' Finance income and finance costs', 28), ('finance income', 18), ('Finance income', 18)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Net finance costs', 57), (' Finance income and costs', 53), ('finance income', 48), ('Finance income', 48), (' Finance income and finance costs', 44), ('other income', 25), (' Interest revenue', 21)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [(' Net finance costs', 83), (' Finance income and costs', 81), ('finance income', 73), ('Finance income', 73), (' Finance income and finance costs', 69), ('other income', 44), (' Interest revenue', 22)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Finance income and costs', 27), (' Net finance costs', 26), (' Finance income and finance costs', 23), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Interest revenue', 19)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Net finance costs', 26), (' Interest revenue', 19)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [('other income', 39), (' Interest revenue', 35), (' Finance income and costs', 26), (' Net finance costs', 25), (' Finance income and finance costs', 23), ('finance income', 16), ('Finance income', 16)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('other income', 42), (' Finance income and costs', 38), (' Finance income and finance costs', 34), (' Net finance costs', 31), ('finance income', 29), ('Finance income', 29), (' Interest revenue', 23)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 9, 11], 'score': 83, 'value': 1444.0, 'line_item_label': ['Other income', 'Finance income', 'Net finance income / (costs)'], 'note_numbers': ['3', nan, nan], 'line_item_value': [1336.0, 56.0, 52.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 30), (' Finance income and finance costs', 25), ('other income', 17), ('finance income', 17), ('Finance income', 17), (' Interest revenue', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Finance income and costs', 31), (' Net finance costs', 31), (' Finance income and finance costs', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Interest revenue', 45), (' Finance income and costs', 27), (' Net finance costs', 26), (' Finance income and finance costs', 23), ('other income', 15), ('finance income', 14), ('Finance income', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), ('other income', 30), (' Finance income and finance costs', 27), (' Net finance costs', 26), ('finance income', 21), ('Finance income', 21)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [(' Interest revenue', 33), (' Net finance costs', 20), (' Finance income and costs', 17), ('other income', 15), ('finance income', 15), ('Finance income', 15), (' Finance income and finance costs', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Net finance costs', 38), (' Finance income and costs', 33), (' Interest revenue', 32), (' Finance income and finance costs', 28), ('finance income', 18), ('Finance income', 18)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Net finance costs', 57), (' Finance income and costs', 53), ('finance income', 48), ('Finance income', 48), (' Finance income and finance costs', 44), ('other income', 25), (' Interest revenue', 21)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [(' Net finance costs', 83), (' Finance income and costs', 81), ('finance income', 73), ('Finance income', 73), (' Finance income and finance costs', 69), ('other income', 44), (' Interest revenue', 22)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Finance income and costs', 27), (' Net finance costs', 26), (' Finance income and finance costs', 23), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Interest revenue', 19)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Net finance costs', 26), (' Interest revenue', 19)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [('other income', 39), (' Interest revenue', 35), (' Finance income and costs', 26), (' Net finance costs', 25), (' Finance income and finance costs', 23), ('finance income', 16), ('Finance income', 16)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('other income', 42), (' Finance income and costs', 38), (' Finance income and finance costs', 34), (' Net finance costs', 31), ('finance income', 29), ('Finance income', 29), (' Interest revenue', 23)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 9, 11], 'score': 83, 'value': 2715.0, 'line_item_label': ['Other income', 'Finance income', 'Net finance income / (costs)'], 'note_numbers': ['3', nan, nan], 'line_item_value': [1455.0, 632.0, 628.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = 3 gain/(loss) on sale property plantand equipment sundry income , res_fuzz_match = [(' Sublease interest income', 53), (' Interest income', 50), (' Interest income', 50), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 37), ('Bank interest', 35), (' Interest received - Loan', 35), (' Share of JV interest received/(paid)', 31), (' Interest received - Bank', 25), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = 3 gain/(loss) on sale property plantand equipment sundry income , res_fuzz_match = [(' Sublease interest income', 53), (' Interest income', 50), (' Interest income', 50), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 37), ('Bank interest', 35), (' Interest received - Loan', 35), (' Share of JV interest received/(paid)', 31), (' Interest received - Bank', 25), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = 3 total , res_fuzz_match = [(' Interest received - Loan', 44), (' Bank Deposits - cash and cash equivalents', 40), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 40), ('interest', 25), ('Bank interest', 25), (' Interest income', 25), (' Sublease interest income', 25), (' Interest income', 25), (' Interest received - Bank', 20), (' Share of JV interest received/(paid)', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = 3 gain/(loss) on sale property plantand equipment sundry income , res_fuzz_match = [(' Sublease interest income', 53), (' Interest income', 50), (' Interest income', 50), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 37), ('Bank interest', 35), (' Interest received - Loan', 35), (' Share of JV interest received/(paid)', 31), (' Interest received - Bank', 25), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = 3 gain/(loss) on sale property plantand equipment sundry income , res_fuzz_match = [(' Sublease interest income', 53), (' Interest income', 50), (' Interest income', 50), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 37), ('Bank interest', 35), (' Interest received - Loan', 35), (' Share of JV interest received/(paid)', 31), (' Interest received - Bank', 25), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows = 3 total , res_fuzz_match = [(' Interest received - Loan', 44), (' Bank Deposits - cash and cash equivalents', 40), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 40), ('interest', 25), ('Bank interest', 25), (' Interest income', 25), (' Sublease interest income', 25), (' Interest income', 25), (' Interest received - Bank', 20), (' Share of JV interest received/(paid)', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 9)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 23), ('finance costs', 23), (' net finance costs ', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [(' net finance costs ', 83), ('finance cost', 69), ('finance costs', 69), (' finance expenses', 47)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 28), ('finance costs', 28), (' net finance costs ', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' finance expenses', 36), ('finance cost', 33), ('finance costs', 33), (' net finance costs ', 31)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [10, 11], 'score': 83, 'value': 48.0, 'line_item_label': ['Finance expenses', 'Net finance income / (costs)'], 'note_numbers': [nan, nan], 'line_item_value': [-4.0, 52.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 9)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 23), ('finance costs', 23), (' net finance costs ', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [(' net finance costs ', 83), ('finance cost', 69), ('finance costs', 69), (' finance expenses', 47)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 28), ('finance costs', 28), (' net finance costs ', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' finance expenses', 36), ('finance cost', 33), ('finance costs', 33), (' net finance costs ', 31)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [10, 11], 'score': 83, 'value': 624.0, 'line_item_label': ['Finance expenses', 'Net finance income / (costs)'], 'note_numbers': [nan, nan], 'line_item_value': [-4.0, 628.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 9)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 23), ('finance costs', 23), (' net finance costs ', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [(' net finance costs ', 83), ('finance cost', 69), ('finance costs', 69), (' finance expenses', 47)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 28), ('finance costs', 28), (' net finance costs ', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' finance expenses', 36), ('finance cost', 33), ('finance costs', 33), (' net finance costs ', 31)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [10, 11], 'score': 83, 'value': 48.0, 'line_item_label': ['Finance expenses', 'Net finance income / (costs)'], 'note_numbers': [nan, nan], 'line_item_value': [-4.0, 52.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 9)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [(' finance expenses', 43), ('finance cost', 23), ('finance costs', 23), (' net finance costs ', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [(' net finance costs ', 83), ('finance cost', 69), ('finance costs', 69), (' finance expenses', 47)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 28), ('finance costs', 28), (' net finance costs ', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' finance expenses', 36), ('finance cost', 33), ('finance costs', 33), (' net finance costs ', 31)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [10, 11], 'score': 83, 'value': 624.0, 'line_item_label': ['Finance expenses', 'Net finance income / (costs)'], 'note_numbers': [nan, nan], 'line_item_value': [-4.0, 628.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [('NULL', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [('NULL', 8)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [('NULL', 7)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('NULL', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [('NULL', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [('NULL', 8)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [('NULL', 7)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('NULL', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), ('prior year ', 25), ('provision for taxation previous year', 23), ('earlier year', 22), ('amount transferred to retained earnings', 18), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax', 13), (' income tax benefit/(expense)', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), ('provision for taxation previous year', 26), (' income tax benefit', 23), ('amount transferred to retained earnings', 22), (' tax (expense)/benefit', 22), (' income tax benefit/(expense)', 18), ('minimum alternate tax credit entitlement', 15), ('deferred tax', 11), ('earlier year', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 34), (' income tax expense', 29), ('prior year ', 27), ('current tax', 26), ('minimum alternate tax credit entitlement', 23), (' income tax benefit', 21), (' tax (expense)/benefit', 20), ('deferred tax', 19), (' income tax', 19), ('earlier year', 17), (' income tax benefit/(expense)', 17), ('amount transferred to retained earnings', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), (' income tax benefit/(expense)', 40), ('amount transferred to retained earnings', 32), ('earlier year', 26), ('deferred tax', 20), ('current tax', 18), ('minimum alternate tax credit entitlement', 14), ('provision for taxation previous year', 10), ('prior year ', 10), (' tax (expense)/benefit', 7)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 45), (' income tax expense', 38), ('amount transferred to retained earnings', 33), ('prior year ', 31), ('provision for taxation previous year', 27), ('minimum alternate tax credit entitlement', 25), ('deferred tax', 24), ('current tax', 22), (' income tax benefit', 18), (' income tax', 16), ('earlier year', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 22), ('provision for taxation previous year', 22), (' income tax benefit', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [(' tax (expense)/benefit', 55), (' income tax benefit/(expense)', 46), ('deferred tax', 42), (' income tax expense', 39), ('earlier year', 37), ('amount transferred to retained earnings', 33), ('minimum alternate tax credit entitlement', 30), ('provision for taxation previous year', 27), ('current tax', 23), (' income tax', 17), ('prior year ', 16), (' income tax benefit', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('provision for taxation previous year', 34), ('amount transferred to retained earnings', 31), ('deferred tax', 29), (' income tax', 29), ('current tax', 26), ('earlier year', 25), (' income tax benefit', 21), ('prior year ', 18), ('minimum alternate tax credit entitlement', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('earlier year', 35), ('deferred tax', 32), (' income tax', 32), ('provision for taxation previous year', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit', 26), ('prior year ', 25), (' income tax benefit/(expense)', 22), ('minimum alternate tax credit entitlement', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), (' tax (expense)/benefit', 27), ('amount transferred to retained earnings', 21), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 18), ('prior year ', 18), ('current tax', 17), ('earlier year', 17), ('provision for taxation previous year', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' income tax expense', 69), (' income tax benefit/(expense)', 54), (' tax (expense)/benefit', 52), (' income tax benefit', 40), ('current tax', 33), ('minimum alternate tax credit entitlement', 31), ('amount transferred to retained earnings', 30), ('deferred tax', 27), (' income tax', 27), ('prior year ', 26), ('provision for taxation previous year', 24), ('earlier year', 16)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [(' income tax benefit', 53), (' income tax expense', 49), (' income tax benefit/(expense)', 49), (' income tax', 47), ('minimum alternate tax credit entitlement', 34), ('amount transferred to retained earnings', 33), ('prior year ', 26), ('current tax', 25), ('provision for taxation previous year', 20), (' tax (expense)/benefit', 15), ('deferred tax', 13), ('earlier year', 6)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), (' tax (expense)/benefit', 53), ('current tax', 52), ('provision for taxation previous year', 49), (' income tax benefit/(expense)', 45), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 31), ('earlier year', 29), ('amount transferred to retained earnings', 23)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('provision for taxation previous year', 22), ('amount transferred to retained earnings', 19), ('earlier year', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [('provision for taxation previous year', 59), ('amount transferred to retained earnings', 46), ('prior year ', 40), (' income tax expense', 34), (' income tax benefit', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), ('deferred tax', 29), (' income tax benefit/(expense)', 29), ('current tax', 28), ('earlier year', 27), (' income tax', 24)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('prior year ', 31), ('current tax', 30), (' tax (expense)/benefit', 30), ('earlier year', 24), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' income tax expense', 49), (' income tax benefit', 44), (' income tax benefit/(expense)', 43), (' income tax', 35), ('provision for taxation previous year', 33), ('earlier year', 33), ('deferred tax', 30), ('prior year ', 30), ('current tax', 29), (' tax (expense)/benefit', 25), ('amount transferred to retained earnings', 16), ('minimum alternate tax credit entitlement', 6)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 100, 'value': -6141.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['7(a)'], 'line_item_value': [-6141.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), ('prior year ', 25), ('provision for taxation previous year', 23), ('earlier year', 22), ('amount transferred to retained earnings', 18), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax', 13), (' income tax benefit/(expense)', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), ('provision for taxation previous year', 26), (' income tax benefit', 23), ('amount transferred to retained earnings', 22), (' tax (expense)/benefit', 22), (' income tax benefit/(expense)', 18), ('minimum alternate tax credit entitlement', 15), ('deferred tax', 11), ('earlier year', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 34), (' income tax expense', 29), ('prior year ', 27), ('current tax', 26), ('minimum alternate tax credit entitlement', 23), (' income tax benefit', 21), (' tax (expense)/benefit', 20), ('deferred tax', 19), (' income tax', 19), ('earlier year', 17), (' income tax benefit/(expense)', 17), ('amount transferred to retained earnings', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), (' income tax benefit/(expense)', 40), ('amount transferred to retained earnings', 32), ('earlier year', 26), ('deferred tax', 20), ('current tax', 18), ('minimum alternate tax credit entitlement', 14), ('provision for taxation previous year', 10), ('prior year ', 10), (' tax (expense)/benefit', 7)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 45), (' income tax expense', 38), ('amount transferred to retained earnings', 33), ('prior year ', 31), ('provision for taxation previous year', 27), ('minimum alternate tax credit entitlement', 25), ('deferred tax', 24), ('current tax', 22), (' income tax benefit', 18), (' income tax', 16), ('earlier year', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 22), ('provision for taxation previous year', 22), (' income tax benefit', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [(' tax (expense)/benefit', 55), (' income tax benefit/(expense)', 46), ('deferred tax', 42), (' income tax expense', 39), ('earlier year', 37), ('amount transferred to retained earnings', 33), ('minimum alternate tax credit entitlement', 30), ('provision for taxation previous year', 27), ('current tax', 23), (' income tax', 17), ('prior year ', 16), (' income tax benefit', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('provision for taxation previous year', 34), ('amount transferred to retained earnings', 31), ('deferred tax', 29), (' income tax', 29), ('current tax', 26), ('earlier year', 25), (' income tax benefit', 21), ('prior year ', 18), ('minimum alternate tax credit entitlement', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('earlier year', 35), ('deferred tax', 32), (' income tax', 32), ('provision for taxation previous year', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit', 26), ('prior year ', 25), (' income tax benefit/(expense)', 22), ('minimum alternate tax credit entitlement', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), (' tax (expense)/benefit', 27), ('amount transferred to retained earnings', 21), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 18), ('prior year ', 18), ('current tax', 17), ('earlier year', 17), ('provision for taxation previous year', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' income tax expense', 69), (' income tax benefit/(expense)', 54), (' tax (expense)/benefit', 52), (' income tax benefit', 40), ('current tax', 33), ('minimum alternate tax credit entitlement', 31), ('amount transferred to retained earnings', 30), ('deferred tax', 27), (' income tax', 27), ('prior year ', 26), ('provision for taxation previous year', 24), ('earlier year', 16)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [(' income tax benefit', 53), (' income tax expense', 49), (' income tax benefit/(expense)', 49), (' income tax', 47), ('minimum alternate tax credit entitlement', 34), ('amount transferred to retained earnings', 33), ('prior year ', 26), ('current tax', 25), ('provision for taxation previous year', 20), (' tax (expense)/benefit', 15), ('deferred tax', 13), ('earlier year', 6)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), (' tax (expense)/benefit', 53), ('current tax', 52), ('provision for taxation previous year', 49), (' income tax benefit/(expense)', 45), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 31), ('earlier year', 29), ('amount transferred to retained earnings', 23)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('provision for taxation previous year', 22), ('amount transferred to retained earnings', 19), ('earlier year', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [('provision for taxation previous year', 59), ('amount transferred to retained earnings', 46), ('prior year ', 40), (' income tax expense', 34), (' income tax benefit', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), ('deferred tax', 29), (' income tax benefit/(expense)', 29), ('current tax', 28), ('earlier year', 27), (' income tax', 24)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('prior year ', 31), ('current tax', 30), (' tax (expense)/benefit', 30), ('earlier year', 24), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' income tax expense', 49), (' income tax benefit', 44), (' income tax benefit/(expense)', 43), (' income tax', 35), ('provision for taxation previous year', 33), ('earlier year', 33), ('deferred tax', 30), ('prior year ', 30), ('current tax', 29), (' tax (expense)/benefit', 25), ('amount transferred to retained earnings', 16), ('minimum alternate tax credit entitlement', 6)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 100, 'value': -5344.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['7(a)'], 'line_item_value': [-5344.0]}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 13), ('prior period', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 17), ('exceptional', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [('exceptional', 29), ('prior period', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 17), ('exceptional', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('exceptional', 32), ('prior period', 24)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [('exceptional', 15), ('prior period', 6)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 18)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [('prior period', 54), ('exceptional', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('exceptional', 21), ('prior period', 18)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('prior period', 33), ('exceptional', 19)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 13), ('prior period', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 17), ('exceptional', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 14)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [('exceptional', 29), ('prior period', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 17), ('exceptional', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('exceptional', 32), ('prior period', 24)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [('exceptional', 15), ('prior period', 6)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 18)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [('prior period', 54), ('exceptional', 26)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('exceptional', 21), ('prior period', 18)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('prior period', 33), ('exceptional', 19)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 13:19:54+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-28 13:19:54+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [('NULL', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [('NULL', 8)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [('NULL', 7)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('NULL', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 13:19:54+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 13:19:54+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = advertising expenses , res_fuzz_match = [('NULL', 11)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net finance income / (costs) , res_fuzz_match = [('NULL', 8)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = net profit for the period , res_fuzz_match = [('NULL', 7)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('NULL', 10)]
2023-07-28 13:19:54+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}

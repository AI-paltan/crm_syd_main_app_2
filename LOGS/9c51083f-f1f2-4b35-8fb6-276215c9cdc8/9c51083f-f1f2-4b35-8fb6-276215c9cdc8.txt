2023-08-11 14:09:16+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-08-11 14:09:16+0530 - sLogger - DEBUG - {'fileid': '9c51083f-f1f2-4b35-8fb6-276215c9cdc8', 'filename': '12 2022 March HCMO Consolidated Stat Accounts - SIGNED.pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/12 2022 March HCMO Consolidated Stat Accounts - SIGNED.pdf', 'status': 'Processing'}
2023-08-11 14:09:16+0530 - sLogger - DEBUG - save file completed
2023-08-11 14:09:16+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-08-11 14:09:16+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-08-11 14:09:16+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-08-11 14:09:16+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-08-11 14:09:16+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-08-11 14:09:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:09:16+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:09:18+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:09:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:09:18+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:09:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:09:18+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:09:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:09:18+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:09:22+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:09:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:09:22+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:09:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:09:22+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:09:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:09:22+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:09:29+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:09:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:09:29+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:09:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:09:29+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:09:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:09:29+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:09:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:09:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:09:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:09:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:09:35+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:09:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:09:35+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:09:41+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:09:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:09:41+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:09:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:09:41+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:09:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:09:41+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:09:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:09:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:09:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:09:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:09:47+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:09:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:09:47+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:09:51+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:09:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:09:51+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:09:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:09:51+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:09:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:09:51+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:09:55+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:09:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:09:55+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:09:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:09:55+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:09:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:09:55+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:10:00+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:10:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:10:00+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:10:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:10:00+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:10:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:10:00+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:10:04+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:10:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:10:04+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:10:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:10:04+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:10:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:10:04+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:10:08+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:10:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:10:08+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:10:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:10:08+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:10:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:10:08+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:10:14+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:10:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:10:14+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:10:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:10:14+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:10:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:10:14+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:10:22+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:10:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:10:22+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:10:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:10:22+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:10:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:10:22+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:10:28+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:10:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:10:28+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:10:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:10:28+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:10:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:10:28+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:10:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:10:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:10:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:10:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:10:35+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:10:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:10:35+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:10:42+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:10:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:10:42+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:10:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:10:42+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:10:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:10:43+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:10:49+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:10:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:10:49+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:10:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:10:49+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:10:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:10:49+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:10:57+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:10:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:10:57+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:10:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:10:57+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:10:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:10:57+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:11:04+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:11:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:11:04+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:11:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:11:04+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:11:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:11:04+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:11:11+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:11:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:11:11+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:11:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:11:11+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:11:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:11:11+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:11:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:11:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:11:20+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:11:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:11:20+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:11:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:11:20+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:11:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:11:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:11:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:11:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:11:27+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:11:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:11:27+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:11:34+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:11:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:11:34+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:11:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:11:34+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:11:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:11:34+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:11:40+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:11:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:11:40+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:11:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:11:40+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:11:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:11:40+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:11:48+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:11:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:11:48+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:11:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:11:48+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:11:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:11:48+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:11:53+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:11:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:11:53+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:11:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:11:53+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:11:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:11:53+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:11:59+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:11:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:11:59+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:11:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:11:59+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:11:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:11:59+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:12:03+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:12:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:12:03+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:12:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:12:03+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:12:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:12:03+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:12:08+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:12:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:12:08+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:12:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:12:08+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:12:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:12:08+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:12:12+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:12:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:12:12+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:12:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:12:12+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:12:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:12:12+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:12:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:12:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:12:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:12:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:12:16+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:12:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:12:16+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:12:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:12:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:12:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:12:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:12:19+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:12:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:12:19+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:12:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:12:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:12:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:12:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:12:23+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:12:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:12:23+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:12:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:12:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:12:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:12:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:12:27+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:12:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:12:27+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:12:31+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:12:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:12:31+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:12:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:12:31+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:12:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:12:31+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:12:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:12:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:12:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:12:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:12:35+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:12:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:12:35+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:12:39+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:12:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:12:39+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:12:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:12:39+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:12:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:12:39+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:12:44+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:12:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:12:44+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:12:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:12:44+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:12:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:12:44+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:12:48+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:12:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:12:48+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:12:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:12:48+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:12:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:12:48+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:12:52+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:12:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:12:52+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:12:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:12:52+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:12:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:12:52+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:12:57+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:12:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:12:57+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:12:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:12:57+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:12:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:12:57+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:13:01+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:13:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:13:01+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:13:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:13:01+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:13:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:13:01+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:13:06+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:13:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:13:06+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:13:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:13:06+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:13:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:13:06+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:13:13+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:13:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:13:13+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:13:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:13:13+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:13:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:13:13+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:13:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:13:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:13:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:13:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:13:23+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:13:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:13:23+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:13:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:13:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:13:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:13:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:13:26+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:13:26+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-08-11 14:13:26+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [8, 34], 'predicted_cpl_pages': [7, 27, 28], 'predicted_ccf_pages': [10], 'filtered_cbs_pages': [8], 'filtered_cpl_pages': [7], 'filtered_ccf_pages': [10], 'month': 'march', 'status': 'Page Classification Completed'}
2023-08-11 14:13:26+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-08-11 14:13:26+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-08-11 14:13:26+0530 - sLogger - DEBUG - process file completed
2023-08-11 14:13:26+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-08-11 14:13:26+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-08-11 14:13:26+0530 - sLogger - DEBUG - TE process file started
2023-08-11 14:18:17+0530 - sLogger - DEBUG - TE Proces file completed
2023-08-11 14:18:17+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-11 14:18:17+0530 - sLogger - DEBUG - process_main_pages started
2023-08-11 14:18:17+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-11 14:18:17+0530 - sLogger - DEBUG - start_refactoring started
2023-08-11 14:18:17+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-11 14:18:17+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-11 14:18:17+0530 - sLogger - DEBUG - start_refactoring started
2023-08-11 14:18:17+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-11 14:18:17+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-11 14:18:17+0530 - sLogger - DEBUG - start_refactoring started
2023-08-11 14:18:17+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-11 14:18:17+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-11 14:18:17+0530 - sLogger - DEBUG - set_section_details started
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Current assets | [('current assets', 100), ('noncurrent assets', 77), ('currentliabilities', 64), ('assets', 56), ('currentassets', 56), ('noncurrentliabilities', 56), ('current liabilities', 52), ('noncurrentassets', 50), ('noncurrent liabilities', 44), ('equity', 32), ('equityliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('liabilities', 11)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current assets | score 100
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD currentassets | score 96
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current liabilities | score 67
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD currentliabilities | score 62
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent assets | score 90
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentassets | score 87
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent liabilities | score 61
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current assets | score 95
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current liabilities | score 86
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentliabilities | score 57
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentassets | score 87
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentliabilities | score 57
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity and liabilities | score 33
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equityandliabilities | score 29
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equityandliabilities', 38), ('equity liabilities', 35), ('equityliabilities', 34), ('noncurrentassets', 33), ('assets', 31), ('currentassets', 30), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrentliabilities', 24), ('noncurrent liabilities', 23), ('liabilities', 22), ('currentliabilities', 20)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentassets | score 37
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentliabilities | score 35
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equityandliabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Trade and other receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentassets | score 41
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentliabilities | score 45
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equityandliabilities | score 43
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentassets | score 42
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentliabilities | score 41
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equityandliabilities | score 40
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Current tax receivable | [('current liabilities', 62), ('currentassets', 60), ('currentliabilities', 59), ('noncurrentassets', 55), ('noncurrentliabilities', 53), ('current assets', 45), ('equity and liabilities', 34), ('equity liabilities', 32), ('equityandliabilities', 28), ('noncurrent assets', 26), ('equity', 25), ('noncurrent liabilities', 25), ('equityliabilities', 23), ('assets', 17), ('liabilities', 17)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax receivable | MATCH WORD current assets | score 86
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax receivable | MATCH WORD currentassets | score 56
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax receivable | MATCH WORD current liabilities | score 63
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax receivable | MATCH WORD currentliabilities | score 60
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax receivable | MATCH WORD noncurrent assets | score 51
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax receivable | MATCH WORD noncurrentassets | score 50
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax receivable | MATCH WORD noncurrent liabilities | score 59
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax receivable | MATCH WORD non current assets | score 53
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax receivable | MATCH WORD non current liabilities | score 59
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax receivable | MATCH WORD noncurrentliabilities | score 56
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax receivable | MATCH WORD noncurrentassets | score 50
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax receivable | MATCH WORD noncurrentliabilities | score 56
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax receivable | MATCH WORD equity and liabilities | score 45
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax receivable | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax receivable | MATCH WORD equityandliabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('currentliabilities', 57), ('currentassets', 52), ('noncurrentliabilities', 52), ('noncurrentassets', 47), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equityandliabilities', 33), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentassets | score 83
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentliabilities | score 53
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equityandliabilities | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Noncurrent assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('noncurrentliabilities', 56), ('noncurrentassets', 50), ('currentassets', 40), ('currentliabilities', 36), ('current liabilities', 30), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('equity', 21), ('equityliabilities', 19), ('liabilities', 11)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current assets | score 90
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD currentassets | score 87
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current liabilities | score 61
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD currentliabilities | score 57
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent assets | score 100
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentassets | score 97
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent liabilities | score 72
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current assets | score 97
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current liabilities | score 70
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentliabilities | score 68
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentassets | score 97
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentliabilities | score 68
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equityandliabilities | score 27
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('equityandliabilities', 40), ('current assets', 38), ('equityliabilities', 38), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('currentassets', 28), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentassets | score 39
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentliabilities | score 35
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equityandliabilities | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Right of use assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD current assets | score 57
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD currentassets | score 50
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD current liabilities | score 32
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD currentliabilities | score 27
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD noncurrent assets | score 56
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD noncurrentassets | score 51
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD noncurrent liabilities | score 34
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD non current assets | score 59
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD non current liabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD noncurrentassets | score 51
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD equity and liabilities | score 34
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD equityandliabilities | score 26
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Investment in subsidiaries | [('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 39), ('equityandliabilities', 36), ('equity', 35), ('current assets', 33), ('noncurrent assets', 33), ('equityliabilities', 32), ('noncurrentassets', 31), ('currentassets', 28), ('noncurrentliabilities', 28), ('liabilities', 26), ('noncurrent liabilities', 26), ('currentliabilities', 23), ('assets', 18)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Investment in subsidiaries | MATCH WORD current assets | score 40
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Investment in subsidiaries | MATCH WORD currentassets | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Investment in subsidiaries | MATCH WORD current liabilities | score 49
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Investment in subsidiaries | MATCH WORD currentliabilities | score 45
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Investment in subsidiaries | MATCH WORD noncurrent assets | score 42
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Investment in subsidiaries | MATCH WORD noncurrentassets | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Investment in subsidiaries | MATCH WORD noncurrent liabilities | score 50
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Investment in subsidiaries | MATCH WORD non current assets | score 41
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Investment in subsidiaries | MATCH WORD non current liabilities | score 49
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Investment in subsidiaries | MATCH WORD noncurrentliabilities | score 47
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Investment in subsidiaries | MATCH WORD noncurrentassets | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Investment in subsidiaries | MATCH WORD noncurrentliabilities | score 47
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Investment in subsidiaries | MATCH WORD equity and liabilities | score 46
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Investment in subsidiaries | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Investment in subsidiaries | MATCH WORD equityandliabilities | score 43
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Goodwill | [('liabilities', 31), ('equityliabilities', 27), ('equity and liabilities', 25), ('equityandliabilities', 22), ('noncurrentliabilities', 21), ('equity liabilities', 20), ('current liabilities', 19), ('noncurrent liabilities', 19), ('equity', 15), ('currentliabilities', 12), ('noncurrent assets', 10), ('noncurrentassets', 9), ('assets', 0), ('current assets', 0), ('currentassets', 0)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD current assets | score 0
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD currentassets | score 0
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD current liabilities | score 22
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD currentliabilities | score 22
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD noncurrent assets | score 11
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD noncurrentassets | score 11
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD noncurrent liabilities | score 22
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD non current assets | score 11
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD non current liabilities | score 22
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD noncurrentliabilities | score 22
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD noncurrentassets | score 11
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD noncurrentliabilities | score 22
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD equity and liabilities | score 22
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD equity | score 14
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD equityandliabilities | score 34
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('equityandliabilities', 23), ('noncurrent liabilities', 21), ('equity', 19), ('currentliabilities', 17), ('equityliabilities', 17), ('noncurrentliabilities', 15), ('liabilities', 10)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentassets | score 62
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentliabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equityandliabilities | score 31
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equityandliabilities', 43), ('currentassets', 42), ('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 38), ('noncurrentassets', 37), ('equity', 33), ('noncurrent liabilities', 31), ('equityliabilities', 30), ('currentliabilities', 29), ('noncurrentliabilities', 25), ('liabilities', 22)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current assets | score 58
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentassets | score 53
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current liabilities | score 42
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentliabilities | score 40
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent assets | score 59
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current assets | score 57
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current liabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity and liabilities | score 46
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equityandliabilities | score 49
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrentliabilities', 58), ('noncurrent liabilities', 55), ('noncurrentassets', 53), ('currentliabilities', 43), ('assets', 42), ('current liabilities', 42), ('currentassets', 39), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentassets | score 83
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentliabilities | score 49
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equityandliabilities | score 28
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentassets | score 56
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentliabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equityandliabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Current liabilities | [('current liabilities', 100), ('currentliabilities', 78), ('noncurrentliabilities', 69), ('equity liabilities', 67), ('currentassets', 62), ('liabilities', 60), ('equity and liabilities', 58), ('noncurrentassets', 55), ('current assets', 52), ('noncurrent liabilities', 43), ('equityliabilities', 36), ('equityandliabilities', 32), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current assets | score 67
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD currentassets | score 62
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current liabilities | score 100
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD currentliabilities | score 97
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent assets | score 61
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentassets | score 57
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent liabilities | score 93
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current assets | score 59
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current liabilities | score 95
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentassets | score 57
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity and liabilities | score 69
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equityandliabilities | score 67
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentassets | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentliabilities | score 43
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equityandliabilities | score 41
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Contract liabilities | [('current liabilities', 69), ('liabilities', 57), ('equity liabilities', 57), ('equity and liabilities', 56), ('noncurrentliabilities', 44), ('currentliabilities', 42), ('noncurrent liabilities', 41), ('currentassets', 37), ('noncurrentassets', 33), ('equityandliabilities', 31), ('equityliabilities', 26), ('current assets', 21), ('noncurrent assets', 21), ('assets', 20), ('equity', 19)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current assets | score 41
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD currentassets | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current liabilities | score 77
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD currentliabilities | score 74
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent assets | score 43
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentassets | score 39
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent liabilities | score 76
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current assets | score 42
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current liabilities | score 74
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentliabilities | score 73
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentassets | score 39
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentliabilities | score 73
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity and liabilities | score 67
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equityandliabilities | score 65
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Derivative financial instruments | [('noncurrentliabilities', 39), ('current assets', 38), ('noncurrentassets', 36), ('equity and liabilities', 34), ('currentassets', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('equity liabilities', 32), ('currentliabilities', 30), ('equityandliabilities', 29), ('assets', 28), ('current liabilities', 26), ('liabilities', 20), ('equity', 20), ('equityliabilities', 19)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD current assets | score 43
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD currentassets | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD current liabilities | score 43
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD currentliabilities | score 40
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrent assets | score 37
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrentassets | score 34
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrent liabilities | score 46
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD non current assets | score 35
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD non current liabilities | score 40
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrentliabilities | score 43
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrentassets | score 34
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrentliabilities | score 43
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD equity and liabilities | score 48
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD equity | score 45
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD equityandliabilities | score 46
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Interestbearing liabilities | [('current liabilities', 61), ('equity and liabilities', 56), ('equity liabilities', 56), ('liabilities', 48), ('noncurrentliabilities', 39), ('noncurrent liabilities', 36), ('currentliabilities', 36), ('equityandliabilities', 33), ('equityliabilities', 30), ('noncurrentassets', 29), ('currentassets', 26), ('current assets', 25), ('equity', 24), ('noncurrent assets', 19), ('assets', 17)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interestbearing liabilities | MATCH WORD current assets | score 34
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interestbearing liabilities | MATCH WORD currentassets | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interestbearing liabilities | MATCH WORD current liabilities | score 69
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interestbearing liabilities | MATCH WORD currentliabilities | score 65
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interestbearing liabilities | MATCH WORD noncurrent assets | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interestbearing liabilities | MATCH WORD noncurrentassets | score 33
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interestbearing liabilities | MATCH WORD noncurrent liabilities | score 65
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interestbearing liabilities | MATCH WORD non current assets | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interestbearing liabilities | MATCH WORD non current liabilities | score 64
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interestbearing liabilities | MATCH WORD noncurrentliabilities | score 62
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interestbearing liabilities | MATCH WORD noncurrentassets | score 33
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interestbearing liabilities | MATCH WORD noncurrentliabilities | score 62
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interestbearing liabilities | MATCH WORD equity and liabilities | score 65
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interestbearing liabilities | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interestbearing liabilities | MATCH WORD equityandliabilities | score 64
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Current tax liabilities | [('current liabilities', 88), ('currentliabilities', 67), ('currentassets', 60), ('noncurrentliabilities', 60), ('equity liabilities', 58), ('noncurrentassets', 55), ('equity and liabilities', 51), ('liabilities', 50), ('current assets', 45), ('noncurrent liabilities', 44), ('equityliabilities', 31), ('equityandliabilities', 28), ('noncurrent assets', 26), ('equity', 25), ('assets', 17)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current assets | score 86
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD currentassets | score 56
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current liabilities | score 95
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD currentliabilities | score 88
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent assets | score 55
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentassets | score 51
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent liabilities | score 84
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current assets | score 56
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current liabilities | score 86
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentliabilities | score 82
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentassets | score 51
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentliabilities | score 82
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity and liabilities | score 71
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equityandliabilities | score 65
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentassets | score 56
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentliabilities | score 84
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equityandliabilities | score 62
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Noncurrent liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('noncurrentliabilities', 54), ('noncurrentassets', 48), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('currentliabilities', 35), ('currentassets', 31), ('equityandliabilities', 24), ('equity', 20), ('equityliabilities', 18), ('assets', 11)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current assets | score 61
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD currentassets | score 57
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current liabilities | score 93
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD currentliabilities | score 90
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent assets | score 72
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentassets | score 68
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent liabilities | score 100
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current assets | score 70
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current liabilities | score 98
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentliabilities | score 98
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentassets | score 68
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentliabilities | score 98
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity and liabilities | score 65
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equityandliabilities | score 62
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Interest bearing liabilities | [('current liabilities', 65), ('equity liabilities', 61), ('equity and liabilities', 59), ('liabilities', 46), ('currentliabilities', 41), ('noncurrentliabilities', 38), ('equityliabilities', 36), ('noncurrent liabilities', 35), ('equityandliabilities', 32), ('currentassets', 31), ('equity', 31), ('current assets', 30), ('noncurrentassets', 29), ('assets', 24), ('noncurrent assets', 24)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interest bearing liabilities | MATCH WORD current assets | score 33
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interest bearing liabilities | MATCH WORD currentassets | score 32
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interest bearing liabilities | MATCH WORD current liabilities | score 69
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interest bearing liabilities | MATCH WORD currentliabilities | score 67
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interest bearing liabilities | MATCH WORD noncurrent assets | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interest bearing liabilities | MATCH WORD noncurrentassets | score 32
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interest bearing liabilities | MATCH WORD noncurrent liabilities | score 65
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interest bearing liabilities | MATCH WORD non current assets | score 35
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interest bearing liabilities | MATCH WORD non current liabilities | score 63
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interest bearing liabilities | MATCH WORD noncurrentliabilities | score 62
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interest bearing liabilities | MATCH WORD noncurrentassets | score 32
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interest bearing liabilities | MATCH WORD noncurrentliabilities | score 62
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interest bearing liabilities | MATCH WORD equity and liabilities | score 68
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interest bearing liabilities | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Interest bearing liabilities | MATCH WORD equityandliabilities | score 62
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentassets | score 56
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentliabilities | score 85
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equityandliabilities | score 58
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentassets | score 27
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentliabilities | score 69
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equityandliabilities | score 70
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('currentassets', 48), ('noncurrentassets', 42), ('currentliabilities', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('noncurrentliabilities', 29), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equityliabilities', 24), ('liabilities', 13)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentassets | score 70
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentliabilities | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equityandliabilities | score 33
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentassets | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentliabilities | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equityandliabilities | score 90
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Contributed equity | [('equity', 55), ('equityliabilities', 50), ('equity and liabilities', 48), ('equityandliabilities', 44), ('noncurrentliabilities', 43), ('equity liabilities', 41), ('current liabilities', 40), ('currentliabilities', 40), ('noncurrentassets', 39), ('currentassets', 36), ('current assets', 28), ('liabilities', 27), ('noncurrent liabilities', 27), ('noncurrent assets', 21), ('assets', 19)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD current assets | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD currentassets | score 32
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD current liabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD currentliabilities | score 39
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrent assets | score 40
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrentassets | score 35
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrent liabilities | score 35
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD non current assets | score 39
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD non current liabilities | score 37
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrentliabilities | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrentassets | score 35
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrentliabilities | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD equity and liabilities | score 57
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD equity | score 90
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD equityandliabilities | score 32
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Foreign Currency Translation Reserves | [('currentassets', 47), ('current liabilities', 44), ('noncurrentassets', 43), ('currentliabilities', 40), ('noncurrentliabilities', 37), ('current assets', 32), ('equity and liabilities', 29), ('equityandliabilities', 29), ('noncurrent assets', 27), ('equity liabilities', 23), ('noncurrent liabilities', 22), ('equityliabilities', 21), ('assets', 17), ('liabilities', 16), ('equity', 16)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Foreign Currency Translation Reserves | MATCH WORD current assets | score 58
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Foreign Currency Translation Reserves | MATCH WORD currentassets | score 56
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Foreign Currency Translation Reserves | MATCH WORD current liabilities | score 52
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Foreign Currency Translation Reserves | MATCH WORD currentliabilities | score 55
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Foreign Currency Translation Reserves | MATCH WORD noncurrent assets | score 53
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Foreign Currency Translation Reserves | MATCH WORD noncurrentassets | score 53
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Foreign Currency Translation Reserves | MATCH WORD noncurrent liabilities | score 51
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Foreign Currency Translation Reserves | MATCH WORD non current assets | score 55
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Foreign Currency Translation Reserves | MATCH WORD non current liabilities | score 53
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Foreign Currency Translation Reserves | MATCH WORD noncurrentliabilities | score 52
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Foreign Currency Translation Reserves | MATCH WORD noncurrentassets | score 53
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Foreign Currency Translation Reserves | MATCH WORD noncurrentliabilities | score 52
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Foreign Currency Translation Reserves | MATCH WORD equity and liabilities | score 41
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Foreign Currency Translation Reserves | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Foreign Currency Translation Reserves | MATCH WORD equityandliabilities | score 40
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Retained profits | [('currentliabilities', 45), ('current liabilities', 44), ('currentassets', 40), ('noncurrentliabilities', 40), ('current assets', 38), ('equity liabilities', 38), ('noncurrentassets', 36), ('equity and liabilities', 33), ('equityandliabilities', 33), ('liabilities', 32), ('equity', 32), ('noncurrent liabilities', 30), ('equityliabilities', 29), ('noncurrent assets', 23), ('assets', 22)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD current assets | score 47
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD currentassets | score 48
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD current liabilities | score 46
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD currentliabilities | score 47
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrent assets | score 42
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrentassets | score 44
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrent liabilities | score 42
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD non current assets | score 41
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD non current liabilities | score 41
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrentliabilities | score 43
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrentassets | score 44
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrentliabilities | score 43
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD equity and liabilities | score 47
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD equityandliabilities | score 44
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Equity attributable to equity holders ofthe parent | [('equity and liabilities', 41), ('current assets', 37), ('equity liabilities', 37), ('equityandliabilities', 27), ('noncurrent assets', 26), ('equity', 26), ('current liabilities', 25), ('noncurrent liabilities', 25), ('currentliabilities', 24), ('equityliabilities', 24), ('currentassets', 23), ('noncurrentliabilities', 23), ('noncurrentassets', 21), ('liabilities', 17), ('assets', 13)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity attributable to equity holders ofthe parent | MATCH WORD current assets | score 43
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity attributable to equity holders ofthe parent | MATCH WORD currentassets | score 34
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity attributable to equity holders ofthe parent | MATCH WORD current liabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity attributable to equity holders ofthe parent | MATCH WORD currentliabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity attributable to equity holders ofthe parent | MATCH WORD noncurrent assets | score 40
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity attributable to equity holders ofthe parent | MATCH WORD noncurrentassets | score 32
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity attributable to equity holders ofthe parent | MATCH WORD noncurrent liabilities | score 35
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity attributable to equity holders ofthe parent | MATCH WORD non current assets | score 44
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity attributable to equity holders ofthe parent | MATCH WORD non current liabilities | score 37
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity attributable to equity holders ofthe parent | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity attributable to equity holders ofthe parent | MATCH WORD noncurrentassets | score 32
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity attributable to equity holders ofthe parent | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity attributable to equity holders ofthe parent | MATCH WORD equity and liabilities | score 86
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity attributable to equity holders ofthe parent | MATCH WORD equity | score 60
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Equity attributable to equity holders ofthe parent | MATCH WORD equityandliabilities | score 54
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Noncontrolling interests | [('noncurrent assets', 50), ('noncurrentliabilities', 45), ('noncurrent liabilities', 42), ('current assets', 38), ('currentliabilities', 36), ('noncurrentassets', 35), ('current liabilities', 30), ('equity and liabilities', 28), ('equityandliabilities', 27), ('currentassets', 26), ('equity liabilities', 25), ('equityliabilities', 22), ('assets', 17), ('liabilities', 16), ('equity', 16)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncontrolling interests | MATCH WORD current assets | score 43
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncontrolling interests | MATCH WORD currentassets | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncontrolling interests | MATCH WORD current liabilities | score 42
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncontrolling interests | MATCH WORD currentliabilities | score 43
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncontrolling interests | MATCH WORD noncurrent assets | score 49
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncontrolling interests | MATCH WORD noncurrentassets | score 50
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncontrolling interests | MATCH WORD noncurrent liabilities | score 52
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncontrolling interests | MATCH WORD non current assets | score 48
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncontrolling interests | MATCH WORD non current liabilities | score 51
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncontrolling interests | MATCH WORD noncurrentliabilities | score 53
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncontrolling interests | MATCH WORD noncurrentassets | score 50
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncontrolling interests | MATCH WORD noncurrentliabilities | score 53
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncontrolling interests | MATCH WORD equity and liabilities | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncontrolling interests | MATCH WORD equity | score 30
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Noncontrolling interests | MATCH WORD equityandliabilities | score 32
2023-08-11 14:18:17+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentassets | score 32
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentliabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-08-11 14:18:17+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equityandliabilities | score 57
2023-08-11 14:18:17+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-11 14:18:17+0530 - sLogger - DEBUG - set_section_details started
2023-08-11 14:18:17+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- nan | changes in working capital
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-11 14:18:19+0530 - sLogger - ERROR - error occured: 'value'
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-11 14:18:19+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-11 14:18:19+0530 - sLogger - ERROR - error occured: 'value'
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-11 14:18:19+0530 - sLogger - ERROR - error occured: 'year'
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-11 14:18:19+0530 - sLogger - ERROR - error occured: 'year'
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-11 14:18:19+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-11 14:18:19+0530 - sLogger - ERROR - error occured: 'value'
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-11 14:18:19+0530 - sLogger - ERROR - error occured: 'year'
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-11 14:18:19+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-11 14:18:19+0530 - sLogger - ERROR - error occured: 'value'
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-11 14:18:19+0530 - sLogger - ERROR - error occured: 'year'
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-11 14:18:19+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-11 14:18:19+0530 - sLogger - ERROR - error occured: 'year'
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-11 14:18:19+0530 - sLogger - ERROR - error occured: 'year'
2023-08-11 14:18:19+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-11 14:18:19+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits']
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-11 14:18:19+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand ', ' cash at bank ', ' cash at bank and on hand ', ' short term deposits ', ' cash at banks earns interest at floating rates based on daily bank deposit rates ', ' cash and cash equivalents ', ' cash on hand and at bank ', ' bank balances ', '  cash and bank balances ', ' cash asset']
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-11 14:18:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:19+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits', 35), ('cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = current tax receivable , res_fuzz_match = [('cash and cash equivalents', 36), ('cash asset', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('cash and short term deposits', 31), ('Cash and short term deposits', 31), ('cash and bank balances', 26), ('other bank balances', 23)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 49181.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['6'], 'line_item_value': [49181.0]}
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:19+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits', 35), ('cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = current tax receivable , res_fuzz_match = [('cash and cash equivalents', 36), ('cash asset', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('cash and short term deposits', 31), ('Cash and short term deposits', 31), ('cash and bank balances', 26), ('other bank balances', 23)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 54859.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['6'], 'line_item_value': [54859.0]}
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:19+0530 - sLogger - DEBUG - keywords = ['cash on hand ', ' cash at bank ', ' cash at bank and on hand ', ' short term deposits ', ' cash at banks earns interest at floating rates based on daily bank deposit rates ', ' cash and cash equivalents ', ' cash on hand and at bank ', ' bank balances ', '  cash and bank balances ', ' cash asset'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows = 6 cash at bank , res_fuzz_match = [(' cash at bank ', 100), (' cash at bank and on hand ', 100), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 100), ('cash on hand ', 78), (' cash and cash equivalents ', 78), (' cash on hand and at bank ', 78), ('  cash and bank balances ', 78), (' cash asset', 67), (' bank balances ', 44), (' short term deposits ', 22)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand ', 0), (' cash at bank ', 0), (' cash at bank and on hand ', 0), (' short term deposits ', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 0), (' cash and cash equivalents ', 0), (' cash on hand and at bank ', 0), (' bank balances ', 0), ('  cash and bank balances ', 0), (' cash asset', 0)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows = 6 cash at bank , res_fuzz_match = [(' cash at bank ', 100), (' cash at bank and on hand ', 100), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 100), ('cash on hand ', 78), (' cash and cash equivalents ', 78), (' cash on hand and at bank ', 78), ('  cash and bank balances ', 78), (' cash asset', 67), (' bank balances ', 44), (' short term deposits ', 22)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand ', 0), (' cash at bank ', 0), (' cash at bank and on hand ', 0), (' short term deposits ', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 0), (' cash and cash equivalents ', 0), (' cash on hand and at bank ', 0), (' bank balances ', 0), ('  cash and bank balances ', 0), (' cash asset', 0)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [54859.0, 49181.0], 'label': ['6 Cash at bank', '6 Cash at bank'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-11 14:18:19+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-11 14:18:19+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' parts and accessories (at cost) ', ' stock in transit']
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-11 14:18:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:19+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = current tax receivable , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 586257.0, 'line_item_label': ['Inventories'], 'note_numbers': ['8'], 'line_item_value': [586257.0]}
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:19+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = current tax receivable , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 660561.0, 'line_item_label': ['Inventories'], 'note_numbers': ['8'], 'line_item_value': [660561.0]}
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:19+0530 - sLogger - DEBUG - keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' parts and accessories (at cost) ', ' stock in transit'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows = inventories finished goods , res_fuzz_match = [(' finished goods ', 100), (' inventories ', 100), (' finished goods at cost ', 81), (' provision for inventory obsolescence ', 62), (' stores and other consumables at cost ', 38), (' cranes - in transit ', 38), (' stock in transit', 38), (' goods in transit ', 33), (' parts and accessories (at cost) ', 33), (' work in progress ', 31), ('raw materials ', 30), (' raw materials ', 30), (' cranes ', 20), (' spare parts ', 20)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows = inventories less: provision for obsolescence , res_fuzz_match = [(' inventories ', 100), (' provision for inventory obsolescence ', 67), (' spare parts ', 50), (' work in progress ', 46), (' finished goods at cost ', 44), (' stores and other consumables at cost ', 44), (' parts and accessories (at cost) ', 43), ('raw materials ', 40), (' raw materials ', 40), (' cranes ', 40), (' cranes - in transit ', 38), (' finished goods ', 36), (' goods in transit ', 33), (' stock in transit', 31)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows = inventories total , res_fuzz_match = [(' inventories ', 100), (' provision for inventory obsolescence ', 80), (' parts and accessories (at cost) ', 48), (' cranes - in transit ', 46), (' stock in transit', 42), (' finished goods at cost ', 40), (' stores and other consumables at cost ', 40), (' finished goods ', 36), (' goods in transit ', 33), (' work in progress ', 31), ('raw materials ', 30), (' raw materials ', 30), (' spare parts ', 30), (' cranes ', 20)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows = inventories work in progress , res_fuzz_match = [(' work in progress ', 100), (' inventories ', 100), (' provision for inventory obsolescence ', 61), ('raw materials ', 40), (' raw materials ', 40), (' cranes ', 40), (' spare parts ', 40), (' stores and other consumables at cost ', 39), (' finished goods at cost ', 38), (' cranes - in transit ', 38), (' stock in transit', 38), (' finished goods ', 36), (' parts and accessories (at cost) ', 35), (' goods in transit ', 33)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows = inventories total , res_fuzz_match = [(' inventories ', 100), (' provision for inventory obsolescence ', 80), (' parts and accessories (at cost) ', 48), (' cranes - in transit ', 46), (' stock in transit', 42), (' finished goods at cost ', 40), (' stores and other consumables at cost ', 40), (' finished goods ', 36), (' goods in transit ', 33), (' work in progress ', 31), ('raw materials ', 30), (' raw materials ', 30), (' spare parts ', 30), (' cranes ', 20)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows = inventories finished goods , res_fuzz_match = [(' finished goods ', 100), (' inventories ', 100), (' finished goods at cost ', 81), (' provision for inventory obsolescence ', 62), (' stores and other consumables at cost ', 38), (' cranes - in transit ', 38), (' stock in transit', 38), (' goods in transit ', 33), (' parts and accessories (at cost) ', 33), (' work in progress ', 31), ('raw materials ', 30), (' raw materials ', 30), (' cranes ', 20), (' spare parts ', 20)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows = inventories less: provision for obsolescence , res_fuzz_match = [(' inventories ', 100), (' provision for inventory obsolescence ', 67), (' spare parts ', 50), (' work in progress ', 46), (' finished goods at cost ', 44), (' stores and other consumables at cost ', 44), (' parts and accessories (at cost) ', 43), ('raw materials ', 40), (' raw materials ', 40), (' cranes ', 40), (' cranes - in transit ', 38), (' finished goods ', 36), (' goods in transit ', 33), (' stock in transit', 31)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows = inventories total , res_fuzz_match = [(' inventories ', 100), (' provision for inventory obsolescence ', 80), (' parts and accessories (at cost) ', 48), (' cranes - in transit ', 46), (' stock in transit', 42), (' finished goods at cost ', 40), (' stores and other consumables at cost ', 40), (' finished goods ', 36), (' goods in transit ', 33), (' work in progress ', 31), ('raw materials ', 30), (' raw materials ', 30), (' spare parts ', 30), (' cranes ', 20)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows = inventories work in progress , res_fuzz_match = [(' work in progress ', 100), (' inventories ', 100), (' provision for inventory obsolescence ', 61), ('raw materials ', 40), (' raw materials ', 40), (' cranes ', 40), (' spare parts ', 40), (' stores and other consumables at cost ', 39), (' finished goods at cost ', 38), (' cranes - in transit ', 38), (' stock in transit', 38), (' finished goods ', 36), (' parts and accessories (at cost) ', 35), (' goods in transit ', 33)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows = inventories total , res_fuzz_match = [(' inventories ', 100), (' provision for inventory obsolescence ', 80), (' parts and accessories (at cost) ', 48), (' cranes - in transit ', 46), (' stock in transit', 42), (' finished goods at cost ', 40), (' stores and other consumables at cost ', 40), (' finished goods ', 36), (' goods in transit ', 33), (' work in progress ', 31), ('raw materials ', 30), (' raw materials ', 30), (' spare parts ', 30), (' cranes ', 20)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [615797.0, -3337.0, 612460.0, 48101.0, 660561.0, 559169.0, -2851.0, 556318.0, 29939.0, 586257.0], 'label': ['Inventories Finished goods', 'Inventories Less: provision for obsolescence', 'Inventories Total', 'Inventories Work in progress', 'Inventories Total', 'Inventories Finished goods', 'Inventories Less: provision for obsolescence', 'Inventories Total', 'Inventories Work in progress', 'Inventories Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-11 14:18:19+0530 - sLogger - DEBUG - list_target_keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables']
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-11 14:18:19+0530 - sLogger - DEBUG - list_target_keywords = ['prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance']
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-11 14:18:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:19+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [(' other current assets ', 81), (' other current financial assets ', 65), ('other assets ', 58), (' other financial assets ', 50), (' trade and other receivables', 34), (' prepayments ', 21)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), ('other assets ', 31), (' other current assets ', 30), (' other financial assets ', 30), (' other current financial assets ', 29), (' prepayments ', 15)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables', 26), (' prepayments ', 13)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = current tax receivable , res_fuzz_match = [(' trade and other receivables', 60), (' other current financial assets ', 53), (' other current assets ', 49), (' other financial assets ', 38), ('other assets ', 28), (' prepayments ', 25)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': 100, 'value': 214941.0, 'line_item_label': ['Current assets', 'Trade and other receivables'], 'note_numbers': [nan, '7'], 'line_item_value': [0.0, 214941.0]}
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:19+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [(' other current assets ', 81), (' other current financial assets ', 65), ('other assets ', 58), (' other financial assets ', 50), (' trade and other receivables', 34), (' prepayments ', 21)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), ('other assets ', 31), (' other current assets ', 30), (' other financial assets ', 30), (' other current financial assets ', 29), (' prepayments ', 15)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables', 26), (' prepayments ', 13)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - txt_particular = current tax receivable , res_fuzz_match = [(' trade and other receivables', 60), (' other current financial assets ', 53), (' other current assets ', 49), (' other financial assets ', 38), ('other assets ', 28), (' prepayments ', 25)]
2023-08-11 14:18:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': 100, 'value': 191673.0, 'line_item_label': ['Current assets', 'Trade and other receivables'], 'note_numbers': [nan, '7'], 'line_item_value': [0.0, 191673.0]}
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:19+0530 - sLogger - DEBUG - keywords = ['prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:19+0530 - sLogger - DEBUG - keywords = ['prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-11 14:18:19+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables']
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-11 14:18:19+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-08-11 14:18:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-11 14:18:19+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets ', 81), (' other assets ', 58), (' financial assets ', 54), (' other financial assets ', 50), (' biological assets ', 48), (' trade and other receivables', 34), (' income tax receivable from related parties ', 30), (' deferred operating expenditure ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets ', 36), (' financial assets ', 35), (' income tax receivable from related parties ', 33), (' other assets ', 31), ('other current assets ', 30), (' other financial assets ', 30), (' deferred operating expenditure ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' other assets ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' other assets ', 40), ('other current assets ', 36), (' financial assets ', 36), (' other financial assets ', 36), (' deferred operating expenditure ', 33), (' biological assets ', 29), (' trade and other receivables', 26), (' income tax receivable from related parties ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current tax receivable , res_fuzz_match = [(' trade and other receivables', 60), (' income tax receivable from related parties ', 55), ('other current assets ', 49), (' other financial assets ', 38), (' financial assets ', 32), (' deferred operating expenditure ', 31), (' other assets ', 28), (' biological assets ', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': 100, 'value': 214941.0, 'line_item_label': ['Current assets', 'Trade and other receivables'], 'note_numbers': [nan, '7'], 'line_item_value': [0.0, 214941.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets ', 81), (' other assets ', 58), (' financial assets ', 54), (' other financial assets ', 50), (' biological assets ', 48), (' trade and other receivables', 34), (' income tax receivable from related parties ', 30), (' deferred operating expenditure ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets ', 36), (' financial assets ', 35), (' income tax receivable from related parties ', 33), (' other assets ', 31), ('other current assets ', 30), (' other financial assets ', 30), (' deferred operating expenditure ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' other assets ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' other assets ', 40), ('other current assets ', 36), (' financial assets ', 36), (' other financial assets ', 36), (' deferred operating expenditure ', 33), (' biological assets ', 29), (' trade and other receivables', 26), (' income tax receivable from related parties ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current tax receivable , res_fuzz_match = [(' trade and other receivables', 60), (' income tax receivable from related parties ', 55), ('other current assets ', 49), (' other financial assets ', 38), (' financial assets ', 32), (' deferred operating expenditure ', 31), (' other assets ', 28), (' biological assets ', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': 100, 'value': 191673.0, 'line_item_label': ['Current assets', 'Trade and other receivables'], 'note_numbers': [nan, '7'], 'line_item_value': [0.0, 191673.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment ']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment ', 29), (' plant and equipment ', 29), (' Property ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment ', 77), (' plant and equipment ', 77), (' Property ', 50)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment ', 27), (' plant and equipment ', 27), (' Property ', 26)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [('plant property equipment', 32), ('property plant equipment', 32), ('plant and equipment ', 31), (' plant and equipment ', 31), (' Property ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('plant and equipment ', 27), (' Property ', 27), (' plant and equipment ', 27), ('plant property equipment', 15), ('property plant equipment', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment ', 33), (' plant and equipment ', 33), (' Property ', 26)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment ', 37), (' plant and equipment ', 37), (' Property ', 30), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 477418.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [477418.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment ', 29), (' plant and equipment ', 29), (' Property ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment ', 77), (' plant and equipment ', 77), (' Property ', 50)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment ', 27), (' plant and equipment ', 27), (' Property ', 26)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [('plant property equipment', 32), ('property plant equipment', 32), ('plant and equipment ', 31), (' plant and equipment ', 31), (' Property ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('plant and equipment ', 27), (' Property ', 27), (' plant and equipment ', 27), ('plant property equipment', 15), ('property plant equipment', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment ', 33), (' plant and equipment ', 33), (' Property ', 26)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment ', 37), (' plant and equipment ', 37), (' Property ', 30), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 489302.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [489302.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [(' Construction in progress ', 62), (' Marine ', 60), (' Facilities ', 60), (' Asset Retirement Obligation ', 46), (' Capitalised pre stripping costs ', 46), (' Other assets ', 45), (' Stripping WIP ', 44), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' land and improvement ', 38), (' under construction ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), (' Subsea ', 33), (' Mine infrastructure ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Leasehold buildings', 31), ('depreciatio', 27), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings', 60), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Other assets ', 27), (' Development properties ', 25), (' Mining properties ', 23), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' Construction in progress ', 17), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings', 60), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Other assets ', 27), (' Development properties ', 25), (' Mining properties ', 23), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' Construction in progress ', 17), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('depreciatio', 36), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings', 60), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Other assets ', 27), (' Development properties ', 25), (' Mining properties ', 23), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' Construction in progress ', 17), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [(' Other assets ', 55), (' Asset Retirement Obligation ', 46), (' Construction in progress ', 46), (' Assets under construction ', 46), (' Marine ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Mine infrastructure ', 38), (' Building & mine infrastructure ', 38), (' under construction ', 38), (' Development properties ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), ('accumulated depreciation ', 31), (' Freehold land and buildings ', 31), (' land and improvement ', 31), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 31), (' Leasehold buildings', 23), (' Facilities ', 20), ('depreciatio', 18)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings', 60), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Other assets ', 27), (' Development properties ', 25), (' Mining properties ', 23), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' Construction in progress ', 17), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [(' Construction in progress ', 42), (' Assets under construction ', 42), (' under construction ', 42), (' Marine ', 40), (' Other assets ', 36), (' Freehold land and buildings ', 33), (' Plant and equipment ', 33), (' Asset Retirement Obligation ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), ('depreciatio', 29), ('accumulated depreciation ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Development properties ', 25), (' Workshop tooling ', 25), (' Fishing vessels & equipment ', 25), (' Leasehold buildings', 25), (' Facilities ', 20), (' Mining properties ', 17), (' Pipeline Asset ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings', 60), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Other assets ', 27), (' Development properties ', 25), (' Mining properties ', 23), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' Construction in progress ', 17), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Construction in progress ', 54), (' Assets under construction ', 46), (' under construction ', 46), (' Other assets ', 45), (' Facilities ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Mine infrastructure ', 38), (' land and improvement ', 38), (' Building & mine infrastructure ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), ('accumulated depreciation ', 31), (' Plant and equipment ', 31), (' Workshop tooling ', 31), (' Development properties ', 23), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23), ('depreciatio', 18), (' Mining properties ', 15), (' Leasehold buildings', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings', 60), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Other assets ', 27), (' Development properties ', 25), (' Mining properties ', 23), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' Construction in progress ', 17), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Facilities ', 60), (' Plant and equipment ', 53), (' Pipeline Asset ', 46), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings', 60), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Other assets ', 27), (' Development properties ', 25), (' Mining properties ', 23), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' Construction in progress ', 17), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation ', 60), (' land and improvement ', 60), (' Marine ', 60), (' Other assets ', 55), (' Mining properties ', 54), (' Plant and equipment ', 53), (' Capitalised pre stripping costs ', 50), (' Development properties ', 44), (' Freehold land and buildings ', 43), (' Assets under construction ', 43), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Pipeline Asset ', 38), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings', 60), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Other assets ', 27), (' Development properties ', 25), (' Mining properties ', 23), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' Construction in progress ', 17), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), (' Capitalised pre stripping costs ', 46), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings', 60), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Other assets ', 27), (' Development properties ', 25), (' Mining properties ', 23), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' Construction in progress ', 17), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), (' Pipeline Asset ', 46), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Fishing vessels & equipment ', 29), (' Workshop tooling ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings', 60), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Other assets ', 27), (' Development properties ', 25), (' Mining properties ', 23), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' Construction in progress ', 17), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), ('accumulated depreciation ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Fishing vessels & equipment ', 29), (' Facilities ', 20), (' Workshop tooling ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings', 60), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Other assets ', 27), (' Development properties ', 25), (' Mining properties ', 23), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' Construction in progress ', 17), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), (' Pipeline Asset ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' Facilities ', 40), (' Assets under construction ', 39), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), (' Construction in progress ', 28)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings', 60), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Other assets ', 27), (' Development properties ', 25), (' Mining properties ', 23), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' Construction in progress ', 17), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Construction in progress ', 28), ('depreciatio', 27), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings', 60), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Other assets ', 27), (' Development properties ', 25), (' Mining properties ', 23), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' Construction in progress ', 17), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Construction in progress ', 28), ('depreciatio', 27), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings', 60), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Other assets ', 27), (' Development properties ', 25), (' Mining properties ', 23), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' Construction in progress ', 17), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [(' Construction in progress ', 62), (' Marine ', 60), (' Facilities ', 60), (' Asset Retirement Obligation ', 46), (' Capitalised pre stripping costs ', 46), (' Other assets ', 45), (' Stripping WIP ', 44), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' land and improvement ', 38), (' under construction ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), (' Subsea ', 33), (' Mine infrastructure ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Leasehold buildings', 31), ('depreciatio', 27), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Mining properties ', 48), (' Development properties ', 45), (' Freehold land and buildings ', 43), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' Plant and equipment ', 40), (' Marine ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Mining properties ', 48), (' Development properties ', 45), (' Freehold land and buildings ', 43), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' Plant and equipment ', 40), (' Marine ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('depreciatio', 36), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Mining properties ', 48), (' Development properties ', 45), (' Freehold land and buildings ', 43), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' Plant and equipment ', 40), (' Marine ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [(' Other assets ', 55), (' Asset Retirement Obligation ', 46), (' Construction in progress ', 46), (' Assets under construction ', 46), (' Marine ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Mine infrastructure ', 38), (' Building & mine infrastructure ', 38), (' under construction ', 38), (' Development properties ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), ('accumulated depreciation ', 31), (' Freehold land and buildings ', 31), (' land and improvement ', 31), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 31), (' Leasehold buildings', 23), (' Facilities ', 20), ('depreciatio', 18)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Mining properties ', 48), (' Development properties ', 45), (' Freehold land and buildings ', 43), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' Plant and equipment ', 40), (' Marine ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [(' Construction in progress ', 42), (' Assets under construction ', 42), (' under construction ', 42), (' Marine ', 40), (' Other assets ', 36), (' Freehold land and buildings ', 33), (' Plant and equipment ', 33), (' Asset Retirement Obligation ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), ('depreciatio', 29), ('accumulated depreciation ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Development properties ', 25), (' Workshop tooling ', 25), (' Fishing vessels & equipment ', 25), (' Leasehold buildings', 25), (' Facilities ', 20), (' Mining properties ', 17), (' Pipeline Asset ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Mining properties ', 48), (' Development properties ', 45), (' Freehold land and buildings ', 43), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' Plant and equipment ', 40), (' Marine ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Construction in progress ', 54), (' Assets under construction ', 46), (' under construction ', 46), (' Other assets ', 45), (' Facilities ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Mine infrastructure ', 38), (' land and improvement ', 38), (' Building & mine infrastructure ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), ('accumulated depreciation ', 31), (' Plant and equipment ', 31), (' Workshop tooling ', 31), (' Development properties ', 23), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23), ('depreciatio', 18), (' Mining properties ', 15), (' Leasehold buildings', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Mining properties ', 48), (' Development properties ', 45), (' Freehold land and buildings ', 43), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' Plant and equipment ', 40), (' Marine ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Facilities ', 60), (' Plant and equipment ', 53), (' Pipeline Asset ', 46), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Mining properties ', 48), (' Development properties ', 45), (' Freehold land and buildings ', 43), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' Plant and equipment ', 40), (' Marine ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation ', 60), (' land and improvement ', 60), (' Marine ', 60), (' Other assets ', 55), (' Mining properties ', 54), (' Plant and equipment ', 53), (' Capitalised pre stripping costs ', 50), (' Development properties ', 44), (' Freehold land and buildings ', 43), (' Assets under construction ', 43), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Pipeline Asset ', 38), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Mining properties ', 48), (' Development properties ', 45), (' Freehold land and buildings ', 43), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' Plant and equipment ', 40), (' Marine ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), (' Capitalised pre stripping costs ', 46), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Mining properties ', 48), (' Development properties ', 45), (' Freehold land and buildings ', 43), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' Plant and equipment ', 40), (' Marine ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), (' Pipeline Asset ', 46), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Fishing vessels & equipment ', 29), (' Workshop tooling ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Mining properties ', 48), (' Development properties ', 45), (' Freehold land and buildings ', 43), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' Plant and equipment ', 40), (' Marine ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), ('accumulated depreciation ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Fishing vessels & equipment ', 29), (' Facilities ', 20), (' Workshop tooling ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Mining properties ', 48), (' Development properties ', 45), (' Freehold land and buildings ', 43), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' Plant and equipment ', 40), (' Marine ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), (' Pipeline Asset ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' Facilities ', 40), (' Assets under construction ', 39), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), (' Construction in progress ', 28)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Mining properties ', 48), (' Development properties ', 45), (' Freehold land and buildings ', 43), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' Plant and equipment ', 40), (' Marine ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Construction in progress ', 28), ('depreciatio', 27), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Mining properties ', 48), (' Development properties ', 45), (' Freehold land and buildings ', 43), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' Plant and equipment ', 40), (' Marine ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Construction in progress ', 28), ('depreciatio', 27), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Mining properties ', 48), (' Development properties ', 45), (' Freehold land and buildings ', 43), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' Plant and equipment ', 40), (' Marine ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [(' Construction in progress ', 62), (' Marine ', 60), (' Facilities ', 60), (' Asset Retirement Obligation ', 46), (' Capitalised pre stripping costs ', 46), (' Other assets ', 45), (' Stripping WIP ', 44), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' land and improvement ', 38), (' under construction ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), (' Subsea ', 33), (' Mine infrastructure ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Leasehold buildings', 31), ('depreciatio', 27), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' Mining properties ', 46), (' Pipeline Asset ', 46), ('depreciatio', 45), (' Other assets ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' Mining properties ', 46), (' Pipeline Asset ', 46), ('depreciatio', 45), (' Other assets ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('depreciatio', 36), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' Mining properties ', 46), (' Pipeline Asset ', 46), ('depreciatio', 45), (' Other assets ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [(' Other assets ', 55), (' Asset Retirement Obligation ', 46), (' Construction in progress ', 46), (' Assets under construction ', 46), (' Marine ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Mine infrastructure ', 38), (' Building & mine infrastructure ', 38), (' under construction ', 38), (' Development properties ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), ('accumulated depreciation ', 31), (' Freehold land and buildings ', 31), (' land and improvement ', 31), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 31), (' Leasehold buildings', 23), (' Facilities ', 20), ('depreciatio', 18)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' Mining properties ', 46), (' Pipeline Asset ', 46), ('depreciatio', 45), (' Other assets ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [(' Construction in progress ', 42), (' Assets under construction ', 42), (' under construction ', 42), (' Marine ', 40), (' Other assets ', 36), (' Freehold land and buildings ', 33), (' Plant and equipment ', 33), (' Asset Retirement Obligation ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), ('depreciatio', 29), ('accumulated depreciation ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Development properties ', 25), (' Workshop tooling ', 25), (' Fishing vessels & equipment ', 25), (' Leasehold buildings', 25), (' Facilities ', 20), (' Mining properties ', 17), (' Pipeline Asset ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' Mining properties ', 46), (' Pipeline Asset ', 46), ('depreciatio', 45), (' Other assets ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Construction in progress ', 54), (' Assets under construction ', 46), (' under construction ', 46), (' Other assets ', 45), (' Facilities ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Mine infrastructure ', 38), (' land and improvement ', 38), (' Building & mine infrastructure ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), ('accumulated depreciation ', 31), (' Plant and equipment ', 31), (' Workshop tooling ', 31), (' Development properties ', 23), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23), ('depreciatio', 18), (' Mining properties ', 15), (' Leasehold buildings', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' Mining properties ', 46), (' Pipeline Asset ', 46), ('depreciatio', 45), (' Other assets ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Facilities ', 60), (' Plant and equipment ', 53), (' Pipeline Asset ', 46), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' Mining properties ', 46), (' Pipeline Asset ', 46), ('depreciatio', 45), (' Other assets ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation ', 60), (' land and improvement ', 60), (' Marine ', 60), (' Other assets ', 55), (' Mining properties ', 54), (' Plant and equipment ', 53), (' Capitalised pre stripping costs ', 50), (' Development properties ', 44), (' Freehold land and buildings ', 43), (' Assets under construction ', 43), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Pipeline Asset ', 38), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' Mining properties ', 46), (' Pipeline Asset ', 46), ('depreciatio', 45), (' Other assets ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), (' Capitalised pre stripping costs ', 46), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' Mining properties ', 46), (' Pipeline Asset ', 46), ('depreciatio', 45), (' Other assets ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), (' Pipeline Asset ', 46), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Fishing vessels & equipment ', 29), (' Workshop tooling ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' Mining properties ', 46), (' Pipeline Asset ', 46), ('depreciatio', 45), (' Other assets ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), ('accumulated depreciation ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Fishing vessels & equipment ', 29), (' Facilities ', 20), (' Workshop tooling ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' Mining properties ', 46), (' Pipeline Asset ', 46), ('depreciatio', 45), (' Other assets ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), (' Pipeline Asset ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' Facilities ', 40), (' Assets under construction ', 39), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), (' Construction in progress ', 28)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' Mining properties ', 46), (' Pipeline Asset ', 46), ('depreciatio', 45), (' Other assets ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Construction in progress ', 28), ('depreciatio', 27), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' Mining properties ', 46), (' Pipeline Asset ', 46), ('depreciatio', 45), (' Other assets ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Construction in progress ', 28), ('depreciatio', 27), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' Mining properties ', 46), (' Pipeline Asset ', 46), ('depreciatio', 45), (' Other assets ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [(' Construction in progress ', 62), (' Marine ', 60), (' Facilities ', 60), (' Asset Retirement Obligation ', 46), (' Capitalised pre stripping costs ', 46), (' Other assets ', 45), (' Stripping WIP ', 44), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' land and improvement ', 38), (' under construction ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), (' Subsea ', 33), (' Mine infrastructure ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Leasehold buildings', 31), ('depreciatio', 27), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' Construction in progress ', 61), (' Marine ', 60), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Assets under construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), ('accumulated depreciation ', 27), (' under construction ', 27), (' Leasehold buildings', 20), (' Freehold land and buildings ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' Construction in progress ', 61), (' Marine ', 60), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Assets under construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), ('accumulated depreciation ', 27), (' under construction ', 27), (' Leasehold buildings', 20), (' Freehold land and buildings ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('depreciatio', 36), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' Construction in progress ', 61), (' Marine ', 60), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Assets under construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), ('accumulated depreciation ', 27), (' under construction ', 27), (' Leasehold buildings', 20), (' Freehold land and buildings ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [(' Other assets ', 55), (' Asset Retirement Obligation ', 46), (' Construction in progress ', 46), (' Assets under construction ', 46), (' Marine ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Mine infrastructure ', 38), (' Building & mine infrastructure ', 38), (' under construction ', 38), (' Development properties ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), ('accumulated depreciation ', 31), (' Freehold land and buildings ', 31), (' land and improvement ', 31), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 31), (' Leasehold buildings', 23), (' Facilities ', 20), ('depreciatio', 18)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' Construction in progress ', 61), (' Marine ', 60), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Assets under construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), ('accumulated depreciation ', 27), (' under construction ', 27), (' Leasehold buildings', 20), (' Freehold land and buildings ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [(' Construction in progress ', 42), (' Assets under construction ', 42), (' under construction ', 42), (' Marine ', 40), (' Other assets ', 36), (' Freehold land and buildings ', 33), (' Plant and equipment ', 33), (' Asset Retirement Obligation ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), ('depreciatio', 29), ('accumulated depreciation ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Development properties ', 25), (' Workshop tooling ', 25), (' Fishing vessels & equipment ', 25), (' Leasehold buildings', 25), (' Facilities ', 20), (' Mining properties ', 17), (' Pipeline Asset ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' Construction in progress ', 61), (' Marine ', 60), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Assets under construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), ('accumulated depreciation ', 27), (' under construction ', 27), (' Leasehold buildings', 20), (' Freehold land and buildings ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Construction in progress ', 54), (' Assets under construction ', 46), (' under construction ', 46), (' Other assets ', 45), (' Facilities ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Mine infrastructure ', 38), (' land and improvement ', 38), (' Building & mine infrastructure ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), ('accumulated depreciation ', 31), (' Plant and equipment ', 31), (' Workshop tooling ', 31), (' Development properties ', 23), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23), ('depreciatio', 18), (' Mining properties ', 15), (' Leasehold buildings', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' Construction in progress ', 61), (' Marine ', 60), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Assets under construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), ('accumulated depreciation ', 27), (' under construction ', 27), (' Leasehold buildings', 20), (' Freehold land and buildings ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Facilities ', 60), (' Plant and equipment ', 53), (' Pipeline Asset ', 46), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' Construction in progress ', 61), (' Marine ', 60), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Assets under construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), ('accumulated depreciation ', 27), (' under construction ', 27), (' Leasehold buildings', 20), (' Freehold land and buildings ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation ', 60), (' land and improvement ', 60), (' Marine ', 60), (' Other assets ', 55), (' Mining properties ', 54), (' Plant and equipment ', 53), (' Capitalised pre stripping costs ', 50), (' Development properties ', 44), (' Freehold land and buildings ', 43), (' Assets under construction ', 43), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Pipeline Asset ', 38), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' Construction in progress ', 61), (' Marine ', 60), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Assets under construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), ('accumulated depreciation ', 27), (' under construction ', 27), (' Leasehold buildings', 20), (' Freehold land and buildings ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), (' Capitalised pre stripping costs ', 46), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' Construction in progress ', 61), (' Marine ', 60), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Assets under construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), ('accumulated depreciation ', 27), (' under construction ', 27), (' Leasehold buildings', 20), (' Freehold land and buildings ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), (' Pipeline Asset ', 46), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Fishing vessels & equipment ', 29), (' Workshop tooling ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' Construction in progress ', 61), (' Marine ', 60), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Assets under construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), ('accumulated depreciation ', 27), (' under construction ', 27), (' Leasehold buildings', 20), (' Freehold land and buildings ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), ('accumulated depreciation ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Fishing vessels & equipment ', 29), (' Facilities ', 20), (' Workshop tooling ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' Construction in progress ', 61), (' Marine ', 60), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Assets under construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), ('accumulated depreciation ', 27), (' under construction ', 27), (' Leasehold buildings', 20), (' Freehold land and buildings ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), (' Pipeline Asset ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' Facilities ', 40), (' Assets under construction ', 39), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), (' Construction in progress ', 28)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' Construction in progress ', 61), (' Marine ', 60), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Assets under construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), ('accumulated depreciation ', 27), (' under construction ', 27), (' Leasehold buildings', 20), (' Freehold land and buildings ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Construction in progress ', 28), ('depreciatio', 27), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' Construction in progress ', 61), (' Marine ', 60), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Assets under construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), ('accumulated depreciation ', 27), (' under construction ', 27), (' Leasehold buildings', 20), (' Freehold land and buildings ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Construction in progress ', 28), ('depreciatio', 27), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' Construction in progress ', 61), (' Marine ', 60), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Assets under construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), ('accumulated depreciation ', 27), (' under construction ', 27), (' Leasehold buildings', 20), (' Freehold land and buildings ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [(' Construction in progress ', 62), (' Marine ', 60), (' Facilities ', 60), (' Asset Retirement Obligation ', 46), (' Capitalised pre stripping costs ', 46), (' Other assets ', 45), (' Stripping WIP ', 44), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' land and improvement ', 38), (' under construction ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), (' Subsea ', 33), (' Mine infrastructure ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Leasehold buildings', 31), ('depreciatio', 27), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Leasehold buildings', 38), (' Fishing vessels & equipment ', 32), ('accumulated depreciation ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciatio', 27), (' Other assets ', 27), (' Construction in progress ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Leasehold buildings', 38), (' Fishing vessels & equipment ', 32), ('accumulated depreciation ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciatio', 27), (' Other assets ', 27), (' Construction in progress ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('depreciatio', 36), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Leasehold buildings', 38), (' Fishing vessels & equipment ', 32), ('accumulated depreciation ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciatio', 27), (' Other assets ', 27), (' Construction in progress ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [(' Other assets ', 55), (' Asset Retirement Obligation ', 46), (' Construction in progress ', 46), (' Assets under construction ', 46), (' Marine ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Mine infrastructure ', 38), (' Building & mine infrastructure ', 38), (' under construction ', 38), (' Development properties ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), ('accumulated depreciation ', 31), (' Freehold land and buildings ', 31), (' land and improvement ', 31), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 31), (' Leasehold buildings', 23), (' Facilities ', 20), ('depreciatio', 18)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Leasehold buildings', 38), (' Fishing vessels & equipment ', 32), ('accumulated depreciation ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciatio', 27), (' Other assets ', 27), (' Construction in progress ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [(' Construction in progress ', 42), (' Assets under construction ', 42), (' under construction ', 42), (' Marine ', 40), (' Other assets ', 36), (' Freehold land and buildings ', 33), (' Plant and equipment ', 33), (' Asset Retirement Obligation ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), ('depreciatio', 29), ('accumulated depreciation ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Development properties ', 25), (' Workshop tooling ', 25), (' Fishing vessels & equipment ', 25), (' Leasehold buildings', 25), (' Facilities ', 20), (' Mining properties ', 17), (' Pipeline Asset ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Leasehold buildings', 38), (' Fishing vessels & equipment ', 32), ('accumulated depreciation ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciatio', 27), (' Other assets ', 27), (' Construction in progress ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Construction in progress ', 54), (' Assets under construction ', 46), (' under construction ', 46), (' Other assets ', 45), (' Facilities ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Mine infrastructure ', 38), (' land and improvement ', 38), (' Building & mine infrastructure ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), ('accumulated depreciation ', 31), (' Plant and equipment ', 31), (' Workshop tooling ', 31), (' Development properties ', 23), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23), ('depreciatio', 18), (' Mining properties ', 15), (' Leasehold buildings', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Leasehold buildings', 38), (' Fishing vessels & equipment ', 32), ('accumulated depreciation ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciatio', 27), (' Other assets ', 27), (' Construction in progress ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Facilities ', 60), (' Plant and equipment ', 53), (' Pipeline Asset ', 46), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Leasehold buildings', 38), (' Fishing vessels & equipment ', 32), ('accumulated depreciation ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciatio', 27), (' Other assets ', 27), (' Construction in progress ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation ', 60), (' land and improvement ', 60), (' Marine ', 60), (' Other assets ', 55), (' Mining properties ', 54), (' Plant and equipment ', 53), (' Capitalised pre stripping costs ', 50), (' Development properties ', 44), (' Freehold land and buildings ', 43), (' Assets under construction ', 43), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Pipeline Asset ', 38), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Leasehold buildings', 38), (' Fishing vessels & equipment ', 32), ('accumulated depreciation ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciatio', 27), (' Other assets ', 27), (' Construction in progress ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), (' Capitalised pre stripping costs ', 46), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Leasehold buildings', 38), (' Fishing vessels & equipment ', 32), ('accumulated depreciation ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciatio', 27), (' Other assets ', 27), (' Construction in progress ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), (' Pipeline Asset ', 46), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Fishing vessels & equipment ', 29), (' Workshop tooling ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Leasehold buildings', 38), (' Fishing vessels & equipment ', 32), ('accumulated depreciation ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciatio', 27), (' Other assets ', 27), (' Construction in progress ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), ('accumulated depreciation ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Fishing vessels & equipment ', 29), (' Facilities ', 20), (' Workshop tooling ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Leasehold buildings', 38), (' Fishing vessels & equipment ', 32), ('accumulated depreciation ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciatio', 27), (' Other assets ', 27), (' Construction in progress ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), (' Pipeline Asset ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' Facilities ', 40), (' Assets under construction ', 39), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), (' Construction in progress ', 28)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Leasehold buildings', 38), (' Fishing vessels & equipment ', 32), ('accumulated depreciation ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciatio', 27), (' Other assets ', 27), (' Construction in progress ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Construction in progress ', 28), ('depreciatio', 27), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Leasehold buildings', 38), (' Fishing vessels & equipment ', 32), ('accumulated depreciation ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciatio', 27), (' Other assets ', 27), (' Construction in progress ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Construction in progress ', 28), ('depreciatio', 27), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Leasehold buildings', 38), (' Fishing vessels & equipment ', 32), ('accumulated depreciation ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciatio', 27), (' Other assets ', 27), (' Construction in progress ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [(' Construction in progress ', 62), (' Marine ', 60), (' Facilities ', 60), (' Asset Retirement Obligation ', 46), (' Capitalised pre stripping costs ', 46), (' Other assets ', 45), (' Stripping WIP ', 44), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' land and improvement ', 38), (' under construction ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), (' Subsea ', 33), (' Mine infrastructure ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Leasehold buildings', 31), ('depreciatio', 27), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('depreciatio', 36), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [(' Other assets ', 55), (' Asset Retirement Obligation ', 46), (' Construction in progress ', 46), (' Assets under construction ', 46), (' Marine ', 40), (' Plant and equipment ', 38), (' Capitalised pre stripping costs ', 38), (' Mine infrastructure ', 38), (' Building & mine infrastructure ', 38), (' under construction ', 38), (' Development properties ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), ('accumulated depreciation ', 31), (' Freehold land and buildings ', 31), (' land and improvement ', 31), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 31), (' Leasehold buildings', 23), (' Facilities ', 20), ('depreciatio', 18)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [(' Construction in progress ', 42), (' Assets under construction ', 42), (' under construction ', 42), (' Marine ', 40), (' Other assets ', 36), (' Freehold land and buildings ', 33), (' Plant and equipment ', 33), (' Asset Retirement Obligation ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), ('depreciatio', 29), ('accumulated depreciation ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Development properties ', 25), (' Workshop tooling ', 25), (' Fishing vessels & equipment ', 25), (' Leasehold buildings', 25), (' Facilities ', 20), (' Mining properties ', 17), (' Pipeline Asset ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Construction in progress ', 54), (' Assets under construction ', 46), (' under construction ', 46), (' Other assets ', 45), (' Facilities ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Mine infrastructure ', 38), (' land and improvement ', 38), (' Building & mine infrastructure ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), ('accumulated depreciation ', 31), (' Plant and equipment ', 31), (' Workshop tooling ', 31), (' Development properties ', 23), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23), ('depreciatio', 18), (' Mining properties ', 15), (' Leasehold buildings', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Facilities ', 60), (' Plant and equipment ', 53), (' Pipeline Asset ', 46), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 34), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation ', 60), (' land and improvement ', 60), (' Marine ', 60), (' Other assets ', 55), (' Mining properties ', 54), (' Plant and equipment ', 53), (' Capitalised pre stripping costs ', 50), (' Development properties ', 44), (' Freehold land and buildings ', 43), (' Assets under construction ', 43), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Pipeline Asset ', 38), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), (' Capitalised pre stripping costs ', 46), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), (' Pipeline Asset ', 46), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Fishing vessels & equipment ', 29), (' Workshop tooling ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), ('accumulated depreciation ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Fishing vessels & equipment ', 29), (' Facilities ', 20), (' Workshop tooling ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [('depreciatio', 73), (' land and improvement ', 60), (' Marine ', 60), (' Plant and equipment ', 53), (' Pipeline Asset ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' Facilities ', 40), (' Assets under construction ', 39), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), (' Construction in progress ', 28)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Construction in progress ', 28), ('depreciatio', 27), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Construction in progress ', 28), ('depreciatio', 27), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' Subsea ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [273216.0, 32769.0, -7998.0, 0.0, -879.0, 297108.0, 22269.0, 3602.0, -1573.0, 0.0, -166.0, 24132.0, 250947.0, 272976.0], 'label': ['Freehold land and buildings', 'Freehold land and buildings', 'Freehold land and buildings', 'Freehold land and buildings', 'Freehold land and buildings', 'Freehold land and buildings', 'Freehold land and buildings', 'Freehold land and buildings', 'Freehold land and buildings', 'Freehold land and buildings', 'Freehold land and buildings', 'Freehold land and buildings', 'Freehold land and buildings', 'Freehold land and buildings'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25), ('net book value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25), ('net book value', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25), ('net book value', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25), ('net book value', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25), ('net book value', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25), ('net book value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25), ('net book value', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25), ('net book value', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25), ('net book value', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25), ('net book value', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25), ('net book value', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25), ('net book value', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25), ('net book value', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25), ('net book value', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25), ('net book value', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25), ('net book value', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25), ('net book value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25), ('net book value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25), ('net book value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25), ('net book value', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('cost', 25), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 12, 13, 14, 15, 16, 17, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 40, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 49, 50, 51, 52, 53, 54, 54, 55, 55, 56, 57, 58, 59, 60, 61, 68, 69, 70, 71, 72, 73, 74, 75, 82, 83], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 80, 80, 80, 80, 80, 80, 100, 80, 100, 80, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [273216.0, 32769.0, -7998.0, 0.0, -879.0, 297108.0, 250947.0, 272976.0, 5917.0, 330.0, -2817.0, 0.0, -221.0, 3209.0, 1419.0, 1308.0, 105335.0, 10274.0, -12191.0, 0.0, -938.0, 102480.0, 32844.0, 33669.0, 8084.0, 8084.0, 3821.0, 3821.0, 0.0, 0.0, -13.0, -13.0, 177.0, 177.0, 12069.0, 12069.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8084.0, 8084.0, 12069.0, 12069.0, 255818.0, 71970.0, -86129.0, 0.0, -3271.0, 238388.0, 184125.0, 169280.0, 648370.0, 119164.0, -109135.0, -13.0, -5132.0, 653254.0, 477419.0, 489302.0], 'label': ['Cost or At1 April 2022', 'Cost or Additions', 'Cost or Disposals', 'Cost or Transfer', 'Cost or Exchange', 'Cost or At31 March 2023', 'Net book value At31 March 2022', 'Net book value At31 March 2023', 'Cost or At1 April 2022', 'Cost or Additions', 'Cost or Disposals', 'Cost or Transfer', 'Cost or Exchange', 'Cost or At31 March 2023', 'Net book value At31 March 2022', 'Net book value At31 March 2023', 'Cost or At1 April 2022', 'Cost or Additions', 'Cost or Disposals', 'Cost or Transfer', 'Cost or Exchange', 'Cost or At31 March 2023', 'Net book value At31 March 2022', 'Net book value At31 March 2023', 'Cost or At1 April 2022', 'Capital work-in- progress', 'Cost or Additions', 'Capital work-in- progress', 'Cost or Disposals', 'Capital work-in- progress', 'Cost or Transfer', 'Capital work-in- progress', 'Cost or Exchange', 'Capital work-in- progress', 'Cost or At31 March 2023', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Net book value At31 March 2022', 'Capital work-in- progress', 'Net book value At31 March 2023', 'Capital work-in- progress', 'Cost or At1 April 2022', 'Cost or Additions', 'Cost or Disposals', 'Cost or Transfer', 'Cost or Exchange', 'Cost or At31 March 2023', 'Net book value At31 March 2022', 'Net book value At31 March 2023', 'Cost or At1 April 2022', 'Cost or Additions', 'Cost or Disposals', 'Cost or Transfer', 'Cost or Exchange', 'Cost or At31 March 2023', 'Net book value At31 March 2022', 'Net book value At31 March 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [('plant property equipment', 32), ('property plant equipment', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('plant property equipment', 15), ('property plant equipment', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 477418.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [477418.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [('plant property equipment', 32), ('property plant equipment', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('plant property equipment', 15), ('property plant equipment', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 489302.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [489302.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['construction in progress ', ' work in progress ', ' capital works in progress ', ' WIP']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('Work in progress ', 38), (' property plant equipment ', 38), (' plant property equipment ', 31), (' plant and equipment ', 31), (' investment property', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), (' property plant equipment ', 80), (' plant property equipment ', 60), (' investment property', 47), ('Work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' investment property', 34), (' plant property equipment ', 33), (' property plant equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [(' investment property', 53), (' plant property equipment ', 35), (' property plant equipment ', 35), (' plant and equipment ', 33), ('Work in progress ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' plant property equipment ', 29), (' property plant equipment ', 29), (' plant and equipment ', 29), (' investment property', 29), ('Work in progress ', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' property plant equipment ', 40), (' investment property', 34), (' plant property equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' plant and equipment ', 50), (' plant property equipment ', 42), (' property plant equipment ', 42), (' investment property', 42), ('Work in progress ', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 477418.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [477418.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('Work in progress ', 38), (' property plant equipment ', 38), (' plant property equipment ', 31), (' plant and equipment ', 31), (' investment property', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), (' property plant equipment ', 80), (' plant property equipment ', 60), (' investment property', 47), ('Work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' investment property', 34), (' plant property equipment ', 33), (' property plant equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [(' investment property', 53), (' plant property equipment ', 35), (' property plant equipment ', 35), (' plant and equipment ', 33), ('Work in progress ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' plant property equipment ', 29), (' property plant equipment ', 29), (' plant and equipment ', 29), (' investment property', 29), ('Work in progress ', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' property plant equipment ', 40), (' investment property', 34), (' plant property equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' plant and equipment ', 50), (' plant property equipment ', 42), (' property plant equipment ', 42), (' investment property', 42), ('Work in progress ', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 489302.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [489302.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['construction in progress ', ' work in progress ', ' capital works in progress ', ' WIP'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('construction in progress ', 62), (' capital works in progress ', 46), (' WIP', 33), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 17), (' capital works in progress ', 16), (' work in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress ', 40), (' WIP', 33), (' work in progress ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 17), (' capital works in progress ', 16), (' work in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 17), (' capital works in progress ', 16), (' work in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('construction in progress ', 46), (' capital works in progress ', 38), (' work in progress ', 31), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 17), (' capital works in progress ', 16), (' work in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('construction in progress ', 42), (' work in progress ', 25), (' capital works in progress ', 25), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 17), (' capital works in progress ', 16), (' work in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('construction in progress ', 54), (' capital works in progress ', 38), (' work in progress ', 23), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 17), (' capital works in progress ', 16), (' work in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 17), (' capital works in progress ', 16), (' work in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 47), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 17), (' capital works in progress ', 16), (' work in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), (' work in progress ', 38), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 17), (' capital works in progress ', 16), (' work in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), (' work in progress ', 38), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 17), (' capital works in progress ', 16), (' work in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 17), (' capital works in progress ', 16), (' work in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 17), (' capital works in progress ', 16), (' work in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('construction in progress ', 28), (' capital works in progress ', 26), (' work in progress ', 23), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 17), (' capital works in progress ', 16), (' work in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [('construction in progress ', 28), (' capital works in progress ', 26), (' work in progress ', 23), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 17), (' capital works in progress ', 16), (' work in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('construction in progress ', 62), (' capital works in progress ', 46), (' WIP', 33), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress ', 40), (' WIP', 33), (' work in progress ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('construction in progress ', 46), (' capital works in progress ', 38), (' work in progress ', 31), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('construction in progress ', 42), (' work in progress ', 25), (' capital works in progress ', 25), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('construction in progress ', 54), (' capital works in progress ', 38), (' work in progress ', 23), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 47), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), (' work in progress ', 38), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), (' work in progress ', 38), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('construction in progress ', 28), (' capital works in progress ', 26), (' work in progress ', 23), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [('construction in progress ', 28), (' capital works in progress ', 26), (' work in progress ', 23), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('construction in progress ', 62), (' capital works in progress ', 46), (' WIP', 33), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress ', 40), (' WIP', 33), (' work in progress ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('construction in progress ', 46), (' capital works in progress ', 38), (' work in progress ', 31), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('construction in progress ', 42), (' work in progress ', 25), (' capital works in progress ', 25), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('construction in progress ', 54), (' capital works in progress ', 38), (' work in progress ', 23), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 47), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), (' work in progress ', 38), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), (' work in progress ', 38), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('construction in progress ', 28), (' capital works in progress ', 26), (' work in progress ', 23), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [('construction in progress ', 28), (' capital works in progress ', 26), (' work in progress ', 23), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('construction in progress ', 62), (' capital works in progress ', 46), (' WIP', 33), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' capital works in progress ', 89), (' work in progress ', 85), ('construction in progress ', 61), (' WIP', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress ', 40), (' WIP', 33), (' work in progress ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' capital works in progress ', 89), (' work in progress ', 85), ('construction in progress ', 61), (' WIP', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' capital works in progress ', 89), (' work in progress ', 85), ('construction in progress ', 61), (' WIP', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('construction in progress ', 46), (' capital works in progress ', 38), (' work in progress ', 31), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' capital works in progress ', 89), (' work in progress ', 85), ('construction in progress ', 61), (' WIP', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('construction in progress ', 42), (' work in progress ', 25), (' capital works in progress ', 25), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' capital works in progress ', 89), (' work in progress ', 85), ('construction in progress ', 61), (' WIP', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('construction in progress ', 54), (' capital works in progress ', 38), (' work in progress ', 23), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' capital works in progress ', 89), (' work in progress ', 85), ('construction in progress ', 61), (' WIP', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' capital works in progress ', 89), (' work in progress ', 85), ('construction in progress ', 61), (' WIP', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 47), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' capital works in progress ', 89), (' work in progress ', 85), ('construction in progress ', 61), (' WIP', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), (' work in progress ', 38), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' capital works in progress ', 89), (' work in progress ', 85), ('construction in progress ', 61), (' WIP', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), (' work in progress ', 38), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' capital works in progress ', 89), (' work in progress ', 85), ('construction in progress ', 61), (' WIP', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' capital works in progress ', 89), (' work in progress ', 85), ('construction in progress ', 61), (' WIP', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' capital works in progress ', 89), (' work in progress ', 85), ('construction in progress ', 61), (' WIP', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('construction in progress ', 28), (' capital works in progress ', 26), (' work in progress ', 23), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' capital works in progress ', 89), (' work in progress ', 85), ('construction in progress ', 61), (' WIP', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [('construction in progress ', 28), (' capital works in progress ', 26), (' work in progress ', 23), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' capital works in progress ', 89), (' work in progress ', 85), ('construction in progress ', 61), (' WIP', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('construction in progress ', 62), (' capital works in progress ', 46), (' WIP', 33), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 23), (' work in progress ', 15), (' capital works in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress ', 40), (' WIP', 33), (' work in progress ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 23), (' work in progress ', 15), (' capital works in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 23), (' work in progress ', 15), (' capital works in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('construction in progress ', 46), (' capital works in progress ', 38), (' work in progress ', 31), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 23), (' work in progress ', 15), (' capital works in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('construction in progress ', 42), (' work in progress ', 25), (' capital works in progress ', 25), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 23), (' work in progress ', 15), (' capital works in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('construction in progress ', 54), (' capital works in progress ', 38), (' work in progress ', 23), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 23), (' work in progress ', 15), (' capital works in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 23), (' work in progress ', 15), (' capital works in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 47), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 23), (' work in progress ', 15), (' capital works in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), (' work in progress ', 38), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 23), (' work in progress ', 15), (' capital works in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), (' work in progress ', 38), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 23), (' work in progress ', 15), (' capital works in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 23), (' work in progress ', 15), (' capital works in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 23), (' work in progress ', 15), (' capital works in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('construction in progress ', 28), (' capital works in progress ', 26), (' work in progress ', 23), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 23), (' work in progress ', 15), (' capital works in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [('construction in progress ', 28), (' capital works in progress ', 26), (' work in progress ', 23), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 23), (' work in progress ', 15), (' capital works in progress ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('construction in progress ', 62), (' capital works in progress ', 46), (' WIP', 33), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress ', 40), (' WIP', 33), (' work in progress ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('construction in progress ', 46), (' capital works in progress ', 38), (' work in progress ', 31), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('construction in progress ', 42), (' work in progress ', 25), (' capital works in progress ', 25), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('construction in progress ', 54), (' capital works in progress ', 38), (' work in progress ', 23), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 47), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), (' work in progress ', 38), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), (' work in progress ', 38), ('construction in progress ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('construction in progress ', 28), (' capital works in progress ', 26), (' work in progress ', 23), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [('construction in progress ', 28), (' capital works in progress ', 26), (' work in progress ', 23), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], 'score': [89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89], 'value': [8084.0, 3821.0, 0.0, -13.0, 177.0, 12069.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8084.0, 12069.0], 'label': ['Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [('tangible assets', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('tangible assets', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 80, 'value': 834.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['11'], 'line_item_value': [834.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [('tangible assets', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('tangible assets', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 80, 'value': 926.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['11'], 'line_item_value': [926.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 23), ('goodwill ', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 38), ('goodwill ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 20), ('goodwill ', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 31), ('goodwill ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('goodwill ', 100), (' goodwill on consolidation ', 100), (' intangible asset', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' intangible asset', 70), (' goodwill on consolidation ', 20), ('goodwill ', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' intangible asset', 100), (' goodwill on consolidation ', 25), ('goodwill ', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 6], 'score': 100, 'value': 3288.0, 'line_item_label': ['Goodwill', 'Intangible assets'], 'note_numbers': [nan, '11'], 'line_item_value': [2454.0, 834.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 23), ('goodwill ', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 38), ('goodwill ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 20), ('goodwill ', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 31), ('goodwill ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('goodwill ', 100), (' goodwill on consolidation ', 100), (' intangible asset', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' intangible asset', 70), (' goodwill on consolidation ', 20), ('goodwill ', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' intangible asset', 100), (' goodwill on consolidation ', 25), ('goodwill ', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 6], 'score': 100, 'value': 3285.0, 'line_item_label': ['Goodwill', 'Intangible assets'], 'note_numbers': [nan, '11'], 'line_item_value': [2359.0, 926.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' goodwill on consolidation', 23), ('goodwill ', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' goodwill on consolidation', 30), ('goodwill ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none disposal , res_fuzz_match = [('goodwill ', 43), (' goodwill on consolidation', 36)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none exchange differences , res_fuzz_match = [('goodwill ', 43), (' goodwill on consolidation', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' goodwill on consolidation', 23), ('goodwill ', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = amortisation and impairment at31 march 2022 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = amortisation and impairment amortisation , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = amortisation and impairment disposal , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = amortisation and impairment transfer , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = amortisation and impairment exchange differences , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = amortisation and impairment at31 march 2023 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2022 , res_fuzz_match = [('goodwill ', 43), (' goodwill on consolidation', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [('goodwill ', 43), (' goodwill on consolidation', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['Other intangibles ', ' development and software ', ' software ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible assets under development ', 62), ('intangible assets ', 58), (' intangible under development ', 38), ('property plant equipment', 38), (' plant property equipment', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('property plant equipment', 80), (' plant property equipment', 60), ('intangible assets ', 50), (' intangible under development ', 49), (' intangible assets under development ', 42)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 47), (' intangible under development ', 40), (' plant property equipment', 33), ('property plant equipment', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [('intangible assets ', 50), (' intangible under development ', 41), (' intangible assets under development ', 41), (' plant property equipment', 35), ('property plant equipment', 35)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' intangible under development ', 29), (' intangible assets under development ', 29), (' plant property equipment', 29), ('property plant equipment', 29), ('intangible assets ', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets ', 70), ('property plant equipment', 40), (' intangible under development ', 33), (' intangible assets under development ', 33), (' plant property equipment', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible assets ', 100), (' intangible assets under development ', 100), (' intangible under development ', 67), (' plant property equipment', 42), ('property plant equipment', 42)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 6], 'score': 100, 'value': 478252.0, 'line_item_label': ['Property, plant and equipment', 'Intangible assets'], 'note_numbers': ['10', '11'], 'line_item_value': [477418.0, 834.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible assets under development ', 62), ('intangible assets ', 58), (' intangible under development ', 38), ('property plant equipment', 38), (' plant property equipment', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('property plant equipment', 80), (' plant property equipment', 60), ('intangible assets ', 50), (' intangible under development ', 49), (' intangible assets under development ', 42)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 47), (' intangible under development ', 40), (' plant property equipment', 33), ('property plant equipment', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [('intangible assets ', 50), (' intangible under development ', 41), (' intangible assets under development ', 41), (' plant property equipment', 35), ('property plant equipment', 35)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' intangible under development ', 29), (' intangible assets under development ', 29), (' plant property equipment', 29), ('property plant equipment', 29), ('intangible assets ', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets ', 70), ('property plant equipment', 40), (' intangible under development ', 33), (' intangible assets under development ', 33), (' plant property equipment', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible assets ', 100), (' intangible assets under development ', 100), (' intangible under development ', 67), (' plant property equipment', 42), ('property plant equipment', 42)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 6], 'score': 100, 'value': 490228.0, 'line_item_label': ['Property, plant and equipment', 'Intangible assets'], 'note_numbers': ['10', '11'], 'line_item_value': [489302.0, 926.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['Other intangibles ', ' development and software ', ' software ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [(' computer software ', 46), (' consumer contracts ', 46), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' consumer contracts ', 27), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' consumer contracts ', 27), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' consumer contracts ', 27), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [(' consumer contracts ', 54), ('Other intangibles ', 50), (' development and software ', 46), (' computer software ', 46), (' software ', 43), (' water licenses', 35), (' mining rights ', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' consumer contracts ', 27), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('Other intangibles ', 52), (' consumer contracts ', 50), (' development and software ', 33), (' computer software ', 33), (' water licenses', 33), (' software ', 29), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' consumer contracts ', 27), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [(' computer software ', 46), (' consumer contracts ', 46), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' consumer contracts ', 27), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [(' development and software ', 53), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' consumer contracts ', 27), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [(' development and software ', 53), ('Other intangibles ', 50), (' mining rights ', 40), (' computer software ', 36), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' consumer contracts ', 27), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [(' development and software ', 53), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' computer software ', 36), (' software ', 29), (' consumer contracts ', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' consumer contracts ', 27), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [(' development and software ', 53), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' consumer contracts ', 27), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [(' development and software ', 53), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' computer software ', 36), (' software ', 29), (' consumer contracts ', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' consumer contracts ', 27), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [(' development and software ', 53), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' consumer contracts ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' consumer contracts ', 27), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), (' water licenses', 33), (' mining rights ', 30), ('Other intangibles ', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' consumer contracts ', 27), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), (' water licenses', 33), (' mining rights ', 30), ('Other intangibles ', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' consumer contracts ', 27), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [(' computer software ', 46), (' consumer contracts ', 46), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' development and software ', 32), (' mining rights ', 30), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' development and software ', 32), (' mining rights ', 30), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' development and software ', 32), (' mining rights ', 30), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [(' consumer contracts ', 54), ('Other intangibles ', 50), (' development and software ', 46), (' computer software ', 46), (' software ', 43), (' water licenses', 35), (' mining rights ', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' development and software ', 32), (' mining rights ', 30), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('Other intangibles ', 52), (' consumer contracts ', 50), (' development and software ', 33), (' computer software ', 33), (' water licenses', 33), (' software ', 29), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' development and software ', 32), (' mining rights ', 30), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [(' computer software ', 46), (' consumer contracts ', 46), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' development and software ', 32), (' mining rights ', 30), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [(' development and software ', 53), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' development and software ', 32), (' mining rights ', 30), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [(' development and software ', 53), ('Other intangibles ', 50), (' mining rights ', 40), (' computer software ', 36), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' development and software ', 32), (' mining rights ', 30), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [(' development and software ', 53), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' computer software ', 36), (' software ', 29), (' consumer contracts ', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' development and software ', 32), (' mining rights ', 30), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [(' development and software ', 53), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' development and software ', 32), (' mining rights ', 30), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [(' development and software ', 53), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' computer software ', 36), (' software ', 29), (' consumer contracts ', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' development and software ', 32), (' mining rights ', 30), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [(' development and software ', 53), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' consumer contracts ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' development and software ', 32), (' mining rights ', 30), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), (' water licenses', 33), (' mining rights ', 30), ('Other intangibles ', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' development and software ', 32), (' mining rights ', 30), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), (' water licenses', 33), (' mining rights ', 30), ('Other intangibles ', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' development and software ', 32), (' mining rights ', 30), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [(' computer software ', 46), (' consumer contracts ', 46), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' water licenses', 42), (' development and software ', 40), (' consumer contracts ', 40), (' software ', 29), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' water licenses', 42), (' development and software ', 40), (' consumer contracts ', 40), (' software ', 29), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' water licenses', 42), (' development and software ', 40), (' consumer contracts ', 40), (' software ', 29), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [(' consumer contracts ', 54), ('Other intangibles ', 50), (' development and software ', 46), (' computer software ', 46), (' software ', 43), (' water licenses', 35), (' mining rights ', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' water licenses', 42), (' development and software ', 40), (' consumer contracts ', 40), (' software ', 29), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('Other intangibles ', 52), (' consumer contracts ', 50), (' development and software ', 33), (' computer software ', 33), (' water licenses', 33), (' software ', 29), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' water licenses', 42), (' development and software ', 40), (' consumer contracts ', 40), (' software ', 29), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [(' computer software ', 46), (' consumer contracts ', 46), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' water licenses', 42), (' development and software ', 40), (' consumer contracts ', 40), (' software ', 29), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [(' development and software ', 53), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' water licenses', 42), (' development and software ', 40), (' consumer contracts ', 40), (' software ', 29), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [(' development and software ', 53), ('Other intangibles ', 50), (' mining rights ', 40), (' computer software ', 36), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' water licenses', 42), (' development and software ', 40), (' consumer contracts ', 40), (' software ', 29), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [(' development and software ', 53), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' computer software ', 36), (' software ', 29), (' consumer contracts ', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' water licenses', 42), (' development and software ', 40), (' consumer contracts ', 40), (' software ', 29), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [(' development and software ', 53), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' water licenses', 42), (' development and software ', 40), (' consumer contracts ', 40), (' software ', 29), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [(' development and software ', 53), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' computer software ', 36), (' software ', 29), (' consumer contracts ', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' water licenses', 42), (' development and software ', 40), (' consumer contracts ', 40), (' software ', 29), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [(' development and software ', 53), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' consumer contracts ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' water licenses', 42), (' development and software ', 40), (' consumer contracts ', 40), (' software ', 29), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), (' water licenses', 33), (' mining rights ', 30), ('Other intangibles ', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' water licenses', 42), (' development and software ', 40), (' consumer contracts ', 40), (' software ', 29), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), (' water licenses', 33), (' mining rights ', 30), ('Other intangibles ', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' water licenses', 42), (' development and software ', 40), (' consumer contracts ', 40), (' software ', 29), (' computer software ', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [(' computer software ', 46), (' consumer contracts ', 46), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 33), (' development and software ', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 33), (' development and software ', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 33), (' development and software ', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [(' consumer contracts ', 54), ('Other intangibles ', 50), (' development and software ', 46), (' computer software ', 46), (' software ', 43), (' water licenses', 35), (' mining rights ', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 33), (' development and software ', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('Other intangibles ', 52), (' consumer contracts ', 50), (' development and software ', 33), (' computer software ', 33), (' water licenses', 33), (' software ', 29), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 33), (' development and software ', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [(' computer software ', 46), (' consumer contracts ', 46), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 33), (' development and software ', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [(' development and software ', 53), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 33), (' development and software ', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [(' development and software ', 53), ('Other intangibles ', 50), (' mining rights ', 40), (' computer software ', 36), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 33), (' development and software ', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [(' development and software ', 53), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' computer software ', 36), (' software ', 29), (' consumer contracts ', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 33), (' development and software ', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [(' development and software ', 53), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 33), (' development and software ', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [(' development and software ', 53), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' computer software ', 36), (' software ', 29), (' consumer contracts ', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 33), (' development and software ', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [(' development and software ', 53), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' consumer contracts ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 33), (' development and software ', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), (' water licenses', 33), (' mining rights ', 30), ('Other intangibles ', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 33), (' development and software ', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), (' water licenses', 33), (' mining rights ', 30), ('Other intangibles ', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 33), (' development and software ', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [(' computer software ', 46), (' consumer contracts ', 46), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' consumer contracts ', 31), (' mining rights ', 30), (' software ', 29), (' computer software ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' consumer contracts ', 31), (' mining rights ', 30), (' software ', 29), (' computer software ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' consumer contracts ', 31), (' mining rights ', 30), (' software ', 29), (' computer software ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [(' consumer contracts ', 54), ('Other intangibles ', 50), (' development and software ', 46), (' computer software ', 46), (' software ', 43), (' water licenses', 35), (' mining rights ', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' consumer contracts ', 31), (' mining rights ', 30), (' software ', 29), (' computer software ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('Other intangibles ', 52), (' consumer contracts ', 50), (' development and software ', 33), (' computer software ', 33), (' water licenses', 33), (' software ', 29), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' consumer contracts ', 31), (' mining rights ', 30), (' software ', 29), (' computer software ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [(' computer software ', 46), (' consumer contracts ', 46), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' consumer contracts ', 31), (' mining rights ', 30), (' software ', 29), (' computer software ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [(' development and software ', 53), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' consumer contracts ', 31), (' mining rights ', 30), (' software ', 29), (' computer software ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [(' development and software ', 53), ('Other intangibles ', 50), (' mining rights ', 40), (' computer software ', 36), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' consumer contracts ', 31), (' mining rights ', 30), (' software ', 29), (' computer software ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [(' development and software ', 53), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' computer software ', 36), (' software ', 29), (' consumer contracts ', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' consumer contracts ', 31), (' mining rights ', 30), (' software ', 29), (' computer software ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [(' development and software ', 53), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' consumer contracts ', 31), (' mining rights ', 30), (' software ', 29), (' computer software ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [(' development and software ', 53), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' computer software ', 36), (' software ', 29), (' consumer contracts ', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' consumer contracts ', 31), (' mining rights ', 30), (' software ', 29), (' computer software ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [(' development and software ', 53), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' consumer contracts ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' consumer contracts ', 31), (' mining rights ', 30), (' software ', 29), (' computer software ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), (' water licenses', 33), (' mining rights ', 30), ('Other intangibles ', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' consumer contracts ', 31), (' mining rights ', 30), (' software ', 29), (' computer software ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), (' water licenses', 33), (' mining rights ', 30), ('Other intangibles ', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' consumer contracts ', 31), (' mining rights ', 30), (' software ', 29), (' computer software ', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [(' computer software ', 46), (' consumer contracts ', 46), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [(' consumer contracts ', 54), ('Other intangibles ', 50), (' development and software ', 46), (' computer software ', 46), (' software ', 43), (' water licenses', 35), (' mining rights ', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('Other intangibles ', 52), (' consumer contracts ', 50), (' development and software ', 33), (' computer software ', 33), (' water licenses', 33), (' software ', 29), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [(' computer software ', 46), (' consumer contracts ', 46), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [(' development and software ', 53), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [(' development and software ', 53), ('Other intangibles ', 50), (' mining rights ', 40), (' computer software ', 36), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [(' development and software ', 53), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' computer software ', 36), (' software ', 29), (' consumer contracts ', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [(' development and software ', 53), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [(' development and software ', 53), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' computer software ', 36), (' software ', 29), (' consumer contracts ', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [(' development and software ', 53), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' consumer contracts ', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), (' water licenses', 33), (' mining rights ', 30), ('Other intangibles ', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), (' water licenses', 33), (' mining rights ', 30), ('Other intangibles ', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['Other intangibles ', ' development and software ', ' software ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' consumer contracts ', 46), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 38), (' computer software ', 38), (' water licenses', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('Other intangibles ', 50), (' mining rights ', 50), (' development and software ', 40), (' consumer contracts ', 40), (' water licenses', 30), (' software ', 29), (' computer software ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none disposal , res_fuzz_match = [(' development and software ', 45), (' mining rights ', 40), ('Other intangibles ', 36), (' computer software ', 36), (' consumer contracts ', 36), (' water licenses', 36), (' software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none exchange differences , res_fuzz_match = [('Other intangibles ', 50), (' mining rights ', 40), (' development and software ', 38), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 30), (' software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' consumer contracts ', 46), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 38), (' computer software ', 38), (' water licenses', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = amortisation and impairment at31 march 2022 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = amortisation and impairment amortisation , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 37), (' software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = amortisation and impairment disposal , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 42), (' water licenses', 42), (' mining rights ', 40), (' computer software ', 36), (' consumer contracts ', 33), (' software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = amortisation and impairment transfer , res_fuzz_match = [(' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = amortisation and impairment exchange differences , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 42), (' water licenses', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = amortisation and impairment at31 march 2023 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2022 , res_fuzz_match = [(' development and software ', 38), (' computer software ', 36), (' consumer contracts ', 33), (' mining rights ', 30), (' software ', 29), ('Other intangibles ', 25), (' water licenses', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), (' water licenses', 33), (' mining rights ', 30), ('Other intangibles ', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [10877.0, 541.0, -389.0, -44.0, 10985.0, -10043.0, -412.0, 362.0, -7.0, 41.0, -10059.0, 834.0, 926.0], 'label': ['Software $000', 'Software $000', 'Software $000', 'Software $000', 'Software $000', 'Software $000', 'Software $000', 'Software $000', 'Software $000', 'Software $000', 'Software $000', 'Software $000', 'Software $000'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['Other intangibles ', ' development and software ', ' software ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('donations', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [('donations', 18)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('donations', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('donations', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [('donations', 18)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('donations', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' investments accounted for using the equity method', 53), (' investment in associate', 46), ('joint ventures and associates', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [('investment', 100), (' investment in associate', 77), ('joint ventures and associates', 47), (' investment in joint venture', 47), (' investments accounted for using the equity method', 47), ('derivative financial instruments', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('joint ventures and associates', 29), (' investment in joint venture', 29), (' investment in associate', 29), (' investments accounted for using the equity method', 29), ('investment', 17), ('derivative financial instruments', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 0.0, 'line_item_label': ['Investment in subsidiaries'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' investments accounted for using the equity method', 53), (' investment in associate', 46), ('joint ventures and associates', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [('investment', 100), (' investment in associate', 77), ('joint ventures and associates', 47), (' investment in joint venture', 47), (' investments accounted for using the equity method', 47), ('derivative financial instruments', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('joint ventures and associates', 29), (' investment in joint venture', 29), (' investment in associate', 29), (' investments accounted for using the equity method', 29), ('investment', 17), ('derivative financial instruments', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 0.0, 'line_item_label': ['Investment in subsidiaries'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 38), ('deferred tax', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [('deferred tax assets', 31), ('deferred tax', 23), ('deferred charges', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('deferred charges', 22), ('deferred tax', 12), ('deferred tax assets', 9)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 28748.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['4'], 'line_item_value': [28748.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 38), ('deferred tax', 25)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [('deferred tax assets', 31), ('deferred tax', 23), ('deferred charges', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('deferred charges', 22), ('deferred tax', 12), ('deferred tax assets', 9)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 39659.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['4'], 'line_item_value': [39659.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none deferred tax assets nan nan , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = in the consolidated statement of financial position as , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none deferred tax liabilities nan nan , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = in the consolidated statement of financial position as , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none deferred tax assets, net nan nan , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = in the consolidated statement of financial position as , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none deferred tax assets nan nan , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = in the consolidated statement of financial position as , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none deferred tax liabilities nan nan , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = in the consolidated statement of financial position as , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none deferred tax assets, net nan nan , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = in the consolidated statement of financial position as , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none deferred tax assets nan nan , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = in the consolidated statement of financial position as , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none deferred tax liabilities nan nan , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = in the consolidated statement of financial position as , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none deferred tax assets, net nan nan , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = in the consolidated statement of financial position as , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 3, 5, 6, 8], 'score': [100, 100, 100, 100, 100, 100], 'value': [42234.0, 39659.0, 42234.0, 39659.0, 33553.0, 28748.0], 'label': ['None Deferred tax assets nan nan', 'None Deferred tax assets, net nan nan', 'None Deferred tax assets nan nan', 'None Deferred tax assets, net nan nan', 'None Deferred tax assets nan nan', 'None Deferred tax assets, net nan nan'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: guaranteed maintenance , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: long service leave , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: deferred revenue , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: fixed asset , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: provision annual leave , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: warranty , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: deferred gain , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: others , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: remanufacturing provision , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: bonus provision , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: deemed sale of rental equipment , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: acquired in business combinations , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: tax losses carried forward , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: distribution centres' costs , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: unrealised gain / (loss) , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: prepaid expenses , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: net de ferred tax assets , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: guaranteed maintenance , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: long service leave , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: deferred revenue , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: fixed asset , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: provision annual leave , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: warranty , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: deferred gain , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: others , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: remanufacturing provision , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: bonus provision , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: deemed sale of rental equipment , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: acquired in business combinations , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: tax losses carried forward , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: distribution centres' costs , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: unrealised gain / (loss) , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: prepaid expenses , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: net de ferred tax assets , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 75)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], 'score': [80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 87, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 87], 'value': [5781.0, 5963.0, 4498.0, 4229.0, 3347.0, 2383.0, 38.0, 7024.0, 2296.0, 1724.0, 937.0, -568.0, 2094.0, -565.0, 1920.0, -1442.0, 39659.0, 3774.0, 4784.0, 3337.0, 2865.0, 2975.0, 1921.0, -108.0, 5203.0, 2656.0, 1438.0, 0.0, -2454.0, 4071.0, -1206.0, 529.0, -1037.0, 28748.0], 'label': ['Deferred tax relates to the following: Guaranteed Maintenance', 'Deferred tax relates to the following: Long Service Leave', 'Deferred tax relates to the following: Deferred Revenue', 'Deferred tax relates to the following: Fixed Asset', 'Deferred tax relates to the following: Provision Annual Leave', 'Deferred tax relates to the following: Warranty', 'Deferred tax relates to the following: Deferred Gain', 'Deferred tax relates to the following: Others', 'Deferred tax relates to the following: Remanufacturing Provision', 'Deferred tax relates to the following: Bonus Provision', 'Deferred tax relates to the following: Deemed Sale of Rental Equipment', 'Deferred tax relates to the following: Acquired in Business Combinations', 'Deferred tax relates to the following: Tax losses carried forward', "Deferred tax relates to the following: Distribution Centres' Costs", 'Deferred tax relates to the following: Unrealised Gain / (Loss)', 'Deferred tax relates to the following: Prepaid expenses', 'Deferred tax relates to the following: Net de ferred tax assets', 'Deferred tax relates to the following: Guaranteed Maintenance', 'Deferred tax relates to the following: Long Service Leave', 'Deferred tax relates to the following: Deferred Revenue', 'Deferred tax relates to the following: Fixed Asset', 'Deferred tax relates to the following: Provision Annual Leave', 'Deferred tax relates to the following: Warranty', 'Deferred tax relates to the following: Deferred Gain', 'Deferred tax relates to the following: Others', 'Deferred tax relates to the following: Remanufacturing Provision', 'Deferred tax relates to the following: Bonus Provision', 'Deferred tax relates to the following: Deemed Sale of Rental Equipment', 'Deferred tax relates to the following: Acquired in Business Combinations', 'Deferred tax relates to the following: Tax losses carried forward', "Deferred tax relates to the following: Distribution Centres' Costs", 'Deferred tax relates to the following: Unrealised Gain / (Loss)', 'Deferred tax relates to the following: Prepaid expenses', 'Deferred tax relates to the following: Net de ferred tax assets'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' other assets', 62), (' leased assets', 56), (' other non-current assets', 53), (' other non-current assets', 53), (' financial assets', 50), (' exploration and evaluation expenditure', 33), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [(' financial assets', 40), (' leased assets', 30), (' other assets', 29), (' loan receivables', 29), (' other non-current assets', 28), (' other non-current assets', 28), (' exploration and evaluation expenditure', 27), ('non-current', 25), (' leases', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' loan receivables', 22), (' exploration and evaluation expenditure', 18), (' leases', 18), (' other non-current assets', 15), (' other non-current assets', 15), ('non-current', 14), (' leased assets', 12), (' other assets', 11), (' financial assets', 10)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 6], 'score': 80, 'value': 834.0, 'line_item_label': ['Non-current assets', 'Intangible assets'], 'note_numbers': [nan, '11'], 'line_item_value': [0.0, 834.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' other assets', 62), (' leased assets', 56), (' other non-current assets', 53), (' other non-current assets', 53), (' financial assets', 50), (' exploration and evaluation expenditure', 33), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [(' financial assets', 40), (' leased assets', 30), (' other assets', 29), (' loan receivables', 29), (' other non-current assets', 28), (' other non-current assets', 28), (' exploration and evaluation expenditure', 27), ('non-current', 25), (' leases', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' loan receivables', 22), (' exploration and evaluation expenditure', 18), (' leases', 18), (' other non-current assets', 15), (' other non-current assets', 15), ('non-current', 14), (' leased assets', 12), (' other assets', 11), (' financial assets', 10)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 6], 'score': 80, 'value': 926.0, 'line_item_label': ['Non-current assets', 'Intangible assets'], 'note_numbers': [nan, '11'], 'line_item_value': [0.0, 926.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' defined benefit plans', 46), ('finance receivables', 38), (' allowance for expected credit losses', 38), (' exploration and evaluation expenditure', 38), (' warehouse and office equipment', 38), (' motor vehicles', 33), (' electricity derivatives at fair value', 31), (' right-of-use-assets', 31), (' total properties', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' allowance for expected credit losses', 50), (' defined benefit plans', 50), ('finance receivables', 40), (' electricity derivatives at fair value', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' warehouse and office equipment', 40), (' total properties', 30), (' motor vehicles', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none disposal , res_fuzz_match = [(' allowance for expected credit losses', 45), (' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 36), (' total properties', 36), (' warehouse and office equipment', 36), (' exploration and evaluation expenditure', 29), (' motor vehicles', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none exchange differences , res_fuzz_match = [(' exploration and evaluation expenditure', 47), (' allowance for expected credit losses', 42), (' warehouse and office equipment', 42), ('finance receivables', 38), (' electricity derivatives at fair value', 37), (' motor vehicles', 33), (' total properties', 31), (' defined benefit plans', 29), (' right-of-use-assets', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' defined benefit plans', 46), ('finance receivables', 38), (' allowance for expected credit losses', 38), (' exploration and evaluation expenditure', 38), (' warehouse and office equipment', 38), (' motor vehicles', 33), (' electricity derivatives at fair value', 31), (' right-of-use-assets', 31), (' total properties', 31)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = amortisation and impairment at31 march 2022 , res_fuzz_match = [(' exploration and evaluation expenditure', 42), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), ('finance receivables', 38), (' total properties', 36), (' allowance for expected credit losses', 33), (' defined benefit plans', 33), (' right-of-use-assets', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = amortisation and impairment amortisation , res_fuzz_match = [(' total properties', 50), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' allowance for expected credit losses', 35), (' defined benefit plans', 33), (' right-of-use-assets', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = amortisation and impairment disposal , res_fuzz_match = [(' warehouse and office equipment', 50), (' exploration and evaluation expenditure', 45), (' motor vehicles', 42), ('finance receivables', 38), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = amortisation and impairment transfer , res_fuzz_match = [(' exploration and evaluation expenditure', 42), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' total properties', 36), (' allowance for expected credit losses', 33), (' right-of-use-assets', 33)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = amortisation and impairment exchange differences , res_fuzz_match = [(' exploration and evaluation expenditure', 52), (' warehouse and office equipment', 46), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), ('finance receivables', 38), (' allowance for expected credit losses', 36), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = amortisation and impairment at31 march 2023 , res_fuzz_match = [(' exploration and evaluation expenditure', 42), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), ('finance receivables', 38), (' total properties', 36), (' allowance for expected credit losses', 33), (' defined benefit plans', 33), (' right-of-use-assets', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2022 , res_fuzz_match = [(' exploration and evaluation expenditure', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 38), (' total properties', 36), (' defined benefit plans', 33), (' warehouse and office equipment', 32), ('finance receivables', 31), (' allowance for expected credit losses', 26), (' right-of-use-assets', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' electricity derivatives at fair value', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' warehouse and office equipment', 32), ('finance receivables', 31), (' allowance for expected credit losses', 27)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = software $000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft ']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft '] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' interest bearing liabilites ', 61), (' loans and borrowings ', 34), (' cash and cash equivalents ', 29), (' cash overdraft ', 29), ('  leases ', 22), ('short term debt ', 21), (' short-term debt ', 21), (' shortterm debt ', 21), (' bank overdraft ', 21), (' borrowings ', 20), (' shortterm borrowings ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' lease liabilities ', 62), (' interest bearing liabilites ', 59), (' cash and cash equivalents ', 39), (' cash overdraft ', 34), (' loans and borrowings ', 33), (' bank overdraft ', 28), ('short term debt ', 27), (' short-term debt ', 21), (' shortterm debt ', 21), ('  leases ', 21), (' borrowings ', 19), (' shortterm borrowings ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' interest bearing liabilites ', 39), (' short-term debt ', 37), (' shortterm debt ', 37), ('short term debt ', 36), (' shortterm borrowings ', 30), (' lease liabilities ', 29), (' cash and cash equivalents ', 27), (' loans and borrowings ', 26), (' bank overdraft ', 26), ('  leases ', 21), (' cash overdraft ', 21), (' borrowings ', 13)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = interest-bearing liabilities , res_fuzz_match = [(' interest bearing liabilites ', 73), (' lease liabilities ', 60), (' loans and borrowings ', 35), (' cash and cash equivalents ', 35), (' short-term debt ', 30), (' shortterm debt ', 30), (' bank overdraft ', 30), ('short term debt ', 29), (' shortterm borrowings ', 29), (' cash overdraft ', 24), ('  leases ', 17), (' borrowings ', 16)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [(' interest bearing liabilites ', 60), (' lease liabilities ', 55), (' cash overdraft ', 31), ('short term debt ', 30), (' loans and borrowings ', 30), (' cash and cash equivalents ', 26), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), (' shortterm borrowings ', 24), ('  leases ', 18), (' borrowings ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft '] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' interest bearing liabilites ', 61), (' loans and borrowings ', 34), (' cash and cash equivalents ', 29), (' cash overdraft ', 29), ('  leases ', 22), ('short term debt ', 21), (' short-term debt ', 21), (' shortterm debt ', 21), (' bank overdraft ', 21), (' borrowings ', 20), (' shortterm borrowings ', 20)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' lease liabilities ', 62), (' interest bearing liabilites ', 59), (' cash and cash equivalents ', 39), (' cash overdraft ', 34), (' loans and borrowings ', 33), (' bank overdraft ', 28), ('short term debt ', 27), (' short-term debt ', 21), (' shortterm debt ', 21), ('  leases ', 21), (' borrowings ', 19), (' shortterm borrowings ', 19)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' interest bearing liabilites ', 39), (' short-term debt ', 37), (' shortterm debt ', 37), ('short term debt ', 36), (' shortterm borrowings ', 30), (' lease liabilities ', 29), (' cash and cash equivalents ', 27), (' loans and borrowings ', 26), (' bank overdraft ', 26), ('  leases ', 21), (' cash overdraft ', 21), (' borrowings ', 13)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = interest-bearing liabilities , res_fuzz_match = [(' interest bearing liabilites ', 73), (' lease liabilities ', 60), (' loans and borrowings ', 35), (' cash and cash equivalents ', 35), (' short-term debt ', 30), (' shortterm debt ', 30), (' bank overdraft ', 30), ('short term debt ', 29), (' shortterm borrowings ', 29), (' cash overdraft ', 24), ('  leases ', 17), (' borrowings ', 16)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [(' interest bearing liabilites ', 60), (' lease liabilities ', 55), (' cash overdraft ', 31), ('short term debt ', 30), (' loans and borrowings ', 30), (' cash and cash equivalents ', 26), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), (' shortterm borrowings ', 24), ('  leases ', 18), (' borrowings ', 17)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = interest-bearing liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = interest-bearing liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = interest-bearing liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = interest-bearing liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', '  accounts payable - trade ', ' Related party payables ', ' trade payables - related parties']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:20+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-11 14:18:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other trade payables', 42), ('trade and other payables', 38), ('trade payable', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('trade and other payables', 39), ('other trade payables', 38), ('trade payable', 28)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = interest-bearing liabilities , res_fuzz_match = [('trade and other payables', 39), ('other trade payables', 38), ('trade payable', 26)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 432018.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['12'], 'line_item_value': [432018.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other trade payables', 42), ('trade and other payables', 38), ('trade payable', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('trade and other payables', 39), ('other trade payables', 38), ('trade payable', 28)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = interest-bearing liabilities , res_fuzz_match = [('trade and other payables', 39), ('other trade payables', 38), ('trade payable', 26)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 454893.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['12'], 'line_item_value': [454893.0]}
2023-08-11 14:18:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:20+0530 - sLogger - DEBUG - keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', '  accounts payable - trade ', ' Related party payables ', ' trade payables - related parties'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = curre nt trade creditors (i , res_fuzz_match = [('trade creditors ', 100), (' trade payables ', 50), (' trade and other payables ', 47), (' other trade payables ', 44), ('  accounts payable - trade ', 42), (' trade payables - related parties', 42), (' amounts payable to controlling entity ', 38), (' payables to related parties ', 38), (' trade payables - other parties ', 37), (' Related party payables ', 28)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = curre nt other creditors and accruals , res_fuzz_match = [('trade creditors ', 79), (' other trade payables ', 56), (' trade payables ', 50), (' trade and other payables ', 45), (' Related party payables ', 44), (' trade payables - other parties ', 42), (' payables to related parties ', 39), (' trade payables - related parties', 38), ('  accounts payable - trade ', 35), (' amounts payable to controlling entity ', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = curre nt trade payables to related parties (ii) , res_fuzz_match = [(' trade payables ', 100), (' payables to related parties ', 100), (' trade payables - related parties', 100), (' trade payables - other parties ', 83), (' other trade payables ', 78), ('  accounts payable - trade ', 65), (' Related party payables ', 63), (' trade and other payables ', 55), (' amounts payable to controlling entity ', 54), ('trade creditors ', 50)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = curre nt total , res_fuzz_match = [('trade creditors ', 40), (' trade and other payables ', 40), (' trade payables - other parties ', 40), (' amounts payable to controlling entity ', 40), (' other trade payables ', 40), ('  accounts payable - trade ', 40), (' Related party payables ', 40), (' trade payables ', 30), (' payables to related parties ', 30), (' trade payables - related parties', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = curre nt trade creditors (i , res_fuzz_match = [('trade creditors ', 100), (' trade payables ', 50), (' trade and other payables ', 47), (' other trade payables ', 44), ('  accounts payable - trade ', 42), (' trade payables - related parties', 42), (' amounts payable to controlling entity ', 38), (' payables to related parties ', 38), (' trade payables - other parties ', 37), (' Related party payables ', 28)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = curre nt other creditors and accruals , res_fuzz_match = [('trade creditors ', 79), (' other trade payables ', 56), (' trade payables ', 50), (' trade and other payables ', 45), (' Related party payables ', 44), (' trade payables - other parties ', 42), (' payables to related parties ', 39), (' trade payables - related parties', 38), ('  accounts payable - trade ', 35), (' amounts payable to controlling entity ', 32)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = curre nt trade payables to related parties (ii) , res_fuzz_match = [(' trade payables ', 100), (' payables to related parties ', 100), (' trade payables - related parties', 100), (' trade payables - other parties ', 83), (' other trade payables ', 78), ('  accounts payable - trade ', 65), (' Related party payables ', 63), (' trade and other payables ', 55), (' amounts payable to controlling entity ', 54), ('trade creditors ', 50)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows = curre nt total , res_fuzz_match = [('trade creditors ', 40), (' trade and other payables ', 40), (' trade payables - other parties ', 40), (' amounts payable to controlling entity ', 40), (' other trade payables ', 40), ('  accounts payable - trade ', 40), (' Related party payables ', 40), (' trade payables ', 30), (' payables to related parties ', 30), (' trade payables - related parties', 30)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:18:20+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 4, 6], 'score': [100, 100, 100, 100], 'value': [38338.0, 294449.0, 167234.0, 160156.0], 'label': ['Curre nt Trade creditors (i', 'Curre nt Trade payables to related parties (ii)', 'Curre nt Trade creditors (i', 'Curre nt Trade payables to related parties (ii)'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses ', ' interest accrued']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('trade and other payables', 38)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('trade and other payables', 39)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest-bearing liabilities , res_fuzz_match = [('trade and other payables', 39)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 432018.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['12'], 'line_item_value': [432018.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('trade and other payables', 38)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('trade and other payables', 39)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest-bearing liabilities , res_fuzz_match = [('trade and other payables', 39)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 454893.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['12'], 'line_item_value': [454893.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['accrued expenses ', ' interest accrued'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = curre nt trade creditors (i , res_fuzz_match = [(' interest accrued', 43), ('accrued expenses ', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = curre nt other creditors and accruals , res_fuzz_match = [(' interest accrued', 64), ('accrued expenses ', 42)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = curre nt trade payables to related parties (ii) , res_fuzz_match = [(' interest accrued', 43), ('accrued expenses ', 42)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = curre nt total , res_fuzz_match = [('accrued expenses ', 30), (' interest accrued', 30)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = curre nt trade creditors (i , res_fuzz_match = [(' interest accrued', 43), ('accrued expenses ', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = curre nt other creditors and accruals , res_fuzz_match = [(' interest accrued', 64), ('accrued expenses ', 42)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = curre nt trade payables to related parties (ii) , res_fuzz_match = [(' interest accrued', 43), ('accrued expenses ', 42)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = curre nt total , res_fuzz_match = [('accrued expenses ', 30), (' interest accrued', 30)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities ', 71), (' income tax payable ', 43), (' tax ', 33), (' provision', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current tax liabilities ', 67), (' tax ', 67), (' income tax payable ', 55), (' provision', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' tax ', 33), (' provision', 33), (' income tax payable ', 31), ('current tax liabilities ', 28)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest-bearing liabilities , res_fuzz_match = [('current tax liabilities ', 61), (' income tax payable ', 38), (' tax ', 33), (' provision', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' tax ', 100), (' income tax payable ', 56), (' provision', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6], 'score': 100, 'value': 58687.0, 'line_item_label': ['Current tax liabilities', 'Provisions'], 'note_numbers': [nan, '14'], 'line_item_value': [21958.0, 36729.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities ', 71), (' income tax payable ', 43), (' tax ', 33), (' provision', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current tax liabilities ', 67), (' tax ', 67), (' income tax payable ', 55), (' provision', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' tax ', 33), (' provision', 33), (' income tax payable ', 31), ('current tax liabilities ', 28)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest-bearing liabilities , res_fuzz_match = [('current tax liabilities ', 61), (' income tax payable ', 38), (' tax ', 33), (' provision', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' tax ', 100), (' income tax payable ', 56), (' provision', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6], 'score': 100, 'value': 70776.0, 'line_item_label': ['Current tax liabilities', 'Provisions'], 'note_numbers': [nan, '14'], 'line_item_value': [27910.0, 42866.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current warranty and after sales service (a) , res_fuzz_match = [(' tax receivable/payable', 41), ('income tax (refundable)/payable ', 39), (' provision for income tax ', 35)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current employee entitlements nan , res_fuzz_match = [(' tax receivable/payable', 35), ('income tax (refundable)/payable ', 30), (' provision for income tax ', 30)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current service contracts nan , res_fuzz_match = [(' provision for income tax ', 45), ('income tax (refundable)/payable ', 35), (' tax receivable/payable', 35)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current others nan , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax ', 35), (' tax receivable/payable', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax ', 29), (' tax receivable/payable', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = non current make good provision (b) , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax ', 30), (' tax receivable/payable', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = non current employec entitlements nan , res_fuzz_match = [(' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35), (' provision for income tax ', 30)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = non current total nan , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax ', 35), (' tax receivable/payable', 35)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current warranty and after sales service (a) , res_fuzz_match = [(' tax receivable/payable', 41), ('income tax (refundable)/payable ', 39), (' provision for income tax ', 35)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current employee entitlements nan , res_fuzz_match = [(' tax receivable/payable', 35), ('income tax (refundable)/payable ', 30), (' provision for income tax ', 30)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current service contracts nan , res_fuzz_match = [(' provision for income tax ', 45), ('income tax (refundable)/payable ', 35), (' tax receivable/payable', 35)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current others nan , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax ', 35), (' tax receivable/payable', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax ', 29), (' tax receivable/payable', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = non current make good provision (b) , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax ', 30), (' tax receivable/payable', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = non current employec entitlements nan , res_fuzz_match = [(' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35), (' provision for income tax ', 30)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = non current total nan , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax ', 35), (' tax receivable/payable', 35)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' foreign exchange contract liability', 65), ('other current liabilities', 57), (' other current liabilities', 57), (' other financial liabilities', 57), (' trade and other payables', 38), (' customer deposits', 28), (' employee benefits', 27), ('provisions', 19), (' deferred revenue', 15)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' other financial liabilities', 50), (' financial liabilities', 47), (' trade and other payables', 39), (' deferred revenue', 39), ('other current liabilities', 36), (' other current liabilities', 36), (' customer deposits', 32), (' employee benefits', 31), (' foreign exchange contract liability', 29), ('provisions', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest-bearing liabilities , res_fuzz_match = [(' financial liabilities', 61), (' foreign exchange contract liability', 56), ('other current liabilities', 51), (' other current liabilities', 51), (' other financial liabilities', 51), (' trade and other payables', 39), (' employee benefits', 29), (' deferred revenue', 26), (' customer deposits', 24), ('provisions', 16)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 5, 6], 'score': 100, 'value': 490705.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Current tax liabilities', 'Provisions'], 'note_numbers': [nan, '12', nan, '14'], 'line_item_value': [0.0, 432018.0, 21958.0, 36729.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' foreign exchange contract liability', 65), ('other current liabilities', 57), (' other current liabilities', 57), (' other financial liabilities', 57), (' trade and other payables', 38), (' customer deposits', 28), (' employee benefits', 27), ('provisions', 19), (' deferred revenue', 15)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' other financial liabilities', 50), (' financial liabilities', 47), (' trade and other payables', 39), (' deferred revenue', 39), ('other current liabilities', 36), (' other current liabilities', 36), (' customer deposits', 32), (' employee benefits', 31), (' foreign exchange contract liability', 29), ('provisions', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest-bearing liabilities , res_fuzz_match = [(' financial liabilities', 61), (' foreign exchange contract liability', 56), ('other current liabilities', 51), (' other current liabilities', 51), (' other financial liabilities', 51), (' trade and other payables', 39), (' employee benefits', 29), (' deferred revenue', 26), (' customer deposits', 24), ('provisions', 16)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 5, 6], 'score': 100, 'value': 525669.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Current tax liabilities', 'Provisions'], 'note_numbers': [nan, '12', nan, '14'], 'line_item_value': [0.0, 454893.0, 27910.0, 42866.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = curre nt trade creditors (i , res_fuzz_match = [(' other creditors', 79), (' other creditors', 79), (' other creditors', 79), (' rebates', 60), ('other creditors and accruals', 58), (' loan payable to relayed party under tax funding agreement', 47), (' current - liability for annual and long service leave', 47), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' contract liabilites - current', 42), (' arising from service contracts', 42), (' forward exchange contracts', 42), (' total current employee benefits', 42), (' other related parties', 41), (' restructuring', 40), (' other', 40), (' warranty', 38), (' loans from related party', 37), (' employee benefits - current', 37), (' share of joint venture payables', 37), (' abandonment and decommissioning costs', 37), (' gst', 33), (' gst payable and accruals', 32), (' employee benefits - payroll', 32), (' make good provisions', 31), (' provision for associate funding', 27), (' gst payables', 20), (' gst liabilities', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = curre nt other creditors and accruals , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' other related parties', 65), (' gst payable and accruals', 59), (' derivative contracts - at fair value', 51), (' secured long-term bank loans', 50), (' provisions - current', 50), (' current - liability for annual and long service leave', 48), (' provision for associate funding', 45), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' forward exchange contracts', 43), (' loan payable to relayed party under tax funding agreement', 42), (' contract liabilites - current', 40), (' gst payables', 40), (' rebates', 40), (' restructuring', 40), (' loans from related party', 38), (' warranty', 38), (' ultimate parent entity', 37), (' employee benefits - payroll', 36), (' total current employee benefits', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = curre nt trade payables to related parties (ii) , res_fuzz_match = [(' rebates', 80), (' other related parties', 71), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 66), (' loans from related party', 62), (' gst payable and accruals', 55), (' warranty', 50), (' current - liability for annual and long service leave', 48), (' contract liabilites - current', 48), (' ultimate parent entity', 47), (' employee benefits - payroll', 47), (' secured long-term bank loans', 46), (' employee benefits - current', 41), (' share of joint venture payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' gst', 33), (' arising from service contracts', 32), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = curre nt total , res_fuzz_match = [(' secured long-term bank loans', 60), (' current - liability for annual and long service leave', 60), (' provisions - current', 59), ('other creditors and accruals', 50), (' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' employee benefits - current', 50), (' contract liabilites - current', 50), (' share of joint venture payables', 50), (' arising from service contracts', 50), (' total current employee benefits', 50), (' ultimate parent entity', 40), (' other creditors', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' rebates', 40), (' forward exchange contracts', 40), (' other creditors', 40), (' other', 40), (' warranty', 38), (' gst', 33), (' gst payables', 32), (' other related parties', 30), (' loans from related party', 30), (' employee benefits - payroll', 30), (' abandonment and decommissioning costs', 30), (' provision for associate funding', 30), (' gst liabilities', 30), (' restructuring', 30), (' make good provisions', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = curre nt trade creditors (i , res_fuzz_match = [(' other creditors', 79), (' other creditors', 79), (' other creditors', 79), (' rebates', 60), ('other creditors and accruals', 58), (' loan payable to relayed party under tax funding agreement', 47), (' current - liability for annual and long service leave', 47), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' contract liabilites - current', 42), (' arising from service contracts', 42), (' forward exchange contracts', 42), (' total current employee benefits', 42), (' other related parties', 41), (' restructuring', 40), (' other', 40), (' warranty', 38), (' loans from related party', 37), (' employee benefits - current', 37), (' share of joint venture payables', 37), (' abandonment and decommissioning costs', 37), (' gst', 33), (' gst payable and accruals', 32), (' employee benefits - payroll', 32), (' make good provisions', 31), (' provision for associate funding', 27), (' gst payables', 20), (' gst liabilities', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = curre nt other creditors and accruals , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' other related parties', 65), (' gst payable and accruals', 59), (' derivative contracts - at fair value', 51), (' secured long-term bank loans', 50), (' provisions - current', 50), (' current - liability for annual and long service leave', 48), (' provision for associate funding', 45), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' forward exchange contracts', 43), (' loan payable to relayed party under tax funding agreement', 42), (' contract liabilites - current', 40), (' gst payables', 40), (' rebates', 40), (' restructuring', 40), (' loans from related party', 38), (' warranty', 38), (' ultimate parent entity', 37), (' employee benefits - payroll', 36), (' total current employee benefits', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = curre nt trade payables to related parties (ii) , res_fuzz_match = [(' rebates', 80), (' other related parties', 71), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 66), (' loans from related party', 62), (' gst payable and accruals', 55), (' warranty', 50), (' current - liability for annual and long service leave', 48), (' contract liabilites - current', 48), (' ultimate parent entity', 47), (' employee benefits - payroll', 47), (' secured long-term bank loans', 46), (' employee benefits - current', 41), (' share of joint venture payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' gst', 33), (' arising from service contracts', 32), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = curre nt total , res_fuzz_match = [(' secured long-term bank loans', 60), (' current - liability for annual and long service leave', 60), (' provisions - current', 59), ('other creditors and accruals', 50), (' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' employee benefits - current', 50), (' contract liabilites - current', 50), (' share of joint venture payables', 50), (' arising from service contracts', 50), (' total current employee benefits', 50), (' ultimate parent entity', 40), (' other creditors', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' rebates', 40), (' forward exchange contracts', 40), (' other creditors', 40), (' other', 40), (' warranty', 38), (' gst', 33), (' gst payables', 32), (' other related parties', 30), (' loans from related party', 30), (' employee benefits - payroll', 30), (' abandonment and decommissioning costs', 30), (' provision for associate funding', 30), (' gst liabilities', 30), (' restructuring', 30), (' make good provisions', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 5, 6], 'score': [100, 80, 100, 80], 'value': [122106.0, 294449.0, 104628.0, 160156.0], 'label': ['Curre nt Other creditors and accruals', 'Curre nt Trade payables to related parties (ii)', 'Curre nt Other creditors and accruals', 'Curre nt Trade payables to related parties (ii)'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current warranty and after sales service (a) , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' other', 60), (' current - liability for annual and long service leave', 58), (' other related parties', 53), ('other creditors and accruals', 50), (' gst payable and accruals', 50), (' restructuring', 50), (' loans from related party', 48), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 46), (' abandonment and decommissioning costs', 46), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' provisions - current', 43), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' total current employee benefits', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' secured long-term bank loans', 38), (' make good provisions', 38), (' other creditors', 36), (' other creditors', 36), (' provision for associate funding', 36), (' other creditors', 36), (' employee benefits - current', 35), (' gst', 33), (' employee benefits - payroll', 32), (' gst liabilities', 30)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current employee entitlements nan , res_fuzz_match = [(' total current employee benefits', 82), (' employee benefits - payroll', 70), (' employee benefits - current', 68), (' rebates', 60), (' current - liability for annual and long service leave', 54), (' ultimate parent entity', 53), (' warranty', 50), (' secured long-term bank loans', 46), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 42), (' share of joint venture payables', 42), (' other related parties', 41), (' gst payables', 40), (' other', 40), (' loans from related party', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' gst payable and accruals', 37), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' derivative contracts - at fair value', 34), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' provision for associate funding', 28), (' make good provisions', 25), (' abandonment and decommissioning costs', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current service contracts nan , res_fuzz_match = [(' arising from service contracts', 72), (' derivative contracts - at fair value', 67), (' rebates', 60), (' other', 60), (' forward exchange contracts', 58), (' current - liability for annual and long service leave', 56), (' other creditors', 50), (' secured long-term bank loans', 50), (' other creditors', 50), (' provisions - current', 50), (' other creditors', 50), (' warranty', 50), (' total current employee benefits', 48), (' ultimate parent entity', 47), (' provision for associate funding', 47), (' share of joint venture payables', 45), (' loan payable to relayed party under tax funding agreement', 44), (' contract liabilites - current', 44), (' loans from related party', 43), (' other related parties', 41), (' restructuring', 40), ('other creditors and accruals', 38), (' employee benefits - current', 35), (' gst', 33), (' gst payable and accruals', 32), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' gst payables', 30), (' gst liabilities', 30), (' employee benefits - payroll', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current others nan , res_fuzz_match = [(' other', 100), (' secured long-term bank loans', 65), (' total current employee benefits', 65), (' rebates', 60), ('other creditors and accruals', 53), (' current - liability for annual and long service leave', 53), (' restructuring', 50), (' warranty', 50), (' share of joint venture payables', 47), (' ultimate parent entity', 45), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' other related parties', 41), (' derivative contracts - at fair value', 41), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - current', 41), (' contract liabilites - current', 41), (' forward exchange contracts', 41), (' loans from related party', 35), (' provision for associate funding', 35), (' arising from service contracts', 35), (' gst', 33), (' gst payables', 30), (' gst liabilities', 30), (' employee benefits - payroll', 29), (' make good provisions', 25), (' gst payable and accruals', 24), (' abandonment and decommissioning costs', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' current - liability for annual and long service leave', 65), (' rebates', 60), (' total current employee benefits', 59), (' secured long-term bank loans', 53), (' warranty', 50), ('other creditors and accruals', 47), (' loan payable to relayed party under tax funding agreement', 47), (' ultimate parent entity', 45), (' provisions - current', 43), (' derivative contracts - at fair value', 41), (' employee benefits - current', 41), (' contract liabilites - current', 41), (' share of joint venture payables', 41), (' forward exchange contracts', 41), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' other related parties', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' loans from related party', 35), (' gst payable and accruals', 35), (' gst', 33), (' provision for associate funding', 29), (' arising from service contracts', 29), (' make good provisions', 25), (' abandonment and decommissioning costs', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = non current make good provision (b) , res_fuzz_match = [(' make good provisions', 100), (' provisions - current', 64), (' rebates', 60), (' warranty', 50), (' total current employee benefits', 50), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' current - liability for annual and long service leave', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' secured long-term bank loans', 42), (' other related parties', 41), (' contract liabilites - current', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' ultimate parent entity', 37), (' loan payable to relayed party under tax funding agreement', 36), (' employee benefits - payroll', 36), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' share of joint venture payables', 32), (' provision for associate funding', 32), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' arising from service contracts', 28)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = non current employec entitlements nan , res_fuzz_match = [(' total current employee benefits', 76), (' employee benefits - payroll', 68), (' employee benefits - current', 67), (' provisions - current', 64), (' rebates', 60), (' ultimate parent entity', 53), (' current - liability for annual and long service leave', 52), (' warranty', 50), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 42), (' secured long-term bank loans', 42), (' other related parties', 41), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), ('other creditors and accruals', 38), (' forward exchange contracts', 38), (' gst payable and accruals', 37), (' arising from service contracts', 36), (' derivative contracts - at fair value', 34), (' gst', 33), (' provision for associate funding', 32), (' gst liabilities', 30), (' restructuring', 30), (' abandonment and decommissioning costs', 27), (' make good provisions', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = non current total nan , res_fuzz_match = [(' provisions - current', 64), (' current - liability for annual and long service leave', 62), (' rebates', 60), (' total current employee benefits', 57), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' warranty', 50), (' employee benefits - current', 48), ('other creditors and accruals', 43), (' loan payable to relayed party under tax funding agreement', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' employee benefits - payroll', 39), (' derivative contracts - at fair value', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' arising from service contracts', 34), (' gst payable and accruals', 33), (' provision for associate funding', 33), (' gst', 33), (' make good provisions', 25), (' other', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current warranty and after sales service (a) , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' other', 60), (' current - liability for annual and long service leave', 58), (' other related parties', 53), ('other creditors and accruals', 50), (' gst payable and accruals', 50), (' restructuring', 50), (' loans from related party', 48), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 46), (' abandonment and decommissioning costs', 46), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' provisions - current', 43), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' total current employee benefits', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' secured long-term bank loans', 38), (' make good provisions', 38), (' other creditors', 36), (' other creditors', 36), (' provision for associate funding', 36), (' other creditors', 36), (' employee benefits - current', 35), (' gst', 33), (' employee benefits - payroll', 32), (' gst liabilities', 30)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current employee entitlements nan , res_fuzz_match = [(' total current employee benefits', 82), (' employee benefits - payroll', 70), (' employee benefits - current', 68), (' rebates', 60), (' current - liability for annual and long service leave', 54), (' ultimate parent entity', 53), (' warranty', 50), (' secured long-term bank loans', 46), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 42), (' share of joint venture payables', 42), (' other related parties', 41), (' gst payables', 40), (' other', 40), (' loans from related party', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' gst payable and accruals', 37), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' derivative contracts - at fair value', 34), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' provision for associate funding', 28), (' make good provisions', 25), (' abandonment and decommissioning costs', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current service contracts nan , res_fuzz_match = [(' arising from service contracts', 72), (' derivative contracts - at fair value', 67), (' rebates', 60), (' other', 60), (' forward exchange contracts', 58), (' current - liability for annual and long service leave', 56), (' other creditors', 50), (' secured long-term bank loans', 50), (' other creditors', 50), (' provisions - current', 50), (' other creditors', 50), (' warranty', 50), (' total current employee benefits', 48), (' ultimate parent entity', 47), (' provision for associate funding', 47), (' share of joint venture payables', 45), (' loan payable to relayed party under tax funding agreement', 44), (' contract liabilites - current', 44), (' loans from related party', 43), (' other related parties', 41), (' restructuring', 40), ('other creditors and accruals', 38), (' employee benefits - current', 35), (' gst', 33), (' gst payable and accruals', 32), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' gst payables', 30), (' gst liabilities', 30), (' employee benefits - payroll', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current others nan , res_fuzz_match = [(' other', 100), (' secured long-term bank loans', 65), (' total current employee benefits', 65), (' rebates', 60), ('other creditors and accruals', 53), (' current - liability for annual and long service leave', 53), (' restructuring', 50), (' warranty', 50), (' share of joint venture payables', 47), (' ultimate parent entity', 45), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' other related parties', 41), (' derivative contracts - at fair value', 41), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - current', 41), (' contract liabilites - current', 41), (' forward exchange contracts', 41), (' loans from related party', 35), (' provision for associate funding', 35), (' arising from service contracts', 35), (' gst', 33), (' gst payables', 30), (' gst liabilities', 30), (' employee benefits - payroll', 29), (' make good provisions', 25), (' gst payable and accruals', 24), (' abandonment and decommissioning costs', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' current - liability for annual and long service leave', 65), (' rebates', 60), (' total current employee benefits', 59), (' secured long-term bank loans', 53), (' warranty', 50), ('other creditors and accruals', 47), (' loan payable to relayed party under tax funding agreement', 47), (' ultimate parent entity', 45), (' provisions - current', 43), (' derivative contracts - at fair value', 41), (' employee benefits - current', 41), (' contract liabilites - current', 41), (' share of joint venture payables', 41), (' forward exchange contracts', 41), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' other related parties', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' loans from related party', 35), (' gst payable and accruals', 35), (' gst', 33), (' provision for associate funding', 29), (' arising from service contracts', 29), (' make good provisions', 25), (' abandonment and decommissioning costs', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = non current make good provision (b) , res_fuzz_match = [(' make good provisions', 100), (' provisions - current', 64), (' rebates', 60), (' warranty', 50), (' total current employee benefits', 50), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' current - liability for annual and long service leave', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' secured long-term bank loans', 42), (' other related parties', 41), (' contract liabilites - current', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' ultimate parent entity', 37), (' loan payable to relayed party under tax funding agreement', 36), (' employee benefits - payroll', 36), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' share of joint venture payables', 32), (' provision for associate funding', 32), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' arising from service contracts', 28)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = non current employec entitlements nan , res_fuzz_match = [(' total current employee benefits', 76), (' employee benefits - payroll', 68), (' employee benefits - current', 67), (' provisions - current', 64), (' rebates', 60), (' ultimate parent entity', 53), (' current - liability for annual and long service leave', 52), (' warranty', 50), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 42), (' secured long-term bank loans', 42), (' other related parties', 41), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), ('other creditors and accruals', 38), (' forward exchange contracts', 38), (' gst payable and accruals', 37), (' arising from service contracts', 36), (' derivative contracts - at fair value', 34), (' gst', 33), (' provision for associate funding', 32), (' gst liabilities', 30), (' restructuring', 30), (' abandonment and decommissioning costs', 27), (' make good provisions', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = non current total nan , res_fuzz_match = [(' provisions - current', 64), (' current - liability for annual and long service leave', 62), (' rebates', 60), (' total current employee benefits', 57), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' warranty', 50), (' employee benefits - current', 48), ('other creditors and accruals', 43), (' loan payable to relayed party under tax funding agreement', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' employee benefits - payroll', 39), (' derivative contracts - at fair value', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' arising from service contracts', 34), (' gst payable and accruals', 33), (' provision for associate funding', 33), (' gst', 33), (' make good provisions', 25), (' other', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 5, 8, 9, 11, 13], 'score': [100, 82, 100, 100, 100, 82, 100, 100], 'value': [16370.0, 26361.0, 0.0, 824.0, 14287.0, 22270.0, 42.0, 713.0], 'label': ['Current Warranty and after sales service (a)', 'Current Employee entitlements nan', 'Current Others nan', 'Non current Make good provision (b)', 'Current Warranty and after sales service (a)', 'Current Employee entitlements nan', 'Current Others nan', 'Non current Make good provision (b)'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('long term debt', 35)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('long term debt', 35)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' later than 1 year ', ' not later than 5 years']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' lease liability', 64), ('interest bearing loans and borrowings ', 36), (' loans and borrowings', 36), (' borrowings ', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings ', 33), (' borrowings ', 33), (' loans and borrowings', 33), (' lease liabilities ', 17), (' lease liability', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [(' lease liabilities ', 82), (' lease liability', 82), ('interest bearing loans and borrowings ', 80), (' borrowings ', 33), (' loans and borrowings', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings ', 44), (' lease liabilities ', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings ', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 82, 'value': 40189.0, 'line_item_label': ['Interest bearing liabilities'], 'note_numbers': ['13'], 'line_item_value': [40189.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' lease liability', 64), ('interest bearing loans and borrowings ', 36), (' loans and borrowings', 36), (' borrowings ', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings ', 33), (' borrowings ', 33), (' loans and borrowings', 33), (' lease liabilities ', 17), (' lease liability', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [(' lease liabilities ', 82), (' lease liability', 82), ('interest bearing loans and borrowings ', 80), (' borrowings ', 33), (' loans and borrowings', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings ', 44), (' lease liabilities ', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings ', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 82, 'value': 42713.0, 'line_item_label': ['Interest bearing liabilities'], 'note_numbers': ['13'], 'line_item_value': [42713.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' later than 1 year ', ' not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' later than 1 year ', ' not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 65), ('(bond)', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 65), ('(bond)', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes ', ' deferred tax liabilities']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities ', ' total deferred tax (assets) / liabilities']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' deferred tax liabilities', 57), ('deferred taxes ', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes ', 17), (' deferred tax liabilities', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [(' deferred tax liabilities', 62), ('deferred taxes ', 44)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes ', 33), (' deferred tax liabilities', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' deferred tax liabilities', 57), ('deferred taxes ', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes ', 17), (' deferred tax liabilities', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [(' deferred tax liabilities', 62), ('deferred taxes ', 44)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes ', 33), (' deferred tax liabilities', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities ', 82), ('other long term liabilities ', 61), (' other financial liabilities ', 53), (' financial liabilities ', 43), (' provision for associate funding ', 33), (' trade and other payables ', 28), (' employee benefits ', 28), (' deferred revenue', 23), (' provisions ', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions ', 100), (' provision for associate funding ', 43), (' deferred revenue', 22), (' employee benefits ', 19), (' other non-current liabilities ', 15), (' trade and other payables ', 14), (' financial liabilities ', 10), (' other financial liabilities ', 8), ('other long term liabilities ', 7)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [(' financial liabilities ', 53), (' other financial liabilities ', 45), (' trade and other payables ', 43), (' employee benefits ', 40), ('other long term liabilities ', 33), (' deferred revenue', 31), (' other non-current liabilities ', 30), (' provision for associate funding ', 29), (' provisions ', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits ', 33), ('other long term liabilities ', 32), (' provision for associate funding ', 32), (' deferred revenue', 29), (' other non-current liabilities ', 28), (' trade and other payables ', 26), (' other financial liabilities ', 21), (' financial liabilities ', 17), (' provisions ', 13)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': 100, 'value': 5246.0, 'line_item_label': ['Non-current liabilities', 'Provisions'], 'note_numbers': [nan, '14'], 'line_item_value': [0.0, 5246.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities ', 82), ('other long term liabilities ', 61), (' other financial liabilities ', 53), (' financial liabilities ', 43), (' provision for associate funding ', 33), (' trade and other payables ', 28), (' employee benefits ', 28), (' deferred revenue', 23), (' provisions ', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions ', 100), (' provision for associate funding ', 43), (' deferred revenue', 22), (' employee benefits ', 19), (' other non-current liabilities ', 15), (' trade and other payables ', 14), (' financial liabilities ', 10), (' other financial liabilities ', 8), ('other long term liabilities ', 7)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [(' financial liabilities ', 53), (' other financial liabilities ', 45), (' trade and other payables ', 43), (' employee benefits ', 40), ('other long term liabilities ', 33), (' deferred revenue', 31), (' other non-current liabilities ', 30), (' provision for associate funding ', 29), (' provisions ', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits ', 33), ('other long term liabilities ', 32), (' provision for associate funding ', 32), (' deferred revenue', 29), (' other non-current liabilities ', 28), (' trade and other payables ', 26), (' other financial liabilities ', 21), (' financial liabilities ', 17), (' provisions ', 13)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': 100, 'value': 5904.0, 'line_item_label': ['Non-current liabilities', 'Provisions'], 'note_numbers': [nan, '14'], 'line_item_value': [0.0, 5904.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current warranty and after sales service (a) , res_fuzz_match = [('non-current trade and other payables ', 60), (' non-current - liability for long-service leave ', 48), (' abandonment and decommissioning costs ', 46), (' trade payables - related parties ', 46), (' derivative contracts - at fair value ', 42), (' electricity derivatives at fair value through oci ', 41), (' make good provisions ', 38), (' contract liabilites - non-current ', 36), (' provision for associate funding ', 36), (' total non-current employee benefits', 35), (' employee benefits - payroll ', 32), (' employee benefits - non current ', 30), (' provisions - non-current ', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current employee entitlements nan , res_fuzz_match = [(' total non-current employee benefits', 72), (' employee benefits - payroll ', 70), (' employee benefits - non current ', 58), ('non-current trade and other payables ', 42), (' trade payables - related parties ', 42), (' contract liabilites - non-current ', 39), (' non-current - liability for long-service leave ', 38), (' provisions - non-current ', 36), (' derivative contracts - at fair value ', 34), (' electricity derivatives at fair value through oci ', 31), (' provision for associate funding ', 28), (' make good provisions ', 25), (' abandonment and decommissioning costs ', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current service contracts nan , res_fuzz_match = [(' derivative contracts - at fair value ', 67), (' provisions - non-current ', 50), (' provision for associate funding ', 47), ('non-current trade and other payables ', 44), (' non-current - liability for long-service leave ', 44), (' contract liabilites - non-current ', 44), (' trade payables - related parties ', 38), (' electricity derivatives at fair value through oci ', 37), (' employee benefits - non current ', 33), (' total non-current employee benefits', 33), (' abandonment and decommissioning costs ', 31), (' make good provisions ', 31), (' employee benefits - payroll ', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current others nan , res_fuzz_match = [('non-current trade and other payables ', 59), (' total non-current employee benefits', 53), (' non-current - liability for long-service leave ', 47), (' electricity derivatives at fair value through oci ', 41), (' derivative contracts - at fair value ', 41), (' employee benefits - non current ', 41), (' contract liabilites - non-current ', 41), (' provisions - non-current ', 36), (' provision for associate funding ', 35), (' employee benefits - payroll ', 29), (' trade payables - related parties ', 29), (' make good provisions ', 25), (' abandonment and decommissioning costs ', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [('non-current trade and other payables ', 59), (' non-current - liability for long-service leave ', 47), (' contract liabilites - non-current ', 47), (' total non-current employee benefits', 47), (' electricity derivatives at fair value through oci ', 41), (' derivative contracts - at fair value ', 41), (' employee benefits - non current ', 41), (' trade payables - related parties ', 41), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 29), (' make good provisions ', 25), (' abandonment and decommissioning costs ', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = non current make good provision (b) , res_fuzz_match = [(' make good provisions ', 100), (' non-current - liability for long-service leave ', 54), ('non-current trade and other payables ', 50), (' total non-current employee benefits', 46), (' provisions - non-current ', 43), (' employee benefits - non current ', 41), (' abandonment and decommissioning costs ', 38), (' trade payables - related parties ', 38), (' electricity derivatives at fair value through oci ', 36), (' contract liabilites - non-current ', 36), (' employee benefits - payroll ', 36), (' derivative contracts - at fair value ', 33), (' provision for associate funding ', 32)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = non current employec entitlements nan , res_fuzz_match = [(' total non-current employee benefits', 69), (' employee benefits - payroll ', 68), (' employee benefits - non current ', 65), ('non-current trade and other payables ', 47), (' non-current - liability for long-service leave ', 45), (' trade payables - related parties ', 42), (' contract liabilites - non-current ', 36), (' derivative contracts - at fair value ', 34), (' provision for associate funding ', 32), (' electricity derivatives at fair value through oci ', 29), (' provisions - non-current ', 29), (' abandonment and decommissioning costs ', 27), (' make good provisions ', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = non current total nan , res_fuzz_match = [('non-current trade and other payables ', 62), (' employee benefits - non current ', 52), (' non-current - liability for long-service leave ', 52), (' total non-current employee benefits', 52), (' contract liabilites - non-current ', 48), (' employee benefits - payroll ', 39), (' derivative contracts - at fair value ', 38), (' abandonment and decommissioning costs ', 38), (' provisions - non-current ', 36), (' electricity derivatives at fair value through oci ', 33), (' provision for associate funding ', 33), (' trade payables - related parties ', 33), (' make good provisions ', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current warranty and after sales service (a) , res_fuzz_match = [('non-current trade and other payables ', 60), (' non-current - liability for long-service leave ', 48), (' abandonment and decommissioning costs ', 46), (' trade payables - related parties ', 46), (' derivative contracts - at fair value ', 42), (' electricity derivatives at fair value through oci ', 41), (' make good provisions ', 38), (' contract liabilites - non-current ', 36), (' provision for associate funding ', 36), (' total non-current employee benefits', 35), (' employee benefits - payroll ', 32), (' employee benefits - non current ', 30), (' provisions - non-current ', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current employee entitlements nan , res_fuzz_match = [(' total non-current employee benefits', 72), (' employee benefits - payroll ', 70), (' employee benefits - non current ', 58), ('non-current trade and other payables ', 42), (' trade payables - related parties ', 42), (' contract liabilites - non-current ', 39), (' non-current - liability for long-service leave ', 38), (' provisions - non-current ', 36), (' derivative contracts - at fair value ', 34), (' electricity derivatives at fair value through oci ', 31), (' provision for associate funding ', 28), (' make good provisions ', 25), (' abandonment and decommissioning costs ', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current service contracts nan , res_fuzz_match = [(' derivative contracts - at fair value ', 67), (' provisions - non-current ', 50), (' provision for associate funding ', 47), ('non-current trade and other payables ', 44), (' non-current - liability for long-service leave ', 44), (' contract liabilites - non-current ', 44), (' trade payables - related parties ', 38), (' electricity derivatives at fair value through oci ', 37), (' employee benefits - non current ', 33), (' total non-current employee benefits', 33), (' abandonment and decommissioning costs ', 31), (' make good provisions ', 31), (' employee benefits - payroll ', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current others nan , res_fuzz_match = [('non-current trade and other payables ', 59), (' total non-current employee benefits', 53), (' non-current - liability for long-service leave ', 47), (' electricity derivatives at fair value through oci ', 41), (' derivative contracts - at fair value ', 41), (' employee benefits - non current ', 41), (' contract liabilites - non-current ', 41), (' provisions - non-current ', 36), (' provision for associate funding ', 35), (' employee benefits - payroll ', 29), (' trade payables - related parties ', 29), (' make good provisions ', 25), (' abandonment and decommissioning costs ', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [('non-current trade and other payables ', 59), (' non-current - liability for long-service leave ', 47), (' contract liabilites - non-current ', 47), (' total non-current employee benefits', 47), (' electricity derivatives at fair value through oci ', 41), (' derivative contracts - at fair value ', 41), (' employee benefits - non current ', 41), (' trade payables - related parties ', 41), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 29), (' make good provisions ', 25), (' abandonment and decommissioning costs ', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = non current make good provision (b) , res_fuzz_match = [(' make good provisions ', 100), (' non-current - liability for long-service leave ', 54), ('non-current trade and other payables ', 50), (' total non-current employee benefits', 46), (' provisions - non-current ', 43), (' employee benefits - non current ', 41), (' abandonment and decommissioning costs ', 38), (' trade payables - related parties ', 38), (' electricity derivatives at fair value through oci ', 36), (' contract liabilites - non-current ', 36), (' employee benefits - payroll ', 36), (' derivative contracts - at fair value ', 33), (' provision for associate funding ', 32)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = non current employec entitlements nan , res_fuzz_match = [(' total non-current employee benefits', 69), (' employee benefits - payroll ', 68), (' employee benefits - non current ', 65), ('non-current trade and other payables ', 47), (' non-current - liability for long-service leave ', 45), (' trade payables - related parties ', 42), (' contract liabilites - non-current ', 36), (' derivative contracts - at fair value ', 34), (' provision for associate funding ', 32), (' electricity derivatives at fair value through oci ', 29), (' provisions - non-current ', 29), (' abandonment and decommissioning costs ', 27), (' make good provisions ', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = non current total nan , res_fuzz_match = [('non-current trade and other payables ', 62), (' employee benefits - non current ', 52), (' non-current - liability for long-service leave ', 52), (' total non-current employee benefits', 52), (' contract liabilites - non-current ', 48), (' employee benefits - payroll ', 39), (' derivative contracts - at fair value ', 38), (' abandonment and decommissioning costs ', 38), (' provisions - non-current ', 36), (' electricity derivatives at fair value through oci ', 33), (' provision for associate funding ', 33), (' trade payables - related parties ', 33), (' make good provisions ', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 13], 'score': [100, 100], 'value': [824.0, 713.0], 'label': ['Non current Make good provision (b)', 'Non current Make good provision (b)'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [(' contributed equity ', 100), (' contributed equity', 100), (' equity share capital ', 59), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 37), (' share capital ', 37), ('common stock ', 36)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserves , res_fuzz_match = [(' perpetual equity instrument ', 32), (' contributed equity ', 30), (' contributed equity', 30), (' equity share capital ', 29), ('common stock ', 28), (' share capital ', 24), (' issued capital ', 24), (' share capital ', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [(' share capital ', 50), (' share capital ', 50), (' contributed equity ', 48), (' contributed equity', 48), (' equity share capital ', 45), (' issued capital ', 43), (' perpetual equity instrument ', 32), ('common stock ', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity attributable to equity holders ofthe parent , res_fuzz_match = [(' equity share capital ', 51), (' perpetual equity instrument ', 48), (' contributed equity ', 46), (' contributed equity', 46), (' share capital ', 31), (' share capital ', 31), (' issued capital ', 24), ('common stock ', 15)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' perpetual equity instrument ', 36), (' contributed equity ', 34), (' contributed equity', 34), ('common stock ', 32), (' equity share capital ', 32), (' share capital ', 27), (' share capital ', 27), (' issued capital ', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 33670.0, 'line_item_label': ['Contributed equity'], 'note_numbers': ['16'], 'line_item_value': [33670.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [(' contributed equity ', 100), (' contributed equity', 100), (' equity share capital ', 59), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 37), (' share capital ', 37), ('common stock ', 36)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserves , res_fuzz_match = [(' perpetual equity instrument ', 32), (' contributed equity ', 30), (' contributed equity', 30), (' equity share capital ', 29), ('common stock ', 28), (' share capital ', 24), (' issued capital ', 24), (' share capital ', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [(' share capital ', 50), (' share capital ', 50), (' contributed equity ', 48), (' contributed equity', 48), (' equity share capital ', 45), (' issued capital ', 43), (' perpetual equity instrument ', 32), ('common stock ', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity attributable to equity holders ofthe parent , res_fuzz_match = [(' equity share capital ', 51), (' perpetual equity instrument ', 48), (' contributed equity ', 46), (' contributed equity', 46), (' share capital ', 31), (' share capital ', 31), (' issued capital ', 24), ('common stock ', 15)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' perpetual equity instrument ', 36), (' contributed equity ', 34), (' contributed equity', 34), ('common stock ', 32), (' equity share capital ', 32), (' share capital ', 27), (' share capital ', 27), (' issued capital ', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 33670.0, 'line_item_label': ['Contributed equity'], 'note_numbers': ['16'], 'line_item_value': [33670.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = 29,121,791 (2022: 29,121,791) fully paid ordinary shares and authorised , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 100), (' Fully paid Preference shares ', 74), (' ordinary shares fully paid ', 68), (' issued and paid-up share capital ', 56), (' retained profits ', 46), (' Profits captialised on redemption of preference shares', 43), (' on issue, fully paid ', 40), (' total issued capital ', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = 29,121,791 (2022: 29,121,791) fully paid ordinary shares and authorised , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 100), (' Fully paid Preference shares ', 74), (' ordinary shares fully paid ', 68), (' issued and paid-up share capital ', 56), (' retained profits ', 46), (' Profits captialised on redemption of preference shares', 43), (' on issue, fully paid ', 40), (' total issued capital ', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [33670.0, 33670.0], 'label': ['29,121,791 (2022: 29,121,791) fully paid ordinary shares and authorised', '29,121,791 (2022: 29,121,791) fully paid ordinary shares and authorised'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('Share premium', 34)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserves , res_fuzz_match = [('Share premium', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('Share premium', 46)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity attributable to equity holders ofthe parent , res_fuzz_match = [('Share premium', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [('Share premium', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('Share premium', 34)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserves , res_fuzz_match = [('Share premium', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('Share premium', 46)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity attributable to equity holders ofthe parent , res_fuzz_match = [('Share premium', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [('Share premium', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings ', ' general reserves ', ' accumulated losses ', ' retained earnings and dividends on equity instruments']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [(' retained profits', 48), ('other equity ', 43), (' retained earnings ', 37), (' reserves surplus ', 21), (' accumulated losses ', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserves , res_fuzz_match = [(' retained earnings ', 43), (' reserves surplus ', 41), (' retained profits', 41), (' accumulated losses ', 28), ('other equity ', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [(' retained profits', 100), (' retained earnings ', 67), ('other equity ', 32), (' reserves surplus ', 23), (' accumulated losses ', 8)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity attributable to equity holders ofthe parent , res_fuzz_match = [('other equity ', 42), (' retained profits', 30), (' retained earnings ', 27), (' accumulated losses ', 23), (' reserves surplus ', 22)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [('other equity ', 39), (' reserves surplus ', 38), (' retained profits', 38), (' retained earnings ', 33), (' accumulated losses ', 13)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 500222.0, 'line_item_label': ['Retained profits'], 'note_numbers': [nan], 'line_item_value': [500222.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [(' retained profits', 48), ('other equity ', 43), (' retained earnings ', 37), (' reserves surplus ', 21), (' accumulated losses ', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserves , res_fuzz_match = [(' retained earnings ', 43), (' reserves surplus ', 41), (' retained profits', 41), (' accumulated losses ', 28), ('other equity ', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [(' retained profits', 100), (' retained earnings ', 67), ('other equity ', 32), (' reserves surplus ', 23), (' accumulated losses ', 8)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity attributable to equity holders ofthe parent , res_fuzz_match = [('other equity ', 42), (' retained profits', 30), (' retained earnings ', 27), (' accumulated losses ', 23), (' reserves surplus ', 22)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [('other equity ', 39), (' reserves surplus ', 38), (' retained profits', 38), (' retained earnings ', 33), (' accumulated losses ', 13)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 569213.0, 'line_item_label': ['Retained profits'], 'note_numbers': [nan], 'line_item_value': [569213.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [(' non controlling interest ', 50), ('minority interest ', 40), (' minority interest ', 40), (' noncontrolling interest ', 34), (' non-controlling interest', 34)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserves , res_fuzz_match = [(' non controlling interest ', 39), (' noncontrolling interest ', 36), (' non-controlling interest', 36), ('minority interest ', 31), (' minority interest ', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('minority interest ', 52), (' minority interest ', 52), (' non controlling interest ', 48), (' noncontrolling interest ', 38), (' non-controlling interest', 38)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity attributable to equity holders ofthe parent , res_fuzz_match = [(' non controlling interest ', 33), (' noncontrolling interest ', 33), (' non-controlling interest', 33), ('minority interest ', 29), (' minority interest ', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' noncontrolling interest ', 100), (' non-controlling interest', 100), ('minority interest ', 73), (' minority interest ', 73), (' non controlling interest ', 62)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 117035.0, 'line_item_label': ['Non-controlling interests'], 'note_numbers': [nan], 'line_item_value': [117035.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [(' non controlling interest ', 50), ('minority interest ', 40), (' minority interest ', 40), (' noncontrolling interest ', 34), (' non-controlling interest', 34)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserves , res_fuzz_match = [(' non controlling interest ', 39), (' noncontrolling interest ', 36), (' non-controlling interest', 36), ('minority interest ', 31), (' minority interest ', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('minority interest ', 52), (' minority interest ', 52), (' non controlling interest ', 48), (' noncontrolling interest ', 38), (' non-controlling interest', 38)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity attributable to equity holders ofthe parent , res_fuzz_match = [(' non controlling interest ', 33), (' noncontrolling interest ', 33), (' non-controlling interest', 33), ('minority interest ', 29), (' minority interest ', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' noncontrolling interest ', 100), (' non-controlling interest', 100), ('minority interest ', 73), (' minority interest ', 73), (' non controlling interest ', 62)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 131960.0, 'line_item_label': ['Non-controlling interests'], 'note_numbers': [nan], 'line_item_value': [131960.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserves , res_fuzz_match = [('shareholders equity(a)', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('shareholders equity(a)', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity attributable to equity holders ofthe parent , res_fuzz_match = [('shareholders equity(a)', 38)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [('shareholders equity(a)', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserves , res_fuzz_match = [('shareholders equity(a)', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('shareholders equity(a)', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity attributable to equity holders ofthe parent , res_fuzz_match = [('shareholders equity(a)', 38)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [('shareholders equity(a)', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve ', ' cash flow hedge reserve ', ' reserve in joint venture ', ' other reserve ', ' total other reserves ', ' tax reserve ', ' other  components of equity']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve', 16), ('other reserves ', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other reserves ', 36), (' foreign currency translation reserve', 30), (' reserves ', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserves , res_fuzz_match = [(' foreign currency translation reserve', 100), ('other reserves ', 42), (' reserves ', 32)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [(' foreign currency translation reserve', 41), ('other reserves ', 40), (' reserves ', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity attributable to equity holders ofthe parent , res_fuzz_match = [(' foreign currency translation reserve', 36), ('other reserves ', 26), (' reserves ', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [('other reserves ', 39), (' foreign currency translation reserve', 36), (' reserves ', 32)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 1040.0, 'line_item_label': ['Foreign Currency Translation Reserves'], 'note_numbers': [nan], 'line_item_value': [1040.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve', 16), ('other reserves ', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other reserves ', 36), (' foreign currency translation reserve', 30), (' reserves ', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserves , res_fuzz_match = [(' foreign currency translation reserve', 100), ('other reserves ', 42), (' reserves ', 32)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [(' foreign currency translation reserve', 41), ('other reserves ', 40), (' reserves ', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity attributable to equity holders ofthe parent , res_fuzz_match = [(' foreign currency translation reserve', 36), ('other reserves ', 26), (' reserves ', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [('other reserves ', 39), (' foreign currency translation reserve', 36), (' reserves ', 32)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': -1568.0, 'line_item_label': ['Foreign Currency Translation Reserves'], 'note_numbers': [nan], 'line_item_value': [-1568.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', '']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' Exploration and evaluation assets', 46), (' investment property ', 36), (' oil and gas properties ', 31), ('plant property equipment ', 30), (' property plant equipment ', 30), (' plant and equipment ', 29), (' property ', 19)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment ', 91), (' property plant equipment ', 91), (' plant and equipment ', 77), (' oil and gas properties ', 70), (' investment property ', 62), (' property ', 50), (' Exploration and evaluation assets', 48)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' Exploration and evaluation assets', 43), (' investment property ', 33), ('plant property equipment ', 29), (' property plant equipment ', 29), (' oil and gas properties ', 29), (' plant and equipment ', 27), (' property ', 26)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [(' investment property ', 56), ('plant property equipment ', 32), (' property plant equipment ', 32), (' plant and equipment ', 31), (' Exploration and evaluation assets', 31), (' oil and gas properties ', 28), (' property ', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' oil and gas properties ', 31), (' plant and equipment ', 27), (' property ', 27), (' investment property ', 18), ('plant property equipment ', 15), (' property plant equipment ', 15), (' Exploration and evaluation assets', 14)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' Exploration and evaluation assets', 49), (' investment property ', 40), ('plant property equipment ', 34), (' property plant equipment ', 34), (' plant and equipment ', 33), (' oil and gas properties ', 29), (' property ', 26)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' Exploration and evaluation assets', 41), (' plant and equipment ', 37), (' investment property ', 30), (' property ', 30), (' oil and gas properties ', 26), ('plant property equipment ', 25), (' property plant equipment ', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 477418.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [477418.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' Exploration and evaluation assets', 46), (' investment property ', 36), (' oil and gas properties ', 31), ('plant property equipment ', 30), (' property plant equipment ', 30), (' plant and equipment ', 29), (' property ', 19)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment ', 91), (' property plant equipment ', 91), (' plant and equipment ', 77), (' oil and gas properties ', 70), (' investment property ', 62), (' property ', 50), (' Exploration and evaluation assets', 48)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' Exploration and evaluation assets', 43), (' investment property ', 33), ('plant property equipment ', 29), (' property plant equipment ', 29), (' oil and gas properties ', 29), (' plant and equipment ', 27), (' property ', 26)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = investment in subsidiaries , res_fuzz_match = [(' investment property ', 56), ('plant property equipment ', 32), (' property plant equipment ', 32), (' plant and equipment ', 31), (' Exploration and evaluation assets', 31), (' oil and gas properties ', 28), (' property ', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' oil and gas properties ', 31), (' plant and equipment ', 27), (' property ', 27), (' investment property ', 18), ('plant property equipment ', 15), (' property plant equipment ', 15), (' Exploration and evaluation assets', 14)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' Exploration and evaluation assets', 49), (' investment property ', 40), ('plant property equipment ', 34), (' property plant equipment ', 34), (' plant and equipment ', 33), (' oil and gas properties ', 29), (' property ', 26)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' Exploration and evaluation assets', 41), (' plant and equipment ', 37), (' investment property ', 30), (' property ', 30), (' oil and gas properties ', 26), ('plant property equipment ', 25), (' property plant equipment ', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 489302.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [489302.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', ''] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Construction ', 56), (' Other assets in progress ', 54), (' investment property ', 46), (' Asset Retirement Obligation ', 46), (' Capitalised pre stripping costs ', 46), (' Stripping WIP ', 44), (' Buildings ', 44), (' gross ', 40), (' Freehold land and buildings ', 38), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' land and improvement ', 38), (' under construction ', 38), (' Marine  Development properties ', 38), (' Workshop tooling ', 38), (' Subsea ', 33), (' Mine infrastructure ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Leasehold buildings ', 31), (' Freehold land ', 23), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' Freehold land ', 100), (' Buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings ', 60), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Marine  Development properties ', 27), ('cost ', 25), (' Mining properties ', 23), (' Construction ', 22), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' gross ', 20), (' investment property ', 20), (' Other assets in progress ', 20), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' Freehold land ', 100), (' Buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings ', 60), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Marine  Development properties ', 27), ('cost ', 25), (' Mining properties ', 23), (' Construction ', 22), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' gross ', 20), (' investment property ', 20), (' Other assets in progress ', 20), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' Freehold land ', 100), (' Buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings ', 60), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Marine  Development properties ', 27), ('cost ', 25), (' Mining properties ', 23), (' Construction ', 22), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' gross ', 20), (' investment property ', 20), (' Other assets in progress ', 20), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('cost ', 100), (' Construction ', 56), (' investment property ', 46), (' Asset Retirement Obligation ', 46), (' Assets under construction ', 46), (' gross ', 40), (' Plant and equipment ', 38), (' Mine infrastructure ', 38), (' Capitalised pre stripping costs ', 38), (' Other assets in progress ', 38), (' Building & mine infrastructure ', 38), (' under construction ', 38), (' Marine  Development properties ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land and buildings ', 31), (' land and improvement ', 31), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 31), (' Leasehold buildings ', 23), (' Facilities ', 20), (' Buildings ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' Freehold land ', 100), (' Buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings ', 60), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Marine  Development properties ', 27), ('cost ', 25), (' Mining properties ', 23), (' Construction ', 22), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' gross ', 20), (' investment property ', 20), (' Other assets in progress ', 20), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('cost ', 100), (' Construction ', 56), (' Assets under construction ', 42), (' under construction ', 42), (' gross ', 40), (' investment property ', 33), (' Freehold land and buildings ', 33), (' Plant and equipment ', 33), (' Asset Retirement Obligation ', 33), (' Capitalised pre stripping costs ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Freehold land ', 33), (' Subsea ', 33), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Marine  Development properties ', 25), (' Workshop tooling ', 25), (' Fishing vessels & equipment ', 25), (' Leasehold buildings ', 25), (' Facilities ', 20), (' Mining properties ', 17), (' Pipeline Asset ', 17), (' Buildings ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' Freehold land ', 100), (' Buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings ', 60), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Marine  Development properties ', 27), ('cost ', 25), (' Mining properties ', 23), (' Construction ', 22), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' gross ', 20), (' investment property ', 20), (' Other assets in progress ', 20), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('cost ', 100), (' Construction ', 56), (' Assets under construction ', 46), (' Other assets in progress ', 46), (' under construction ', 46), (' gross ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Mine infrastructure ', 38), (' Capitalised pre stripping costs ', 38), (' land and improvement ', 38), (' Building & mine infrastructure ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' investment property ', 31), (' Plant and equipment ', 31), (' Workshop tooling ', 31), (' Freehold land ', 23), (' Marine  Development properties ', 23), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23), (' Mining properties ', 15), (' Leasehold buildings ', 15), (' Buildings ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' Freehold land ', 100), (' Buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings ', 60), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Marine  Development properties ', 27), ('cost ', 25), (' Mining properties ', 23), (' Construction ', 22), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' gross ', 20), (' investment property ', 20), (' Other assets in progress ', 20), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [(' land and improvement ', 60), (' Facilities ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Marine  Development properties ', 41), (' investment property ', 40), (' Buildings ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Assets under construction ', 34), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' Freehold land ', 100), (' Buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings ', 60), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Marine  Development properties ', 27), ('cost ', 25), (' Mining properties ', 23), (' Construction ', 22), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' gross ', 20), (' investment property ', 20), (' Other assets in progress ', 20), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [(' land and improvement ', 60), (' Mining properties ', 54), (' Plant and equipment ', 53), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Freehold land ', 46), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' Assets under construction ', 43), (' Asset Retirement Obligation ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' Freehold land ', 100), (' Buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings ', 60), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Marine  Development properties ', 27), ('cost ', 25), (' Mining properties ', 23), (' Construction ', 22), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' gross ', 20), (' investment property ', 20), (' Other assets in progress ', 20), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), ('cost ', 50), (' Capitalised pre stripping costs ', 46), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' gross ', 40), (' investment property ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), (' Construction ', 22), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' Freehold land ', 100), (' Buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings ', 60), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Marine  Development properties ', 27), ('cost ', 25), (' Mining properties ', 23), (' Construction ', 22), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' gross ', 20), (' investment property ', 20), (' Other assets in progress ', 20), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Mine infrastructure ', 44), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Assets under construction ', 38), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' Workshop tooling ', 23), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' Freehold land ', 100), (' Buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings ', 60), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Marine  Development properties ', 27), ('cost ', 25), (' Mining properties ', 23), (' Construction ', 22), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' gross ', 20), (' investment property ', 20), (' Other assets in progress ', 20), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Other assets in progress ', 40), (' Buildings ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Marine  Development properties ', 38), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Facilities ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' Freehold land ', 100), (' Buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings ', 60), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Marine  Development properties ', 27), ('cost ', 25), (' Mining properties ', 23), (' Construction ', 22), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' gross ', 20), (' investment property ', 20), (' Other assets in progress ', 20), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' Facilities ', 40), (' Assets under construction ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' gross ', 20), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' Freehold land ', 100), (' Buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings ', 60), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Marine  Development properties ', 27), ('cost ', 25), (' Mining properties ', 23), (' Construction ', 22), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' gross ', 20), (' investment property ', 20), (' Other assets in progress ', 20), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [(' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Other assets in progress ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' investment property ', 27), (' Marine  Development properties ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' Freehold land ', 100), (' Buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings ', 60), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Marine  Development properties ', 27), ('cost ', 25), (' Mining properties ', 23), (' Construction ', 22), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' gross ', 20), (' investment property ', 20), (' Other assets in progress ', 20), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Other assets in progress ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' investment property ', 27), (' Marine  Development properties ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [(' Freehold land and buildings ', 100), (' Freehold land ', 100), (' Buildings ', 100), (' land and improvement ', 69), (' Plant and equipment ', 67), (' Leasehold buildings ', 60), (' Facilities ', 40), (' Workshop tooling ', 38), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 34), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Marine  Development properties ', 27), ('cost ', 25), (' Mining properties ', 23), (' Construction ', 22), (' Mine infrastructure ', 22), (' Stripping WIP ', 22), (' gross ', 20), (' investment property ', 20), (' Other assets in progress ', 20), (' Capitalised pre stripping costs ', 17), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Construction ', 56), (' Other assets in progress ', 54), (' investment property ', 46), (' Asset Retirement Obligation ', 46), (' Capitalised pre stripping costs ', 46), (' Stripping WIP ', 44), (' Buildings ', 44), (' gross ', 40), (' Freehold land and buildings ', 38), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' land and improvement ', 38), (' under construction ', 38), (' Marine  Development properties ', 38), (' Workshop tooling ', 38), (' Subsea ', 33), (' Mine infrastructure ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Leasehold buildings ', 31), (' Freehold land ', 23), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Mining properties ', 48), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' investment property ', 41), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), ('cost ', 25), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Mining properties ', 48), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' investment property ', 41), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), ('cost ', 25), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Mining properties ', 48), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' investment property ', 41), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), ('cost ', 25), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('cost ', 100), (' Construction ', 56), (' investment property ', 46), (' Asset Retirement Obligation ', 46), (' Assets under construction ', 46), (' gross ', 40), (' Plant and equipment ', 38), (' Mine infrastructure ', 38), (' Capitalised pre stripping costs ', 38), (' Other assets in progress ', 38), (' Building & mine infrastructure ', 38), (' under construction ', 38), (' Marine  Development properties ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land and buildings ', 31), (' land and improvement ', 31), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 31), (' Leasehold buildings ', 23), (' Facilities ', 20), (' Buildings ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Mining properties ', 48), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' investment property ', 41), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), ('cost ', 25), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('cost ', 100), (' Construction ', 56), (' Assets under construction ', 42), (' under construction ', 42), (' gross ', 40), (' investment property ', 33), (' Freehold land and buildings ', 33), (' Plant and equipment ', 33), (' Asset Retirement Obligation ', 33), (' Capitalised pre stripping costs ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Freehold land ', 33), (' Subsea ', 33), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Marine  Development properties ', 25), (' Workshop tooling ', 25), (' Fishing vessels & equipment ', 25), (' Leasehold buildings ', 25), (' Facilities ', 20), (' Mining properties ', 17), (' Pipeline Asset ', 17), (' Buildings ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Mining properties ', 48), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' investment property ', 41), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), ('cost ', 25), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('cost ', 100), (' Construction ', 56), (' Assets under construction ', 46), (' Other assets in progress ', 46), (' under construction ', 46), (' gross ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Mine infrastructure ', 38), (' Capitalised pre stripping costs ', 38), (' land and improvement ', 38), (' Building & mine infrastructure ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' investment property ', 31), (' Plant and equipment ', 31), (' Workshop tooling ', 31), (' Freehold land ', 23), (' Marine  Development properties ', 23), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23), (' Mining properties ', 15), (' Leasehold buildings ', 15), (' Buildings ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Mining properties ', 48), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' investment property ', 41), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), ('cost ', 25), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [(' land and improvement ', 60), (' Facilities ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Marine  Development properties ', 41), (' investment property ', 40), (' Buildings ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Assets under construction ', 34), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Mining properties ', 48), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' investment property ', 41), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), ('cost ', 25), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [(' land and improvement ', 60), (' Mining properties ', 54), (' Plant and equipment ', 53), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Freehold land ', 46), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' Assets under construction ', 43), (' Asset Retirement Obligation ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Mining properties ', 48), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' investment property ', 41), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), ('cost ', 25), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), ('cost ', 50), (' Capitalised pre stripping costs ', 46), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' gross ', 40), (' investment property ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), (' Construction ', 22), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Mining properties ', 48), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' investment property ', 41), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), ('cost ', 25), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Mine infrastructure ', 44), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Assets under construction ', 38), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' Workshop tooling ', 23), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Mining properties ', 48), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' investment property ', 41), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), ('cost ', 25), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Other assets in progress ', 40), (' Buildings ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Marine  Development properties ', 38), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Facilities ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Mining properties ', 48), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' investment property ', 41), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), ('cost ', 25), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' Facilities ', 40), (' Assets under construction ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' gross ', 20), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Mining properties ', 48), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' investment property ', 41), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), ('cost ', 25), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [(' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Other assets in progress ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' investment property ', 27), (' Marine  Development properties ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Mining properties ', 48), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' investment property ', 41), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), ('cost ', 25), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Other assets in progress ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' investment property ', 27), (' Marine  Development properties ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Mining properties ', 48), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' investment property ', 41), (' Asset Retirement Obligation ', 41), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), ('cost ', 25), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Construction ', 56), (' Other assets in progress ', 54), (' investment property ', 46), (' Asset Retirement Obligation ', 46), (' Capitalised pre stripping costs ', 46), (' Stripping WIP ', 44), (' Buildings ', 44), (' gross ', 40), (' Freehold land and buildings ', 38), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' land and improvement ', 38), (' under construction ', 38), (' Marine  Development properties ', 38), (' Workshop tooling ', 38), (' Subsea ', 33), (' Mine infrastructure ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Leasehold buildings ', 31), (' Freehold land ', 23), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Facilities ', 60), (' land and improvement ', 53), ('cost ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Facilities ', 60), (' land and improvement ', 53), ('cost ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Facilities ', 60), (' land and improvement ', 53), ('cost ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('cost ', 100), (' Construction ', 56), (' investment property ', 46), (' Asset Retirement Obligation ', 46), (' Assets under construction ', 46), (' gross ', 40), (' Plant and equipment ', 38), (' Mine infrastructure ', 38), (' Capitalised pre stripping costs ', 38), (' Other assets in progress ', 38), (' Building & mine infrastructure ', 38), (' under construction ', 38), (' Marine  Development properties ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land and buildings ', 31), (' land and improvement ', 31), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 31), (' Leasehold buildings ', 23), (' Facilities ', 20), (' Buildings ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Facilities ', 60), (' land and improvement ', 53), ('cost ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('cost ', 100), (' Construction ', 56), (' Assets under construction ', 42), (' under construction ', 42), (' gross ', 40), (' investment property ', 33), (' Freehold land and buildings ', 33), (' Plant and equipment ', 33), (' Asset Retirement Obligation ', 33), (' Capitalised pre stripping costs ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Freehold land ', 33), (' Subsea ', 33), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Marine  Development properties ', 25), (' Workshop tooling ', 25), (' Fishing vessels & equipment ', 25), (' Leasehold buildings ', 25), (' Facilities ', 20), (' Mining properties ', 17), (' Pipeline Asset ', 17), (' Buildings ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Facilities ', 60), (' land and improvement ', 53), ('cost ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('cost ', 100), (' Construction ', 56), (' Assets under construction ', 46), (' Other assets in progress ', 46), (' under construction ', 46), (' gross ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Mine infrastructure ', 38), (' Capitalised pre stripping costs ', 38), (' land and improvement ', 38), (' Building & mine infrastructure ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' investment property ', 31), (' Plant and equipment ', 31), (' Workshop tooling ', 31), (' Freehold land ', 23), (' Marine  Development properties ', 23), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23), (' Mining properties ', 15), (' Leasehold buildings ', 15), (' Buildings ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Facilities ', 60), (' land and improvement ', 53), ('cost ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [(' land and improvement ', 60), (' Facilities ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Marine  Development properties ', 41), (' investment property ', 40), (' Buildings ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Assets under construction ', 34), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Facilities ', 60), (' land and improvement ', 53), ('cost ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [(' land and improvement ', 60), (' Mining properties ', 54), (' Plant and equipment ', 53), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Freehold land ', 46), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' Assets under construction ', 43), (' Asset Retirement Obligation ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Facilities ', 60), (' land and improvement ', 53), ('cost ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), ('cost ', 50), (' Capitalised pre stripping costs ', 46), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' gross ', 40), (' investment property ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), (' Construction ', 22), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Facilities ', 60), (' land and improvement ', 53), ('cost ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Mine infrastructure ', 44), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Assets under construction ', 38), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' Workshop tooling ', 23), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Facilities ', 60), (' land and improvement ', 53), ('cost ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Other assets in progress ', 40), (' Buildings ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Marine  Development properties ', 38), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Facilities ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Facilities ', 60), (' land and improvement ', 53), ('cost ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' Facilities ', 40), (' Assets under construction ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' gross ', 20), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Facilities ', 60), (' land and improvement ', 53), ('cost ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [(' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Other assets in progress ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' investment property ', 27), (' Marine  Development properties ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Facilities ', 60), (' land and improvement ', 53), ('cost ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Other assets in progress ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' investment property ', 27), (' Marine  Development properties ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [(' Plant and equipment ', 67), (' Facilities ', 60), (' land and improvement ', 53), ('cost ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 24), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Construction ', 56), (' Other assets in progress ', 54), (' investment property ', 46), (' Asset Retirement Obligation ', 46), (' Capitalised pre stripping costs ', 46), (' Stripping WIP ', 44), (' Buildings ', 44), (' gross ', 40), (' Freehold land and buildings ', 38), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' land and improvement ', 38), (' under construction ', 38), (' Marine  Development properties ', 38), (' Workshop tooling ', 38), (' Subsea ', 33), (' Mine infrastructure ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Leasehold buildings ', 31), (' Freehold land ', 23), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 55), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' investment property ', 47), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Marine  Development properties ', 43), (' Plant and equipment ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Construction ', 33), (' Mine infrastructure ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' under construction ', 27), ('cost ', 25), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Freehold land and buildings ', 19), (' Freehold land ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 55), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' investment property ', 47), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Marine  Development properties ', 43), (' Plant and equipment ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Construction ', 33), (' Mine infrastructure ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' under construction ', 27), ('cost ', 25), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Freehold land and buildings ', 19), (' Freehold land ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 55), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' investment property ', 47), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Marine  Development properties ', 43), (' Plant and equipment ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Construction ', 33), (' Mine infrastructure ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' under construction ', 27), ('cost ', 25), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Freehold land and buildings ', 19), (' Freehold land ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('cost ', 100), (' Construction ', 56), (' investment property ', 46), (' Asset Retirement Obligation ', 46), (' Assets under construction ', 46), (' gross ', 40), (' Plant and equipment ', 38), (' Mine infrastructure ', 38), (' Capitalised pre stripping costs ', 38), (' Other assets in progress ', 38), (' Building & mine infrastructure ', 38), (' under construction ', 38), (' Marine  Development properties ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land and buildings ', 31), (' land and improvement ', 31), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 31), (' Leasehold buildings ', 23), (' Facilities ', 20), (' Buildings ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 55), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' investment property ', 47), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Marine  Development properties ', 43), (' Plant and equipment ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Construction ', 33), (' Mine infrastructure ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' under construction ', 27), ('cost ', 25), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Freehold land and buildings ', 19), (' Freehold land ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('cost ', 100), (' Construction ', 56), (' Assets under construction ', 42), (' under construction ', 42), (' gross ', 40), (' investment property ', 33), (' Freehold land and buildings ', 33), (' Plant and equipment ', 33), (' Asset Retirement Obligation ', 33), (' Capitalised pre stripping costs ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Freehold land ', 33), (' Subsea ', 33), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Marine  Development properties ', 25), (' Workshop tooling ', 25), (' Fishing vessels & equipment ', 25), (' Leasehold buildings ', 25), (' Facilities ', 20), (' Mining properties ', 17), (' Pipeline Asset ', 17), (' Buildings ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 55), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' investment property ', 47), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Marine  Development properties ', 43), (' Plant and equipment ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Construction ', 33), (' Mine infrastructure ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' under construction ', 27), ('cost ', 25), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Freehold land and buildings ', 19), (' Freehold land ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('cost ', 100), (' Construction ', 56), (' Assets under construction ', 46), (' Other assets in progress ', 46), (' under construction ', 46), (' gross ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Mine infrastructure ', 38), (' Capitalised pre stripping costs ', 38), (' land and improvement ', 38), (' Building & mine infrastructure ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' investment property ', 31), (' Plant and equipment ', 31), (' Workshop tooling ', 31), (' Freehold land ', 23), (' Marine  Development properties ', 23), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23), (' Mining properties ', 15), (' Leasehold buildings ', 15), (' Buildings ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 55), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' investment property ', 47), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Marine  Development properties ', 43), (' Plant and equipment ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Construction ', 33), (' Mine infrastructure ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' under construction ', 27), ('cost ', 25), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Freehold land and buildings ', 19), (' Freehold land ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [(' land and improvement ', 60), (' Facilities ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Marine  Development properties ', 41), (' investment property ', 40), (' Buildings ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Assets under construction ', 34), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 55), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' investment property ', 47), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Marine  Development properties ', 43), (' Plant and equipment ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Construction ', 33), (' Mine infrastructure ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' under construction ', 27), ('cost ', 25), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Freehold land and buildings ', 19), (' Freehold land ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [(' land and improvement ', 60), (' Mining properties ', 54), (' Plant and equipment ', 53), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Freehold land ', 46), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' Assets under construction ', 43), (' Asset Retirement Obligation ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 55), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' investment property ', 47), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Marine  Development properties ', 43), (' Plant and equipment ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Construction ', 33), (' Mine infrastructure ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' under construction ', 27), ('cost ', 25), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Freehold land and buildings ', 19), (' Freehold land ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), ('cost ', 50), (' Capitalised pre stripping costs ', 46), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' gross ', 40), (' investment property ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), (' Construction ', 22), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 55), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' investment property ', 47), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Marine  Development properties ', 43), (' Plant and equipment ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Construction ', 33), (' Mine infrastructure ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' under construction ', 27), ('cost ', 25), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Freehold land and buildings ', 19), (' Freehold land ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Mine infrastructure ', 44), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Assets under construction ', 38), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' Workshop tooling ', 23), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 55), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' investment property ', 47), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Marine  Development properties ', 43), (' Plant and equipment ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Construction ', 33), (' Mine infrastructure ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' under construction ', 27), ('cost ', 25), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Freehold land and buildings ', 19), (' Freehold land ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Other assets in progress ', 40), (' Buildings ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Marine  Development properties ', 38), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Facilities ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 55), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' investment property ', 47), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Marine  Development properties ', 43), (' Plant and equipment ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Construction ', 33), (' Mine infrastructure ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' under construction ', 27), ('cost ', 25), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Freehold land and buildings ', 19), (' Freehold land ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' Facilities ', 40), (' Assets under construction ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' gross ', 20), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 55), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' investment property ', 47), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Marine  Development properties ', 43), (' Plant and equipment ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Construction ', 33), (' Mine infrastructure ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' under construction ', 27), ('cost ', 25), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Freehold land and buildings ', 19), (' Freehold land ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [(' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Other assets in progress ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' investment property ', 27), (' Marine  Development properties ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 55), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' investment property ', 47), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Marine  Development properties ', 43), (' Plant and equipment ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Construction ', 33), (' Mine infrastructure ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' under construction ', 27), ('cost ', 25), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Freehold land and buildings ', 19), (' Freehold land ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Other assets in progress ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' investment property ', 27), (' Marine  Development properties ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 55), (' Mining properties ', 54), (' Capitalised pre stripping costs ', 52), (' investment property ', 47), (' Asset Retirement Obligation ', 47), (' land and improvement ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Marine  Development properties ', 43), (' Plant and equipment ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Construction ', 33), (' Mine infrastructure ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' under construction ', 27), ('cost ', 25), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Freehold land and buildings ', 19), (' Freehold land ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Construction ', 56), (' Other assets in progress ', 54), (' investment property ', 46), (' Asset Retirement Obligation ', 46), (' Capitalised pre stripping costs ', 46), (' Stripping WIP ', 44), (' Buildings ', 44), (' gross ', 40), (' Freehold land and buildings ', 38), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' land and improvement ', 38), (' under construction ', 38), (' Marine  Development properties ', 38), (' Workshop tooling ', 38), (' Subsea ', 33), (' Mine infrastructure ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Leasehold buildings ', 31), (' Freehold land ', 23), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Leasehold buildings ', 38), (' Construction ', 33), (' Fishing vessels & equipment ', 32), (' investment property ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Marine  Development properties ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Buildings ', 20), (' Subsea ', 17), (' gross ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Leasehold buildings ', 38), (' Construction ', 33), (' Fishing vessels & equipment ', 32), (' investment property ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Marine  Development properties ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Buildings ', 20), (' Subsea ', 17), (' gross ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Leasehold buildings ', 38), (' Construction ', 33), (' Fishing vessels & equipment ', 32), (' investment property ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Marine  Development properties ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Buildings ', 20), (' Subsea ', 17), (' gross ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('cost ', 100), (' Construction ', 56), (' investment property ', 46), (' Asset Retirement Obligation ', 46), (' Assets under construction ', 46), (' gross ', 40), (' Plant and equipment ', 38), (' Mine infrastructure ', 38), (' Capitalised pre stripping costs ', 38), (' Other assets in progress ', 38), (' Building & mine infrastructure ', 38), (' under construction ', 38), (' Marine  Development properties ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land and buildings ', 31), (' land and improvement ', 31), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 31), (' Leasehold buildings ', 23), (' Facilities ', 20), (' Buildings ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Leasehold buildings ', 38), (' Construction ', 33), (' Fishing vessels & equipment ', 32), (' investment property ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Marine  Development properties ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Buildings ', 20), (' Subsea ', 17), (' gross ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('cost ', 100), (' Construction ', 56), (' Assets under construction ', 42), (' under construction ', 42), (' gross ', 40), (' investment property ', 33), (' Freehold land and buildings ', 33), (' Plant and equipment ', 33), (' Asset Retirement Obligation ', 33), (' Capitalised pre stripping costs ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Freehold land ', 33), (' Subsea ', 33), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Marine  Development properties ', 25), (' Workshop tooling ', 25), (' Fishing vessels & equipment ', 25), (' Leasehold buildings ', 25), (' Facilities ', 20), (' Mining properties ', 17), (' Pipeline Asset ', 17), (' Buildings ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Leasehold buildings ', 38), (' Construction ', 33), (' Fishing vessels & equipment ', 32), (' investment property ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Marine  Development properties ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Buildings ', 20), (' Subsea ', 17), (' gross ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('cost ', 100), (' Construction ', 56), (' Assets under construction ', 46), (' Other assets in progress ', 46), (' under construction ', 46), (' gross ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Mine infrastructure ', 38), (' Capitalised pre stripping costs ', 38), (' land and improvement ', 38), (' Building & mine infrastructure ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' investment property ', 31), (' Plant and equipment ', 31), (' Workshop tooling ', 31), (' Freehold land ', 23), (' Marine  Development properties ', 23), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23), (' Mining properties ', 15), (' Leasehold buildings ', 15), (' Buildings ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Leasehold buildings ', 38), (' Construction ', 33), (' Fishing vessels & equipment ', 32), (' investment property ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Marine  Development properties ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Buildings ', 20), (' Subsea ', 17), (' gross ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [(' land and improvement ', 60), (' Facilities ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Marine  Development properties ', 41), (' investment property ', 40), (' Buildings ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Assets under construction ', 34), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Leasehold buildings ', 38), (' Construction ', 33), (' Fishing vessels & equipment ', 32), (' investment property ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Marine  Development properties ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Buildings ', 20), (' Subsea ', 17), (' gross ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [(' land and improvement ', 60), (' Mining properties ', 54), (' Plant and equipment ', 53), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Freehold land ', 46), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' Assets under construction ', 43), (' Asset Retirement Obligation ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Leasehold buildings ', 38), (' Construction ', 33), (' Fishing vessels & equipment ', 32), (' investment property ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Marine  Development properties ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Buildings ', 20), (' Subsea ', 17), (' gross ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), ('cost ', 50), (' Capitalised pre stripping costs ', 46), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' gross ', 40), (' investment property ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), (' Construction ', 22), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Leasehold buildings ', 38), (' Construction ', 33), (' Fishing vessels & equipment ', 32), (' investment property ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Marine  Development properties ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Buildings ', 20), (' Subsea ', 17), (' gross ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Mine infrastructure ', 44), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Assets under construction ', 38), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' Workshop tooling ', 23), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Leasehold buildings ', 38), (' Construction ', 33), (' Fishing vessels & equipment ', 32), (' investment property ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Marine  Development properties ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Buildings ', 20), (' Subsea ', 17), (' gross ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Other assets in progress ', 40), (' Buildings ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Marine  Development properties ', 38), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Facilities ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Leasehold buildings ', 38), (' Construction ', 33), (' Fishing vessels & equipment ', 32), (' investment property ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Marine  Development properties ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Buildings ', 20), (' Subsea ', 17), (' gross ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' Facilities ', 40), (' Assets under construction ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' gross ', 20), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Leasehold buildings ', 38), (' Construction ', 33), (' Fishing vessels & equipment ', 32), (' investment property ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Marine  Development properties ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Buildings ', 20), (' Subsea ', 17), (' gross ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [(' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Other assets in progress ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' investment property ', 27), (' Marine  Development properties ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Leasehold buildings ', 38), (' Construction ', 33), (' Fishing vessels & equipment ', 32), (' investment property ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Marine  Development properties ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Buildings ', 20), (' Subsea ', 17), (' gross ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Other assets in progress ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' investment property ', 27), (' Marine  Development properties ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 40), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Leasehold buildings ', 38), (' Construction ', 33), (' Fishing vessels & equipment ', 32), (' investment property ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' under construction ', 31), (' Marine  Development properties ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' Buildings ', 20), (' Subsea ', 17), (' gross ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Construction ', 56), (' Other assets in progress ', 54), (' investment property ', 46), (' Asset Retirement Obligation ', 46), (' Capitalised pre stripping costs ', 46), (' Stripping WIP ', 44), (' Buildings ', 44), (' gross ', 40), (' Freehold land and buildings ', 38), (' Plant and equipment ', 38), (' Assets under construction ', 38), (' land and improvement ', 38), (' under construction ', 38), (' Marine  Development properties ', 38), (' Workshop tooling ', 38), (' Subsea ', 33), (' Mine infrastructure ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Leasehold buildings ', 31), (' Freehold land ', 23), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('cost ', 100), (' Construction ', 56), (' investment property ', 46), (' Asset Retirement Obligation ', 46), (' Assets under construction ', 46), (' gross ', 40), (' Plant and equipment ', 38), (' Mine infrastructure ', 38), (' Capitalised pre stripping costs ', 38), (' Other assets in progress ', 38), (' Building & mine infrastructure ', 38), (' under construction ', 38), (' Marine  Development properties ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land and buildings ', 31), (' land and improvement ', 31), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 31), (' Leasehold buildings ', 23), (' Facilities ', 20), (' Buildings ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('cost ', 100), (' Construction ', 56), (' Assets under construction ', 42), (' under construction ', 42), (' gross ', 40), (' investment property ', 33), (' Freehold land and buildings ', 33), (' Plant and equipment ', 33), (' Asset Retirement Obligation ', 33), (' Capitalised pre stripping costs ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Freehold land ', 33), (' Subsea ', 33), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Marine  Development properties ', 25), (' Workshop tooling ', 25), (' Fishing vessels & equipment ', 25), (' Leasehold buildings ', 25), (' Facilities ', 20), (' Mining properties ', 17), (' Pipeline Asset ', 17), (' Buildings ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('cost ', 100), (' Construction ', 56), (' Assets under construction ', 46), (' Other assets in progress ', 46), (' under construction ', 46), (' gross ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Mine infrastructure ', 38), (' Capitalised pre stripping costs ', 38), (' land and improvement ', 38), (' Building & mine infrastructure ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' investment property ', 31), (' Plant and equipment ', 31), (' Workshop tooling ', 31), (' Freehold land ', 23), (' Marine  Development properties ', 23), (' Pipeline Asset ', 23), (' Fishing vessels & equipment ', 23), (' Mining properties ', 15), (' Leasehold buildings ', 15), (' Buildings ', 0), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [(' land and improvement ', 60), (' Facilities ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Marine  Development properties ', 41), (' investment property ', 40), (' Buildings ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Assets under construction ', 34), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [(' land and improvement ', 60), (' Mining properties ', 54), (' Plant and equipment ', 53), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Freehold land ', 46), (' Marine  Development properties ', 45), (' Freehold land and buildings ', 43), (' Assets under construction ', 43), (' Asset Retirement Obligation ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Pipeline Asset ', 38), (' Construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), ('cost ', 50), (' Capitalised pre stripping costs ', 46), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' gross ', 40), (' investment property ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), (' Construction ', 22), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Mine infrastructure ', 44), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Assets under construction ', 38), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' Workshop tooling ', 23), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Other assets in progress ', 40), (' Buildings ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Marine  Development properties ', 38), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Facilities ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [(' land and improvement ', 60), (' Plant and equipment ', 53), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 43), (' Building & mine infrastructure ', 42), (' Facilities ', 40), (' Assets under construction ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' gross ', 20), (' Buildings ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [(' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Other assets in progress ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' investment property ', 27), (' Marine  Development properties ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [(' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land and buildings ', 32), (' Capitalised pre stripping costs ', 32), (' Other assets in progress ', 32), (' Building & mine infrastructure ', 32), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' investment property ', 27), (' Marine  Development properties ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 70, 71, 72, 73, 74, 75], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [273216.0, 273216.0, 32769.0, 32769.0, -7998.0, -7998.0, 0.0, 0.0, -879.0, -879.0, 297108.0, 297108.0, 22269.0, 3602.0, -1573.0, 0.0, -166.0, 24132.0, 250947.0, 272976.0, 5917.0, 330.0, -2817.0, 0.0, -221.0, 3209.0, 105335.0, 10274.0, -12191.0, 0.0, -938.0, 102480.0, 8084.0, 8084.0, 3821.0, 3821.0, 0.0, 0.0, -13.0, -13.0, 177.0, 177.0, 12069.0, 12069.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8084.0, 12069.0, 255818.0, 71970.0, -86129.0, 0.0, -3271.0, 238388.0, 648370.0, 119164.0, -109135.0, -13.0, -5132.0, 653254.0], 'label': ['Cost or At1 April 2022', 'Freehold land and buildings', 'Cost or Additions', 'Freehold land and buildings', 'Cost or Disposals', 'Freehold land and buildings', 'Cost or Transfer', 'Freehold land and buildings', 'Cost or Exchange', 'Freehold land and buildings', 'Cost or At31 March 2023', 'Freehold land and buildings', 'Freehold land and buildings', 'Freehold land and buildings', 'Freehold land and buildings', 'Freehold land and buildings', 'Freehold land and buildings', 'Freehold land and buildings', 'Freehold land and buildings', 'Freehold land and buildings', 'Cost or At1 April 2022', 'Cost or Additions', 'Cost or Disposals', 'Cost or Transfer', 'Cost or Exchange', 'Cost or At31 March 2023', 'Cost or At1 April 2022', 'Cost or Additions', 'Cost or Disposals', 'Cost or Transfer', 'Cost or Exchange', 'Cost or At31 March 2023', 'Cost or At1 April 2022', 'Capital work-in- progress', 'Cost or Additions', 'Capital work-in- progress', 'Cost or Disposals', 'Capital work-in- progress', 'Cost or Transfer', 'Capital work-in- progress', 'Cost or Exchange', 'Capital work-in- progress', 'Cost or At31 March 2023', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Capital work-in- progress', 'Cost or At1 April 2022', 'Cost or Additions', 'Cost or Disposals', 'Cost or Transfer', 'Cost or Exchange', 'Cost or At31 March 2023', 'Cost or At1 April 2022', 'Cost or Additions', 'Cost or Disposals', 'Cost or Transfer', 'Cost or Exchange', 'Cost or At31 March 2023'], 'year': [], 'colname_found': ['rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 40), ('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 31), ('net book value', 24), ('depreciatio', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('depreciatio', 29), ('accumulated depreciation', 25), ('net value', 25), ('net book value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('net value', 38), ('net book value', 32), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings , res_fuzz_match = [('net value', 38), ('net book value', 31), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 40), ('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 31), ('net book value', 24), ('depreciatio', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('depreciatio', 29), ('accumulated depreciation', 25), ('net value', 25), ('net book value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('net value', 38), ('net book value', 32), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = leasehold improve- ments , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 40), ('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 31), ('net book value', 24), ('depreciatio', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('depreciatio', 29), ('accumulated depreciation', 25), ('net value', 25), ('net book value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('net value', 38), ('net book value', 32), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = plant, machinery, and loose , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 40), ('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 31), ('net book value', 24), ('depreciatio', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('depreciatio', 29), ('accumulated depreciation', 25), ('net value', 25), ('net book value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('net value', 38), ('net book value', 32), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = capital work-in- progress , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 40), ('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 31), ('net book value', 31), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 31), ('net book value', 31), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 31), ('net book value', 31), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 31), ('net book value', 24), ('depreciatio', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 31), ('net book value', 31), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('depreciatio', 29), ('accumulated depreciation', 25), ('net value', 25), ('net book value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 31), ('net book value', 31), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('net value', 38), ('net book value', 32), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 31), ('net book value', 31), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 31), ('net book value', 31), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 31), ('net book value', 31), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 31), ('net book value', 31), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 31), ('net book value', 31), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 31), ('net book value', 31), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 31), ('net book value', 31), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 31), ('net book value', 31), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = rental machines , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 31), ('net book value', 31), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 40), ('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or transfer , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 31), ('net book value', 24), ('depreciatio', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or exchange , res_fuzz_match = [('depreciatio', 29), ('accumulated depreciation', 25), ('net value', 25), ('net book value', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = cost or at31 march 2023 , res_fuzz_match = [('net value', 38), ('net book value', 32), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at1 april 2022 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation charge for the year , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment transfer , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment exchange differences , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment at31 m larch 2023 , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2022 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = net book value at31 march 2023 , res_fuzz_match = [('net book value', 100), ('net value', 62), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13, 26, 27, 40, 41, 54, 55, 68, 69, 82, 83], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [250947.0, 272976.0, 1419.0, 1308.0, 32844.0, 33669.0, 8084.0, 12069.0, 184125.0, 169280.0, 477419.0, 489302.0], 'label': ['Net book value At31 March 2022', 'Net book value At31 March 2023', 'Net book value At31 March 2022', 'Net book value At31 March 2023', 'Net book value At31 March 2022', 'Net book value At31 March 2023', 'Net book value At31 March 2022', 'Net book value At31 March 2023', 'Net book value At31 March 2022', 'Net book value At31 March 2023', 'Net book value At31 March 2022', 'Net book value At31 March 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables ', 46), (' unbilled ', 40), (' government subsidies receivable ', 38), (' trade and other receivables', 38), (' trade receivables ', 35), (' receivable ', 33), (' billed ', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' unbilled ', 60), (' trade and other receivables', 54), ('account receivables ', 50), (' trade receivables ', 50), (' receivable ', 50), (' billed ', 50), (' government subsidies receivable ', 34)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = current tax receivable , res_fuzz_match = [(' receivable ', 100), (' trade receivables ', 75), ('account receivables ', 64), (' trade and other receivables', 61), (' government subsidies receivable ', 56), (' unbilled ', 40), (' billed ', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4], 'score': 100, 'value': 214941.0, 'line_item_label': ['Trade and other receivables', 'Current tax receivable'], 'note_numbers': ['7', nan], 'line_item_value': [214941.0, 0.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables ', 46), (' unbilled ', 40), (' government subsidies receivable ', 38), (' trade and other receivables', 38), (' trade receivables ', 35), (' receivable ', 33), (' billed ', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' unbilled ', 60), (' trade and other receivables', 54), ('account receivables ', 50), (' trade receivables ', 50), (' receivable ', 50), (' billed ', 50), (' government subsidies receivable ', 34)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = current tax receivable , res_fuzz_match = [(' receivable ', 100), (' trade receivables ', 75), ('account receivables ', 64), (' trade and other receivables', 61), (' government subsidies receivable ', 56), (' unbilled ', 40), (' billed ', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4], 'score': 100, 'value': 192210.0, 'line_item_label': ['Trade and other receivables', 'Current tax receivable'], 'note_numbers': ['7', nan], 'line_item_value': [191673.0, 537.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods ', ' LNG ', ' Condensate ', ' Domgas ', ' Feed gas income ', ' Gas transportation income ', ' Sale of goods - Cars ', ' Sale of goods - Motorcycles ', ' Sale of goods - Marine ', ' Sale of goods - Spareparts ', ' Total Revenue ', ' Goods sold to customer from warehouse ', ' Goods sold to customer direct from supplier ', ' revenue from continuing activities ', ' revenue form contracts with customers ', ' hedge loss / gain ', ' contribution from joint venture']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities', 39), (' revenue from contracts with customers ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [(' Sales revenue ', 100), (' Revenue ', 71), (' net sales ', 63), (' sale of products ', 61), (' Sale of coal ', 50), ('revenue from operations ', 44), (' revenue from contracts with customers ', 33), (' revenue from continuing activities', 33), (' from trading business ', 31), (' transmission and distribution business ', 26)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [('revenue from operations ', 68), (' Sales revenue ', 50), (' revenue from contracts with customers ', 49), (' revenue from continuing activities', 44), (' from trading business ', 40), (' Revenue ', 39), (' sale of products ', 38), (' net sales ', 30), (' transmission and distribution business ', 30), (' Sale of coal ', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('revenue from operations ', 71), (' Revenue ', 67), (' revenue from continuing activities', 54), (' Sales revenue ', 52), (' revenue from contracts with customers ', 45), (' sale of products ', 33), (' net sales ', 30), (' from trading business ', 30), (' Sale of coal ', 29), (' transmission and distribution business ', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' Sales revenue ', 78), (' Revenue ', 67), ('revenue from operations ', 43), (' sale of products ', 42), (' net sales ', 40), (' from trading business ', 37), (' revenue from contracts with customers ', 36), (' revenue from continuing activities', 32), (' transmission and distribution business ', 30), (' Sale of coal ', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Sale of coal ', 43), (' sale of products ', 38), (' net sales ', 36), (' from trading business ', 34), (' revenue from continuing activities', 31), (' revenue from contracts with customers ', 30), ('revenue from operations ', 27), (' transmission and distribution business ', 24), (' Sales revenue ', 24), (' Revenue ', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [('revenue from operations ', 41), (' Sales revenue ', 41), (' revenue from contracts with customers ', 40), (' net sales ', 38), (' Sale of coal ', 37), (' revenue from continuing activities', 37), (' sale of products ', 33), (' transmission and distribution business ', 30), (' from trading business ', 30), (' Revenue ', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [(' Sales revenue ', 50), (' net sales ', 38), ('revenue from operations ', 34), (' sale of products ', 32), (' Revenue ', 32), (' transmission and distribution business ', 29), (' revenue from contracts with customers ', 27), (' Sale of coal ', 27), (' from trading business ', 21), (' revenue from continuing activities', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [(' net sales ', 40), (' transmission and distribution business ', 40), ('revenue from operations ', 37), (' Sales revenue ', 36), (' sale of products ', 35), (' revenue from continuing activities', 34), (' Sale of coal ', 32), (' revenue from contracts with customers ', 30), (' from trading business ', 27), (' Revenue ', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [(' revenue from contracts with customers ', 46), (' from trading business ', 45), (' revenue from continuing activities', 44), ('revenue from operations ', 38), (' Sale of coal ', 32), (' sale of products ', 29), (' transmission and distribution business ', 27), (' net sales ', 25), (' Sales revenue ', 22), (' Revenue ', 9)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [(' transmission and distribution business ', 41), (' revenue from continuing activities', 35), ('revenue from operations ', 33), (' Sales revenue ', 32), (' revenue from contracts with customers ', 31), (' net sales ', 29), (' from trading business ', 29), (' sale of products ', 26), (' Revenue ', 25), (' Sale of coal ', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [('revenue from operations ', 43), (' revenue from contracts with customers ', 42), (' from trading business ', 39), (' transmission and distribution business ', 37), (' sale of products ', 36), (' Sales revenue ', 31), (' revenue from continuing activities', 30), (' net sales ', 28), (' Sale of coal ', 27), (' Revenue ', 22)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' from trading business ', 45), (' Sales revenue ', 37), (' transmission and distribution business ', 32), (' Sale of coal ', 32), (' sale of products ', 29), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), (' Revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [(' sale of products ', 43), (' from trading business ', 39), ('revenue from operations ', 38), (' transmission and distribution business ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), (' Sale of coal ', 24), (' Sales revenue ', 22), (' Revenue ', 9)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' revenue from contracts with customers ', 41), (' from trading business ', 38), (' revenue from continuing activities', 38), ('revenue from operations ', 37), (' Sales revenue ', 36), (' sale of products ', 29), (' Revenue ', 29), (' transmission and distribution business ', 28), (' Sale of coal ', 26), (' net sales ', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [(' revenue from contracts with customers ', 39), (' from trading business ', 36), (' revenue from continuing activities', 36), ('revenue from operations ', 35), (' transmission and distribution business ', 31), (' sale of products ', 29), (' Sales revenue ', 29), (' net sales ', 26), (' Revenue ', 22), (' Sale of coal ', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' revenue from contracts with customers ', 43), ('revenue from operations ', 38), (' from trading business ', 38), (' revenue from continuing activities', 35), (' sale of products ', 33), (' transmission and distribution business ', 31), (' Sales revenue ', 29), (' net sales ', 27), (' Sale of coal ', 22), (' Revenue ', 19)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [(' transmission and distribution business ', 39), (' sale of products ', 30), (' revenue from contracts with customers ', 30), (' revenue from continuing activities', 30), (' Revenue ', 29), (' from trading business ', 26), (' Sales revenue ', 21), ('revenue from operations ', 17), (' net sales ', 12), (' Sale of coal ', 12)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [('revenue from operations ', 40), (' revenue from contracts with customers ', 39), (' revenue from continuing activities', 37), (' from trading business ', 36), (' net sales ', 31), (' transmission and distribution business ', 31), (' Sale of coal ', 30), (' Sales revenue ', 29), (' sale of products ', 28), (' Revenue ', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' net sales ', 37), (' revenue from continuing activities', 36), (' revenue from contracts with customers ', 35), (' sale of products ', 32), (' transmission and distribution business ', 30), (' from trading business ', 29), (' Sales revenue ', 27), (' Revenue ', 24), ('revenue from operations ', 23), (' Sale of coal ', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': 100, 'value': 1321840.0, 'line_item_label': ['Revenue', 'Sales revenue'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 1321840.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities', 39), (' revenue from contracts with customers ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [(' Sales revenue ', 100), (' Revenue ', 71), (' net sales ', 63), (' sale of products ', 61), (' Sale of coal ', 50), ('revenue from operations ', 44), (' revenue from contracts with customers ', 33), (' revenue from continuing activities', 33), (' from trading business ', 31), (' transmission and distribution business ', 26)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [('revenue from operations ', 68), (' Sales revenue ', 50), (' revenue from contracts with customers ', 49), (' revenue from continuing activities', 44), (' from trading business ', 40), (' Revenue ', 39), (' sale of products ', 38), (' net sales ', 30), (' transmission and distribution business ', 30), (' Sale of coal ', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('revenue from operations ', 71), (' Revenue ', 67), (' revenue from continuing activities', 54), (' Sales revenue ', 52), (' revenue from contracts with customers ', 45), (' sale of products ', 33), (' net sales ', 30), (' from trading business ', 30), (' Sale of coal ', 29), (' transmission and distribution business ', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' Sales revenue ', 78), (' Revenue ', 67), ('revenue from operations ', 43), (' sale of products ', 42), (' net sales ', 40), (' from trading business ', 37), (' revenue from contracts with customers ', 36), (' revenue from continuing activities', 32), (' transmission and distribution business ', 30), (' Sale of coal ', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Sale of coal ', 43), (' sale of products ', 38), (' net sales ', 36), (' from trading business ', 34), (' revenue from continuing activities', 31), (' revenue from contracts with customers ', 30), ('revenue from operations ', 27), (' transmission and distribution business ', 24), (' Sales revenue ', 24), (' Revenue ', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [('revenue from operations ', 41), (' Sales revenue ', 41), (' revenue from contracts with customers ', 40), (' net sales ', 38), (' Sale of coal ', 37), (' revenue from continuing activities', 37), (' sale of products ', 33), (' transmission and distribution business ', 30), (' from trading business ', 30), (' Revenue ', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [(' Sales revenue ', 50), (' net sales ', 38), ('revenue from operations ', 34), (' sale of products ', 32), (' Revenue ', 32), (' transmission and distribution business ', 29), (' revenue from contracts with customers ', 27), (' Sale of coal ', 27), (' from trading business ', 21), (' revenue from continuing activities', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [(' net sales ', 40), (' transmission and distribution business ', 40), ('revenue from operations ', 37), (' Sales revenue ', 36), (' sale of products ', 35), (' revenue from continuing activities', 34), (' Sale of coal ', 32), (' revenue from contracts with customers ', 30), (' from trading business ', 27), (' Revenue ', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [(' revenue from contracts with customers ', 46), (' from trading business ', 45), (' revenue from continuing activities', 44), ('revenue from operations ', 38), (' Sale of coal ', 32), (' sale of products ', 29), (' transmission and distribution business ', 27), (' net sales ', 25), (' Sales revenue ', 22), (' Revenue ', 9)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [(' transmission and distribution business ', 41), (' revenue from continuing activities', 35), ('revenue from operations ', 33), (' Sales revenue ', 32), (' revenue from contracts with customers ', 31), (' net sales ', 29), (' from trading business ', 29), (' sale of products ', 26), (' Revenue ', 25), (' Sale of coal ', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [('revenue from operations ', 43), (' revenue from contracts with customers ', 42), (' from trading business ', 39), (' transmission and distribution business ', 37), (' sale of products ', 36), (' Sales revenue ', 31), (' revenue from continuing activities', 30), (' net sales ', 28), (' Sale of coal ', 27), (' Revenue ', 22)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' from trading business ', 45), (' Sales revenue ', 37), (' transmission and distribution business ', 32), (' Sale of coal ', 32), (' sale of products ', 29), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), (' Revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [(' sale of products ', 43), (' from trading business ', 39), ('revenue from operations ', 38), (' transmission and distribution business ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), (' Sale of coal ', 24), (' Sales revenue ', 22), (' Revenue ', 9)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' revenue from contracts with customers ', 41), (' from trading business ', 38), (' revenue from continuing activities', 38), ('revenue from operations ', 37), (' Sales revenue ', 36), (' sale of products ', 29), (' Revenue ', 29), (' transmission and distribution business ', 28), (' Sale of coal ', 26), (' net sales ', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [(' revenue from contracts with customers ', 39), (' from trading business ', 36), (' revenue from continuing activities', 36), ('revenue from operations ', 35), (' transmission and distribution business ', 31), (' sale of products ', 29), (' Sales revenue ', 29), (' net sales ', 26), (' Revenue ', 22), (' Sale of coal ', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' revenue from contracts with customers ', 43), ('revenue from operations ', 38), (' from trading business ', 38), (' revenue from continuing activities', 35), (' sale of products ', 33), (' transmission and distribution business ', 31), (' Sales revenue ', 29), (' net sales ', 27), (' Sale of coal ', 22), (' Revenue ', 19)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [(' transmission and distribution business ', 39), (' sale of products ', 30), (' revenue from contracts with customers ', 30), (' revenue from continuing activities', 30), (' Revenue ', 29), (' from trading business ', 26), (' Sales revenue ', 21), ('revenue from operations ', 17), (' net sales ', 12), (' Sale of coal ', 12)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [('revenue from operations ', 40), (' revenue from contracts with customers ', 39), (' revenue from continuing activities', 37), (' from trading business ', 36), (' net sales ', 31), (' transmission and distribution business ', 31), (' Sale of coal ', 30), (' Sales revenue ', 29), (' sale of products ', 28), (' Revenue ', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' net sales ', 37), (' revenue from continuing activities', 36), (' revenue from contracts with customers ', 35), (' sale of products ', 32), (' transmission and distribution business ', 30), (' from trading business ', 29), (' Sales revenue ', 27), (' Revenue ', 24), ('revenue from operations ', 23), (' Sale of coal ', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': 100, 'value': 1614846.0, 'line_item_label': ['Revenue', 'Sales revenue'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 1614846.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales ', ' cost of goods']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory', 29), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [('total expenses', 52), ('total expenditure', 52), ('cost of sales', 50), ('Cost of sales', 50), ('expense', 47), (' Cost of inventory sold', 40), ('expenditure', 38), (' Cost of product sold', 36), (' Cost of goods and services sold', 28), ('purchase of stock-in-trade', 27), (' cost of coal sold', 24), (' Personnel costs', 24), (' cost of goods sold ', 24), (' change in inventory', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [(' Cost of goods and services sold', 40), (' Cost of inventory sold', 36), (' change in inventory', 35), (' Cost of product sold', 33), (' Personnel costs', 31), ('expenditure', 29), ('expense', 26), (' cost of goods sold ', 26), ('total expenditure', 24), ('cost of sales', 24), ('Cost of sales', 24), ('total expenses', 22), (' cost of coal sold', 21), ('purchase of stock-in-trade', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), (' change in inventory', 37), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), ('total expenditure', 29), (' Cost of goods and services sold', 27), ('total expenses', 25), (' cost of coal sold', 23), (' cost of goods sold ', 23), ('purchase of stock-in-trade', 19)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('total expenses', 75), ('total expenditure', 71), ('purchase of stock-in-trade', 39), (' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' change in inventory', 37), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), (' cost of coal sold', 31), (' Cost of goods and services sold', 27), (' Personnel costs', 23), (' cost of goods sold ', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' cost of goods sold ', 100), (' Cost of product sold', 77), (' Cost of goods and services sold', 72), (' Cost of inventory sold', 67), (' cost of coal sold', 64), ('cost of sales', 61), ('Cost of sales', 61), (' Personnel costs', 57), ('purchase of stock-in-trade', 36), ('total expenses', 31), (' change in inventory', 28), ('total expenditure', 27), ('expense', 10), ('expenditure', 8)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [(' Cost of goods and services sold', 60), (' Personnel costs', 56), (' Cost of inventory sold', 54), ('cost of sales', 52), ('Cost of sales', 52), (' Cost of product sold', 51), (' cost of goods sold ', 50), (' cost of coal sold', 38), (' change in inventory', 36), ('expenditure', 29), ('total expenditure', 29), ('purchase of stock-in-trade', 27), ('expense', 25), ('total expenses', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [('expense', 63), ('total expenses', 56), ('expenditure', 52), (' Cost of goods and services sold', 47), ('total expenditure', 41), ('cost of sales', 36), ('Cost of sales', 36), (' change in inventory', 36), ('purchase of stock-in-trade', 31), (' Cost of inventory sold', 31), (' Personnel costs', 30), (' Cost of product sold', 27), (' cost of coal sold', 22), (' cost of goods sold ', 22)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [('total expenses', 53), ('expense', 43), (' Cost of goods and services sold', 43), ('total expenditure', 42), (' cost of coal sold', 39), (' Personnel costs', 39), ('expenditure', 38), (' Cost of product sold', 36), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), (' cost of goods sold ', 28), ('purchase of stock-in-trade', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [(' Cost of inventory sold', 57), (' cost of goods sold ', 53), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of product sold', 48), (' cost of coal sold', 47), (' Personnel costs', 47), (' Cost of goods and services sold', 44), ('purchase of stock-in-trade', 40), (' change in inventory', 39), ('total expenses', 29), ('total expenditure', 25), ('expenditure', 23), ('expense', 9)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [(' Personnel costs', 40), (' Cost of goods and services sold', 39), ('expense', 38), ('total expenses', 37), (' change in inventory', 34), ('expenditure', 33), ('purchase of stock-in-trade', 31), (' Cost of inventory sold', 31), (' cost of goods sold ', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' cost of coal sold', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [(' Cost of product sold', 42), (' Cost of inventory sold', 40), ('total expenditure', 38), ('total expenses', 36), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), (' Personnel costs', 34), ('cost of sales', 33), ('Cost of sales', 33), (' change in inventory', 33), (' Cost of goods and services sold', 30), (' cost of goods sold ', 29), ('expenditure', 26), ('expense', 15)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold ', 27), (' Cost of product sold', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of goods and services sold', 29), (' Cost of inventory sold', 29), (' cost of goods sold ', 27), (' change in inventory', 26), ('expense', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), (' change in inventory', 43), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold ', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [(' Cost of inventory sold', 45), (' change in inventory', 44), ('total expenses', 43), ('purchase of stock-in-trade', 41), ('total expenditure', 39), (' cost of coal sold', 36), (' Cost of goods and services sold', 36), (' Personnel costs', 36), (' Cost of product sold', 34), (' cost of goods sold ', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), ('expense', 22)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' Cost of product sold', 44), (' Cost of inventory sold', 43), ('total expenditure', 42), (' Cost of goods and services sold', 42), ('total expenses', 41), (' Personnel costs', 39), (' cost of goods sold ', 39), ('purchase of stock-in-trade', 36), (' cost of coal sold', 35), (' change in inventory', 35), ('cost of sales', 30), ('Cost of sales', 30), ('expenditure', 21), ('expense', 19)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [(' change in inventory', 35), (' Cost of product sold', 32), ('purchase of stock-in-trade', 30), (' Cost of inventory sold', 30), ('total expenditure', 25), (' Cost of goods and services sold', 24), ('expenditure', 22), ('total expenses', 20), (' cost of coal sold', 18), (' Personnel costs', 18), ('cost of sales', 12), ('Cost of sales', 12), (' cost of goods sold ', 9), ('expense', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [('total expenditure', 35), ('total expenses', 33), (' Cost of inventory sold', 33), (' Personnel costs', 32), ('expenditure', 29), (' Cost of product sold', 29), (' Cost of goods and services sold', 29), ('expense', 27), (' cost of coal sold', 26), (' cost of goods sold ', 26), (' change in inventory', 26), ('cost of sales', 24), ('Cost of sales', 24), ('purchase of stock-in-trade', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' Personnel costs', 48), (' Cost of inventory sold', 47), ('total expenses', 45), (' Cost of product sold', 44), ('purchase of stock-in-trade', 42), (' cost of goods sold ', 42), (' Cost of goods and services sold', 41), ('total expenditure', 40), (' cost of coal sold', 36), (' change in inventory', 35), ('expenditure', 34), ('cost of sales', 29), ('Cost of sales', 29), ('expense', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': -981076.0, 'line_item_label': ['Cost of goods sold'], 'note_numbers': [nan], 'line_item_value': [-981076.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory', 29), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [('total expenses', 52), ('total expenditure', 52), ('cost of sales', 50), ('Cost of sales', 50), ('expense', 47), (' Cost of inventory sold', 40), ('expenditure', 38), (' Cost of product sold', 36), (' Cost of goods and services sold', 28), ('purchase of stock-in-trade', 27), (' cost of coal sold', 24), (' Personnel costs', 24), (' cost of goods sold ', 24), (' change in inventory', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [(' Cost of goods and services sold', 40), (' Cost of inventory sold', 36), (' change in inventory', 35), (' Cost of product sold', 33), (' Personnel costs', 31), ('expenditure', 29), ('expense', 26), (' cost of goods sold ', 26), ('total expenditure', 24), ('cost of sales', 24), ('Cost of sales', 24), ('total expenses', 22), (' cost of coal sold', 21), ('purchase of stock-in-trade', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), (' change in inventory', 37), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), ('total expenditure', 29), (' Cost of goods and services sold', 27), ('total expenses', 25), (' cost of coal sold', 23), (' cost of goods sold ', 23), ('purchase of stock-in-trade', 19)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('total expenses', 75), ('total expenditure', 71), ('purchase of stock-in-trade', 39), (' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' change in inventory', 37), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), (' cost of coal sold', 31), (' Cost of goods and services sold', 27), (' Personnel costs', 23), (' cost of goods sold ', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' cost of goods sold ', 100), (' Cost of product sold', 77), (' Cost of goods and services sold', 72), (' Cost of inventory sold', 67), (' cost of coal sold', 64), ('cost of sales', 61), ('Cost of sales', 61), (' Personnel costs', 57), ('purchase of stock-in-trade', 36), ('total expenses', 31), (' change in inventory', 28), ('total expenditure', 27), ('expense', 10), ('expenditure', 8)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [(' Cost of goods and services sold', 60), (' Personnel costs', 56), (' Cost of inventory sold', 54), ('cost of sales', 52), ('Cost of sales', 52), (' Cost of product sold', 51), (' cost of goods sold ', 50), (' cost of coal sold', 38), (' change in inventory', 36), ('expenditure', 29), ('total expenditure', 29), ('purchase of stock-in-trade', 27), ('expense', 25), ('total expenses', 20)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [('expense', 63), ('total expenses', 56), ('expenditure', 52), (' Cost of goods and services sold', 47), ('total expenditure', 41), ('cost of sales', 36), ('Cost of sales', 36), (' change in inventory', 36), ('purchase of stock-in-trade', 31), (' Cost of inventory sold', 31), (' Personnel costs', 30), (' Cost of product sold', 27), (' cost of coal sold', 22), (' cost of goods sold ', 22)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [('total expenses', 53), ('expense', 43), (' Cost of goods and services sold', 43), ('total expenditure', 42), (' cost of coal sold', 39), (' Personnel costs', 39), ('expenditure', 38), (' Cost of product sold', 36), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), (' cost of goods sold ', 28), ('purchase of stock-in-trade', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [(' Cost of inventory sold', 57), (' cost of goods sold ', 53), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of product sold', 48), (' cost of coal sold', 47), (' Personnel costs', 47), (' Cost of goods and services sold', 44), ('purchase of stock-in-trade', 40), (' change in inventory', 39), ('total expenses', 29), ('total expenditure', 25), ('expenditure', 23), ('expense', 9)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [(' Personnel costs', 40), (' Cost of goods and services sold', 39), ('expense', 38), ('total expenses', 37), (' change in inventory', 34), ('expenditure', 33), ('purchase of stock-in-trade', 31), (' Cost of inventory sold', 31), (' cost of goods sold ', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' cost of coal sold', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [(' Cost of product sold', 42), (' Cost of inventory sold', 40), ('total expenditure', 38), ('total expenses', 36), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), (' Personnel costs', 34), ('cost of sales', 33), ('Cost of sales', 33), (' change in inventory', 33), (' Cost of goods and services sold', 30), (' cost of goods sold ', 29), ('expenditure', 26), ('expense', 15)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold ', 27), (' Cost of product sold', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of goods and services sold', 29), (' Cost of inventory sold', 29), (' cost of goods sold ', 27), (' change in inventory', 26), ('expense', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), (' change in inventory', 43), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold ', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [(' Cost of inventory sold', 45), (' change in inventory', 44), ('total expenses', 43), ('purchase of stock-in-trade', 41), ('total expenditure', 39), (' cost of coal sold', 36), (' Cost of goods and services sold', 36), (' Personnel costs', 36), (' Cost of product sold', 34), (' cost of goods sold ', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), ('expense', 22)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' Cost of product sold', 44), (' Cost of inventory sold', 43), ('total expenditure', 42), (' Cost of goods and services sold', 42), ('total expenses', 41), (' Personnel costs', 39), (' cost of goods sold ', 39), ('purchase of stock-in-trade', 36), (' cost of coal sold', 35), (' change in inventory', 35), ('cost of sales', 30), ('Cost of sales', 30), ('expenditure', 21), ('expense', 19)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [(' change in inventory', 35), (' Cost of product sold', 32), ('purchase of stock-in-trade', 30), (' Cost of inventory sold', 30), ('total expenditure', 25), (' Cost of goods and services sold', 24), ('expenditure', 22), ('total expenses', 20), (' cost of coal sold', 18), (' Personnel costs', 18), ('cost of sales', 12), ('Cost of sales', 12), (' cost of goods sold ', 9), ('expense', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [('total expenditure', 35), ('total expenses', 33), (' Cost of inventory sold', 33), (' Personnel costs', 32), ('expenditure', 29), (' Cost of product sold', 29), (' Cost of goods and services sold', 29), ('expense', 27), (' cost of coal sold', 26), (' cost of goods sold ', 26), (' change in inventory', 26), ('cost of sales', 24), ('Cost of sales', 24), ('purchase of stock-in-trade', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' Personnel costs', 48), (' Cost of inventory sold', 47), ('total expenses', 45), (' Cost of product sold', 44), ('purchase of stock-in-trade', 42), (' cost of goods sold ', 42), (' Cost of goods and services sold', 41), ('total expenditure', 40), (' cost of coal sold', 36), (' change in inventory', 35), ('expenditure', 34), ('cost of sales', 29), ('Cost of sales', 29), ('expense', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': -1173658.0, 'line_item_label': ['Cost of goods sold'], 'note_numbers': [nan], 'line_item_value': [-1173658.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['consum ', ' power ', ' machinery ', ' charges ', ' research ', ' analytical ', ' equipment ', ' exchange ', ' loss on ', ' donation ', ' csr ', ' social ', ' miscellaneous ', ' loss allowance ', ' Included in administrative expenses ', ' Depreciation property ', ' plant and equipment ', ' Depreciation right-of-use assets ', ' Administrative expenses ', ' Wages and salaries ', ' Compulsory superannuation contributions ', ' Payroll on-costs (excluding employee benefit provision) ', ' Staff welfare ', ' Contractors, subcontractors and employee related expenses ', ' Facilities Expense ', ' Rental equipment expenses ', ' Depreciation expense right-of-use asset ', ' Depreciation expense ', ' Amortisation expense ', ' Other expenses ', ' Research and development expenses ', ' employee benefits expenses ', ' depreciation and amortisation expenses ', ' Employee expenses ', ' Distribution Expenses ', ' Depreciation and Amortisation Expenses ', ' Other Expenses from Ordinary Activities ', '  ', ' Defined contribution plans ', ' Other employement costs']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [(' Lease expenses ', 55), (' Selling Expenses ', 55), (' Sales and marketing ', 54), (' Marketing expenses ', 50), ('expenses ', 47), (' Selling & distribution expenses ', 44), (' other expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 38), (' property espense ', 38), (' Distribution expenses ', 37), (' Administrative expenses ', 37), (' Administration expenses ', 37), (' Occupancy expenses ', 35), (' Royalties ', 33), (' Administrative and other expenses ', 32), (' employee benefits expense ', 30), (' employee benefit espense ', 30), (' Depreciation and amortisation expenses ', 27), (' levies', 27), (' Logistics and distribution ', 26), (' depreciation ', 22), (' Administration ', 20), (' Occupancy ', 12)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [(' Administrative and other expenses ', 43), (' Depreciation and amortisation expenses ', 43), (' Depreciation expenses ', 41), (' Advertising expenses ', 40), (' Sales and marketing ', 40), (' Administrative expenses ', 39), (' Selling & distribution expenses ', 39), (' Administration expenses ', 39), (' employee benefits expense ', 38), (' employee benefit espense ', 38), (' Amortisation expenses ', 36), (' property espense ', 35), (' Distribution expenses ', 34), (' Selling Expenses ', 33), (' other expenses ', 32), (' Other expenses ', 32), (' Other expenses ', 32), (' depreciation ', 31), (' Logistics and distribution ', 31), (' Lease expenses ', 28), (' Occupancy expenses ', 27), ('expenses ', 26), (' Marketing expenses ', 26), (' Administration ', 24), (' Management expenses ', 22), (' levies', 21), (' Royalties ', 19), (' Occupancy ', 13)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' other expenses ', 42), (' Other expenses ', 42), (' Depreciation and amortisation expenses ', 42), (' Other expenses ', 42), (' Selling & distribution expenses ', 36), (' employee benefits expense ', 35), (' employee benefit espense ', 35), ('expenses ', 33), (' Occupancy expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Administrative and other expenses ', 32), (' Sales and marketing ', 30), (' property espense ', 30), (' Lease expenses ', 26), (' Selling Expenses ', 26), (' Management expenses ', 25), (' levies', 25), (' Occupancy ', 24), (' Royalties ', 21), (' Logistics and distribution ', 19), (' Administration ', 19)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' other expenses ', 50), (' Other expenses ', 50), (' Other expenses ', 50), (' property espense ', 44), (' Lease expenses ', 43), (' Selling Expenses ', 43), (' Occupancy expenses ', 42), (' Management expenses ', 42), (' Royalties ', 42), (' Marketing expenses ', 40), (' Administrative and other expenses ', 37), (' Sales and marketing ', 37), (' Selling & distribution expenses ', 36), ('expenses ', 33), (' Depreciation expenses ', 31), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' levies', 25), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' depreciation ', 21), (' Depreciation and amortisation expenses ', 21), (' Administration ', 19), (' Occupancy ', 12)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administrative and other expenses ', 35), (' Selling & distribution expenses ', 34), (' Selling Expenses ', 32), (' Depreciation and amortisation expenses ', 30), (' Amortisation expenses ', 29), (' Logistics and distribution ', 29), (' Sales and marketing ', 28), (' employee benefits expense ', 28), (' employee benefit espense ', 28), (' Distribution expenses ', 27), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Lease expenses ', 24), (' other expenses ', 23), (' Occupancy expenses ', 23), (' Other expenses ', 23), (' Management expenses ', 23), (' Other expenses ', 23), (' Depreciation expenses ', 21), (' Advertising expenses ', 21), (' property espense ', 21), (' Royalties ', 19), (' Administration ', 17), (' Marketing expenses ', 15), (' Occupancy ', 11), (' levies', 11), ('expenses ', 10), (' depreciation ', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [(' property espense ', 42), (' Selling & distribution expenses ', 41), (' Administrative and other expenses ', 41), (' Depreciation and amortisation expenses ', 41), (' depreciation ', 40), (' Amortisation expenses ', 38), (' Sales and marketing ', 36), (' Distribution expenses ', 35), (' Administrative expenses ', 35), (' Administration expenses ', 35), (' employee benefit espense ', 35), (' Selling Expenses ', 34), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' Logistics and distribution ', 32), (' Depreciation expenses ', 31), (' Advertising expenses ', 30), (' employee benefits expense ', 30), (' Lease expenses ', 28), (' Occupancy expenses ', 27), (' levies', 27), (' Marketing expenses ', 26), ('expenses ', 25), (' Royalties ', 24), (' Administration ', 22), (' Management expenses ', 20), (' Occupancy ', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [(' Selling Expenses ', 75), (' other expenses ', 72), (' Other expenses ', 72), (' Other expenses ', 72), (' Lease expenses ', 67), (' Occupancy expenses ', 64), (' property espense ', 64), ('expenses ', 63), (' Marketing expenses ', 62), (' Management expenses ', 56), (' Selling & distribution expenses ', 53), (' Administrative and other expenses ', 46), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), (' Advertising expenses ', 43), (' Distribution expenses ', 41), (' Administrative expenses ', 41), (' Administration expenses ', 41), (' depreciation ', 40), (' levies', 35), (' employee benefits expense ', 34), (' employee benefit espense ', 34), (' Depreciation and amortisation expenses ', 31), (' Logistics and distribution ', 30), (' Sales and marketing ', 29), (' Administration ', 27), (' Royalties ', 20), (' Occupancy ', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [(' Marketing expenses ', 74), (' Sales and marketing ', 70), (' Selling Expenses ', 67), (' Selling & distribution expenses ', 60), (' Lease expenses ', 55), (' Administrative and other expenses ', 54), (' other expenses ', 53), (' Other expenses ', 53), (' Management expenses ', 53), (' Other expenses ', 53), (' Advertising expenses ', 49), (' property espense ', 49), (' Administrative expenses ', 47), (' Administration expenses ', 47), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), ('expenses ', 43), (' Logistics and distribution ', 43), (' Distribution expenses ', 42), (' Depreciation and amortisation expenses ', 42), (' Occupancy expenses ', 41), (' employee benefit espense ', 41), (' employee benefits expense ', 36), (' depreciation ', 34), (' Administration ', 32), (' Royalties ', 14), (' levies', 8), (' Occupancy ', 7)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [(' other expenses ', 50), (' Other expenses ', 50), (' Other expenses ', 50), (' Administrative and other expenses ', 48), (' property espense ', 39), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Logistics and distribution ', 33), (' Selling & distribution expenses ', 32), (' Administration ', 32), (' Distribution expenses ', 31), (' Marketing expenses ', 28), (' Depreciation expenses ', 27), (' Advertising expenses ', 26), (' Sales and marketing ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Royalties ', 26), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Lease expenses ', 22), (' Selling Expenses ', 22), (' Occupancy expenses ', 21), (' Management expenses ', 21), (' Occupancy ', 19), (' depreciation ', 17), (' levies', 10), ('expenses ', 9)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [(' Administrative and other expenses ', 88), (' Administrative expenses ', 76), (' Administration expenses ', 76), (' Selling & distribution expenses ', 60), (' Depreciation and amortisation expenses ', 58), (' Distribution expenses ', 57), (' Amortisation expenses ', 55), (' Advertising expenses ', 54), (' Administration ', 51), (' other expenses ', 47), (' Other expenses ', 47), (' Other expenses ', 47), (' employee benefits expense ', 46), (' Depreciation expenses ', 45), (' Lease expenses ', 43), (' Selling Expenses ', 43), (' Management expenses ', 42), (' employee benefit espense ', 42), (' Marketing expenses ', 41), (' property espense ', 39), ('expenses ', 38), (' Occupancy expenses ', 37), (' Logistics and distribution ', 35), (' Sales and marketing ', 34), (' depreciation ', 24), (' Royalties ', 12), (' levies', 7), (' Occupancy ', 6)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [(' Depreciation and amortisation expenses ', 43), (' property espense ', 39), (' Depreciation expenses ', 34), (' Logistics and distribution ', 34), (' Sales and marketing ', 33), (' employee benefits expense ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' other expenses ', 30), (' Other expenses ', 30), (' Administrative and other expenses ', 30), (' Other expenses ', 30), (' depreciation ', 29), (' Marketing expenses ', 29), (' Selling & distribution expenses ', 29), (' Amortisation expenses ', 29), (' Advertising expenses ', 28), (' employee benefit espense ', 28), (' Administration ', 27), (' Lease expenses ', 25), (' Occupancy expenses ', 24), (' Management expenses ', 24), (' Occupancy ', 23), (' Royalties ', 21), (' Selling Expenses ', 19), (' levies', 16), ('expenses ', 15)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' other expenses ', 64), (' Other expenses ', 64), (' Management expenses ', 64), (' Other expenses ', 64), (' Marketing expenses ', 62), (' Lease expenses ', 59), (' Occupancy expenses ', 57), ('expenses ', 55), (' Selling Expenses ', 52), (' property espense ', 52), (' Administrative and other expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 39), (' Distribution expenses ', 38), (' Administrative expenses ', 38), (' Selling & distribution expenses ', 38), (' Administration expenses ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' Depreciation and amortisation expenses ', 29), (' Logistics and distribution ', 28), (' employee benefit espense ', 26), (' Administration ', 24), (' levies', 20), (' Royalties ', 17), (' Occupancy ', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [(' Depreciation expenses ', 40), (' Advertising expenses ', 39), (' Logistics and distribution ', 39), (' Sales and marketing ', 39), (' property espense ', 39), (' Distribution expenses ', 38), (' Depreciation and amortisation expenses ', 38), (' employee benefits expense ', 37), (' depreciation ', 35), (' Administrative and other expenses ', 33), (' Amortisation expenses ', 33), (' Selling & distribution expenses ', 32), (' employee benefit espense ', 32), (' Administrative expenses ', 31), (' Administration expenses ', 31), (' Lease expenses ', 30), (' other expenses ', 29), (' Other expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Marketing expenses ', 28), (' Royalties ', 26), (' Administration ', 24), (' Selling Expenses ', 22), (' Occupancy expenses ', 21), (' levies', 20), ('expenses ', 18), (' Occupancy ', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other expenses ', 59), (' Other expenses ', 59), (' Other expenses ', 59), (' Administrative and other expenses ', 50), (' property espense ', 43), (' Marketing expenses ', 40), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Occupancy expenses ', 35), (' Management expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Administration ', 32), ('expenses ', 29), (' Logistics and distribution ', 29), (' depreciation ', 28), (' Advertising expenses ', 27), (' Sales and marketing ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Royalties ', 21), (' Occupancy ', 15), (' levies', 15)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [(' other expenses ', 48), (' Other expenses ', 48), (' Other expenses ', 48), (' Administrative and other expenses ', 46), (' property espense ', 40), (' Management expenses ', 38), (' Marketing expenses ', 37), (' Depreciation and amortisation expenses ', 36), (' employee benefits expense ', 35), (' Lease expenses ', 34), (' Depreciation expenses ', 32), (' Sales and marketing ', 31), (' employee benefit espense ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Occupancy expenses ', 29), (' Selling Expenses ', 29), (' Logistics and distribution ', 28), (' Selling & distribution expenses ', 27), (' Amortisation expenses ', 27), (' Distribution expenses ', 26), (' Administration ', 26), ('expenses ', 22), (' depreciation ', 22), (' Advertising expenses ', 22), (' Royalties ', 16), (' levies', 12), (' Occupancy ', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' property espense ', 42), (' Administrative and other expenses ', 41), (' other expenses ', 37), (' Other expenses ', 37), (' Other expenses ', 37), (' Marketing expenses ', 36), (' Depreciation and amortisation expenses ', 35), (' Occupancy expenses ', 33), (' Logistics and distribution ', 32), (' Selling & distribution expenses ', 31), (' Sales and marketing ', 31), (' employee benefits expense ', 31), (' employee benefit espense ', 31), (' Lease expenses ', 29), (' Selling Expenses ', 29), (' Management expenses ', 29), (' Depreciation expenses ', 27), (' Amortisation expenses ', 27), (' Administrative expenses ', 26), (' Administration expenses ', 26), (' depreciation ', 23), (' Distribution expenses ', 23), (' Advertising expenses ', 23), (' Administration ', 22), ('expenses ', 19), (' Royalties ', 18), (' Occupancy ', 14), (' levies', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [(' Distribution expenses ', 50), (' Logistics and distribution ', 50), (' Selling & distribution expenses ', 41), (' Royalties ', 40), (' Administration ', 35), (' Marketing expenses ', 29), (' depreciation ', 27), (' Amortisation expenses ', 27), (' Advertising expenses ', 26), (' Sales and marketing ', 26), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Administrative and other expenses ', 24), (' Depreciation and amortisation expenses ', 24), (' other expenses ', 20), (' Other expenses ', 20), (' Other expenses ', 20), (' Depreciation expenses ', 18), (' property espense ', 17), (' levies', 17), (' Occupancy ', 15), (' employee benefits expense ', 13), (' employee benefit espense ', 13), (' Lease expenses ', 11), (' Occupancy expenses ', 10), (' Management expenses ', 10), ('expenses ', 0), (' Selling Expenses ', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [(' Administrative and other expenses ', 48), (' other expenses ', 44), (' Other expenses ', 44), (' Selling & distribution expenses ', 44), (' Other expenses ', 44), (' employee benefits expense ', 43), (' employee benefit espense ', 43), (' Advertising expenses ', 41), (' Sales and marketing ', 41), (' Distribution expenses ', 40), (' Depreciation and amortisation expenses ', 40), (' Marketing expenses ', 38), (' Depreciation expenses ', 37), (' Amortisation expenses ', 37), (' property espense ', 36), (' Administrative expenses ', 35), (' Administration expenses ', 35), (' Lease expenses ', 34), (' Selling Expenses ', 34), (' depreciation ', 32), (' Occupancy expenses ', 28), (' Management expenses ', 28), ('expenses ', 27), (' Logistics and distribution ', 27), (' Royalties ', 19), (' Administration ', 18), (' Occupancy ', 14), (' levies', 14)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' other expenses ', 45), (' Other expenses ', 45), (' Other expenses ', 45), (' Administrative and other expenses ', 44), (' Occupancy expenses ', 39), (' Logistics and distribution ', 36), (' Administration ', 36), (' Selling & distribution expenses ', 35), (' Sales and marketing ', 35), (' property espense ', 35), (' Distribution expenses ', 34), (' Administrative expenses ', 34), (' Administration expenses ', 34), (' Lease expenses ', 33), (' Selling Expenses ', 33), (' Management expenses ', 32), (' depreciation ', 31), (' Marketing expenses ', 31), (' Depreciation and amortisation expenses ', 31), (' Depreciation expenses ', 30), (' Advertising expenses ', 29), (' employee benefits expense ', 29), (' employee benefit espense ', 29), ('expenses ', 24), (' Amortisation expenses ', 24), (' Royalties ', 23), (' Occupancy ', 17), (' levies', 9)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 88, 'value': -64119.0, 'line_item_label': ['General and administrative expenses'], 'note_numbers': [nan], 'line_item_value': [-64119.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [(' Lease expenses ', 55), (' Selling Expenses ', 55), (' Sales and marketing ', 54), (' Marketing expenses ', 50), ('expenses ', 47), (' Selling & distribution expenses ', 44), (' other expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 38), (' property espense ', 38), (' Distribution expenses ', 37), (' Administrative expenses ', 37), (' Administration expenses ', 37), (' Occupancy expenses ', 35), (' Royalties ', 33), (' Administrative and other expenses ', 32), (' employee benefits expense ', 30), (' employee benefit espense ', 30), (' Depreciation and amortisation expenses ', 27), (' levies', 27), (' Logistics and distribution ', 26), (' depreciation ', 22), (' Administration ', 20), (' Occupancy ', 12)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [(' Administrative and other expenses ', 43), (' Depreciation and amortisation expenses ', 43), (' Depreciation expenses ', 41), (' Advertising expenses ', 40), (' Sales and marketing ', 40), (' Administrative expenses ', 39), (' Selling & distribution expenses ', 39), (' Administration expenses ', 39), (' employee benefits expense ', 38), (' employee benefit espense ', 38), (' Amortisation expenses ', 36), (' property espense ', 35), (' Distribution expenses ', 34), (' Selling Expenses ', 33), (' other expenses ', 32), (' Other expenses ', 32), (' Other expenses ', 32), (' depreciation ', 31), (' Logistics and distribution ', 31), (' Lease expenses ', 28), (' Occupancy expenses ', 27), ('expenses ', 26), (' Marketing expenses ', 26), (' Administration ', 24), (' Management expenses ', 22), (' levies', 21), (' Royalties ', 19), (' Occupancy ', 13)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' other expenses ', 42), (' Other expenses ', 42), (' Depreciation and amortisation expenses ', 42), (' Other expenses ', 42), (' Selling & distribution expenses ', 36), (' employee benefits expense ', 35), (' employee benefit espense ', 35), ('expenses ', 33), (' Occupancy expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Administrative and other expenses ', 32), (' Sales and marketing ', 30), (' property espense ', 30), (' Lease expenses ', 26), (' Selling Expenses ', 26), (' Management expenses ', 25), (' levies', 25), (' Occupancy ', 24), (' Royalties ', 21), (' Logistics and distribution ', 19), (' Administration ', 19)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' other expenses ', 50), (' Other expenses ', 50), (' Other expenses ', 50), (' property espense ', 44), (' Lease expenses ', 43), (' Selling Expenses ', 43), (' Occupancy expenses ', 42), (' Management expenses ', 42), (' Royalties ', 42), (' Marketing expenses ', 40), (' Administrative and other expenses ', 37), (' Sales and marketing ', 37), (' Selling & distribution expenses ', 36), ('expenses ', 33), (' Depreciation expenses ', 31), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' levies', 25), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' depreciation ', 21), (' Depreciation and amortisation expenses ', 21), (' Administration ', 19), (' Occupancy ', 12)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administrative and other expenses ', 35), (' Selling & distribution expenses ', 34), (' Selling Expenses ', 32), (' Depreciation and amortisation expenses ', 30), (' Amortisation expenses ', 29), (' Logistics and distribution ', 29), (' Sales and marketing ', 28), (' employee benefits expense ', 28), (' employee benefit espense ', 28), (' Distribution expenses ', 27), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Lease expenses ', 24), (' other expenses ', 23), (' Occupancy expenses ', 23), (' Other expenses ', 23), (' Management expenses ', 23), (' Other expenses ', 23), (' Depreciation expenses ', 21), (' Advertising expenses ', 21), (' property espense ', 21), (' Royalties ', 19), (' Administration ', 17), (' Marketing expenses ', 15), (' Occupancy ', 11), (' levies', 11), ('expenses ', 10), (' depreciation ', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [(' property espense ', 42), (' Selling & distribution expenses ', 41), (' Administrative and other expenses ', 41), (' Depreciation and amortisation expenses ', 41), (' depreciation ', 40), (' Amortisation expenses ', 38), (' Sales and marketing ', 36), (' Distribution expenses ', 35), (' Administrative expenses ', 35), (' Administration expenses ', 35), (' employee benefit espense ', 35), (' Selling Expenses ', 34), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' Logistics and distribution ', 32), (' Depreciation expenses ', 31), (' Advertising expenses ', 30), (' employee benefits expense ', 30), (' Lease expenses ', 28), (' Occupancy expenses ', 27), (' levies', 27), (' Marketing expenses ', 26), ('expenses ', 25), (' Royalties ', 24), (' Administration ', 22), (' Management expenses ', 20), (' Occupancy ', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [(' Selling Expenses ', 75), (' other expenses ', 72), (' Other expenses ', 72), (' Other expenses ', 72), (' Lease expenses ', 67), (' Occupancy expenses ', 64), (' property espense ', 64), ('expenses ', 63), (' Marketing expenses ', 62), (' Management expenses ', 56), (' Selling & distribution expenses ', 53), (' Administrative and other expenses ', 46), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), (' Advertising expenses ', 43), (' Distribution expenses ', 41), (' Administrative expenses ', 41), (' Administration expenses ', 41), (' depreciation ', 40), (' levies', 35), (' employee benefits expense ', 34), (' employee benefit espense ', 34), (' Depreciation and amortisation expenses ', 31), (' Logistics and distribution ', 30), (' Sales and marketing ', 29), (' Administration ', 27), (' Royalties ', 20), (' Occupancy ', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [(' Marketing expenses ', 74), (' Sales and marketing ', 70), (' Selling Expenses ', 67), (' Selling & distribution expenses ', 60), (' Lease expenses ', 55), (' Administrative and other expenses ', 54), (' other expenses ', 53), (' Other expenses ', 53), (' Management expenses ', 53), (' Other expenses ', 53), (' Advertising expenses ', 49), (' property espense ', 49), (' Administrative expenses ', 47), (' Administration expenses ', 47), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), ('expenses ', 43), (' Logistics and distribution ', 43), (' Distribution expenses ', 42), (' Depreciation and amortisation expenses ', 42), (' Occupancy expenses ', 41), (' employee benefit espense ', 41), (' employee benefits expense ', 36), (' depreciation ', 34), (' Administration ', 32), (' Royalties ', 14), (' levies', 8), (' Occupancy ', 7)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [(' other expenses ', 50), (' Other expenses ', 50), (' Other expenses ', 50), (' Administrative and other expenses ', 48), (' property espense ', 39), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Logistics and distribution ', 33), (' Selling & distribution expenses ', 32), (' Administration ', 32), (' Distribution expenses ', 31), (' Marketing expenses ', 28), (' Depreciation expenses ', 27), (' Advertising expenses ', 26), (' Sales and marketing ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Royalties ', 26), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Lease expenses ', 22), (' Selling Expenses ', 22), (' Occupancy expenses ', 21), (' Management expenses ', 21), (' Occupancy ', 19), (' depreciation ', 17), (' levies', 10), ('expenses ', 9)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [(' Administrative and other expenses ', 88), (' Administrative expenses ', 76), (' Administration expenses ', 76), (' Selling & distribution expenses ', 60), (' Depreciation and amortisation expenses ', 58), (' Distribution expenses ', 57), (' Amortisation expenses ', 55), (' Advertising expenses ', 54), (' Administration ', 51), (' other expenses ', 47), (' Other expenses ', 47), (' Other expenses ', 47), (' employee benefits expense ', 46), (' Depreciation expenses ', 45), (' Lease expenses ', 43), (' Selling Expenses ', 43), (' Management expenses ', 42), (' employee benefit espense ', 42), (' Marketing expenses ', 41), (' property espense ', 39), ('expenses ', 38), (' Occupancy expenses ', 37), (' Logistics and distribution ', 35), (' Sales and marketing ', 34), (' depreciation ', 24), (' Royalties ', 12), (' levies', 7), (' Occupancy ', 6)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [(' Depreciation and amortisation expenses ', 43), (' property espense ', 39), (' Depreciation expenses ', 34), (' Logistics and distribution ', 34), (' Sales and marketing ', 33), (' employee benefits expense ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' other expenses ', 30), (' Other expenses ', 30), (' Administrative and other expenses ', 30), (' Other expenses ', 30), (' depreciation ', 29), (' Marketing expenses ', 29), (' Selling & distribution expenses ', 29), (' Amortisation expenses ', 29), (' Advertising expenses ', 28), (' employee benefit espense ', 28), (' Administration ', 27), (' Lease expenses ', 25), (' Occupancy expenses ', 24), (' Management expenses ', 24), (' Occupancy ', 23), (' Royalties ', 21), (' Selling Expenses ', 19), (' levies', 16), ('expenses ', 15)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' other expenses ', 64), (' Other expenses ', 64), (' Management expenses ', 64), (' Other expenses ', 64), (' Marketing expenses ', 62), (' Lease expenses ', 59), (' Occupancy expenses ', 57), ('expenses ', 55), (' Selling Expenses ', 52), (' property espense ', 52), (' Administrative and other expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 39), (' Distribution expenses ', 38), (' Administrative expenses ', 38), (' Selling & distribution expenses ', 38), (' Administration expenses ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' Depreciation and amortisation expenses ', 29), (' Logistics and distribution ', 28), (' employee benefit espense ', 26), (' Administration ', 24), (' levies', 20), (' Royalties ', 17), (' Occupancy ', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [(' Depreciation expenses ', 40), (' Advertising expenses ', 39), (' Logistics and distribution ', 39), (' Sales and marketing ', 39), (' property espense ', 39), (' Distribution expenses ', 38), (' Depreciation and amortisation expenses ', 38), (' employee benefits expense ', 37), (' depreciation ', 35), (' Administrative and other expenses ', 33), (' Amortisation expenses ', 33), (' Selling & distribution expenses ', 32), (' employee benefit espense ', 32), (' Administrative expenses ', 31), (' Administration expenses ', 31), (' Lease expenses ', 30), (' other expenses ', 29), (' Other expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Marketing expenses ', 28), (' Royalties ', 26), (' Administration ', 24), (' Selling Expenses ', 22), (' Occupancy expenses ', 21), (' levies', 20), ('expenses ', 18), (' Occupancy ', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other expenses ', 59), (' Other expenses ', 59), (' Other expenses ', 59), (' Administrative and other expenses ', 50), (' property espense ', 43), (' Marketing expenses ', 40), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Occupancy expenses ', 35), (' Management expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Administration ', 32), ('expenses ', 29), (' Logistics and distribution ', 29), (' depreciation ', 28), (' Advertising expenses ', 27), (' Sales and marketing ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Royalties ', 21), (' Occupancy ', 15), (' levies', 15)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [(' other expenses ', 48), (' Other expenses ', 48), (' Other expenses ', 48), (' Administrative and other expenses ', 46), (' property espense ', 40), (' Management expenses ', 38), (' Marketing expenses ', 37), (' Depreciation and amortisation expenses ', 36), (' employee benefits expense ', 35), (' Lease expenses ', 34), (' Depreciation expenses ', 32), (' Sales and marketing ', 31), (' employee benefit espense ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Occupancy expenses ', 29), (' Selling Expenses ', 29), (' Logistics and distribution ', 28), (' Selling & distribution expenses ', 27), (' Amortisation expenses ', 27), (' Distribution expenses ', 26), (' Administration ', 26), ('expenses ', 22), (' depreciation ', 22), (' Advertising expenses ', 22), (' Royalties ', 16), (' levies', 12), (' Occupancy ', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' property espense ', 42), (' Administrative and other expenses ', 41), (' other expenses ', 37), (' Other expenses ', 37), (' Other expenses ', 37), (' Marketing expenses ', 36), (' Depreciation and amortisation expenses ', 35), (' Occupancy expenses ', 33), (' Logistics and distribution ', 32), (' Selling & distribution expenses ', 31), (' Sales and marketing ', 31), (' employee benefits expense ', 31), (' employee benefit espense ', 31), (' Lease expenses ', 29), (' Selling Expenses ', 29), (' Management expenses ', 29), (' Depreciation expenses ', 27), (' Amortisation expenses ', 27), (' Administrative expenses ', 26), (' Administration expenses ', 26), (' depreciation ', 23), (' Distribution expenses ', 23), (' Advertising expenses ', 23), (' Administration ', 22), ('expenses ', 19), (' Royalties ', 18), (' Occupancy ', 14), (' levies', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [(' Distribution expenses ', 50), (' Logistics and distribution ', 50), (' Selling & distribution expenses ', 41), (' Royalties ', 40), (' Administration ', 35), (' Marketing expenses ', 29), (' depreciation ', 27), (' Amortisation expenses ', 27), (' Advertising expenses ', 26), (' Sales and marketing ', 26), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Administrative and other expenses ', 24), (' Depreciation and amortisation expenses ', 24), (' other expenses ', 20), (' Other expenses ', 20), (' Other expenses ', 20), (' Depreciation expenses ', 18), (' property espense ', 17), (' levies', 17), (' Occupancy ', 15), (' employee benefits expense ', 13), (' employee benefit espense ', 13), (' Lease expenses ', 11), (' Occupancy expenses ', 10), (' Management expenses ', 10), ('expenses ', 0), (' Selling Expenses ', 0)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [(' Administrative and other expenses ', 48), (' other expenses ', 44), (' Other expenses ', 44), (' Selling & distribution expenses ', 44), (' Other expenses ', 44), (' employee benefits expense ', 43), (' employee benefit espense ', 43), (' Advertising expenses ', 41), (' Sales and marketing ', 41), (' Distribution expenses ', 40), (' Depreciation and amortisation expenses ', 40), (' Marketing expenses ', 38), (' Depreciation expenses ', 37), (' Amortisation expenses ', 37), (' property espense ', 36), (' Administrative expenses ', 35), (' Administration expenses ', 35), (' Lease expenses ', 34), (' Selling Expenses ', 34), (' depreciation ', 32), (' Occupancy expenses ', 28), (' Management expenses ', 28), ('expenses ', 27), (' Logistics and distribution ', 27), (' Royalties ', 19), (' Administration ', 18), (' Occupancy ', 14), (' levies', 14)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' other expenses ', 45), (' Other expenses ', 45), (' Other expenses ', 45), (' Administrative and other expenses ', 44), (' Occupancy expenses ', 39), (' Logistics and distribution ', 36), (' Administration ', 36), (' Selling & distribution expenses ', 35), (' Sales and marketing ', 35), (' property espense ', 35), (' Distribution expenses ', 34), (' Administrative expenses ', 34), (' Administration expenses ', 34), (' Lease expenses ', 33), (' Selling Expenses ', 33), (' Management expenses ', 32), (' depreciation ', 31), (' Marketing expenses ', 31), (' Depreciation and amortisation expenses ', 31), (' Depreciation expenses ', 30), (' Advertising expenses ', 29), (' employee benefits expense ', 29), (' employee benefit espense ', 29), ('expenses ', 24), (' Amortisation expenses ', 24), (' Royalties ', 23), (' Occupancy ', 17), (' levies', 9)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 88, 'value': -80535.0, 'line_item_label': ['General and administrative expenses'], 'note_numbers': [nan], 'line_item_value': [-80535.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses', ' Occupancy', ' Occupancy expenses']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses', 44), (' Administration expenses ', 36), (' Rental expenses ', 32), (' Occupancy ', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [(' Rental expenses ', 50), ('Rent ', 40), (' Administration expenses ', 37), (' Occupancy expenses', 35), (' Occupancy ', 12)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [(' Administration expenses ', 39), (' Rental expenses ', 32), (' Occupancy expenses', 27), ('Rent ', 21), (' Occupancy ', 13)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Administration expenses ', 43), (' Rental expenses ', 40), ('Rent ', 38), (' Occupancy expenses', 33), (' Occupancy ', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' Rental expenses ', 56), ('Rent ', 50), (' Occupancy expenses', 42), (' Administration expenses ', 29), (' Occupancy ', 12)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administration expenses ', 27), (' Occupancy expenses', 23), (' Rental expenses ', 22), ('Rent ', 11), (' Occupancy ', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [(' Administration expenses ', 35), (' Rental expenses ', 32), ('Rent ', 27), (' Occupancy expenses', 27), (' Occupancy ', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [(' Occupancy expenses', 64), (' Rental expenses ', 62), (' Administration expenses ', 41), ('Rent ', 24), (' Occupancy ', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [(' Rental expenses ', 63), (' Administration expenses ', 47), (' Occupancy expenses', 41), ('Rent ', 23), (' Occupancy ', 7)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [(' Rental expenses ', 28), (' Administration expenses ', 25), (' Occupancy expenses', 21), ('Rent ', 20), (' Occupancy ', 19)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [(' Administration expenses ', 76), (' Rental expenses ', 46), (' Occupancy expenses', 37), ('Rent ', 20), (' Occupancy ', 6)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [(' Rental expenses ', 35), ('Rent ', 32), (' Administration expenses ', 32), (' Occupancy expenses', 24), (' Occupancy ', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses ', 69), (' Occupancy expenses', 57), (' Administration expenses ', 38), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [(' Rental expenses ', 34), (' Administration expenses ', 31), (' Occupancy expenses', 21), ('Rent ', 20), (' Occupancy ', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses ', 40), (' Occupancy expenses', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [(' Rental expenses ', 37), (' Administration expenses ', 30), (' Occupancy expenses', 29), ('Rent ', 24), (' Occupancy ', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' Rental expenses ', 40), (' Occupancy expenses', 33), (' Administration expenses ', 26), ('Rent ', 20), (' Occupancy ', 14)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [('Rent ', 33), (' Administration expenses ', 25), (' Rental expenses ', 19), (' Occupancy ', 15), (' Occupancy expenses', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [(' Rental expenses ', 38), (' Administration expenses ', 35), ('Rent ', 29), (' Occupancy expenses', 28), (' Occupancy ', 14)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' Rental expenses ', 44), (' Occupancy expenses', 39), ('Rent ', 35), (' Administration expenses ', 34), (' Occupancy ', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses', 44), (' Administration expenses ', 36), (' Rental expenses ', 32), (' Occupancy ', 18)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [(' Rental expenses ', 50), ('Rent ', 40), (' Administration expenses ', 37), (' Occupancy expenses', 35), (' Occupancy ', 12)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [(' Administration expenses ', 39), (' Rental expenses ', 32), (' Occupancy expenses', 27), ('Rent ', 21), (' Occupancy ', 13)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Administration expenses ', 43), (' Rental expenses ', 40), ('Rent ', 38), (' Occupancy expenses', 33), (' Occupancy ', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' Rental expenses ', 56), ('Rent ', 50), (' Occupancy expenses', 42), (' Administration expenses ', 29), (' Occupancy ', 12)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administration expenses ', 27), (' Occupancy expenses', 23), (' Rental expenses ', 22), ('Rent ', 11), (' Occupancy ', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [(' Administration expenses ', 35), (' Rental expenses ', 32), ('Rent ', 27), (' Occupancy expenses', 27), (' Occupancy ', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [(' Occupancy expenses', 64), (' Rental expenses ', 62), (' Administration expenses ', 41), ('Rent ', 24), (' Occupancy ', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [(' Rental expenses ', 63), (' Administration expenses ', 47), (' Occupancy expenses', 41), ('Rent ', 23), (' Occupancy ', 7)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [(' Rental expenses ', 28), (' Administration expenses ', 25), (' Occupancy expenses', 21), ('Rent ', 20), (' Occupancy ', 19)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [(' Administration expenses ', 76), (' Rental expenses ', 46), (' Occupancy expenses', 37), ('Rent ', 20), (' Occupancy ', 6)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [(' Rental expenses ', 35), ('Rent ', 32), (' Administration expenses ', 32), (' Occupancy expenses', 24), (' Occupancy ', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses ', 69), (' Occupancy expenses', 57), (' Administration expenses ', 38), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [(' Rental expenses ', 34), (' Administration expenses ', 31), (' Occupancy expenses', 21), ('Rent ', 20), (' Occupancy ', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses ', 40), (' Occupancy expenses', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [(' Rental expenses ', 37), (' Administration expenses ', 30), (' Occupancy expenses', 29), ('Rent ', 24), (' Occupancy ', 11)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' Rental expenses ', 40), (' Occupancy expenses', 33), (' Administration expenses ', 26), ('Rent ', 20), (' Occupancy ', 14)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [('Rent ', 33), (' Administration expenses ', 25), (' Rental expenses ', 19), (' Occupancy ', 15), (' Occupancy expenses', 10)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [(' Rental expenses ', 38), (' Administration expenses ', 35), ('Rent ', 29), (' Occupancy expenses', 28), (' Occupancy ', 14)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' Rental expenses ', 44), (' Occupancy expenses', 39), ('Rent ', 35), (' Administration expenses ', 34), (' Occupancy ', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['Other income ', ' Commission revenue ', ' Rent ', ' rental revenue']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [('Other revenue', 52), ('other operating', 29), (' Other income', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [('Other revenue', 54), ('other operating', 34), (' Other income', 28)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('Other revenue', 100), ('other operating', 45), (' Other income', 43)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('Other revenue', 50), ('other operating', 36), (' Other income', 35)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Other income', 32), ('other operating', 25), ('Other revenue', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [('Other revenue', 47), ('other operating', 43), (' Other income', 34)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [('other operating', 43), (' Other income', 33), ('Other revenue', 32)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [('other operating', 31), ('Other revenue', 29), (' Other income', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [(' Other income', 81), ('other operating', 54), ('Other revenue', 36)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [('Other revenue', 32), ('other operating', 28), (' Other income', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [(' Other income', 50), ('other operating', 32), ('Other revenue', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [('other operating', 38), ('Other revenue', 36), (' Other income', 22)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [(' Other income', 54), ('other operating', 45), ('Other revenue', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' Other income', 42), ('other operating', 38), ('Other revenue', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [('Other revenue', 30), ('other operating', 22), (' Other income', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [('Other revenue', 44), ('other operating', 41), (' Other income', 34)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [('other operating', 41), (' Other income', 40), ('Other revenue', 32)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 10], 'score': 81, 'value': -8655.0, 'line_item_label': ['Other revenue', 'Other income / (cost)'], 'note_numbers': [nan, nan], 'line_item_value': [21.0, -8676.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [('Other revenue', 52), ('other operating', 29), (' Other income', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [('Other revenue', 54), ('other operating', 34), (' Other income', 28)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('Other revenue', 100), ('other operating', 45), (' Other income', 43)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('Other revenue', 50), ('other operating', 36), (' Other income', 35)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Other income', 32), ('other operating', 25), ('Other revenue', 23)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [('Other revenue', 47), ('other operating', 43), (' Other income', 34)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [('other operating', 43), (' Other income', 33), ('Other revenue', 32)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [('other operating', 31), ('Other revenue', 29), (' Other income', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [(' Other income', 81), ('other operating', 54), ('Other revenue', 36)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [('Other revenue', 32), ('other operating', 28), (' Other income', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [(' Other income', 50), ('other operating', 32), ('Other revenue', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [('other operating', 38), ('Other revenue', 36), (' Other income', 22)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [(' Other income', 54), ('other operating', 45), ('Other revenue', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' Other income', 42), ('other operating', 38), ('Other revenue', 29)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [('Other revenue', 30), ('other operating', 22), (' Other income', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [('Other revenue', 44), ('other operating', 41), (' Other income', 34)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [('other operating', 41), (' Other income', 40), ('Other revenue', 32)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 10], 'score': 81, 'value': 4895.0, 'line_item_label': ['Other revenue', 'Other income / (cost)'], 'note_numbers': [nan, nan], 'line_item_value': [1213.0, 3682.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [(' Interest revenue', 46), ('other income', 27), ('Finance income and costs', 25), (' Net finance costs', 23), (' Finance income and finance costs', 21), ('finance income', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [(' Interest revenue', 50), ('finance income', 32), ('Finance income and costs', 30), (' Finance income and finance costs', 30), (' Net finance costs', 30), ('other income', 28)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Interest revenue', 74), ('other income', 43), (' Net finance costs', 30), ('Finance income and costs', 24), (' Finance income and finance costs', 20), ('finance income', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' Interest revenue', 44), ('other income', 35), ('Finance income and costs', 30), ('finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs', 22)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Net finance costs', 41), ('Finance income and costs', 40), (' Finance income and finance costs', 33), ('other income', 32), ('finance income', 23), (' Interest revenue', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [(' Net finance costs', 48), ('Finance income and costs', 46), (' Finance income and finance costs', 39), (' Interest revenue', 36), ('other income', 34), ('finance income', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [(' Interest revenue', 43), ('other income', 33), ('finance income', 32), ('Finance income and costs', 29), (' Net finance costs', 29), (' Finance income and finance costs', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [(' Interest revenue', 43), ('Finance income and costs', 37), (' Finance income and finance costs', 32), (' Net finance costs', 32), ('finance income', 29), ('other income', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [('other income', 81), (' Net finance costs', 65), ('Finance income and costs', 54), ('finance income', 50), (' Finance income and finance costs', 45), (' Interest revenue', 32)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [(' Interest revenue', 44), (' Finance income and finance costs', 41), (' Net finance costs', 39), ('Finance income and costs', 38), ('finance income', 32), ('other income', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [('other income', 50), ('finance income', 42), (' Net finance costs', 39), (' Finance income and finance costs', 37), ('Finance income and costs', 33), (' Interest revenue', 28)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), (' Net finance costs', 45), ('Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [(' Net finance costs', 39), ('Finance income and costs', 32), (' Interest revenue', 32), (' Finance income and finance costs', 32), ('other income', 22), ('finance income', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), ('Finance income and costs', 42), ('finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [('other income', 54), (' Net finance costs', 49), ('Finance income and costs', 39), (' Finance income and finance costs', 38), ('finance income', 33), (' Interest revenue', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('other income', 42), (' Net finance costs', 42), ('Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 29), (' Interest revenue', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [(' Interest revenue', 35), (' Net finance costs', 26), ('other income', 21), ('Finance income and costs', 21), ('finance income', 20), (' Finance income and finance costs', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [(' Interest revenue', 41), ('other income', 34), (' Net finance costs', 31), ('Finance income and costs', 27), (' Finance income and finance costs', 23), ('finance income', 22)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' Interest revenue', 59), (' Net finance costs', 47), ('Finance income and costs', 45), ('other income', 40), ('finance income', 39), (' Finance income and finance costs', 38)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 81, 'value': -8676.0, 'line_item_label': ['Other income / (cost)'], 'note_numbers': [nan], 'line_item_value': [-8676.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:21+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [(' Interest revenue', 46), ('other income', 27), ('Finance income and costs', 25), (' Net finance costs', 23), (' Finance income and finance costs', 21), ('finance income', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [(' Interest revenue', 50), ('finance income', 32), ('Finance income and costs', 30), (' Finance income and finance costs', 30), (' Net finance costs', 30), ('other income', 28)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Interest revenue', 74), ('other income', 43), (' Net finance costs', 30), ('Finance income and costs', 24), (' Finance income and finance costs', 20), ('finance income', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' Interest revenue', 44), ('other income', 35), ('Finance income and costs', 30), ('finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs', 22)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Net finance costs', 41), ('Finance income and costs', 40), (' Finance income and finance costs', 33), ('other income', 32), ('finance income', 23), (' Interest revenue', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [(' Net finance costs', 48), ('Finance income and costs', 46), (' Finance income and finance costs', 39), (' Interest revenue', 36), ('other income', 34), ('finance income', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [(' Interest revenue', 43), ('other income', 33), ('finance income', 32), ('Finance income and costs', 29), (' Net finance costs', 29), (' Finance income and finance costs', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [(' Interest revenue', 43), ('Finance income and costs', 37), (' Finance income and finance costs', 32), (' Net finance costs', 32), ('finance income', 29), ('other income', 24)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [('other income', 81), (' Net finance costs', 65), ('Finance income and costs', 54), ('finance income', 50), (' Finance income and finance costs', 45), (' Interest revenue', 32)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [(' Interest revenue', 44), (' Finance income and finance costs', 41), (' Net finance costs', 39), ('Finance income and costs', 38), ('finance income', 32), ('other income', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [('other income', 50), ('finance income', 42), (' Net finance costs', 39), (' Finance income and finance costs', 37), ('Finance income and costs', 33), (' Interest revenue', 28)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), (' Net finance costs', 45), ('Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [(' Net finance costs', 39), ('Finance income and costs', 32), (' Interest revenue', 32), (' Finance income and finance costs', 32), ('other income', 22), ('finance income', 21)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), ('Finance income and costs', 42), ('finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [('other income', 54), (' Net finance costs', 49), ('Finance income and costs', 39), (' Finance income and finance costs', 38), ('finance income', 33), (' Interest revenue', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('other income', 42), (' Net finance costs', 42), ('Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 29), (' Interest revenue', 27)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [(' Interest revenue', 35), (' Net finance costs', 26), ('other income', 21), ('Finance income and costs', 21), ('finance income', 20), (' Finance income and finance costs', 17)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [(' Interest revenue', 41), ('other income', 34), (' Net finance costs', 31), ('Finance income and costs', 27), (' Finance income and finance costs', 23), ('finance income', 22)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' Interest revenue', 59), (' Net finance costs', 47), ('Finance income and costs', 45), ('other income', 40), ('finance income', 39), (' Finance income and finance costs', 38)]
2023-08-11 14:18:21+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 81, 'value': 3682.0, 'line_item_label': ['Other income / (cost)'], 'note_numbers': [nan], 'line_item_value': [3682.0]}
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['loan ', ' debt ', ' debenture ', ' cash credit ', ' borrowings ', ' bank facilities ', ' bonds ', ' interest ', ' Interest expenses ', ' Discount unwind on the provision for asset retirement obligation ', ' Other interest expense ', ' Interest on leases ', ' Interest on bank overdrafts and loans (other than those from related parties) ', ' Interest accrued on loans ', ' Interest accrued on lease liabilities ', ' Lease interest expense ', ' Interest expense on financial liabilities using the effective interest rate method - other ', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', ' Lease liabilities interest expense ', ' interest income']
2023-08-11 14:18:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:21+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-11 14:18:21+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:22+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense', 29), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [(' finance expenses ', 42), (' interest expense', 38), (' net finance costs ', 23), ('finance cost ', 18)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [(' finance expenses ', 32), (' net finance costs ', 30), (' interest expense', 30), ('finance cost ', 28)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost ', 35), (' net finance costs ', 30), (' interest expense', 30), (' finance expenses ', 24)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' interest expense', 44), (' finance expenses ', 40), ('finance cost ', 26), (' net finance costs ', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost ', 40), (' interest expense', 21), (' finance expenses ', 15)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [('finance cost ', 48), (' net finance costs ', 48), (' interest expense', 36), (' finance expenses ', 32)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance expenses ', 32), (' interest expense', 30)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [(' finance expenses ', 69), (' interest expense', 64), ('finance cost ', 33), (' net finance costs ', 29)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [(' interest expense', 54), (' finance expenses ', 46), (' net finance costs ', 32), ('finance cost ', 18)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [(' net finance costs ', 65), ('finance cost ', 59), (' interest expense', 45), (' finance expenses ', 34)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [(' interest expense', 49), (' finance expenses ', 41), (' net finance costs ', 39), ('finance cost ', 27)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost ', 38), (' finance expenses ', 35), (' interest expense', 33)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses ', 69), (' interest expense', 65), (' net finance costs ', 45), ('finance cost ', 37)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost ', 37), (' finance expenses ', 34), (' interest expense', 32)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' interest expense', 54), (' net finance costs ', 49), (' finance expenses ', 46), ('finance cost ', 42)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [(' net finance costs ', 49), (' interest expense', 49), (' finance expenses ', 37), ('finance cost ', 34)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' net finance costs ', 42), (' interest expense', 42), (' finance expenses ', 36), ('finance cost ', 33)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [(' net finance costs ', 26), (' interest expense', 26), ('finance cost ', 21), (' finance expenses ', 10)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [(' interest expense', 36), (' net finance costs ', 31), (' finance expenses ', 27), ('finance cost ', 23)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' net finance costs ', 47), (' interest expense', 47), (' finance expenses ', 44), ('finance cost ', 40)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:22+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense', 29), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [(' finance expenses ', 42), (' interest expense', 38), (' net finance costs ', 23), ('finance cost ', 18)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [(' finance expenses ', 32), (' net finance costs ', 30), (' interest expense', 30), ('finance cost ', 28)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost ', 35), (' net finance costs ', 30), (' interest expense', 30), (' finance expenses ', 24)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' interest expense', 44), (' finance expenses ', 40), ('finance cost ', 26), (' net finance costs ', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost ', 40), (' interest expense', 21), (' finance expenses ', 15)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [('finance cost ', 48), (' net finance costs ', 48), (' interest expense', 36), (' finance expenses ', 32)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance expenses ', 32), (' interest expense', 30)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [(' finance expenses ', 69), (' interest expense', 64), ('finance cost ', 33), (' net finance costs ', 29)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [(' interest expense', 54), (' finance expenses ', 46), (' net finance costs ', 32), ('finance cost ', 18)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [(' net finance costs ', 65), ('finance cost ', 59), (' interest expense', 45), (' finance expenses ', 34)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [(' interest expense', 49), (' finance expenses ', 41), (' net finance costs ', 39), ('finance cost ', 27)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost ', 38), (' finance expenses ', 35), (' interest expense', 33)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses ', 69), (' interest expense', 65), (' net finance costs ', 45), ('finance cost ', 37)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost ', 37), (' finance expenses ', 34), (' interest expense', 32)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' interest expense', 54), (' net finance costs ', 49), (' finance expenses ', 46), ('finance cost ', 42)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [(' net finance costs ', 49), (' interest expense', 49), (' finance expenses ', 37), ('finance cost ', 34)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' net finance costs ', 42), (' interest expense', 42), (' finance expenses ', 36), ('finance cost ', 33)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [(' net finance costs ', 26), (' interest expense', 26), ('finance cost ', 21), (' finance expenses ', 10)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [(' interest expense', 36), (' net finance costs ', 31), (' finance expenses ', 27), ('finance cost ', 23)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' net finance costs ', 47), (' interest expense', 47), (' finance expenses ', 44), ('finance cost ', 40)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:22+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-11 14:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories']
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:22+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-11 14:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['Accretion expense ', ' Arising from inventory of cranes ', ' Arising from inventory of spare parts ', ' Asset impairment ', ' commission revenue ', ' dividend from other parties ', ' effective portion of changes in fair value of cash flow ', ' foreign exchange gain ', ' government grants ', ' Impairment loss ', ' insurance proceeds ', ' Interest on unwinding of discount in provisions ', ' Investment in joint venture ', ' japan recoveries ', ' Loss on loan refinancing ', ' Loss on sale of disposal of assets ', ' margin charge income ', ' net (loss)/profit on disposal of non-current assets ', ' net foreign exchange (loss)/gain ', ' net foreign exchange gain ', ' net foreign exchange gains/(losses) ', ' net gain / loss on disposal of property plant and equipment ', ' Net loss on disposal of property ', ' net of tax ', ' Net other foreign exchange (losses)/gains ', ' net ppe disposal (loss)/gain ', ' other ', ' other income ', ' other miscellaneous - net (loss)/gain ', ' paid by customers - at amortised cost ', ' plant and equipment ', ' Power purchase agreement realised gain ', ' Power purchase agreement unrelaised gain ', ' profit from discontinued operation ', ' Profit on sale of assets ', ' quota lease income ', ' Remuneration from services linked to newly acquired entities ', ' secondment income (tw recovery) ', ' Share of gain/(loss) of joint venture ', ' share of jv income ', ' Sub-lease rental income ', ' sundry income ', ' other revenue']
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:22+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-11 14:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:22+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [(' expenses ', 47), (' interest revenue ', 46), (' Loss on revaluation of inventories', 44), (' finance expenses', 42), (' Impairement (expenses)/reversal ', 39), (' other income and revenue ', 36), (' net of tax ', 33), (' net of tax ', 33), (' other gains/losses ', 31), (' Share of gain/(loss) of joint venture ', 31), (' share of profit of equity accounted investees ', 30), (' other opertaing income ', 28), (' other income ', 27), (' Other income ', 27), (' Impairment loss ', 27), (' finance income and costs ', 25), (' Finance income and costs ', 25), (' interest gains and losses ', 24), (' net finance costs ', 23), (' finance income and finance cost ', 21), (' Finance income and finance costs ', 21), (' Profit from discontinued operation ', 21), ('finance cost ', 18)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [(' other income and revenue ', 51), (' interest revenue ', 50), (' Impairement (expenses)/reversal ', 40), (' Share of gain/(loss) of joint venture ', 38), (' Profit from discontinued operation ', 38), (' other opertaing income ', 37), (' Loss on revaluation of inventories', 35), (' share of profit of equity accounted investees ', 33), (' finance expenses', 32), (' net finance costs ', 30), (' finance income and finance cost ', 30), (' finance income and costs ', 30), (' interest gains and losses ', 30), (' Finance income and finance costs ', 30), (' Finance income and costs ', 30), ('finance cost ', 28), (' other income ', 28), (' Other income ', 28), (' expenses ', 26), (' other gains/losses ', 25), (' Impairment loss ', 22), (' net of tax ', 19), (' net of tax ', 19)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' interest revenue ', 74), (' other income and revenue ', 71), (' Share of gain/(loss) of joint venture ', 45), (' Impairement (expenses)/reversal ', 44), (' other income ', 43), (' Other income ', 43), (' Loss on revaluation of inventories', 42), (' other gains/losses ', 37), ('finance cost ', 35), (' other opertaing income ', 33), (' expenses ', 33), (' Profit from discontinued operation ', 31), (' net finance costs ', 30), (' share of profit of equity accounted investees ', 30), (' finance expenses', 24), (' finance income and costs ', 24), (' interest gains and losses ', 24), (' Finance income and costs ', 24), (' net of tax ', 21), (' net of tax ', 21), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20), (' Impairment loss ', 17)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' interest revenue ', 44), (' net of tax ', 42), (' net of tax ', 42), (' Loss on revaluation of inventories', 42), (' finance expenses', 40), (' other income ', 35), (' other income and revenue ', 35), (' Other income ', 35), (' other opertaing income ', 33), (' expenses ', 33), (' Impairement (expenses)/reversal ', 31), (' other gains/losses ', 30), (' share of profit of equity accounted investees ', 30), (' finance income and costs ', 30), (' Share of gain/(loss) of joint venture ', 30), (' Finance income and costs ', 30), (' interest gains and losses ', 29), ('finance cost ', 26), (' Impairment loss ', 26), (' Profit from discontinued operation ', 26), (' finance income and finance cost ', 25), (' Finance income and finance costs ', 25), (' net finance costs ', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost ', 40), (' finance income and costs ', 40), (' Finance income and costs ', 40), (' Profit from discontinued operation ', 39), (' other opertaing income ', 38), (' finance income and finance cost ', 33), (' share of profit of equity accounted investees ', 33), (' Finance income and finance costs ', 33), (' other income ', 32), (' Other income ', 32), (' Share of gain/(loss) of joint venture ', 29), (' Loss on revaluation of inventories', 29), (' other gains/losses ', 28), (' interest gains and losses ', 28), (' other income and revenue ', 28), (' Impairment loss ', 24), (' Impairement (expenses)/reversal ', 24), (' interest revenue ', 21), (' net of tax ', 19), (' net of tax ', 19), (' finance expenses', 15), (' expenses ', 10)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [('finance cost ', 48), (' net finance costs ', 48), (' finance income and costs ', 46), (' Finance income and costs ', 46), (' other opertaing income ', 44), (' Profit from discontinued operation ', 44), (' share of profit of equity accounted investees ', 42), (' other income and revenue ', 40), (' finance income and finance cost ', 39), (' Finance income and finance costs ', 39), (' Impairement (expenses)/reversal ', 37), (' interest revenue ', 36), (' Loss on revaluation of inventories', 36), (' Share of gain/(loss) of joint venture ', 35), (' other income ', 34), (' Other income ', 34), (' finance expenses', 32), (' other gains/losses ', 30), (' interest gains and losses ', 30), (' expenses ', 25), (' net of tax ', 24), (' net of tax ', 24), (' Impairment loss ', 21)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses ', 52), (' Profit from discontinued operation ', 46), (' net finance costs ', 44), ('finance cost ', 43), (' other opertaing income ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 36), (' other income ', 35), (' Other income ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Impairment loss ', 35), (' finance expenses', 32), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), (' interest gains and losses ', 29), (' finance income and finance cost ', 25), (' Impairement (expenses)/reversal ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [(' finance expenses', 69), (' expenses ', 63), (' Impairement (expenses)/reversal ', 55), (' interest revenue ', 43), (' other gains/losses ', 36), (' Loss on revaluation of inventories', 35), ('finance cost ', 33), (' other income ', 33), (' Other income ', 33), (' other opertaing income ', 32), (' net finance costs ', 29), (' finance income and costs ', 29), (' interest gains and losses ', 29), (' other income and revenue ', 29), (' Share of gain/(loss) of joint venture ', 29), (' Finance income and costs ', 29), (' share of profit of equity accounted investees ', 25), (' Impairment loss ', 25), (' Profit from discontinued operation ', 25), (' finance income and finance cost ', 24), (' Finance income and finance costs ', 24), (' net of tax ', 20), (' net of tax ', 20)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [(' Impairement (expenses)/reversal ', 57), (' interest gains and losses ', 50), (' finance expenses', 46), (' Share of gain/(loss) of joint venture ', 44), (' expenses ', 43), (' interest revenue ', 43), (' share of profit of equity accounted investees ', 42), (' other income and revenue ', 41), (' other opertaing income ', 40), (' other gains/losses ', 38), (' finance income and costs ', 37), (' Finance income and costs ', 37), (' Loss on revaluation of inventories', 37), (' net finance costs ', 32), (' finance income and finance cost ', 32), (' Finance income and finance costs ', 32), (' Impairment loss ', 30), (' Profit from discontinued operation ', 29), (' net of tax ', 28), (' net of tax ', 28), (' other income ', 24), (' Other income ', 24), ('finance cost ', 18)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [(' other income ', 81), (' Other income ', 81), (' net finance costs ', 65), (' other opertaing income ', 65), (' other income and revenue ', 63), ('finance cost ', 59), (' other gains/losses ', 58), (' finance income and costs ', 54), (' Finance income and costs ', 54), (' Profit from discontinued operation ', 51), (' finance income and finance cost ', 45), (' Finance income and finance costs ', 45), (' share of profit of equity accounted investees ', 43), (' Impairement (expenses)/reversal ', 39), (' interest gains and losses ', 37), (' Share of gain/(loss) of joint venture ', 36), (' finance expenses', 34), (' interest revenue ', 32), (' Loss on revaluation of inventories', 32), (' Impairment loss ', 30), (' net of tax ', 26), (' net of tax ', 26), (' expenses ', 9)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [(' interest revenue ', 44), (' Share of gain/(loss) of joint venture ', 44), (' Impairement (expenses)/reversal ', 43), (' interest gains and losses ', 42), (' other income and revenue ', 42), (' finance expenses', 41), (' finance income and finance cost ', 41), (' Finance income and finance costs ', 41), (' net finance costs ', 39), (' other gains/losses ', 39), (' expenses ', 38), (' finance income and costs ', 38), (' Profit from discontinued operation ', 38), (' Finance income and costs ', 38), (' other opertaing income ', 36), (' Loss on revaluation of inventories', 34), (' share of profit of equity accounted investees ', 33), (' net of tax ', 30), (' net of tax ', 30), ('finance cost ', 27), (' other income ', 27), (' Other income ', 27), (' Impairment loss ', 27)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [(' other opertaing income ', 56), (' other income ', 50), (' share of profit of equity accounted investees ', 50), (' Other income ', 50), (' Profit from discontinued operation ', 50), (' other income and revenue ', 47), (' net of tax ', 43), (' net of tax ', 43), (' net finance costs ', 39), ('finance cost ', 38), (' finance income and finance cost ', 37), (' Finance income and finance costs ', 37), (' finance expenses', 35), (' Impairement (expenses)/reversal ', 34), (' other gains/losses ', 33), (' finance income and costs ', 33), (' interest gains and losses ', 33), (' Share of gain/(loss) of joint venture ', 33), (' Finance income and costs ', 33), (' Loss on revaluation of inventories', 33), (' Impairment loss ', 31), (' interest revenue ', 28), (' expenses ', 15)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' Impairement (expenses)/reversal ', 56), (' expenses ', 55), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' other income and revenue ', 47), (' net finance costs ', 45), (' finance income and costs ', 43), (' net of tax ', 43), (' net of tax ', 43), (' Finance income and costs ', 43), ('finance cost ', 37), (' finance income and finance cost ', 36), (' Finance income and finance costs ', 36), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest revenue ', 32), (' interest gains and losses ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Loss on revaluation of inventories', 32), (' share of profit of equity accounted investees ', 27), (' Impairment loss ', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [(' net of tax ', 52), (' net of tax ', 52), (' share of profit of equity accounted investees ', 47), (' Profit from discontinued operation ', 47), (' net finance costs ', 39), ('finance cost ', 37), (' other opertaing income ', 35), (' finance expenses', 34), (' other gains/losses ', 32), (' finance income and finance cost ', 32), (' finance income and costs ', 32), (' interest revenue ', 32), (' interest gains and losses ', 32), (' other income and revenue ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and finance costs ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories', 32), (' Impairment loss ', 30), (' Impairement (expenses)/reversal ', 28), (' other income ', 22), (' Other income ', 22), (' expenses ', 18)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other income ', 67), (' Other income ', 67), (' other income and revenue ', 59), (' other opertaing income ', 55), (' net finance costs ', 49), (' other gains/losses ', 49), (' Impairement (expenses)/reversal ', 48), (' finance expenses', 46), (' Profit from discontinued operation ', 45), ('finance cost ', 42), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' share of profit of equity accounted investees ', 39), (' finance income and finance cost ', 36), (' interest gains and losses ', 36), (' Share of gain/(loss) of joint venture ', 36), (' Finance income and finance costs ', 36), (' Impairment loss ', 30), (' expenses ', 29), (' Loss on revaluation of inventories', 28), (' interest revenue ', 27), (' net of tax ', 21), (' net of tax ', 21)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [(' other opertaing income ', 58), (' other income ', 54), (' other income and revenue ', 54), (' Other income ', 54), (' net finance costs ', 49), (' Profit from discontinued operation ', 46), (' Impairement (expenses)/reversal ', 44), (' share of profit of equity accounted investees ', 43), (' other gains/losses ', 40), (' finance income and costs ', 39), (' Finance income and costs ', 39), (' finance income and finance cost ', 38), (' interest gains and losses ', 38), (' Share of gain/(loss) of joint venture ', 38), (' net of tax ', 38), (' Finance income and finance costs ', 38), (' net of tax ', 38), (' finance expenses', 37), ('finance cost ', 34), (' Loss on revaluation of inventories', 31), (' interest revenue ', 27), (' Impairment loss ', 24), (' expenses ', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' other opertaing income ', 47), (' Profit from discontinued operation ', 47), (' other income and revenue ', 44), (' net finance costs ', 42), (' other income ', 42), (' Other income ', 42), (' share of profit of equity accounted investees ', 39), (' Impairement (expenses)/reversal ', 39), (' finance income and costs ', 38), (' Finance income and costs ', 38), (' Loss on revaluation of inventories', 38), (' finance income and finance cost ', 37), (' Share of gain/(loss) of joint venture ', 37), (' Finance income and finance costs ', 37), (' finance expenses', 36), (' interest gains and losses ', 34), ('finance cost ', 33), (' other gains/losses ', 31), (' interest revenue ', 27), (' net of tax ', 27), (' net of tax ', 27), (' Impairment loss ', 25), (' expenses ', 19)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [(' interest revenue ', 35), (' share of profit of equity accounted investees ', 28), (' Loss on revaluation of inventories', 28), (' interest gains and losses ', 27), (' other income and revenue ', 27), (' net of tax ', 27), (' net of tax ', 27), (' net finance costs ', 26), (' other gains/losses ', 26), (' other opertaing income ', 23), (' Profit from discontinued operation ', 23), (' Share of gain/(loss) of joint venture ', 22), ('finance cost ', 21), (' other income ', 21), (' finance income and costs ', 21), (' Other income ', 21), (' Impairment loss ', 21), (' Finance income and costs ', 21), (' finance income and finance cost ', 17), (' Finance income and finance costs ', 17), (' Impairement (expenses)/reversal ', 14), (' finance expenses', 10), (' expenses ', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [(' share of profit of equity accounted investees ', 51), (' other opertaing income ', 48), (' Profit from discontinued operation ', 43), (' interest revenue ', 41), (' other income and revenue ', 39), (' Share of gain/(loss) of joint venture ', 38), (' other gains/losses ', 36), (' Impairement (expenses)/reversal ', 36), (' Loss on revaluation of inventories', 36), (' other income ', 34), (' Other income ', 34), (' net finance costs ', 31), (' interest gains and losses ', 30), (' Impairment loss ', 29), (' finance expenses', 27), (' expenses ', 27), (' finance income and costs ', 27), (' Finance income and costs ', 27), (' net of tax ', 26), (' net of tax ', 26), ('finance cost ', 23), (' finance income and finance cost ', 23), (' Finance income and finance costs ', 23)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' interest revenue ', 59), (' other opertaing income ', 49), (' interest gains and losses ', 49), (' net finance costs ', 47), (' finance income and costs ', 45), (' Finance income and costs ', 45), (' finance expenses', 44), (' other gains/losses ', 41), ('finance cost ', 40), (' other income ', 40), (' Other income ', 40), (' Loss on revaluation of inventories', 40), (' finance income and finance cost ', 38), (' Share of gain/(loss) of joint venture ', 38), (' net of tax ', 38), (' Finance income and finance costs ', 38), (' net of tax ', 38), (' share of profit of equity accounted investees ', 37), (' Profit from discontinued operation ', 35), (' other income and revenue ', 34), (' Impairment loss ', 27), (' Impairement (expenses)/reversal ', 26), (' expenses ', 24)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 81, 'value': -8676.0, 'line_item_label': ['Other income / (cost)'], 'note_numbers': [nan], 'line_item_value': [-8676.0]}
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:22+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [(' expenses ', 47), (' interest revenue ', 46), (' Loss on revaluation of inventories', 44), (' finance expenses', 42), (' Impairement (expenses)/reversal ', 39), (' other income and revenue ', 36), (' net of tax ', 33), (' net of tax ', 33), (' other gains/losses ', 31), (' Share of gain/(loss) of joint venture ', 31), (' share of profit of equity accounted investees ', 30), (' other opertaing income ', 28), (' other income ', 27), (' Other income ', 27), (' Impairment loss ', 27), (' finance income and costs ', 25), (' Finance income and costs ', 25), (' interest gains and losses ', 24), (' net finance costs ', 23), (' finance income and finance cost ', 21), (' Finance income and finance costs ', 21), (' Profit from discontinued operation ', 21), ('finance cost ', 18)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [(' other income and revenue ', 51), (' interest revenue ', 50), (' Impairement (expenses)/reversal ', 40), (' Share of gain/(loss) of joint venture ', 38), (' Profit from discontinued operation ', 38), (' other opertaing income ', 37), (' Loss on revaluation of inventories', 35), (' share of profit of equity accounted investees ', 33), (' finance expenses', 32), (' net finance costs ', 30), (' finance income and finance cost ', 30), (' finance income and costs ', 30), (' interest gains and losses ', 30), (' Finance income and finance costs ', 30), (' Finance income and costs ', 30), ('finance cost ', 28), (' other income ', 28), (' Other income ', 28), (' expenses ', 26), (' other gains/losses ', 25), (' Impairment loss ', 22), (' net of tax ', 19), (' net of tax ', 19)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' interest revenue ', 74), (' other income and revenue ', 71), (' Share of gain/(loss) of joint venture ', 45), (' Impairement (expenses)/reversal ', 44), (' other income ', 43), (' Other income ', 43), (' Loss on revaluation of inventories', 42), (' other gains/losses ', 37), ('finance cost ', 35), (' other opertaing income ', 33), (' expenses ', 33), (' Profit from discontinued operation ', 31), (' net finance costs ', 30), (' share of profit of equity accounted investees ', 30), (' finance expenses', 24), (' finance income and costs ', 24), (' interest gains and losses ', 24), (' Finance income and costs ', 24), (' net of tax ', 21), (' net of tax ', 21), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20), (' Impairment loss ', 17)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' interest revenue ', 44), (' net of tax ', 42), (' net of tax ', 42), (' Loss on revaluation of inventories', 42), (' finance expenses', 40), (' other income ', 35), (' other income and revenue ', 35), (' Other income ', 35), (' other opertaing income ', 33), (' expenses ', 33), (' Impairement (expenses)/reversal ', 31), (' other gains/losses ', 30), (' share of profit of equity accounted investees ', 30), (' finance income and costs ', 30), (' Share of gain/(loss) of joint venture ', 30), (' Finance income and costs ', 30), (' interest gains and losses ', 29), ('finance cost ', 26), (' Impairment loss ', 26), (' Profit from discontinued operation ', 26), (' finance income and finance cost ', 25), (' Finance income and finance costs ', 25), (' net finance costs ', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost ', 40), (' finance income and costs ', 40), (' Finance income and costs ', 40), (' Profit from discontinued operation ', 39), (' other opertaing income ', 38), (' finance income and finance cost ', 33), (' share of profit of equity accounted investees ', 33), (' Finance income and finance costs ', 33), (' other income ', 32), (' Other income ', 32), (' Share of gain/(loss) of joint venture ', 29), (' Loss on revaluation of inventories', 29), (' other gains/losses ', 28), (' interest gains and losses ', 28), (' other income and revenue ', 28), (' Impairment loss ', 24), (' Impairement (expenses)/reversal ', 24), (' interest revenue ', 21), (' net of tax ', 19), (' net of tax ', 19), (' finance expenses', 15), (' expenses ', 10)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [('finance cost ', 48), (' net finance costs ', 48), (' finance income and costs ', 46), (' Finance income and costs ', 46), (' other opertaing income ', 44), (' Profit from discontinued operation ', 44), (' share of profit of equity accounted investees ', 42), (' other income and revenue ', 40), (' finance income and finance cost ', 39), (' Finance income and finance costs ', 39), (' Impairement (expenses)/reversal ', 37), (' interest revenue ', 36), (' Loss on revaluation of inventories', 36), (' Share of gain/(loss) of joint venture ', 35), (' other income ', 34), (' Other income ', 34), (' finance expenses', 32), (' other gains/losses ', 30), (' interest gains and losses ', 30), (' expenses ', 25), (' net of tax ', 24), (' net of tax ', 24), (' Impairment loss ', 21)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses ', 52), (' Profit from discontinued operation ', 46), (' net finance costs ', 44), ('finance cost ', 43), (' other opertaing income ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 36), (' other income ', 35), (' Other income ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Impairment loss ', 35), (' finance expenses', 32), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), (' interest gains and losses ', 29), (' finance income and finance cost ', 25), (' Impairement (expenses)/reversal ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [(' finance expenses', 69), (' expenses ', 63), (' Impairement (expenses)/reversal ', 55), (' interest revenue ', 43), (' other gains/losses ', 36), (' Loss on revaluation of inventories', 35), ('finance cost ', 33), (' other income ', 33), (' Other income ', 33), (' other opertaing income ', 32), (' net finance costs ', 29), (' finance income and costs ', 29), (' interest gains and losses ', 29), (' other income and revenue ', 29), (' Share of gain/(loss) of joint venture ', 29), (' Finance income and costs ', 29), (' share of profit of equity accounted investees ', 25), (' Impairment loss ', 25), (' Profit from discontinued operation ', 25), (' finance income and finance cost ', 24), (' Finance income and finance costs ', 24), (' net of tax ', 20), (' net of tax ', 20)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [(' Impairement (expenses)/reversal ', 57), (' interest gains and losses ', 50), (' finance expenses', 46), (' Share of gain/(loss) of joint venture ', 44), (' expenses ', 43), (' interest revenue ', 43), (' share of profit of equity accounted investees ', 42), (' other income and revenue ', 41), (' other opertaing income ', 40), (' other gains/losses ', 38), (' finance income and costs ', 37), (' Finance income and costs ', 37), (' Loss on revaluation of inventories', 37), (' net finance costs ', 32), (' finance income and finance cost ', 32), (' Finance income and finance costs ', 32), (' Impairment loss ', 30), (' Profit from discontinued operation ', 29), (' net of tax ', 28), (' net of tax ', 28), (' other income ', 24), (' Other income ', 24), ('finance cost ', 18)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [(' other income ', 81), (' Other income ', 81), (' net finance costs ', 65), (' other opertaing income ', 65), (' other income and revenue ', 63), ('finance cost ', 59), (' other gains/losses ', 58), (' finance income and costs ', 54), (' Finance income and costs ', 54), (' Profit from discontinued operation ', 51), (' finance income and finance cost ', 45), (' Finance income and finance costs ', 45), (' share of profit of equity accounted investees ', 43), (' Impairement (expenses)/reversal ', 39), (' interest gains and losses ', 37), (' Share of gain/(loss) of joint venture ', 36), (' finance expenses', 34), (' interest revenue ', 32), (' Loss on revaluation of inventories', 32), (' Impairment loss ', 30), (' net of tax ', 26), (' net of tax ', 26), (' expenses ', 9)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [(' interest revenue ', 44), (' Share of gain/(loss) of joint venture ', 44), (' Impairement (expenses)/reversal ', 43), (' interest gains and losses ', 42), (' other income and revenue ', 42), (' finance expenses', 41), (' finance income and finance cost ', 41), (' Finance income and finance costs ', 41), (' net finance costs ', 39), (' other gains/losses ', 39), (' expenses ', 38), (' finance income and costs ', 38), (' Profit from discontinued operation ', 38), (' Finance income and costs ', 38), (' other opertaing income ', 36), (' Loss on revaluation of inventories', 34), (' share of profit of equity accounted investees ', 33), (' net of tax ', 30), (' net of tax ', 30), ('finance cost ', 27), (' other income ', 27), (' Other income ', 27), (' Impairment loss ', 27)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [(' other opertaing income ', 56), (' other income ', 50), (' share of profit of equity accounted investees ', 50), (' Other income ', 50), (' Profit from discontinued operation ', 50), (' other income and revenue ', 47), (' net of tax ', 43), (' net of tax ', 43), (' net finance costs ', 39), ('finance cost ', 38), (' finance income and finance cost ', 37), (' Finance income and finance costs ', 37), (' finance expenses', 35), (' Impairement (expenses)/reversal ', 34), (' other gains/losses ', 33), (' finance income and costs ', 33), (' interest gains and losses ', 33), (' Share of gain/(loss) of joint venture ', 33), (' Finance income and costs ', 33), (' Loss on revaluation of inventories', 33), (' Impairment loss ', 31), (' interest revenue ', 28), (' expenses ', 15)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' Impairement (expenses)/reversal ', 56), (' expenses ', 55), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' other income and revenue ', 47), (' net finance costs ', 45), (' finance income and costs ', 43), (' net of tax ', 43), (' net of tax ', 43), (' Finance income and costs ', 43), ('finance cost ', 37), (' finance income and finance cost ', 36), (' Finance income and finance costs ', 36), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest revenue ', 32), (' interest gains and losses ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Loss on revaluation of inventories', 32), (' share of profit of equity accounted investees ', 27), (' Impairment loss ', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [(' net of tax ', 52), (' net of tax ', 52), (' share of profit of equity accounted investees ', 47), (' Profit from discontinued operation ', 47), (' net finance costs ', 39), ('finance cost ', 37), (' other opertaing income ', 35), (' finance expenses', 34), (' other gains/losses ', 32), (' finance income and finance cost ', 32), (' finance income and costs ', 32), (' interest revenue ', 32), (' interest gains and losses ', 32), (' other income and revenue ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and finance costs ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories', 32), (' Impairment loss ', 30), (' Impairement (expenses)/reversal ', 28), (' other income ', 22), (' Other income ', 22), (' expenses ', 18)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other income ', 67), (' Other income ', 67), (' other income and revenue ', 59), (' other opertaing income ', 55), (' net finance costs ', 49), (' other gains/losses ', 49), (' Impairement (expenses)/reversal ', 48), (' finance expenses', 46), (' Profit from discontinued operation ', 45), ('finance cost ', 42), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' share of profit of equity accounted investees ', 39), (' finance income and finance cost ', 36), (' interest gains and losses ', 36), (' Share of gain/(loss) of joint venture ', 36), (' Finance income and finance costs ', 36), (' Impairment loss ', 30), (' expenses ', 29), (' Loss on revaluation of inventories', 28), (' interest revenue ', 27), (' net of tax ', 21), (' net of tax ', 21)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [(' other opertaing income ', 58), (' other income ', 54), (' other income and revenue ', 54), (' Other income ', 54), (' net finance costs ', 49), (' Profit from discontinued operation ', 46), (' Impairement (expenses)/reversal ', 44), (' share of profit of equity accounted investees ', 43), (' other gains/losses ', 40), (' finance income and costs ', 39), (' Finance income and costs ', 39), (' finance income and finance cost ', 38), (' interest gains and losses ', 38), (' Share of gain/(loss) of joint venture ', 38), (' net of tax ', 38), (' Finance income and finance costs ', 38), (' net of tax ', 38), (' finance expenses', 37), ('finance cost ', 34), (' Loss on revaluation of inventories', 31), (' interest revenue ', 27), (' Impairment loss ', 24), (' expenses ', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' other opertaing income ', 47), (' Profit from discontinued operation ', 47), (' other income and revenue ', 44), (' net finance costs ', 42), (' other income ', 42), (' Other income ', 42), (' share of profit of equity accounted investees ', 39), (' Impairement (expenses)/reversal ', 39), (' finance income and costs ', 38), (' Finance income and costs ', 38), (' Loss on revaluation of inventories', 38), (' finance income and finance cost ', 37), (' Share of gain/(loss) of joint venture ', 37), (' Finance income and finance costs ', 37), (' finance expenses', 36), (' interest gains and losses ', 34), ('finance cost ', 33), (' other gains/losses ', 31), (' interest revenue ', 27), (' net of tax ', 27), (' net of tax ', 27), (' Impairment loss ', 25), (' expenses ', 19)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [(' interest revenue ', 35), (' share of profit of equity accounted investees ', 28), (' Loss on revaluation of inventories', 28), (' interest gains and losses ', 27), (' other income and revenue ', 27), (' net of tax ', 27), (' net of tax ', 27), (' net finance costs ', 26), (' other gains/losses ', 26), (' other opertaing income ', 23), (' Profit from discontinued operation ', 23), (' Share of gain/(loss) of joint venture ', 22), ('finance cost ', 21), (' other income ', 21), (' finance income and costs ', 21), (' Other income ', 21), (' Impairment loss ', 21), (' Finance income and costs ', 21), (' finance income and finance cost ', 17), (' Finance income and finance costs ', 17), (' Impairement (expenses)/reversal ', 14), (' finance expenses', 10), (' expenses ', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [(' share of profit of equity accounted investees ', 51), (' other opertaing income ', 48), (' Profit from discontinued operation ', 43), (' interest revenue ', 41), (' other income and revenue ', 39), (' Share of gain/(loss) of joint venture ', 38), (' other gains/losses ', 36), (' Impairement (expenses)/reversal ', 36), (' Loss on revaluation of inventories', 36), (' other income ', 34), (' Other income ', 34), (' net finance costs ', 31), (' interest gains and losses ', 30), (' Impairment loss ', 29), (' finance expenses', 27), (' expenses ', 27), (' finance income and costs ', 27), (' Finance income and costs ', 27), (' net of tax ', 26), (' net of tax ', 26), ('finance cost ', 23), (' finance income and finance cost ', 23), (' Finance income and finance costs ', 23)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' interest revenue ', 59), (' other opertaing income ', 49), (' interest gains and losses ', 49), (' net finance costs ', 47), (' finance income and costs ', 45), (' Finance income and costs ', 45), (' finance expenses', 44), (' other gains/losses ', 41), ('finance cost ', 40), (' other income ', 40), (' Other income ', 40), (' Loss on revaluation of inventories', 40), (' finance income and finance cost ', 38), (' Share of gain/(loss) of joint venture ', 38), (' net of tax ', 38), (' Finance income and finance costs ', 38), (' net of tax ', 38), (' share of profit of equity accounted investees ', 37), (' Profit from discontinued operation ', 35), (' other income and revenue ', 34), (' Impairment loss ', 27), (' Impairement (expenses)/reversal ', 26), (' expenses ', 24)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 81, 'value': 3682.0, 'line_item_label': ['Other income / (cost)'], 'note_numbers': [nan], 'line_item_value': [3682.0]}
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:22+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-11 14:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:22+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-11 14:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:22+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-11 14:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:22+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [('NULL', 14)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('NULL', 38)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [('NULL', 9)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [('NULL', 23)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [('NULL', 7)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [('NULL', 8)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [('NULL', 6)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [('NULL', 17)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [('NULL', 14)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [('NULL', 17)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:22+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [('NULL', 14)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('NULL', 38)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [('NULL', 9)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [('NULL', 23)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [('NULL', 7)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [('NULL', 8)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [('NULL', 6)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [('NULL', 17)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [('NULL', 14)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [('NULL', 17)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-11 14:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-11 14:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-11 14:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:22+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [('current tax', 45), ('deferred tax', 40), ('provision for taxation previous year', 40), (' income tax expense', 37), (' income tax benefit', 36), ('earlier year', 35), (' tax (expense)/benefit', 34), ('minimum alternate tax credit entitlement', 33), ('amount transferred to retained earnings', 32), (' income tax', 30), ('prior year ', 29), (' income tax benefit/(expense)', 29)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [('amount transferred to retained earnings', 46), ('provision for taxation previous year', 44), (' income tax benefit/(expense)', 41), (' tax (expense)/benefit', 37), ('minimum alternate tax credit entitlement', 35), ('prior year ', 34), ('earlier year', 32), (' income tax expense', 29), (' income tax benefit', 29), ('current tax', 28), ('deferred tax', 24), (' income tax', 18)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('deferred tax', 29), (' income tax benefit/(expense)', 28), (' income tax expense', 21), (' income tax benefit', 21), (' income tax', 19)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('current tax', 52), (' income tax expense', 50), ('deferred tax', 48), (' income tax benefit', 41), (' tax (expense)/benefit', 40), ('provision for taxation previous year', 39), (' income tax benefit/(expense)', 39), (' income tax', 38), ('minimum alternate tax credit entitlement', 36), ('earlier year', 33), ('amount transferred to retained earnings', 31), ('prior year ', 27)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' income tax expense', 27), (' income tax', 26), (' income tax benefit', 26), ('current tax', 24), ('amount transferred to retained earnings', 24), ('provision for taxation previous year', 23), ('minimum alternate tax credit entitlement', 22), (' income tax benefit/(expense)', 21), (' tax (expense)/benefit', 19), ('deferred tax', 17), ('prior year ', 17), ('earlier year', 8)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [('amount transferred to retained earnings', 44), ('earlier year', 40), ('prior year ', 36), ('current tax', 34), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax benefit/(expense)', 33), ('minimum alternate tax credit entitlement', 32), ('deferred tax', 30), (' income tax expense', 29), (' tax (expense)/benefit', 28), (' income tax', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [(' income tax expense', 62), (' income tax benefit/(expense)', 49), (' tax (expense)/benefit', 45), ('earlier year', 40), ('amount transferred to retained earnings', 35), ('prior year ', 35), (' income tax benefit', 33), ('provision for taxation previous year', 29), ('deferred tax', 27), ('current tax', 25), ('minimum alternate tax credit entitlement', 22), (' income tax', 18)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [(' tax (expense)/benefit', 50), ('amount transferred to retained earnings', 49), (' income tax benefit/(expense)', 48), (' income tax expense', 47), ('minimum alternate tax credit entitlement', 37), ('provision for taxation previous year', 35), ('earlier year', 35), ('deferred tax', 32), (' income tax benefit', 26), ('prior year ', 25), ('current tax', 24), (' income tax', 19)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [(' income tax expense', 56), (' income tax', 56), (' income tax benefit', 55), (' income tax benefit/(expense)', 45), ('amount transferred to retained earnings', 42), ('provision for taxation previous year', 40), ('prior year ', 38), ('minimum alternate tax credit entitlement', 33), ('current tax', 30), ('earlier year', 29), (' tax (expense)/benefit', 29), ('deferred tax', 16)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [('amount transferred to retained earnings', 53), (' tax (expense)/benefit', 50), (' income tax benefit/(expense)', 48), (' income tax expense', 38), ('minimum alternate tax credit entitlement', 34), ('provision for taxation previous year', 33), (' income tax benefit', 33), ('earlier year', 32), ('deferred tax', 29), (' income tax', 29), ('prior year ', 28), ('current tax', 27)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [('provision for taxation previous year', 60), (' income tax', 60), (' income tax expense', 59), (' income tax benefit', 58), (' income tax benefit/(expense)', 53), ('current tax', 50), ('deferred tax', 47), (' tax (expense)/benefit', 46), ('prior year ', 39), ('minimum alternate tax credit entitlement', 38), ('amount transferred to retained earnings', 38), ('earlier year', 30)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [('deferred tax', 56), ('current tax', 52), ('minimum alternate tax credit entitlement', 50), ('provision for taxation previous year', 49), (' income tax benefit', 48), ('amount transferred to retained earnings', 47), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 45), (' income tax expense', 44), (' income tax', 40), ('prior year ', 38), ('earlier year', 36)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [(' income tax expense', 61), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 46), ('current tax', 44), ('minimum alternate tax credit entitlement', 42), (' tax (expense)/benefit', 42), ('provision for taxation previous year', 41), ('amount transferred to retained earnings', 39), ('deferred tax', 36), ('prior year ', 35), ('earlier year', 29)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' income tax expense', 49), (' income tax benefit', 44), (' income tax benefit/(expense)', 43), ('provision for taxation previous year', 42), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 35), (' income tax', 35), ('amount transferred to retained earnings', 34), ('prior year ', 34), ('current tax', 33), ('earlier year', 33), ('deferred tax', 30)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [('minimum alternate tax credit entitlement', 30), ('earlier year', 30), ('amount transferred to retained earnings', 29), ('deferred tax', 24), (' income tax', 24), (' income tax benefit', 24), ('provision for taxation previous year', 22), ('prior year ', 22), ('current tax', 21), (' income tax benefit/(expense)', 19), (' income tax expense', 17), (' tax (expense)/benefit', 15)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [(' tax (expense)/benefit', 48), ('amount transferred to retained earnings', 47), ('current tax', 46), (' income tax benefit/(expense)', 42), ('earlier year', 39), ('minimum alternate tax credit entitlement', 36), ('prior year ', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), ('deferred tax', 30), (' income tax expense', 30), (' income tax', 24)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' income tax benefit/(expense)', 47), (' income tax expense', 46), (' income tax benefit', 44), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), (' income tax', 36), ('minimum alternate tax credit entitlement', 35), ('current tax', 33), ('earlier year', 32), ('deferred tax', 29), ('prior year ', 28), ('provision for taxation previous year', 25)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 100, 'value': -67952.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['4'], 'line_item_value': [-67952.0]}
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:22+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [('current tax', 45), ('deferred tax', 40), ('provision for taxation previous year', 40), (' income tax expense', 37), (' income tax benefit', 36), ('earlier year', 35), (' tax (expense)/benefit', 34), ('minimum alternate tax credit entitlement', 33), ('amount transferred to retained earnings', 32), (' income tax', 30), ('prior year ', 29), (' income tax benefit/(expense)', 29)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [('amount transferred to retained earnings', 46), ('provision for taxation previous year', 44), (' income tax benefit/(expense)', 41), (' tax (expense)/benefit', 37), ('minimum alternate tax credit entitlement', 35), ('prior year ', 34), ('earlier year', 32), (' income tax expense', 29), (' income tax benefit', 29), ('current tax', 28), ('deferred tax', 24), (' income tax', 18)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('deferred tax', 29), (' income tax benefit/(expense)', 28), (' income tax expense', 21), (' income tax benefit', 21), (' income tax', 19)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('current tax', 52), (' income tax expense', 50), ('deferred tax', 48), (' income tax benefit', 41), (' tax (expense)/benefit', 40), ('provision for taxation previous year', 39), (' income tax benefit/(expense)', 39), (' income tax', 38), ('minimum alternate tax credit entitlement', 36), ('earlier year', 33), ('amount transferred to retained earnings', 31), ('prior year ', 27)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' income tax expense', 27), (' income tax', 26), (' income tax benefit', 26), ('current tax', 24), ('amount transferred to retained earnings', 24), ('provision for taxation previous year', 23), ('minimum alternate tax credit entitlement', 22), (' income tax benefit/(expense)', 21), (' tax (expense)/benefit', 19), ('deferred tax', 17), ('prior year ', 17), ('earlier year', 8)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [('amount transferred to retained earnings', 44), ('earlier year', 40), ('prior year ', 36), ('current tax', 34), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax benefit/(expense)', 33), ('minimum alternate tax credit entitlement', 32), ('deferred tax', 30), (' income tax expense', 29), (' tax (expense)/benefit', 28), (' income tax', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [(' income tax expense', 62), (' income tax benefit/(expense)', 49), (' tax (expense)/benefit', 45), ('earlier year', 40), ('amount transferred to retained earnings', 35), ('prior year ', 35), (' income tax benefit', 33), ('provision for taxation previous year', 29), ('deferred tax', 27), ('current tax', 25), ('minimum alternate tax credit entitlement', 22), (' income tax', 18)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [(' tax (expense)/benefit', 50), ('amount transferred to retained earnings', 49), (' income tax benefit/(expense)', 48), (' income tax expense', 47), ('minimum alternate tax credit entitlement', 37), ('provision for taxation previous year', 35), ('earlier year', 35), ('deferred tax', 32), (' income tax benefit', 26), ('prior year ', 25), ('current tax', 24), (' income tax', 19)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [(' income tax expense', 56), (' income tax', 56), (' income tax benefit', 55), (' income tax benefit/(expense)', 45), ('amount transferred to retained earnings', 42), ('provision for taxation previous year', 40), ('prior year ', 38), ('minimum alternate tax credit entitlement', 33), ('current tax', 30), ('earlier year', 29), (' tax (expense)/benefit', 29), ('deferred tax', 16)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [('amount transferred to retained earnings', 53), (' tax (expense)/benefit', 50), (' income tax benefit/(expense)', 48), (' income tax expense', 38), ('minimum alternate tax credit entitlement', 34), ('provision for taxation previous year', 33), (' income tax benefit', 33), ('earlier year', 32), ('deferred tax', 29), (' income tax', 29), ('prior year ', 28), ('current tax', 27)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [('provision for taxation previous year', 60), (' income tax', 60), (' income tax expense', 59), (' income tax benefit', 58), (' income tax benefit/(expense)', 53), ('current tax', 50), ('deferred tax', 47), (' tax (expense)/benefit', 46), ('prior year ', 39), ('minimum alternate tax credit entitlement', 38), ('amount transferred to retained earnings', 38), ('earlier year', 30)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [('deferred tax', 56), ('current tax', 52), ('minimum alternate tax credit entitlement', 50), ('provision for taxation previous year', 49), (' income tax benefit', 48), ('amount transferred to retained earnings', 47), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 45), (' income tax expense', 44), (' income tax', 40), ('prior year ', 38), ('earlier year', 36)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [(' income tax expense', 61), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 46), ('current tax', 44), ('minimum alternate tax credit entitlement', 42), (' tax (expense)/benefit', 42), ('provision for taxation previous year', 41), ('amount transferred to retained earnings', 39), ('deferred tax', 36), ('prior year ', 35), ('earlier year', 29)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' income tax expense', 49), (' income tax benefit', 44), (' income tax benefit/(expense)', 43), ('provision for taxation previous year', 42), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 35), (' income tax', 35), ('amount transferred to retained earnings', 34), ('prior year ', 34), ('current tax', 33), ('earlier year', 33), ('deferred tax', 30)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [('minimum alternate tax credit entitlement', 30), ('earlier year', 30), ('amount transferred to retained earnings', 29), ('deferred tax', 24), (' income tax', 24), (' income tax benefit', 24), ('provision for taxation previous year', 22), ('prior year ', 22), ('current tax', 21), (' income tax benefit/(expense)', 19), (' income tax expense', 17), (' tax (expense)/benefit', 15)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [(' tax (expense)/benefit', 48), ('amount transferred to retained earnings', 47), ('current tax', 46), (' income tax benefit/(expense)', 42), ('earlier year', 39), ('minimum alternate tax credit entitlement', 36), ('prior year ', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), ('deferred tax', 30), (' income tax expense', 30), (' income tax', 24)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' income tax benefit/(expense)', 47), (' income tax expense', 46), (' income tax benefit', 44), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), (' income tax', 36), ('minimum alternate tax credit entitlement', 35), ('current tax', 33), ('earlier year', 32), ('deferred tax', 29), ('prior year ', 28), ('provision for taxation previous year', 25)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 100, 'value': -101692.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['4'], 'line_item_value': [-101692.0]}
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:22+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:22+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = none deferred tax assets nan nan , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' income tax expense on continuing operations', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), (' total income tax expense / (benefit)', 39), (' total tax (expense)/benefit in income statement', 39), (' current income tax', 35)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = in the consolidated statement of financial position as , res_fuzz_match = [(' current income tax', 53), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = none deferred tax liabilities nan nan , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 34)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = in the consolidated statement of financial position as , res_fuzz_match = [(' current income tax', 53), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = none deferred tax assets, net nan nan , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total tax (expense)/benefit in income statement', 44), (' current income tax', 41), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 40)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = in the consolidated statement of financial position as , res_fuzz_match = [(' current income tax', 53), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = none deferred tax assets nan nan , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' income tax expense on continuing operations', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), (' total income tax expense / (benefit)', 39), (' total tax (expense)/benefit in income statement', 39), (' current income tax', 35)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = in the consolidated statement of financial position as , res_fuzz_match = [(' current income tax', 53), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = none deferred tax liabilities nan nan , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 34)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = in the consolidated statement of financial position as , res_fuzz_match = [(' current income tax', 53), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = none deferred tax assets, net nan nan , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total tax (expense)/benefit in income statement', 44), (' current income tax', 41), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 40)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = in the consolidated statement of financial position as , res_fuzz_match = [(' current income tax', 53), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = none deferred tax assets nan nan , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' income tax expense on continuing operations', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), (' total income tax expense / (benefit)', 39), (' total tax (expense)/benefit in income statement', 39), (' current income tax', 35)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = in the consolidated statement of financial position as , res_fuzz_match = [(' current income tax', 53), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = none deferred tax liabilities nan nan , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 34)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = in the consolidated statement of financial position as , res_fuzz_match = [(' current income tax', 53), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = none deferred tax assets, net nan nan , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total tax (expense)/benefit in income statement', 44), (' current income tax', 41), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 40)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = in the consolidated statement of financial position as , res_fuzz_match = [(' current income tax', 53), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:22+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: guaranteed maintenance , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), ('income tax expense', 44), (' total tax (expense)/benefit in income statement', 42), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 33)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: long service leave , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' income tax expense on continuing operations', 41), (' total tax (expense)/benefit in income statement', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 33)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: deferred revenue , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 36), (' current income tax', 35), (' total income tax expense / (benefit)', 33)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: fixed asset , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: provision annual leave , res_fuzz_match = [(' deferred income tax', 60), (' income tax expense on continuing operations', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), ('income tax expense', 38), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' total income tax expense / (benefit)', 33)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: warranty , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), ('income tax expense', 44), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 33)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: deferred gain , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 41), (' total tax (expense)/benefit in income statement', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 33)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: others , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total tax (expense)/benefit in income statement', 41), (' current income tax', 35), (' total income tax expense / (benefit)', 34)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: remanufacturing provision , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: bonus provision , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), ('income tax expense', 44), (' income tax expense on continuing operations', 41), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 34), (' total income tax expense / (benefit)', 33)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: deemed sale of rental equipment , res_fuzz_match = [(' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' total income tax expense / (benefit)', 40), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' current income tax', 35)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: acquired in business combinations , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 47), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: tax losses carried forward , res_fuzz_match = [(' deferred income tax', 60), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' current income tax', 41), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 35)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: distribution centres' costs , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' total tax (expense)/benefit in income statement', 42), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: unrealised gain / (loss) , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: prepaid expenses , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 56), (' total income tax expense / (benefit)', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 41), (' total tax (expense)/benefit in income statement', 38), (' current income tax', 35)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: net de ferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), ('income tax expense', 44), (' total income tax expense / (benefit)', 43), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' income tax expense on continuing operations', 41)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: guaranteed maintenance , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), ('income tax expense', 44), (' total tax (expense)/benefit in income statement', 42), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 33)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: long service leave , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' income tax expense on continuing operations', 41), (' total tax (expense)/benefit in income statement', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 33)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: deferred revenue , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 36), (' current income tax', 35), (' total income tax expense / (benefit)', 33)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: fixed asset , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: provision annual leave , res_fuzz_match = [(' deferred income tax', 60), (' income tax expense on continuing operations', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), ('income tax expense', 38), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' total income tax expense / (benefit)', 33)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: warranty , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), ('income tax expense', 44), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 33)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: deferred gain , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 41), (' total tax (expense)/benefit in income statement', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 33)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: others , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total tax (expense)/benefit in income statement', 41), (' current income tax', 35), (' total income tax expense / (benefit)', 34)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: remanufacturing provision , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: bonus provision , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), ('income tax expense', 44), (' income tax expense on continuing operations', 41), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 34), (' total income tax expense / (benefit)', 33)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: deemed sale of rental equipment , res_fuzz_match = [(' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' total income tax expense / (benefit)', 40), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' current income tax', 35)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: acquired in business combinations , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 47), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: tax losses carried forward , res_fuzz_match = [(' deferred income tax', 60), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' current income tax', 41), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 35)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: distribution centres' costs , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' total tax (expense)/benefit in income statement', 42), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: unrealised gain / (loss) , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: prepaid expenses , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 56), (' total income tax expense / (benefit)', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 41), (' total tax (expense)/benefit in income statement', 38), (' current income tax', 35)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows = deferred tax relates to the following: net de ferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), ('income tax expense', 44), (' total income tax expense / (benefit)', 43), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' income tax expense on continuing operations', 41)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:18:22+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-11 14:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-11 14:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-11 14:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:22+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [('share of', 38), ('share in', 38)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [('share of', 31), ('share in', 31)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [('share of', 28), ('share in', 28)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:22+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [('share of', 38), ('share in', 38)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [('share of', 31), ('share in', 31)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [('share of', 28), ('share in', 28)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-11 14:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation']
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-11 14:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-11 14:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:22+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 24), (' prior period ', 17)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 35), (' prior period ', 32), ('exceptional ', 13)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24), ('exceptional ', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 29), (' prior period ', 25)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' prior period ', 31), (' Actuarial gains / (losses) on retirement benefit obligation', 31), ('exceptional ', 20)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 36), (' prior period ', 33), ('exceptional ', 17)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [(' prior period ', 40), ('exceptional ', 32), (' Actuarial gains / (losses) on retirement benefit obligation', 28)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 34), ('exceptional ', 29), (' prior period ', 24)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 38), (' prior period ', 36), ('exceptional ', 18)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 44), (' prior period ', 26), ('exceptional ', 19)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [(' prior period ', 42), (' Actuarial gains / (losses) on retirement benefit obligation', 38), ('exceptional ', 30)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional ', 36), (' prior period ', 36), (' Actuarial gains / (losses) on retirement benefit obligation', 30)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 34), ('exceptional ', 27)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' prior period ', 41), (' Actuarial gains / (losses) on retirement benefit obligation', 41), ('exceptional ', 21)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 36), (' prior period ', 33), ('exceptional ', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' prior period ', 41), (' Actuarial gains / (losses) on retirement benefit obligation', 38), ('exceptional ', 19)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 27), (' prior period ', 20), ('exceptional ', 14)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [(' prior period ', 39), (' Actuarial gains / (losses) on retirement benefit obligation', 36), ('exceptional ', 27)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 36), (' prior period ', 32), ('exceptional ', 24)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:22+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 24), (' prior period ', 17)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 35), (' prior period ', 32), ('exceptional ', 13)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24), ('exceptional ', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 29), (' prior period ', 25)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' prior period ', 31), (' Actuarial gains / (losses) on retirement benefit obligation', 31), ('exceptional ', 20)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 36), (' prior period ', 33), ('exceptional ', 17)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [(' prior period ', 40), ('exceptional ', 32), (' Actuarial gains / (losses) on retirement benefit obligation', 28)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 34), ('exceptional ', 29), (' prior period ', 24)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 38), (' prior period ', 36), ('exceptional ', 18)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 44), (' prior period ', 26), ('exceptional ', 19)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [(' prior period ', 42), (' Actuarial gains / (losses) on retirement benefit obligation', 38), ('exceptional ', 30)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional ', 36), (' prior period ', 36), (' Actuarial gains / (losses) on retirement benefit obligation', 30)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 34), ('exceptional ', 27)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' prior period ', 41), (' Actuarial gains / (losses) on retirement benefit obligation', 41), ('exceptional ', 21)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 36), (' prior period ', 33), ('exceptional ', 22)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [(' prior period ', 41), (' Actuarial gains / (losses) on retirement benefit obligation', 38), ('exceptional ', 19)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 27), (' prior period ', 20), ('exceptional ', 14)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [(' prior period ', 39), (' Actuarial gains / (losses) on retirement benefit obligation', 36), ('exceptional ', 27)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 36), (' prior period ', 32), ('exceptional ', 24)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-11 14:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-11 14:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-11 14:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:22+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [('NULL', 14)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('NULL', 38)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [('NULL', 9)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [('NULL', 23)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [('NULL', 7)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [('NULL', 8)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [('NULL', 6)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [('NULL', 17)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [('NULL', 14)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [('NULL', 17)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:18:22+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = sales revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = revenue from rendering of services , res_fuzz_match = [('NULL', 14)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('NULL', 38)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = cost of rendering services , res_fuzz_match = [('NULL', 9)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = servicing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = selling and marketing expenses , res_fuzz_match = [('NULL', 23)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other income / (cost) , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = general and administrative expenses , res_fuzz_match = [('NULL', 7)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit be fore income tax , res_fuzz_match = [('NULL', 8)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = profit after tax , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net of tax , res_fuzz_match = [('NULL', 6)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the period , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = attributable to: , res_fuzz_match = [('NULL', 17)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of the parent , res_fuzz_match = [('NULL', 14)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - txt_particular = non-controlling interests , res_fuzz_match = [('NULL', 17)]
2023-08-11 14:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:25:05+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-08-11 14:25:05+0530 - sLogger - DEBUG - {'fileid': '39b47cb4-af4d-4cc7-ac2a-0c79a3780657', 'filename': 'PAG Statutory Accounts ending March 2023 - Signed.pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/PAG Statutory Accounts ending March 2023 - Signed.pdf', 'status': 'Processing'}
2023-08-11 14:25:05+0530 - sLogger - DEBUG - save file completed
2023-08-11 14:25:05+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-08-11 14:25:05+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-08-11 14:25:05+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-08-11 14:25:05+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-08-11 14:25:05+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-08-11 14:25:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:25:05+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:25:08+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:25:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:25:08+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:25:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:25:08+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:25:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:25:08+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:25:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:25:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:25:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:25:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:25:16+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:25:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:25:16+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:25:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:25:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:25:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:25:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:25:23+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:25:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:25:23+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:25:28+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:25:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:25:28+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:25:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:25:28+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:25:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:25:28+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:25:31+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:25:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:25:31+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:25:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:25:31+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:25:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:25:31+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:25:36+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:25:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:25:36+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:25:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:25:36+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:25:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:25:36+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:25:41+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:25:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:25:41+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:25:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:25:41+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:25:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:25:41+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:25:46+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:25:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:25:46+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:25:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:25:46+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:25:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:25:46+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:25:51+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:25:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:25:51+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:25:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:25:51+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:25:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:25:51+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:26:00+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:26:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:26:00+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:26:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:26:00+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:26:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:26:00+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:26:10+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:26:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:26:10+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:26:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:26:10+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:26:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:26:10+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:26:22+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:26:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:26:22+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:26:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:26:22+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:26:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:26:22+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:26:32+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:26:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:26:32+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:26:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:26:32+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:26:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:26:32+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:26:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:26:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:26:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:26:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:26:43+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:26:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:26:43+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:26:54+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:26:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:26:54+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:26:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:26:54+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:26:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:26:54+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:27:06+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:27:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:27:06+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:27:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:27:06+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:27:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:27:06+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:27:11+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:27:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:27:11+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:27:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:27:11+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:27:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:27:11+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:27:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:27:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:27:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:27:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:27:16+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:27:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:27:16+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:27:20+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:27:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:27:20+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:27:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:27:20+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:27:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:27:20+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:27:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:27:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:27:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:27:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:27:26+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:27:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:27:26+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:27:31+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:27:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:27:31+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:27:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:27:31+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:27:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:27:31+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:27:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:27:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:27:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:27:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:27:35+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:27:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:27:36+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:27:41+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:27:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:27:41+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:27:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:27:41+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:27:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:27:41+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:27:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:27:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:27:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:27:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:27:47+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:27:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:27:47+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:27:53+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:27:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:27:53+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:27:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:27:53+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:27:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:27:53+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:28:00+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:28:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:28:00+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:28:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:28:00+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:28:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:28:00+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:28:05+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:28:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:28:05+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:28:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:28:05+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:28:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:28:05+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:28:13+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:28:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:28:13+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:28:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:28:13+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:28:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:28:13+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:28:21+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:28:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:28:21+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:28:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:28:21+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:28:21+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-08-11 14:28:21+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [6, 18, 20, 21], 'predicted_cpl_pages': [5, 7], 'predicted_ccf_pages': [8], 'filtered_cbs_pages': [6], 'filtered_cpl_pages': [5, 7], 'filtered_ccf_pages': [8], 'month': 'march', 'status': 'Page Classification Completed'}
2023-08-11 14:28:21+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-08-11 14:28:21+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-08-11 14:28:21+0530 - sLogger - DEBUG - process file completed
2023-08-11 14:28:21+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-08-11 14:28:21+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-08-11 14:28:21+0530 - sLogger - DEBUG - TE process file started
2023-08-11 14:32:09+0530 - sLogger - DEBUG - TE Proces file completed
2023-08-11 14:32:09+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-11 14:32:09+0530 - sLogger - DEBUG - process_main_pages started
2023-08-11 14:32:09+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-11 14:32:09+0530 - sLogger - DEBUG - start_refactoring started
2023-08-11 14:32:09+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-11 14:32:09+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-11 14:32:09+0530 - sLogger - DEBUG - start_refactoring started
2023-08-11 14:32:09+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_note_column
2023-08-11 14:32:09+0530 - sLogger - ERROR - error occured: can only concatenate str (not "int") to str
2023-08-11 14:32:09+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-08-11 14:32:09+0530 - sLogger - ERROR - error occured: zero-size array to reduction operation maximum which has no identity
2023-08-11 14:32:09+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: ideal_format_processing
2023-08-11 14:32:09+0530 - sLogger - ERROR - error occured: list index out of range
2023-08-11 14:32:09+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-11 14:32:09+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-11 14:32:09+0530 - sLogger - DEBUG - start_refactoring started
2023-08-11 14:32:09+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-11 14:32:09+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-11 14:32:09+0530 - sLogger - DEBUG - start_refactoring started
2023-08-11 14:32:09+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-11 14:32:09+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL
2023-08-11 14:32:09+0530 - sLogger - ERROR - error occured: 'headers'
2023-08-11 14:32:09+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL notes_number_processing
2023-08-11 14:32:09+0530 - sLogger - ERROR - error occured: local variable 'cpl_header' referenced before assignment
2023-08-11 14:32:09+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-11 14:32:09+0530 - sLogger - DEBUG - set_section_details started
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('currentassets', 59), ('current assets', 56), ('noncurrent assets', 56), ('noncurrentassets', 50), ('equity', 36), ('equityliabilities', 31), ('currentliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('noncurrentliabilities', 24), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentassets | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentliabilities | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equityandliabilities | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Current assets | [('current assets', 100), ('noncurrent assets', 77), ('currentliabilities', 64), ('assets', 56), ('currentassets', 56), ('noncurrentliabilities', 56), ('current liabilities', 52), ('noncurrentassets', 50), ('noncurrent liabilities', 44), ('equity', 32), ('equityliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('liabilities', 11)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current assets | score 100
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD currentassets | score 96
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current liabilities | score 67
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD currentliabilities | score 62
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent assets | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentassets | score 87
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent liabilities | score 61
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current assets | score 95
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current liabilities | score 86
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentliabilities | score 57
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentassets | score 87
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentliabilities | score 57
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity and liabilities | score 33
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equityandliabilities | score 29
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equityandliabilities', 38), ('equity liabilities', 35), ('equityliabilities', 34), ('noncurrentassets', 33), ('assets', 31), ('currentassets', 30), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrentliabilities', 24), ('noncurrent liabilities', 23), ('liabilities', 22), ('currentliabilities', 20)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentassets | score 37
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentliabilities | score 35
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equityandliabilities | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Trade and other receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentassets | score 41
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentliabilities | score 45
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equityandliabilities | score 43
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Income tax refund due | [('current assets', 42), ('noncurrentassets', 40), ('currentassets', 38), ('noncurrentliabilities', 38), ('current liabilities', 35), ('currentliabilities', 34), ('equity and liabilities', 32), ('noncurrent assets', 30), ('equityandliabilities', 26), ('noncurrent liabilities', 24), ('equity liabilities', 24), ('equity', 23), ('equityliabilities', 21), ('assets', 16), ('liabilities', 15)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Income tax refund due | MATCH WORD current assets | score 37
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Income tax refund due | MATCH WORD currentassets | score 34
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Income tax refund due | MATCH WORD current liabilities | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Income tax refund due | MATCH WORD currentliabilities | score 29
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Income tax refund due | MATCH WORD noncurrent assets | score 40
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Income tax refund due | MATCH WORD noncurrentassets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Income tax refund due | MATCH WORD noncurrent liabilities | score 35
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Income tax refund due | MATCH WORD non current assets | score 41
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Income tax refund due | MATCH WORD non current liabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Income tax refund due | MATCH WORD noncurrentliabilities | score 31
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Income tax refund due | MATCH WORD noncurrentassets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Income tax refund due | MATCH WORD noncurrentliabilities | score 31
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Income tax refund due | MATCH WORD equity and liabilities | score 33
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Income tax refund due | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Income tax refund due | MATCH WORD equityandliabilities | score 29
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Contract assets | [('current assets', 67), ('noncurrent assets', 67), ('assets', 53), ('currentassets', 38), ('noncurrent liabilities', 36), ('noncurrentassets', 34), ('equity and liabilities', 32), ('noncurrentliabilities', 31), ('equity liabilities', 30), ('current liabilities', 29), ('currentliabilities', 26), ('equityandliabilities', 24), ('equity', 20), ('equityliabilities', 18), ('liabilities', 10)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract assets | MATCH WORD current assets | score 69
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract assets | MATCH WORD currentassets | score 64
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract assets | MATCH WORD current liabilities | score 41
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract assets | MATCH WORD currentliabilities | score 42
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract assets | MATCH WORD noncurrent assets | score 69
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract assets | MATCH WORD noncurrentassets | score 65
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract assets | MATCH WORD noncurrent liabilities | score 43
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract assets | MATCH WORD non current assets | score 67
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract assets | MATCH WORD non current liabilities | score 42
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract assets | MATCH WORD noncurrentliabilities | score 39
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract assets | MATCH WORD noncurrentassets | score 65
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract assets | MATCH WORD noncurrentliabilities | score 39
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract assets | MATCH WORD equity and liabilities | score 32
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract assets | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract assets | MATCH WORD equityandliabilities | score 29
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Capitalised contract costs | [('noncurrent liabilities', 38), ('currentassets', 34), ('current assets', 33), ('noncurrent assets', 33), ('noncurrentassets', 32), ('equity and liabilities', 30), ('assets', 29), ('equityandliabilities', 29), ('equity liabilities', 28), ('current liabilities', 27), ('equityliabilities', 26), ('currentliabilities', 25), ('noncurrentliabilities', 23), ('liabilities', 21), ('equity', 21)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Capitalised contract costs | MATCH WORD current assets | score 45
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Capitalised contract costs | MATCH WORD currentassets | score 41
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Capitalised contract costs | MATCH WORD current liabilities | score 31
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Capitalised contract costs | MATCH WORD currentliabilities | score 32
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Capitalised contract costs | MATCH WORD noncurrent assets | score 42
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Capitalised contract costs | MATCH WORD noncurrentassets | score 40
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Capitalised contract costs | MATCH WORD noncurrent liabilities | score 40
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Capitalised contract costs | MATCH WORD non current assets | score 39
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Capitalised contract costs | MATCH WORD non current liabilities | score 35
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Capitalised contract costs | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Capitalised contract costs | MATCH WORD noncurrentassets | score 40
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Capitalised contract costs | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Capitalised contract costs | MATCH WORD equity and liabilities | score 33
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Capitalised contract costs | MATCH WORD equity | score 15
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Capitalised contract costs | MATCH WORD equityandliabilities | score 35
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Other current assets | [('current assets', 81), ('noncurrent assets', 62), ('currentassets', 52), ('currentliabilities', 50), ('current liabilities', 48), ('noncurrentassets', 47), ('noncurrentliabilities', 45), ('assets', 42), ('noncurrent liabilities', 36), ('equity and liabilities', 28), ('equity liabilities', 25), ('equity', 24), ('equityliabilities', 22), ('equityandliabilities', 20), ('liabilities', 8)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD current assets | score 95
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD currentassets | score 83
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD current liabilities | score 56
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD currentliabilities | score 53
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrent assets | score 81
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrentassets | score 78
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrent liabilities | score 57
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD non current assets | score 84
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD non current liabilities | score 60
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrentassets | score 78
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD equity and liabilities | score 33
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD equityandliabilities | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('currentliabilities', 57), ('currentassets', 52), ('noncurrentliabilities', 52), ('noncurrentassets', 47), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equityandliabilities', 33), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentassets | score 83
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentliabilities | score 53
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equityandliabilities | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Noncurrent assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('noncurrentliabilities', 56), ('noncurrentassets', 50), ('currentassets', 40), ('currentliabilities', 36), ('current liabilities', 30), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('equity', 21), ('equityliabilities', 19), ('liabilities', 11)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current assets | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD currentassets | score 87
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current liabilities | score 61
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD currentliabilities | score 57
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent assets | score 100
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentassets | score 97
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent liabilities | score 72
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current assets | score 97
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current liabilities | score 70
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentliabilities | score 68
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentassets | score 97
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentliabilities | score 68
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equityandliabilities | score 27
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('equityandliabilities', 40), ('current assets', 38), ('equityliabilities', 38), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('currentassets', 28), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentassets | score 39
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentliabilities | score 35
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equityandliabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentassets | score 53
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentliabilities | score 29
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equityandliabilities | score 27
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Intangibles | [('equityandliabilities', 47), ('currentassets', 33), ('liabilities', 33), ('equity', 33), ('equity liabilities', 32), ('current liabilities', 30), ('noncurrent liabilities', 30), ('noncurrentassets', 29), ('equityliabilities', 29), ('currentliabilities', 27), ('equity and liabilities', 26), ('noncurrentliabilities', 22), ('current assets', 21), ('noncurrent assets', 21), ('assets', 18)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Intangibles | MATCH WORD current assets | score 40
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Intangibles | MATCH WORD currentassets | score 42
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Intangibles | MATCH WORD current liabilities | score 50
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Intangibles | MATCH WORD currentliabilities | score 50
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Intangibles | MATCH WORD noncurrent assets | score 40
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Intangibles | MATCH WORD noncurrentassets | score 37
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Intangibles | MATCH WORD noncurrent liabilities | score 50
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Intangibles | MATCH WORD non current assets | score 40
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Intangibles | MATCH WORD non current liabilities | score 50
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Intangibles | MATCH WORD noncurrentliabilities | score 50
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Intangibles | MATCH WORD noncurrentassets | score 37
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Intangibles | MATCH WORD noncurrentliabilities | score 50
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Intangibles | MATCH WORD equity and liabilities | score 55
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Intangibles | MATCH WORD equity | score 24
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Intangibles | MATCH WORD equityandliabilities | score 58
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Deferred tax | [('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrentassets', 25), ('equityliabilities', 24), ('currentliabilities', 22), ('noncurrentliabilities', 19), ('noncurrent assets', 18), ('liabilities', 13), ('noncurrent liabilities', 9)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD current assets | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD currentassets | score 40
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD current liabilities | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD currentliabilities | score 33
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD noncurrent assets | score 34
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD noncurrentassets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD noncurrent liabilities | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD non current assets | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD non current liabilities | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD noncurrentliabilities | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD noncurrentassets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD noncurrentliabilities | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD equity and liabilities | score 28
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD equityandliabilities | score 19
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrentliabilities', 58), ('noncurrent liabilities', 55), ('noncurrentassets', 53), ('currentliabilities', 43), ('assets', 42), ('current liabilities', 42), ('currentassets', 39), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentassets | score 83
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentliabilities | score 49
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equityandliabilities | score 28
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentassets | score 56
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentliabilities | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equityandliabilities | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Liabilities | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equityandliabilities', 35), ('equity', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11), ('currentassets', 11), ('noncurrentassets', 10)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current assets | score 24
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentassets | score 25
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current liabilities | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentliabilities | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent assets | score 24
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent liabilities | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current assets | score 24
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current liabilities | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity and liabilities | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equityandliabilities | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Current liabilities | [('current liabilities', 100), ('currentliabilities', 78), ('noncurrentliabilities', 69), ('equity liabilities', 67), ('currentassets', 62), ('liabilities', 60), ('equity and liabilities', 58), ('noncurrentassets', 55), ('current assets', 52), ('noncurrent liabilities', 43), ('equityliabilities', 36), ('equityandliabilities', 32), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current assets | score 67
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD currentassets | score 62
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current liabilities | score 100
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD currentliabilities | score 97
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent assets | score 61
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentassets | score 57
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent liabilities | score 93
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current assets | score 59
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current liabilities | score 95
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentassets | score 57
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity and liabilities | score 69
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equityandliabilities | score 67
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentassets | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentliabilities | score 43
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equityandliabilities | score 41
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrentassets', 29), ('currentliabilities', 27), ('currentassets', 22), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0), ('equityandliabilities', 0), ('equityliabilities', 0)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentassets | score 35
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentliabilities | score 29
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 27
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equityandliabilities | score 27
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Employee benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('equityliabilities', 35), ('current liabilities', 34), ('currentliabilities', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('assets', 20)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentassets | score 33
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 33
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentliabilities | score 34
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equityandliabilities | score 32
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Contract liabilities | [('current liabilities', 69), ('liabilities', 57), ('equity liabilities', 57), ('equity and liabilities', 56), ('noncurrentliabilities', 44), ('currentliabilities', 42), ('noncurrent liabilities', 41), ('currentassets', 37), ('noncurrentassets', 33), ('equityandliabilities', 31), ('equityliabilities', 26), ('current assets', 21), ('noncurrent assets', 21), ('assets', 20), ('equity', 19)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current assets | score 41
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD currentassets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current liabilities | score 77
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD currentliabilities | score 74
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent assets | score 43
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentassets | score 39
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent liabilities | score 76
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current assets | score 42
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current liabilities | score 74
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentliabilities | score 73
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentassets | score 39
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentliabilities | score 73
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity and liabilities | score 67
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equityandliabilities | score 65
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentassets | score 56
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentliabilities | score 84
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equityandliabilities | score 62
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Noncurrent liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('noncurrentliabilities', 54), ('noncurrentassets', 48), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('currentliabilities', 35), ('currentassets', 31), ('equityandliabilities', 24), ('equity', 20), ('equityliabilities', 18), ('assets', 11)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current assets | score 61
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD currentassets | score 57
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current liabilities | score 93
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD currentliabilities | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent assets | score 72
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentassets | score 68
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent liabilities | score 100
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current assets | score 70
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current liabilities | score 98
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentliabilities | score 98
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentassets | score 68
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentliabilities | score 98
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity and liabilities | score 65
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equityandliabilities | score 62
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrentassets', 29), ('currentliabilities', 27), ('currentassets', 22), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0), ('equityandliabilities', 0), ('equityliabilities', 0)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentassets | score 35
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentliabilities | score 29
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 27
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equityandliabilities | score 27
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Employee benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('equityliabilities', 35), ('current liabilities', 34), ('currentliabilities', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('assets', 20)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentassets | score 33
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 33
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentliabilities | score 34
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equityandliabilities | score 32
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentassets | score 56
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentliabilities | score 85
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equityandliabilities | score 58
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentassets | score 27
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentliabilities | score 69
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equityandliabilities | score 70
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('currentassets', 48), ('noncurrentassets', 42), ('currentliabilities', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('noncurrentliabilities', 29), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equityliabilities', 24), ('liabilities', 13)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentassets | score 70
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentliabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equityandliabilities | score 33
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentassets | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentliabilities | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equityandliabilities | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('equity and liabilities', 37), ('currentassets', 36), ('current assets', 35), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('equityliabilities', 33), ('noncurrentassets', 32), ('currentliabilities', 32), ('equityandliabilities', 29), ('noncurrentliabilities', 27), ('liabilities', 25)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD currentassets | score 42
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD currentliabilities | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 32
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentassets | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 39
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 31
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 39
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentassets | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equityandliabilities | score 33
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Retained profits | [('currentliabilities', 45), ('current liabilities', 44), ('currentassets', 40), ('noncurrentliabilities', 40), ('current assets', 38), ('equity liabilities', 38), ('noncurrentassets', 36), ('equity and liabilities', 33), ('equityandliabilities', 33), ('liabilities', 32), ('equity', 32), ('noncurrent liabilities', 30), ('equityliabilities', 29), ('noncurrent assets', 23), ('assets', 22)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD current assets | score 47
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD currentassets | score 48
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD current liabilities | score 46
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD currentliabilities | score 47
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrent assets | score 42
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrentassets | score 44
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrent liabilities | score 42
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD non current assets | score 41
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD non current liabilities | score 41
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrentliabilities | score 43
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrentassets | score 44
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrentliabilities | score 43
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD equity and liabilities | score 47
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD equity | score 30
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD equityandliabilities | score 44
2023-08-11 14:32:09+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentassets | score 32
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentliabilities | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-08-11 14:32:09+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equityandliabilities | score 57
2023-08-11 14:32:09+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-11 14:32:09+0530 - sLogger - DEBUG - set_section_details started
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from operating activities | operating cash flow before working capital changes
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- nan | changes in working capital
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest and other finance costs paid | operating profit before changes in assets and liabilities
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income taxes refunded | movements in working capital
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash from operating activities | adjustments for increase decrease in operating assets
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from investing activities | operating cash flow before working capital changes
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments for property, plant and equipment | operating profit before changes in assets and liabilities
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from disposal of property, plant and equipment | operating profit before changes in assets and liabilities
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in investing activities | adjustments for increase decrease in operating liabilities
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from financing activities | operating cash flow before working capital changes
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from issue of shares | operating profit loss before working capital changes
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of hire purchase lease liabilities | adjustments for increase decrease in operating liabilities
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of borrowings | operating profit before working capital changes
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of lease liabilities | changes in assets liabilities
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash from/(used in) financing activities | operating cash flow before working capital changes
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase/decrease) in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the financial year | changes in operating assets and liabilities
2023-08-11 14:32:09+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the end of the financial year | changes in operating assets and liabilities
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-11 14:32:11+0530 - sLogger - ERROR - error occured: 'value'
2023-08-11 14:32:11+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:11+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-11 14:32:11+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits']
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:11+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-11 14:32:11+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand ', ' cash at bank ', ' cash at bank and on hand ', ' short term deposits ', ' cash at banks earns interest at floating rates based on daily bank deposit rates ', ' cash and cash equivalents ', ' cash on hand and at bank ', ' bank balances ', '  cash and bank balances ', ' cash asset']
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:11+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-11 14:32:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits', 35), ('cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = income tax refund due , res_fuzz_match = [('cash and bank balances', 40), ('cash and cash equivalents', 34), ('bank balances other than above', 34), ('cash and short term deposits', 34), ('Cash and short term deposits', 34), ('other bank balances', 32), ('bank balances other than cash and cash equivalents', 31), ('cash asset', 27)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = contract assets , res_fuzz_match = [('cash asset', 67), ('cash and short term deposits', 39), ('Cash and short term deposits', 39), ('bank balances other than above', 34), ('other bank balances', 32), ('bank balances other than cash and cash equivalents', 31), ('cash and cash equivalents', 29), ('cash and bank balances', 29)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = capitalised contract costs , res_fuzz_match = [('cash and short term deposits', 44), ('Cash and short term deposits', 44), ('cash and bank balances', 37), ('bank balances other than above', 36), ('cash asset', 36), ('other bank balances', 35), ('bank balances other than cash and cash equivalents', 33), ('cash and cash equivalents', 32)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('cash asset', 55), ('other bank balances', 50), ('cash and short term deposits', 48), ('Cash and short term deposits', 48), ('bank balances other than above', 43), ('bank balances other than cash and cash equivalents', 35), ('cash and bank balances', 31), ('cash and cash equivalents', 30)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 1543537.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['7'], 'line_item_value': [1543537.0]}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits', 35), ('cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = income tax refund due , res_fuzz_match = [('cash and bank balances', 40), ('cash and cash equivalents', 34), ('bank balances other than above', 34), ('cash and short term deposits', 34), ('Cash and short term deposits', 34), ('other bank balances', 32), ('bank balances other than cash and cash equivalents', 31), ('cash asset', 27)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = contract assets , res_fuzz_match = [('cash asset', 67), ('cash and short term deposits', 39), ('Cash and short term deposits', 39), ('bank balances other than above', 34), ('other bank balances', 32), ('bank balances other than cash and cash equivalents', 31), ('cash and cash equivalents', 29), ('cash and bank balances', 29)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = capitalised contract costs , res_fuzz_match = [('cash and short term deposits', 44), ('Cash and short term deposits', 44), ('cash and bank balances', 37), ('bank balances other than above', 36), ('cash asset', 36), ('other bank balances', 35), ('bank balances other than cash and cash equivalents', 33), ('cash and cash equivalents', 32)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('cash asset', 55), ('other bank balances', 50), ('cash and short term deposits', 48), ('Cash and short term deposits', 48), ('bank balances other than above', 43), ('bank balances other than cash and cash equivalents', 35), ('cash and bank balances', 31), ('cash and cash equivalents', 30)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 3813586.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['7'], 'line_item_value': [3813586.0]}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['cash on hand ', ' cash at bank ', ' cash at bank and on hand ', ' short term deposits ', ' cash at banks earns interest at floating rates based on daily bank deposit rates ', ' cash and cash equivalents ', ' cash on hand and at bank ', ' bank balances ', '  cash and bank balances ', ' cash asset'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none cash at bank , res_fuzz_match = [(' cash at bank ', 100), ('cash on hand ', 78), (' cash at bank and on hand ', 64), (' cash asset', 63), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 57), (' cash on hand and at bank ', 57), (' cash and cash equivalents ', 50), ('  cash and bank balances ', 50), (' bank balances ', 45), (' short term deposits ', 21)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' short term deposits ', 38), (' cash and cash equivalents ', 38), ('  cash and bank balances ', 38), ('cash on hand ', 25), (' cash at bank ', 25), (' cash at bank and on hand ', 25), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 25), (' cash on hand and at bank ', 25), (' bank balances ', 25), (' cash asset', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none term deposit , res_fuzz_match = [(' short term deposits ', 82), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 53), (' cash asset', 30), (' cash and cash equivalents ', 29), (' cash at bank and on hand ', 24), ('cash on hand ', 22), (' cash on hand and at bank ', 18), (' bank balances ', 18), ('  cash and bank balances ', 18), (' cash at bank ', 11)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' short term deposits ', 38), (' cash and cash equivalents ', 38), ('  cash and bank balances ', 38), ('cash on hand ', 25), (' cash at bank ', 25), (' cash at bank and on hand ', 25), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 25), (' cash on hand and at bank ', 25), (' bank balances ', 25), (' cash asset', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' cash at bank and on hand ', 40), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 40), (' cash on hand and at bank ', 40), (' bank balances ', 40), ('  cash and bank balances ', 40), (' short term deposits ', 30), (' cash and cash equivalents ', 30), ('cash on hand ', 22), (' cash at bank ', 22), (' cash asset', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' short term deposits ', 38), (' cash and cash equivalents ', 38), ('  cash and bank balances ', 38), ('cash on hand ', 25), (' cash at bank ', 25), (' cash at bank and on hand ', 25), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 25), (' cash on hand and at bank ', 25), (' bank balances ', 25), (' cash asset', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none cash at bank , res_fuzz_match = [(' cash at bank ', 100), ('cash on hand ', 78), (' cash at bank and on hand ', 64), (' cash asset', 63), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 57), (' cash on hand and at bank ', 57), (' cash and cash equivalents ', 50), ('  cash and bank balances ', 50), (' bank balances ', 45), (' short term deposits ', 21)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' short term deposits ', 38), (' cash and cash equivalents ', 38), ('  cash and bank balances ', 38), ('cash on hand ', 25), (' cash at bank ', 25), (' cash at bank and on hand ', 25), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 25), (' cash on hand and at bank ', 25), (' bank balances ', 25), (' cash asset', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none term deposit , res_fuzz_match = [(' short term deposits ', 82), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 53), (' cash asset', 30), (' cash and cash equivalents ', 29), (' cash at bank and on hand ', 24), ('cash on hand ', 22), (' cash on hand and at bank ', 18), (' bank balances ', 18), ('  cash and bank balances ', 18), (' cash at bank ', 11)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' short term deposits ', 38), (' cash and cash equivalents ', 38), ('  cash and bank balances ', 38), ('cash on hand ', 25), (' cash at bank ', 25), (' cash at bank and on hand ', 25), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 25), (' cash on hand and at bank ', 25), (' bank balances ', 25), (' cash asset', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' cash at bank and on hand ', 40), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 40), (' cash on hand and at bank ', 40), (' bank balances ', 40), ('  cash and bank balances ', 40), (' short term deposits ', 30), (' cash and cash equivalents ', 30), ('cash on hand ', 22), (' cash at bank ', 22), (' cash asset', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' short term deposits ', 38), (' cash and cash equivalents ', 38), ('  cash and bank balances ', 38), ('cash on hand ', 25), (' cash at bank ', 25), (' cash at bank and on hand ', 25), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 25), (' cash on hand and at bank ', 25), (' bank balances ', 25), (' cash asset', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [100, 82, 100, 82], 'value': [1643586.0, 2170000.0, 43537.0, 1500000.0], 'label': ['None Cash at bank', 'None Term deposit', 'None Cash at bank', 'None Term deposit'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['cash on hand ', ' cash at bank ', ' cash at bank and on hand ', ' short term deposits ', ' cash at banks earns interest at floating rates based on daily bank deposit rates ', ' cash and cash equivalents ', ' cash on hand and at bank ', ' bank balances ', '  cash and bank balances ', ' cash asset'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:11+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-11 14:32:11+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:11+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-11 14:32:11+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' parts and accessories (at cost) ', ' stock in transit']
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:11+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-11 14:32:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = income tax refund due , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = contract assets , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = capitalised contract costs , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = income tax refund due , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = contract assets , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = capitalised contract costs , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:11+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-11 14:32:11+0530 - sLogger - DEBUG - list_target_keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables']
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:11+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-11 14:32:11+0530 - sLogger - DEBUG - list_target_keywords = ['prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance']
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:11+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-11 14:32:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 42), (' other financial assets ', 42), (' other current financial assets ', 31), (' trade and other receivables', 22), (' prepayments ', 18)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [(' other current assets ', 81), (' other current financial assets ', 65), ('other assets ', 58), (' other financial assets ', 50), (' trade and other receivables', 34), (' prepayments ', 21)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), ('other assets ', 31), (' other current assets ', 30), (' other financial assets ', 30), (' other current financial assets ', 29), (' prepayments ', 15)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = income tax refund due , res_fuzz_match = [(' trade and other receivables', 43), (' other current assets ', 41), (' other current financial assets ', 38), (' other financial assets ', 36), ('other assets ', 26), (' prepayments ', 23)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = contract assets , res_fuzz_match = [('other assets ', 72), (' other current assets ', 61), (' other financial assets ', 61), (' other current financial assets ', 59), (' trade and other receivables', 39), (' prepayments ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = capitalised contract costs , res_fuzz_match = [(' other current financial assets ', 44), (' other current assets ', 43), (' other financial assets ', 43), (' trade and other receivables', 36), ('other assets ', 35), (' prepayments ', 21)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [(' other current assets ', 100), (' other current financial assets ', 83), ('other assets ', 73), (' other financial assets ', 68), (' trade and other receivables', 39), (' prepayments ', 16)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 7], 'score': 100, 'value': 22856386.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other current assets'], 'note_numbers': [nan, '8', '12'], 'line_item_value': [0.0, 21734371.0, 1122015.0]}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 42), (' other financial assets ', 42), (' other current financial assets ', 31), (' trade and other receivables', 22), (' prepayments ', 18)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [(' other current assets ', 81), (' other current financial assets ', 65), ('other assets ', 58), (' other financial assets ', 50), (' trade and other receivables', 34), (' prepayments ', 21)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), ('other assets ', 31), (' other current assets ', 30), (' other financial assets ', 30), (' other current financial assets ', 29), (' prepayments ', 15)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = income tax refund due , res_fuzz_match = [(' trade and other receivables', 43), (' other current assets ', 41), (' other current financial assets ', 38), (' other financial assets ', 36), ('other assets ', 26), (' prepayments ', 23)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = contract assets , res_fuzz_match = [('other assets ', 72), (' other current assets ', 61), (' other financial assets ', 61), (' other current financial assets ', 59), (' trade and other receivables', 39), (' prepayments ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = capitalised contract costs , res_fuzz_match = [(' other current financial assets ', 44), (' other current assets ', 43), (' other financial assets ', 43), (' trade and other receivables', 36), ('other assets ', 35), (' prepayments ', 21)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [(' other current assets ', 100), (' other current financial assets ', 83), ('other assets ', 73), (' other financial assets ', 68), (' trade and other receivables', 39), (' prepayments ', 16)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 7], 'score': 100, 'value': 21774595.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other current assets'], 'note_numbers': [nan, '8', '12'], 'line_item_value': [0.0, 19697457.0, 2077138.0]}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none trade receivables , res_fuzz_match = [(' other receivables and prepayments ', 59), (' other prepayments ', 50), ('prepaid expense ', 43), (' prepaid ', 43), (' prepaid ', 43), (' prepaid expenditure ', 41), (' prepayments ', 33), (' in advance ', 33), (' charges paid in advance', 29)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 25), (' prepaid expenditure ', 25), (' charges paid in advance', 25), (' in advance ', 17), (' prepayments ', 0), (' other prepayments ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none debtors retention , res_fuzz_match = [(' other receivables and prepayments ', 44), (' other prepayments ', 42), (' prepaid expenditure ', 39), ('prepaid expense ', 36), (' prepayments ', 33), (' prepaid ', 29), (' prepaid ', 29), (' charges paid in advance', 24), (' in advance ', 17)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 25), (' prepaid expenditure ', 25), (' charges paid in advance', 25), (' in advance ', 17), (' prepayments ', 0), (' other prepayments ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: allowance for expected credit losses , res_fuzz_match = [(' prepaid expenditure ', 50), ('prepaid expense ', 43), (' prepaid ', 43), (' other receivables and prepayments ', 43), (' prepaid ', 43), (' other prepayments ', 42), (' prepayments ', 33), (' charges paid in advance', 29), (' in advance ', 17)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 25), (' prepaid expenditure ', 25), (' charges paid in advance', 25), (' in advance ', 17), (' prepayments ', 0), (' other prepayments ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' other prepayments ', 30), (' other receivables and prepayments ', 30), (' prepaid ', 29), (' prepaid ', 29), (' prepaid expenditure ', 20), (' charges paid in advance', 20), (' prepayments ', 17), (' in advance ', 17), ('prepaid expense ', 10)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 25), (' prepaid expenditure ', 25), (' charges paid in advance', 25), (' in advance ', 17), (' prepayments ', 0), (' other prepayments ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none trade receivables , res_fuzz_match = [(' other receivables and prepayments ', 59), (' other prepayments ', 50), ('prepaid expense ', 43), (' prepaid ', 43), (' prepaid ', 43), (' prepaid expenditure ', 41), (' prepayments ', 33), (' in advance ', 33), (' charges paid in advance', 29)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 25), (' prepaid expenditure ', 25), (' charges paid in advance', 25), (' in advance ', 17), (' prepayments ', 0), (' other prepayments ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none debtors retention , res_fuzz_match = [(' other receivables and prepayments ', 44), (' other prepayments ', 42), (' prepaid expenditure ', 39), ('prepaid expense ', 36), (' prepayments ', 33), (' prepaid ', 29), (' prepaid ', 29), (' charges paid in advance', 24), (' in advance ', 17)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 25), (' prepaid expenditure ', 25), (' charges paid in advance', 25), (' in advance ', 17), (' prepayments ', 0), (' other prepayments ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: allowance for expected credit losses , res_fuzz_match = [(' prepaid expenditure ', 50), ('prepaid expense ', 43), (' prepaid ', 43), (' other receivables and prepayments ', 43), (' prepaid ', 43), (' other prepayments ', 42), (' prepayments ', 33), (' charges paid in advance', 29), (' in advance ', 17)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 25), (' prepaid expenditure ', 25), (' charges paid in advance', 25), (' in advance ', 17), (' prepayments ', 0), (' other prepayments ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' other prepayments ', 30), (' other receivables and prepayments ', 30), (' prepaid ', 29), (' prepaid ', 29), (' prepaid expenditure ', 20), (' charges paid in advance', 20), (' prepayments ', 17), (' in advance ', 17), ('prepaid expense ', 10)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 25), (' prepaid expenditure ', 25), (' charges paid in advance', 25), (' in advance ', 17), (' prepayments ', 0), (' other prepayments ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none prepayments , res_fuzz_match = [(' prepayments ', 100), (' prepaid ', 77), (' prepaid ', 77), (' other prepayments ', 73), (' other receivables and prepayments ', 73), ('prepaid expense ', 36), (' prepaid expenditure ', 27), (' charges paid in advance', 27), (' in advance ', 17)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 25), (' prepaid expenditure ', 25), (' charges paid in advance', 25), (' in advance ', 17), (' prepayments ', 0), (' other prepayments ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none other deposits , res_fuzz_match = [(' other prepayments ', 67), (' prepayments ', 50), (' other receivables and prepayments ', 44), (' prepaid ', 43), (' prepaid ', 43), ('prepaid expense ', 36), (' prepaid expenditure ', 35), (' charges paid in advance', 29), (' in advance ', 17)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 25), (' prepaid expenditure ', 25), (' charges paid in advance', 25), (' in advance ', 17), (' prepayments ', 0), (' other prepayments ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none prepaid subscription , res_fuzz_match = [(' prepaid ', 100), (' prepaid ', 100), (' prepayments ', 83), (' other prepayments ', 67), ('prepaid expense ', 64), (' prepaid expenditure ', 57), (' other receivables and prepayments ', 45), (' charges paid in advance', 41), (' in advance ', 33)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 25), (' prepaid expenditure ', 25), (' charges paid in advance', 25), (' in advance ', 17), (' prepayments ', 0), (' other prepayments ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' other prepayments ', 36), (' other receivables and prepayments ', 27), (' charges paid in advance', 27), ('prepaid expense ', 18), (' prepaid expenditure ', 18), (' prepayments ', 17), (' in advance ', 17), (' prepaid ', 14), (' prepaid ', 14)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 25), (' prepaid expenditure ', 25), (' charges paid in advance', 25), (' in advance ', 17), (' prepayments ', 0), (' other prepayments ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none prepayments , res_fuzz_match = [(' prepayments ', 100), (' prepaid ', 77), (' prepaid ', 77), (' other prepayments ', 73), (' other receivables and prepayments ', 73), ('prepaid expense ', 36), (' prepaid expenditure ', 27), (' charges paid in advance', 27), (' in advance ', 17)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 25), (' prepaid expenditure ', 25), (' charges paid in advance', 25), (' in advance ', 17), (' prepayments ', 0), (' other prepayments ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none other deposits , res_fuzz_match = [(' other prepayments ', 67), (' prepayments ', 50), (' other receivables and prepayments ', 44), (' prepaid ', 43), (' prepaid ', 43), ('prepaid expense ', 36), (' prepaid expenditure ', 35), (' charges paid in advance', 29), (' in advance ', 17)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 25), (' prepaid expenditure ', 25), (' charges paid in advance', 25), (' in advance ', 17), (' prepayments ', 0), (' other prepayments ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none prepaid subscription , res_fuzz_match = [(' prepaid ', 100), (' prepaid ', 100), (' prepayments ', 83), (' other prepayments ', 67), ('prepaid expense ', 64), (' prepaid expenditure ', 57), (' other receivables and prepayments ', 45), (' charges paid in advance', 41), (' in advance ', 33)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 25), (' prepaid expenditure ', 25), (' charges paid in advance', 25), (' in advance ', 17), (' prepayments ', 0), (' other prepayments ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' other prepayments ', 36), (' other receivables and prepayments ', 27), (' charges paid in advance', 27), ('prepaid expense ', 18), (' prepaid expenditure ', 18), (' prepayments ', 17), (' in advance ', 17), (' prepaid ', 14), (' prepaid ', 14)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 25), (' prepaid expenditure ', 25), (' charges paid in advance', 25), (' in advance ', 17), (' prepayments ', 0), (' other prepayments ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 4, 6], 'score': [100, 100, 100, 100], 'value': [1842144.0, 0.0, 828405.0, 176951.0], 'label': ['None Prepayments', 'None Prepaid subscription', 'None Prepayments', 'None Prepaid subscription'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:11+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-11 14:32:11+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables']
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:11+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-11 14:32:11+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:11+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-11 14:32:11+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' other assets ', 62), (' biological assets ', 59), (' financial assets ', 56), ('other current assets ', 42), (' other financial assets ', 42), (' trade and other receivables', 22), (' income tax receivable from related parties ', 16), (' deferred operating expenditure ', 15)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets ', 81), (' other assets ', 58), (' financial assets ', 54), (' other financial assets ', 50), (' biological assets ', 48), (' trade and other receivables', 34), (' income tax receivable from related parties ', 30), (' deferred operating expenditure ', 29)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets ', 36), (' financial assets ', 35), (' income tax receivable from related parties ', 33), (' other assets ', 31), ('other current assets ', 30), (' other financial assets ', 30), (' deferred operating expenditure ', 19)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' other assets ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = income tax refund due , res_fuzz_match = [(' income tax receivable from related parties ', 49), (' trade and other receivables', 43), ('other current assets ', 41), (' other financial assets ', 36), (' deferred operating expenditure ', 34), (' financial assets ', 30), (' other assets ', 26), (' biological assets ', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = contract assets , res_fuzz_match = [(' other assets ', 72), (' financial assets ', 67), ('other current assets ', 61), (' other financial assets ', 61), (' biological assets ', 54), (' trade and other receivables', 39), (' income tax receivable from related parties ', 30), (' deferred operating expenditure ', 29)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = capitalised contract costs , res_fuzz_match = [('other current assets ', 43), (' other financial assets ', 43), (' income tax receivable from related parties ', 39), (' trade and other receivables', 36), (' other assets ', 35), (' financial assets ', 33), (' biological assets ', 29), (' deferred operating expenditure ', 27)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets ', 100), (' other assets ', 73), (' other financial assets ', 68), (' biological assets ', 45), (' deferred operating expenditure ', 45), (' financial assets ', 44), (' trade and other receivables', 39), (' income tax receivable from related parties ', 35)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 7], 'score': 100, 'value': 22856386.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other current assets'], 'note_numbers': [nan, '8', '12'], 'line_item_value': [0.0, 21734371.0, 1122015.0]}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' other assets ', 62), (' biological assets ', 59), (' financial assets ', 56), ('other current assets ', 42), (' other financial assets ', 42), (' trade and other receivables', 22), (' income tax receivable from related parties ', 16), (' deferred operating expenditure ', 15)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets ', 81), (' other assets ', 58), (' financial assets ', 54), (' other financial assets ', 50), (' biological assets ', 48), (' trade and other receivables', 34), (' income tax receivable from related parties ', 30), (' deferred operating expenditure ', 29)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets ', 36), (' financial assets ', 35), (' income tax receivable from related parties ', 33), (' other assets ', 31), ('other current assets ', 30), (' other financial assets ', 30), (' deferred operating expenditure ', 19)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' other assets ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = income tax refund due , res_fuzz_match = [(' income tax receivable from related parties ', 49), (' trade and other receivables', 43), ('other current assets ', 41), (' other financial assets ', 36), (' deferred operating expenditure ', 34), (' financial assets ', 30), (' other assets ', 26), (' biological assets ', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = contract assets , res_fuzz_match = [(' other assets ', 72), (' financial assets ', 67), ('other current assets ', 61), (' other financial assets ', 61), (' biological assets ', 54), (' trade and other receivables', 39), (' income tax receivable from related parties ', 30), (' deferred operating expenditure ', 29)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = capitalised contract costs , res_fuzz_match = [('other current assets ', 43), (' other financial assets ', 43), (' income tax receivable from related parties ', 39), (' trade and other receivables', 36), (' other assets ', 35), (' financial assets ', 33), (' biological assets ', 29), (' deferred operating expenditure ', 27)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets ', 100), (' other assets ', 73), (' other financial assets ', 68), (' biological assets ', 45), (' deferred operating expenditure ', 45), (' financial assets ', 44), (' trade and other receivables', 39), (' income tax receivable from related parties ', 35)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 7], 'score': 100, 'value': 21774595.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other current assets'], 'note_numbers': [nan, '8', '12'], 'line_item_value': [0.0, 19697457.0, 2077138.0]}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none trade receivables , res_fuzz_match = [(' interest receivable', 73), (' income tax receivable from related parties', 71), (' other deposits receivable - related party', 65), (' long service leave receivable', 59), (' other receivables - related party', 59), (' amount receivable from controlling entity', 59), (' related party receivable', 59), (' other debtors and prepayments', 48), ('foreign exchange derivatives at fair value', 47), (' electricity derivatives at fair value', 47), (' derivative contracts - fair value', 47), ('other assets', 45), (' condensate', 43), (' share of jv prepayments', 42), (' foreign exchange forward contracts', 41), (' forward exchange contracts', 41), (' other', 40), (' bank guarantee', 38), (' accrued interest', 36), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), (' lng', 33), (' related party disclosures', 29), (' deposits', 29)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amount receivable from controlling entity', 62), (' condensate', 57), (' deposits', 43), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' long service leave receivable', 38), (' rental bond', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments', 38), (' lng', 33), ('foreign exchange derivatives at fair value', 25), (' electricity derivatives at fair value', 25), (' accrued interest', 25), (' income tax receivable from related parties', 25), (' other receivables - related party', 25), (' other deposits receivable - related party', 25), (' interest receivable', 25), (' related party receivable', 25), (' current investments', 25), (' other', 20), ('other assets', 12), (' bank guarantee', 12), (' accrued rebates', 12), (' share of jv prepayments', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none debtors retention , res_fuzz_match = [(' other debtors and prepayments', 61), (' condensate', 57), (' other deposits receivable - related party', 56), (' interest receivable', 53), ('other assets', 45), (' accrued rebates', 45), (' income tax receivable from related parties', 44), (' other receivables - related party', 44), (' amount receivable from controlling entity', 44), (' deposits', 43), (' current investments', 43), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' electricity derivatives at fair value', 39), (' long service leave receivable', 39), (' related party receivable', 39), (' foreign exchange forward contracts', 39), (' bank guarantee', 38), (' accrued interest', 36), (' rental bond', 36), (' derivative contracts - fair value', 33), (' share of jv prepayments', 33), (' lng', 33), (' forward exchange contracts', 33), (' related party disclosures', 28)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amount receivable from controlling entity', 62), (' condensate', 57), (' deposits', 43), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' long service leave receivable', 38), (' rental bond', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments', 38), (' lng', 33), ('foreign exchange derivatives at fair value', 25), (' electricity derivatives at fair value', 25), (' accrued interest', 25), (' income tax receivable from related parties', 25), (' other receivables - related party', 25), (' other deposits receivable - related party', 25), (' interest receivable', 25), (' related party receivable', 25), (' current investments', 25), (' other', 20), ('other assets', 12), (' bank guarantee', 12), (' accrued rebates', 12), (' share of jv prepayments', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: allowance for expected credit losses , res_fuzz_match = [(' related party disclosures', 49), (' interest receivable', 47), (' forward exchange contracts', 46), ('other assets', 45), (' rental bond', 45), (' accrued rebates', 45), (' related party receivable', 44), (' accrued interest', 43), (' long service leave receivable', 43), (' other receivables - related party', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' amount receivable from controlling entity', 42), (' electricity derivatives at fair value', 41), (' other deposits receivable - related party', 41), (' foreign exchange forward contracts', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' income tax receivable from related parties', 39), (' derivative contracts - fair value', 38), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amount receivable from controlling entity', 62), (' condensate', 57), (' deposits', 43), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' long service leave receivable', 38), (' rental bond', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments', 38), (' lng', 33), ('foreign exchange derivatives at fair value', 25), (' electricity derivatives at fair value', 25), (' accrued interest', 25), (' income tax receivable from related parties', 25), (' other receivables - related party', 25), (' other deposits receivable - related party', 25), (' interest receivable', 25), (' related party receivable', 25), (' current investments', 25), (' other', 20), ('other assets', 12), (' bank guarantee', 12), (' accrued rebates', 12), (' share of jv prepayments', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' income tax receivable from related parties', 50), (' amount receivable from controlling entity', 50), (' forward exchange contracts', 50), (' deposits', 43), (' condensate', 43), (' rental bond', 42), ('other assets', 40), (' other', 40), (' derivative contracts - fair value', 40), (' other deposits receivable - related party', 40), (' current investments', 40), (' foreign exchange forward contracts', 40), (' other debtors and prepayments', 40), (' lng', 33), ('foreign exchange derivatives at fair value', 30), (' electricity derivatives at fair value', 30), (' accrued interest', 30), (' related party disclosures', 30), (' long service leave receivable', 30), (' other receivables - related party', 30), (' interest receivable', 30), (' bank guarantee', 30), (' related party receivable', 30), (' share of jv prepayments', 30), (' accrued rebates', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amount receivable from controlling entity', 62), (' condensate', 57), (' deposits', 43), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' long service leave receivable', 38), (' rental bond', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments', 38), (' lng', 33), ('foreign exchange derivatives at fair value', 25), (' electricity derivatives at fair value', 25), (' accrued interest', 25), (' income tax receivable from related parties', 25), (' other receivables - related party', 25), (' other deposits receivable - related party', 25), (' interest receivable', 25), (' related party receivable', 25), (' current investments', 25), (' other', 20), ('other assets', 12), (' bank guarantee', 12), (' accrued rebates', 12), (' share of jv prepayments', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none trade receivables , res_fuzz_match = [(' interest receivable', 73), (' income tax receivable from related parties', 71), (' other deposits receivable - related party', 65), (' long service leave receivable', 59), (' other receivables - related party', 59), (' amount receivable from controlling entity', 59), (' related party receivable', 59), (' other debtors and prepayments', 48), ('foreign exchange derivatives at fair value', 47), (' electricity derivatives at fair value', 47), (' derivative contracts - fair value', 47), ('other assets', 45), (' condensate', 43), (' share of jv prepayments', 42), (' foreign exchange forward contracts', 41), (' forward exchange contracts', 41), (' other', 40), (' bank guarantee', 38), (' accrued interest', 36), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), (' lng', 33), (' related party disclosures', 29), (' deposits', 29)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amount receivable from controlling entity', 62), (' condensate', 57), (' deposits', 43), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' long service leave receivable', 38), (' rental bond', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments', 38), (' lng', 33), ('foreign exchange derivatives at fair value', 25), (' electricity derivatives at fair value', 25), (' accrued interest', 25), (' income tax receivable from related parties', 25), (' other receivables - related party', 25), (' other deposits receivable - related party', 25), (' interest receivable', 25), (' related party receivable', 25), (' current investments', 25), (' other', 20), ('other assets', 12), (' bank guarantee', 12), (' accrued rebates', 12), (' share of jv prepayments', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none debtors retention , res_fuzz_match = [(' other debtors and prepayments', 61), (' condensate', 57), (' other deposits receivable - related party', 56), (' interest receivable', 53), ('other assets', 45), (' accrued rebates', 45), (' income tax receivable from related parties', 44), (' other receivables - related party', 44), (' amount receivable from controlling entity', 44), (' deposits', 43), (' current investments', 43), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' electricity derivatives at fair value', 39), (' long service leave receivable', 39), (' related party receivable', 39), (' foreign exchange forward contracts', 39), (' bank guarantee', 38), (' accrued interest', 36), (' rental bond', 36), (' derivative contracts - fair value', 33), (' share of jv prepayments', 33), (' lng', 33), (' forward exchange contracts', 33), (' related party disclosures', 28)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amount receivable from controlling entity', 62), (' condensate', 57), (' deposits', 43), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' long service leave receivable', 38), (' rental bond', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments', 38), (' lng', 33), ('foreign exchange derivatives at fair value', 25), (' electricity derivatives at fair value', 25), (' accrued interest', 25), (' income tax receivable from related parties', 25), (' other receivables - related party', 25), (' other deposits receivable - related party', 25), (' interest receivable', 25), (' related party receivable', 25), (' current investments', 25), (' other', 20), ('other assets', 12), (' bank guarantee', 12), (' accrued rebates', 12), (' share of jv prepayments', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: allowance for expected credit losses , res_fuzz_match = [(' related party disclosures', 49), (' interest receivable', 47), (' forward exchange contracts', 46), ('other assets', 45), (' rental bond', 45), (' accrued rebates', 45), (' related party receivable', 44), (' accrued interest', 43), (' long service leave receivable', 43), (' other receivables - related party', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' amount receivable from controlling entity', 42), (' electricity derivatives at fair value', 41), (' other deposits receivable - related party', 41), (' foreign exchange forward contracts', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' income tax receivable from related parties', 39), (' derivative contracts - fair value', 38), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amount receivable from controlling entity', 62), (' condensate', 57), (' deposits', 43), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' long service leave receivable', 38), (' rental bond', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments', 38), (' lng', 33), ('foreign exchange derivatives at fair value', 25), (' electricity derivatives at fair value', 25), (' accrued interest', 25), (' income tax receivable from related parties', 25), (' other receivables - related party', 25), (' other deposits receivable - related party', 25), (' interest receivable', 25), (' related party receivable', 25), (' current investments', 25), (' other', 20), ('other assets', 12), (' bank guarantee', 12), (' accrued rebates', 12), (' share of jv prepayments', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' income tax receivable from related parties', 50), (' amount receivable from controlling entity', 50), (' forward exchange contracts', 50), (' deposits', 43), (' condensate', 43), (' rental bond', 42), ('other assets', 40), (' other', 40), (' derivative contracts - fair value', 40), (' other deposits receivable - related party', 40), (' current investments', 40), (' foreign exchange forward contracts', 40), (' other debtors and prepayments', 40), (' lng', 33), ('foreign exchange derivatives at fair value', 30), (' electricity derivatives at fair value', 30), (' accrued interest', 30), (' related party disclosures', 30), (' long service leave receivable', 30), (' other receivables - related party', 30), (' interest receivable', 30), (' bank guarantee', 30), (' related party receivable', 30), (' share of jv prepayments', 30), (' accrued rebates', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amount receivable from controlling entity', 62), (' condensate', 57), (' deposits', 43), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' long service leave receivable', 38), (' rental bond', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments', 38), (' lng', 33), ('foreign exchange derivatives at fair value', 25), (' electricity derivatives at fair value', 25), (' accrued interest', 25), (' income tax receivable from related parties', 25), (' other receivables - related party', 25), (' other deposits receivable - related party', 25), (' interest receivable', 25), (' related party receivable', 25), (' current investments', 25), (' other', 20), ('other assets', 12), (' bank guarantee', 12), (' accrued rebates', 12), (' share of jv prepayments', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none trade receivables , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none debtors retention , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: allowance for expected credit losses , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none trade receivables , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none debtors retention , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: allowance for expected credit losses , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none prepayments , res_fuzz_match = [(' share of jv prepayments', 73), (' other debtors and prepayments', 73), (' income tax receivable from related parties', 45), (' other receivables - related party', 45), (' other deposits receivable - related party', 45), (' amount receivable from controlling entity', 45), (' interest receivable', 45), (' forward exchange contracts', 45), (' condensate', 43), (' other', 40), ('other assets', 36), ('foreign exchange derivatives at fair value', 36), (' accrued interest', 36), (' related party disclosures', 36), (' derivative contracts - fair value', 36), (' long service leave receivable', 36), (' bank guarantee', 36), (' related party receivable', 36), (' foreign exchange forward contracts', 36), (' accrued rebates', 36), (' lng', 33), (' deposits', 29), (' electricity derivatives at fair value', 27), (' rental bond', 27), (' current investments', 27)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amount receivable from controlling entity', 62), (' condensate', 57), (' deposits', 43), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' long service leave receivable', 38), (' rental bond', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments', 38), (' lng', 33), ('foreign exchange derivatives at fair value', 25), (' electricity derivatives at fair value', 25), (' accrued interest', 25), (' income tax receivable from related parties', 25), (' other receivables - related party', 25), (' other deposits receivable - related party', 25), (' interest receivable', 25), (' related party receivable', 25), (' current investments', 25), (' other', 20), ('other assets', 12), (' bank guarantee', 12), (' accrued rebates', 12), (' share of jv prepayments', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none other deposits , res_fuzz_match = [(' other', 100), (' deposits', 100), (' other deposits receivable - related party', 72), ('other assets', 64), (' accrued interest', 50), (' other receivables - related party', 50), (' amount receivable from controlling entity', 50), (' other debtors and prepayments', 50), (' interest receivable', 47), (' condensate', 43), (' share of jv prepayments', 42), ('foreign exchange derivatives at fair value', 39), (' electricity derivatives at fair value', 39), (' related party disclosures', 39), (' income tax receivable from related parties', 39), (' derivative contracts - fair value', 39), (' long service leave receivable', 39), (' foreign exchange forward contracts', 39), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), (' related party receivable', 33), (' lng', 33), (' forward exchange contracts', 33), (' bank guarantee', 31)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amount receivable from controlling entity', 62), (' condensate', 57), (' deposits', 43), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' long service leave receivable', 38), (' rental bond', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments', 38), (' lng', 33), ('foreign exchange derivatives at fair value', 25), (' electricity derivatives at fair value', 25), (' accrued interest', 25), (' income tax receivable from related parties', 25), (' other receivables - related party', 25), (' other deposits receivable - related party', 25), (' interest receivable', 25), (' related party receivable', 25), (' current investments', 25), (' other', 20), ('other assets', 12), (' bank guarantee', 12), (' accrued rebates', 12), (' share of jv prepayments', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none prepaid subscription , res_fuzz_match = [(' share of jv prepayments', 58), (' rental bond', 45), (' related party disclosures', 44), (' related party receivable', 44), (' deposits', 43), (' condensate', 43), (' foreign exchange forward contracts', 42), (' long service leave receivable', 41), (' other receivables - related party', 41), (' other deposits receivable - related party', 41), (' amount receivable from controlling entity', 41), (' other debtors and prepayments', 41), (' other', 40), (' interest receivable', 40), (' bank guarantee', 38), ('other assets', 36), ('foreign exchange derivatives at fair value', 36), (' accrued interest', 36), (' income tax receivable from related parties', 36), (' accrued rebates', 36), (' electricity derivatives at fair value', 33), (' lng', 33), (' forward exchange contracts', 33), (' derivative contracts - fair value', 32), (' current investments', 29)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amount receivable from controlling entity', 62), (' condensate', 57), (' deposits', 43), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' long service leave receivable', 38), (' rental bond', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments', 38), (' lng', 33), ('foreign exchange derivatives at fair value', 25), (' electricity derivatives at fair value', 25), (' accrued interest', 25), (' income tax receivable from related parties', 25), (' other receivables - related party', 25), (' other deposits receivable - related party', 25), (' interest receivable', 25), (' related party receivable', 25), (' current investments', 25), (' other', 20), ('other assets', 12), (' bank guarantee', 12), (' accrued rebates', 12), (' share of jv prepayments', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' amount receivable from controlling entity', 55), (' derivative contracts - fair value', 45), (' rental bond', 45), (' foreign exchange forward contracts', 45), (' forward exchange contracts', 45), (' other', 40), ('other assets', 38), ('foreign exchange derivatives at fair value', 36), (' electricity derivatives at fair value', 36), (' income tax receivable from related parties', 36), (' other debtors and prepayments', 36), (' lng', 33), (' deposits', 29), (' accrued interest', 27), (' related party disclosures', 27), (' other receivables - related party', 27), (' other deposits receivable - related party', 27), (' interest receivable', 27), (' bank guarantee', 27), (' related party receivable', 27), (' share of jv prepayments', 27), (' current investments', 27), (' accrued rebates', 27), (' long service leave receivable', 18), (' condensate', 14)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amount receivable from controlling entity', 62), (' condensate', 57), (' deposits', 43), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' long service leave receivable', 38), (' rental bond', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments', 38), (' lng', 33), ('foreign exchange derivatives at fair value', 25), (' electricity derivatives at fair value', 25), (' accrued interest', 25), (' income tax receivable from related parties', 25), (' other receivables - related party', 25), (' other deposits receivable - related party', 25), (' interest receivable', 25), (' related party receivable', 25), (' current investments', 25), (' other', 20), ('other assets', 12), (' bank guarantee', 12), (' accrued rebates', 12), (' share of jv prepayments', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none prepayments , res_fuzz_match = [(' share of jv prepayments', 73), (' other debtors and prepayments', 73), (' income tax receivable from related parties', 45), (' other receivables - related party', 45), (' other deposits receivable - related party', 45), (' amount receivable from controlling entity', 45), (' interest receivable', 45), (' forward exchange contracts', 45), (' condensate', 43), (' other', 40), ('other assets', 36), ('foreign exchange derivatives at fair value', 36), (' accrued interest', 36), (' related party disclosures', 36), (' derivative contracts - fair value', 36), (' long service leave receivable', 36), (' bank guarantee', 36), (' related party receivable', 36), (' foreign exchange forward contracts', 36), (' accrued rebates', 36), (' lng', 33), (' deposits', 29), (' electricity derivatives at fair value', 27), (' rental bond', 27), (' current investments', 27)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amount receivable from controlling entity', 62), (' condensate', 57), (' deposits', 43), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' long service leave receivable', 38), (' rental bond', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments', 38), (' lng', 33), ('foreign exchange derivatives at fair value', 25), (' electricity derivatives at fair value', 25), (' accrued interest', 25), (' income tax receivable from related parties', 25), (' other receivables - related party', 25), (' other deposits receivable - related party', 25), (' interest receivable', 25), (' related party receivable', 25), (' current investments', 25), (' other', 20), ('other assets', 12), (' bank guarantee', 12), (' accrued rebates', 12), (' share of jv prepayments', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none other deposits , res_fuzz_match = [(' other', 100), (' deposits', 100), (' other deposits receivable - related party', 72), ('other assets', 64), (' accrued interest', 50), (' other receivables - related party', 50), (' amount receivable from controlling entity', 50), (' other debtors and prepayments', 50), (' interest receivable', 47), (' condensate', 43), (' share of jv prepayments', 42), ('foreign exchange derivatives at fair value', 39), (' electricity derivatives at fair value', 39), (' related party disclosures', 39), (' income tax receivable from related parties', 39), (' derivative contracts - fair value', 39), (' long service leave receivable', 39), (' foreign exchange forward contracts', 39), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), (' related party receivable', 33), (' lng', 33), (' forward exchange contracts', 33), (' bank guarantee', 31)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amount receivable from controlling entity', 62), (' condensate', 57), (' deposits', 43), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' long service leave receivable', 38), (' rental bond', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments', 38), (' lng', 33), ('foreign exchange derivatives at fair value', 25), (' electricity derivatives at fair value', 25), (' accrued interest', 25), (' income tax receivable from related parties', 25), (' other receivables - related party', 25), (' other deposits receivable - related party', 25), (' interest receivable', 25), (' related party receivable', 25), (' current investments', 25), (' other', 20), ('other assets', 12), (' bank guarantee', 12), (' accrued rebates', 12), (' share of jv prepayments', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none prepaid subscription , res_fuzz_match = [(' share of jv prepayments', 58), (' rental bond', 45), (' related party disclosures', 44), (' related party receivable', 44), (' deposits', 43), (' condensate', 43), (' foreign exchange forward contracts', 42), (' long service leave receivable', 41), (' other receivables - related party', 41), (' other deposits receivable - related party', 41), (' amount receivable from controlling entity', 41), (' other debtors and prepayments', 41), (' other', 40), (' interest receivable', 40), (' bank guarantee', 38), ('other assets', 36), ('foreign exchange derivatives at fair value', 36), (' accrued interest', 36), (' income tax receivable from related parties', 36), (' accrued rebates', 36), (' electricity derivatives at fair value', 33), (' lng', 33), (' forward exchange contracts', 33), (' derivative contracts - fair value', 32), (' current investments', 29)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amount receivable from controlling entity', 62), (' condensate', 57), (' deposits', 43), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' long service leave receivable', 38), (' rental bond', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments', 38), (' lng', 33), ('foreign exchange derivatives at fair value', 25), (' electricity derivatives at fair value', 25), (' accrued interest', 25), (' income tax receivable from related parties', 25), (' other receivables - related party', 25), (' other deposits receivable - related party', 25), (' interest receivable', 25), (' related party receivable', 25), (' current investments', 25), (' other', 20), ('other assets', 12), (' bank guarantee', 12), (' accrued rebates', 12), (' share of jv prepayments', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' amount receivable from controlling entity', 55), (' derivative contracts - fair value', 45), (' rental bond', 45), (' foreign exchange forward contracts', 45), (' forward exchange contracts', 45), (' other', 40), ('other assets', 38), ('foreign exchange derivatives at fair value', 36), (' electricity derivatives at fair value', 36), (' income tax receivable from related parties', 36), (' other debtors and prepayments', 36), (' lng', 33), (' deposits', 29), (' accrued interest', 27), (' related party disclosures', 27), (' other receivables - related party', 27), (' other deposits receivable - related party', 27), (' interest receivable', 27), (' bank guarantee', 27), (' related party receivable', 27), (' share of jv prepayments', 27), (' current investments', 27), (' accrued rebates', 27), (' long service leave receivable', 18), (' condensate', 14)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amount receivable from controlling entity', 62), (' condensate', 57), (' deposits', 43), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' long service leave receivable', 38), (' rental bond', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments', 38), (' lng', 33), ('foreign exchange derivatives at fair value', 25), (' electricity derivatives at fair value', 25), (' accrued interest', 25), (' income tax receivable from related parties', 25), (' other receivables - related party', 25), (' other deposits receivable - related party', 25), (' interest receivable', 25), (' related party receivable', 25), (' current investments', 25), (' other', 20), ('other assets', 12), (' bank guarantee', 12), (' accrued rebates', 12), (' share of jv prepayments', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': [100, 100], 'value': [234994.0, 116659.0], 'label': ['None Other deposits', 'None Other deposits'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none prepayments , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none other deposits , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none prepaid subscription , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none prepayments , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none other deposits , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none prepaid subscription , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' ', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:11+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-11 14:32:11+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment ']
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:11+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-11 14:32:11+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings']
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:11+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-11 14:32:11+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment ', 29), (' plant and equipment ', 29), (' Property ', 19)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment ', 77), (' plant and equipment ', 77), (' Property ', 50)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment ', 27), (' plant and equipment ', 27), (' Property ', 26)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [('plant and equipment ', 29), (' plant and equipment ', 29), ('plant property equipment', 23), ('property plant equipment', 23), (' Property ', 14)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [(' Property ', 35), ('plant and equipment ', 33), (' plant and equipment ', 33), ('plant property equipment', 28), ('property plant equipment', 28)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 6284865.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['13'], 'line_item_value': [6284865.0]}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment ', 29), (' plant and equipment ', 29), (' Property ', 19)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment ', 77), (' plant and equipment ', 77), (' Property ', 50)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment ', 27), (' plant and equipment ', 27), (' Property ', 26)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [('plant and equipment ', 29), (' plant and equipment ', 29), ('plant property equipment', 23), ('property plant equipment', 23), (' Property ', 14)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [(' Property ', 35), ('plant and equipment ', 33), (' plant and equipment ', 33), ('plant property equipment', 28), ('property plant equipment', 28)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 5629485.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['13'], 'line_item_value': [5629485.0]}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), ('accumulated depreciation ', 41), (' Leasehold buildings', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 35), (' Capitalised pre stripping costs ', 35), (' Mine infrastructure ', 35), (' Building & mine infrastructure ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), ('depreciatio', 27), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Asset Retirement Obligation ', 59), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 53), (' Subsea ', 50), (' Development properties ', 44), (' Assets under construction ', 43), (' Plant and equipment ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), (' Freehold land and buildings ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 29), (' Mine infrastructure ', 28), (' under construction ', 27)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Other assets ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Asset Retirement Obligation ', 30), (' Construction in progress ', 30), (' Capitalised pre stripping costs ', 30), (' Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Asset Retirement Obligation ', 59), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 53), (' Subsea ', 50), (' Development properties ', 44), (' Assets under construction ', 43), (' Plant and equipment ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), (' Freehold land and buildings ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 29), (' Mine infrastructure ', 28), (' under construction ', 27)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), (' Other assets ', 45), (' Assets under construction ', 45), (' Mine infrastructure ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Construction in progress ', 36), (' Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Stripping WIP ', 33), (' Subsea ', 33), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Asset Retirement Obligation ', 59), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 53), (' Subsea ', 50), (' Development properties ', 44), (' Assets under construction ', 43), (' Plant and equipment ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), (' Freehold land and buildings ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 29), (' Mine infrastructure ', 28), (' under construction ', 27)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), (' Mining properties ', 54), ('accumulated depreciation ', 53), (' Pipeline Asset ', 46), (' Construction in progress ', 44), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Capitalised pre stripping costs ', 37), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land and buildings ', 26), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Subsea ', 17)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Asset Retirement Obligation ', 59), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 53), (' Subsea ', 50), (' Development properties ', 44), (' Assets under construction ', 43), (' Plant and equipment ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), (' Freehold land and buildings ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 29), (' Mine infrastructure ', 28), (' under construction ', 27)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Assets under construction ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Subsea ', 33), (' Construction in progress ', 29), (' Capitalised pre stripping costs ', 29), (' Leasehold buildings', 27), (' Development properties ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), ('depreciatio', 18), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Asset Retirement Obligation ', 59), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 53), (' Subsea ', 50), (' Development properties ', 44), (' Assets under construction ', 43), (' Plant and equipment ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), (' Freehold land and buildings ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 29), (' Mine infrastructure ', 28), (' under construction ', 27)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), ('accumulated depreciation ', 41), (' Leasehold buildings', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 35), (' Capitalised pre stripping costs ', 35), (' Mine infrastructure ', 35), (' Building & mine infrastructure ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), ('depreciatio', 27), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Development properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Other assets ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Asset Retirement Obligation ', 30), (' Construction in progress ', 30), (' Capitalised pre stripping costs ', 30), (' Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Development properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), (' Other assets ', 45), (' Assets under construction ', 45), (' Mine infrastructure ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Construction in progress ', 36), (' Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Stripping WIP ', 33), (' Subsea ', 33), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Development properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), (' Mining properties ', 54), ('accumulated depreciation ', 53), (' Pipeline Asset ', 46), (' Construction in progress ', 44), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Capitalised pre stripping costs ', 37), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land and buildings ', 26), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Subsea ', 17)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Development properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Assets under construction ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Subsea ', 33), (' Construction in progress ', 29), (' Capitalised pre stripping costs ', 29), (' Leasehold buildings', 27), (' Development properties ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), ('depreciatio', 18), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Development properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), ('accumulated depreciation ', 41), (' Leasehold buildings', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 35), (' Capitalised pre stripping costs ', 35), (' Mine infrastructure ', 35), (' Building & mine infrastructure ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), ('depreciatio', 27), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [(' Other assets ', 55), (' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), (' Subsea ', 50), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mine infrastructure ', 39), (' Development properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Workshop tooling ', 23)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Other assets ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Asset Retirement Obligation ', 30), (' Construction in progress ', 30), (' Capitalised pre stripping costs ', 30), (' Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [(' Other assets ', 55), (' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), (' Subsea ', 50), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mine infrastructure ', 39), (' Development properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Workshop tooling ', 23)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), (' Other assets ', 45), (' Assets under construction ', 45), (' Mine infrastructure ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Construction in progress ', 36), (' Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Stripping WIP ', 33), (' Subsea ', 33), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [(' Other assets ', 55), (' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), (' Subsea ', 50), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mine infrastructure ', 39), (' Development properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Workshop tooling ', 23)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), (' Mining properties ', 54), ('accumulated depreciation ', 53), (' Pipeline Asset ', 46), (' Construction in progress ', 44), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Capitalised pre stripping costs ', 37), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land and buildings ', 26), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Subsea ', 17)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [(' Other assets ', 55), (' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), (' Subsea ', 50), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mine infrastructure ', 39), (' Development properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Workshop tooling ', 23)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Assets under construction ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Subsea ', 33), (' Construction in progress ', 29), (' Capitalised pre stripping costs ', 29), (' Leasehold buildings', 27), (' Development properties ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), ('depreciatio', 18), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [(' Other assets ', 55), (' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), (' Subsea ', 50), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mine infrastructure ', 39), (' Development properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Workshop tooling ', 23)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), ('accumulated depreciation ', 41), (' Leasehold buildings', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 35), (' Capitalised pre stripping costs ', 35), (' Mine infrastructure ', 35), (' Building & mine infrastructure ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), ('depreciatio', 27), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [(' Asset Retirement Obligation ', 59), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Subsea ', 50), (' Assets under construction ', 48), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Fishing vessels & equipment ', 41), ('accumulated depreciation ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Other assets ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Asset Retirement Obligation ', 30), (' Construction in progress ', 30), (' Capitalised pre stripping costs ', 30), (' Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [(' Asset Retirement Obligation ', 59), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Subsea ', 50), (' Assets under construction ', 48), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Fishing vessels & equipment ', 41), ('accumulated depreciation ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), (' Other assets ', 45), (' Assets under construction ', 45), (' Mine infrastructure ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Construction in progress ', 36), (' Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Stripping WIP ', 33), (' Subsea ', 33), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [(' Asset Retirement Obligation ', 59), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Subsea ', 50), (' Assets under construction ', 48), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Fishing vessels & equipment ', 41), ('accumulated depreciation ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), (' Mining properties ', 54), ('accumulated depreciation ', 53), (' Pipeline Asset ', 46), (' Construction in progress ', 44), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Capitalised pre stripping costs ', 37), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land and buildings ', 26), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Subsea ', 17)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [(' Asset Retirement Obligation ', 59), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Subsea ', 50), (' Assets under construction ', 48), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Fishing vessels & equipment ', 41), ('accumulated depreciation ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Assets under construction ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Subsea ', 33), (' Construction in progress ', 29), (' Capitalised pre stripping costs ', 29), (' Leasehold buildings', 27), (' Development properties ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), ('depreciatio', 18), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [(' Asset Retirement Obligation ', 59), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Subsea ', 50), (' Assets under construction ', 48), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Fishing vessels & equipment ', 41), ('accumulated depreciation ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), ('accumulated depreciation ', 41), (' Leasehold buildings', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 35), (' Capitalised pre stripping costs ', 35), (' Mine infrastructure ', 35), (' Building & mine infrastructure ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), ('depreciatio', 27), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' Other assets ', 55), (' Plant and equipment ', 53), (' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), (' Subsea ', 50), ('accumulated depreciation ', 47), (' under construction ', 47), (' Fishing vessels & equipment ', 47), (' Capitalised pre stripping costs ', 46), (' Stripping WIP ', 44), (' land and improvement ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Building & mine infrastructure ', 33), (' Leasehold buildings', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 22), (' Marine ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Other assets ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Asset Retirement Obligation ', 30), (' Construction in progress ', 30), (' Capitalised pre stripping costs ', 30), (' Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' Other assets ', 55), (' Plant and equipment ', 53), (' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), (' Subsea ', 50), ('accumulated depreciation ', 47), (' under construction ', 47), (' Fishing vessels & equipment ', 47), (' Capitalised pre stripping costs ', 46), (' Stripping WIP ', 44), (' land and improvement ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Building & mine infrastructure ', 33), (' Leasehold buildings', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 22), (' Marine ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), (' Other assets ', 45), (' Assets under construction ', 45), (' Mine infrastructure ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Construction in progress ', 36), (' Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Stripping WIP ', 33), (' Subsea ', 33), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' Other assets ', 55), (' Plant and equipment ', 53), (' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), (' Subsea ', 50), ('accumulated depreciation ', 47), (' under construction ', 47), (' Fishing vessels & equipment ', 47), (' Capitalised pre stripping costs ', 46), (' Stripping WIP ', 44), (' land and improvement ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Building & mine infrastructure ', 33), (' Leasehold buildings', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 22), (' Marine ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), (' Mining properties ', 54), ('accumulated depreciation ', 53), (' Pipeline Asset ', 46), (' Construction in progress ', 44), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Capitalised pre stripping costs ', 37), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land and buildings ', 26), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Subsea ', 17)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' Other assets ', 55), (' Plant and equipment ', 53), (' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), (' Subsea ', 50), ('accumulated depreciation ', 47), (' under construction ', 47), (' Fishing vessels & equipment ', 47), (' Capitalised pre stripping costs ', 46), (' Stripping WIP ', 44), (' land and improvement ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Building & mine infrastructure ', 33), (' Leasehold buildings', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 22), (' Marine ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Assets under construction ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Subsea ', 33), (' Construction in progress ', 29), (' Capitalised pre stripping costs ', 29), (' Leasehold buildings', 27), (' Development properties ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), ('depreciatio', 18), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' Other assets ', 55), (' Plant and equipment ', 53), (' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), (' Subsea ', 50), ('accumulated depreciation ', 47), (' under construction ', 47), (' Fishing vessels & equipment ', 47), (' Capitalised pre stripping costs ', 46), (' Stripping WIP ', 44), (' land and improvement ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Building & mine infrastructure ', 33), (' Leasehold buildings', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 22), (' Marine ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), ('accumulated depreciation ', 41), (' Leasehold buildings', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 35), (' Capitalised pre stripping costs ', 35), (' Mine infrastructure ', 35), (' Building & mine infrastructure ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), ('depreciatio', 27), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Other assets ', 55), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Leasehold buildings', 41), (' Facilities ', 40), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Building & mine infrastructure ', 29), (' Construction in progress ', 28), (' Mine infrastructure ', 28), (' Workshop tooling ', 23), (' Marine ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Other assets ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Asset Retirement Obligation ', 30), (' Construction in progress ', 30), (' Capitalised pre stripping costs ', 30), (' Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Other assets ', 55), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Leasehold buildings', 41), (' Facilities ', 40), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Building & mine infrastructure ', 29), (' Construction in progress ', 28), (' Mine infrastructure ', 28), (' Workshop tooling ', 23), (' Marine ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), (' Other assets ', 45), (' Assets under construction ', 45), (' Mine infrastructure ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Construction in progress ', 36), (' Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Stripping WIP ', 33), (' Subsea ', 33), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Other assets ', 55), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Leasehold buildings', 41), (' Facilities ', 40), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Building & mine infrastructure ', 29), (' Construction in progress ', 28), (' Mine infrastructure ', 28), (' Workshop tooling ', 23), (' Marine ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), (' Mining properties ', 54), ('accumulated depreciation ', 53), (' Pipeline Asset ', 46), (' Construction in progress ', 44), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Capitalised pre stripping costs ', 37), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land and buildings ', 26), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Subsea ', 17)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Other assets ', 55), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Leasehold buildings', 41), (' Facilities ', 40), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Building & mine infrastructure ', 29), (' Construction in progress ', 28), (' Mine infrastructure ', 28), (' Workshop tooling ', 23), (' Marine ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Assets under construction ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Subsea ', 33), (' Construction in progress ', 29), (' Capitalised pre stripping costs ', 29), (' Leasehold buildings', 27), (' Development properties ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), ('depreciatio', 18), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Other assets ', 55), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Leasehold buildings', 41), (' Facilities ', 40), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Building & mine infrastructure ', 29), (' Construction in progress ', 28), (' Mine infrastructure ', 28), (' Workshop tooling ', 23), (' Marine ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), ('accumulated depreciation ', 41), (' Leasehold buildings', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 35), (' Capitalised pre stripping costs ', 35), (' Mine infrastructure ', 35), (' Building & mine infrastructure ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), ('depreciatio', 27), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 62), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Assets under construction ', 52), (' Subsea ', 50), (' Freehold land and buildings ', 48), (' Asset Retirement Obligation ', 47), (' Stripping WIP ', 44), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 31), (' Construction in progress ', 28)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Other assets ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Asset Retirement Obligation ', 30), (' Construction in progress ', 30), (' Capitalised pre stripping costs ', 30), (' Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 62), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Assets under construction ', 52), (' Subsea ', 50), (' Freehold land and buildings ', 48), (' Asset Retirement Obligation ', 47), (' Stripping WIP ', 44), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 31), (' Construction in progress ', 28)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), (' Other assets ', 45), (' Assets under construction ', 45), (' Mine infrastructure ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Construction in progress ', 36), (' Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Stripping WIP ', 33), (' Subsea ', 33), ('depreciatio', 27), ('accumulated depreciation ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 62), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Assets under construction ', 52), (' Subsea ', 50), (' Freehold land and buildings ', 48), (' Asset Retirement Obligation ', 47), (' Stripping WIP ', 44), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 31), (' Construction in progress ', 28)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), (' Mining properties ', 54), ('accumulated depreciation ', 53), (' Pipeline Asset ', 46), (' Construction in progress ', 44), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Capitalised pre stripping costs ', 37), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land and buildings ', 26), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Subsea ', 17)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 62), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Assets under construction ', 52), (' Subsea ', 50), (' Freehold land and buildings ', 48), (' Asset Retirement Obligation ', 47), (' Stripping WIP ', 44), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 31), (' Construction in progress ', 28)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Assets under construction ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Subsea ', 33), (' Construction in progress ', 29), (' Capitalised pre stripping costs ', 29), (' Leasehold buildings', 27), (' Development properties ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), ('depreciatio', 18), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 62), (' Other assets ', 55), (' Pipeline Asset ', 54), (' Assets under construction ', 52), (' Subsea ', 50), (' Freehold land and buildings ', 48), (' Asset Retirement Obligation ', 47), (' Stripping WIP ', 44), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 31), (' Construction in progress ', 28)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 7, 8, 9, 25, 26, 27, 28, 29], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [390991.0, 48062.0, 0.0, -66883.0, 372170.0, 60996.0, 0.0, 0.0, -21078.0, 39918.0], 'label': ['Low value assets Plant and equipment $ Plant and equipment $ Plant and equipment $', 'Low value assets Plant and equipment $ Plant and equipment $ Plant and equipment $', 'Low value assets Plant and equipment $ Plant and equipment $ Plant and equipment $', 'Low value assets Plant and equipment $ Plant and equipment $ Plant and equipment $', 'Low value assets Plant and equipment $ Plant and equipment $ Plant and equipment $', 'Low value assets (Plant and equipment) $', 'Low value assets (Plant and equipment) $', 'Low value assets (Plant and equipment) $', 'Low value assets (Plant and equipment) $', 'Low value assets (Plant and equipment) $'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('cost', 25), ('gross', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 36)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('cost', 25), ('gross', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 36)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [('net value', 62), ('gross', 40), ('net book value', 38), ('cost', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('cost', 25), ('gross', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [('net value', 62), ('gross', 40), ('net book value', 38), ('cost', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 36)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [('net value', 62), ('gross', 40), ('net book value', 38), ('cost', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [('net value', 62), ('gross', 40), ('net book value', 38), ('cost', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [('net value', 62), ('gross', 40), ('net book value', 38), ('cost', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [('net book value', 54), ('cost', 50), ('net value', 38), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('cost', 25), ('gross', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [('net book value', 54), ('cost', 50), ('net value', 38), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 36)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [('net book value', 54), ('cost', 50), ('net value', 38), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [('net book value', 54), ('cost', 50), ('net value', 38), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [('net book value', 54), ('cost', 50), ('net value', 38), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('cost', 25), ('gross', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 36)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('cost', 25), ('gross', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 36)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 48), ('gross', 40)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('cost', 25), ('gross', 0)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 48), ('gross', 40)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 36)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 48), ('gross', 40)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 48), ('gross', 40)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 48), ('gross', 40)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none leasehold improvements at cost , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Other assets ', 55), (' Assets under construction ', 48), (' under construction ', 47), (' Fishing vessels & equipment ', 47), (' Capitalised pre stripping costs ', 46), (' Development properties ', 44), (' Asset Retirement Obligation ', 41), (' Plant and equipment ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Freehold land and buildings ', 37), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Facilities ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Subsea ', 50), (' Leasehold buildings', 47), (' Mining properties ', 46), (' Other assets ', 45), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Development properties ', 38), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Other assets ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings', 30), (' Marine ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('accumulated depreciation ', 10)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none plant and equipment - at cost , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Assets under construction ', 55), (' under construction ', 53), (' Freehold land and buildings ', 52), (' Capitalised pre stripping costs ', 50), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), ('depreciatio', 45), (' Other assets ', 45), (' Marine ', 40), (' Leasehold buildings', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Workshop tooling ', 23), (' Facilities ', 20), (' Subsea ', 17)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Subsea ', 50), (' Leasehold buildings', 47), (' Mining properties ', 46), (' Other assets ', 45), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Development properties ', 38), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Other assets ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings', 30), (' Marine ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('accumulated depreciation ', 10)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none fixtures and fittings - at cost , res_fuzz_match = [(' under construction ', 53), (' Assets under construction ', 48), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), ('depreciatio', 36), (' Freehold land and buildings ', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), ('accumulated depreciation ', 27), (' Leasehold buildings', 27), (' Development properties ', 25), (' Workshop tooling ', 23)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Subsea ', 50), (' Leasehold buildings', 47), (' Mining properties ', 46), (' Other assets ', 45), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Development properties ', 38), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Other assets ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings', 30), (' Marine ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('accumulated depreciation ', 10)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none motor vehicles at cost , res_fuzz_match = [(' Capitalised pre stripping costs ', 47), (' under construction ', 47), (' Other assets ', 45), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mining properties ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' Leasehold buildings', 33), (' Building & mine infrastructure ', 32), (' Fishing vessels & equipment ', 30), ('accumulated depreciation ', 27), (' Freehold land and buildings ', 27), (' Subsea ', 17)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Subsea ', 50), (' Leasehold buildings', 47), (' Mining properties ', 46), (' Other assets ', 45), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Development properties ', 38), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Other assets ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings', 30), (' Marine ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('accumulated depreciation ', 10)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none computer equipment at cost , res_fuzz_match = [(' Plant and equipment ', 53), (' Capitalised pre stripping costs ', 50), ('accumulated depreciation ', 47), (' under construction ', 47), (' Mining properties ', 46), (' Construction in progress ', 44), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Fishing vessels & equipment ', 41), (' Pipeline Asset ', 40), (' Other assets ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 36), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Building & mine infrastructure ', 32), (' Workshop tooling ', 31), (' Freehold land and buildings ', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Subsea ', 50), (' Leasehold buildings', 47), (' Mining properties ', 46), (' Other assets ', 45), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Development properties ', 38), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Other assets ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings', 30), (' Marine ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('accumulated depreciation ', 10)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none lowvalue assets (plant and equipment) - at cost , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Other assets ', 55), (' Pipeline Asset ', 54), (' under construction ', 53), (' Freehold land and buildings ', 52), (' Assets under construction ', 52), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), ('depreciatio', 45), (' Stripping WIP ', 44), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mining properties ', 38), (' Development properties ', 38), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 29), (' Workshop tooling ', 23), (' Marine ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Subsea ', 50), (' Leasehold buildings', 47), (' Mining properties ', 46), (' Other assets ', 45), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Development properties ', 38), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Other assets ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings', 30), (' Marine ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('accumulated depreciation ', 10)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Other assets ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings', 30), (' Marine ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('accumulated depreciation ', 10)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none leasehold improvements at cost , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Other assets ', 55), (' Assets under construction ', 48), (' under construction ', 47), (' Fishing vessels & equipment ', 47), (' Capitalised pre stripping costs ', 46), (' Development properties ', 44), (' Asset Retirement Obligation ', 41), (' Plant and equipment ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Freehold land and buildings ', 37), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Facilities ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Subsea ', 50), (' Leasehold buildings', 47), (' Mining properties ', 46), (' Other assets ', 45), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Development properties ', 38), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Other assets ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings', 30), (' Marine ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('accumulated depreciation ', 10)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none plant and equipment - at cost , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Assets under construction ', 55), (' under construction ', 53), (' Freehold land and buildings ', 52), (' Capitalised pre stripping costs ', 50), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), ('depreciatio', 45), (' Other assets ', 45), (' Marine ', 40), (' Leasehold buildings', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Workshop tooling ', 23), (' Facilities ', 20), (' Subsea ', 17)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Subsea ', 50), (' Leasehold buildings', 47), (' Mining properties ', 46), (' Other assets ', 45), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Development properties ', 38), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Other assets ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings', 30), (' Marine ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('accumulated depreciation ', 10)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none fixtures and fittings - at cost , res_fuzz_match = [(' under construction ', 53), (' Assets under construction ', 48), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), ('depreciatio', 36), (' Freehold land and buildings ', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), ('accumulated depreciation ', 27), (' Leasehold buildings', 27), (' Development properties ', 25), (' Workshop tooling ', 23)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Subsea ', 50), (' Leasehold buildings', 47), (' Mining properties ', 46), (' Other assets ', 45), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Development properties ', 38), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Other assets ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings', 30), (' Marine ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('accumulated depreciation ', 10)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none motor vehicles at cost , res_fuzz_match = [(' Capitalised pre stripping costs ', 47), (' under construction ', 47), (' Other assets ', 45), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mining properties ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' Leasehold buildings', 33), (' Building & mine infrastructure ', 32), (' Fishing vessels & equipment ', 30), ('accumulated depreciation ', 27), (' Freehold land and buildings ', 27), (' Subsea ', 17)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Subsea ', 50), (' Leasehold buildings', 47), (' Mining properties ', 46), (' Other assets ', 45), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Development properties ', 38), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Other assets ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings', 30), (' Marine ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('accumulated depreciation ', 10)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none computer equipment at cost , res_fuzz_match = [(' Plant and equipment ', 53), (' Capitalised pre stripping costs ', 50), ('accumulated depreciation ', 47), (' under construction ', 47), (' Mining properties ', 46), (' Construction in progress ', 44), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Fishing vessels & equipment ', 41), (' Pipeline Asset ', 40), (' Other assets ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 36), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Building & mine infrastructure ', 32), (' Workshop tooling ', 31), (' Freehold land and buildings ', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Subsea ', 50), (' Leasehold buildings', 47), (' Mining properties ', 46), (' Other assets ', 45), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Development properties ', 38), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Other assets ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings', 30), (' Marine ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('accumulated depreciation ', 10)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none lowvalue assets (plant and equipment) - at cost , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Other assets ', 55), (' Pipeline Asset ', 54), (' under construction ', 53), (' Freehold land and buildings ', 52), (' Assets under construction ', 52), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), ('depreciatio', 45), (' Stripping WIP ', 44), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mining properties ', 38), (' Development properties ', 38), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 29), (' Workshop tooling ', 23), (' Marine ', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Subsea ', 50), (' Leasehold buildings', 47), (' Mining properties ', 46), (' Other assets ', 45), (' Fishing vessels & equipment ', 41), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Development properties ', 38), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Other assets ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings', 30), (' Marine ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('accumulated depreciation ', 10)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Other assets ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), ('depreciatio', 30), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings', 30), (' Marine ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('accumulated depreciation ', 10)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' Construction in progress ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings', 50), ('accumulated depreciation ', 38), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Workshop tooling ', 38), ('depreciatio', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' Marine ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Other assets ', 12), (' Stripping WIP ', 12)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 4, 7, 10, 13, 15, 16, 20, 22, 23, 26, 29, 32, 34, 35], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [-331349.0, 681110.0, -308940.0, -155959.0, -5705913.0, -2703658.0, 411973.0, -372055.0, -305978.0, 633048.0, -242057.0, -133594.0, -5692994.0, -2186141.0, 411973.0, -350977.0], 'label': ['None Less: Accumulated depreciation', 'None Plant and equipment - at cost', 'None Less: Accumulated depreciation', 'None Less: Accumulated depreciation', 'None Less: Accumulated depreciation', 'None Less: Accumulated depreciation', 'None Lowvalue assets (Plant and equipment) - at cost', 'None Less: Accumulated depreciation', 'None Less: Accumulated depreciation', 'None Plant and equipment - at cost', 'None Less: Accumulated depreciation', 'None Less: Accumulated depreciation', 'None Less: Accumulated depreciation', 'None Less: Accumulated depreciation', 'None Lowvalue assets (Plant and equipment) - at cost', 'None Less: Accumulated depreciation'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:32:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:11+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none leasehold improvements at cost , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none plant and equipment - at cost , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none fixtures and fittings - at cost , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none motor vehicles at cost , res_fuzz_match = [('cost', 100), ('net book value', 54), ('gross', 40), ('net value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none computer equipment at cost , res_fuzz_match = [('cost', 100), ('net value', 50), ('net book value', 46), ('gross', 40)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none lowvalue assets (plant and equipment) - at cost , res_fuzz_match = [('cost', 100), ('net value', 62), ('net book value', 62), ('gross', 40)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none leasehold improvements at cost , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none plant and equipment - at cost , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none fixtures and fittings - at cost , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none motor vehicles at cost , res_fuzz_match = [('cost', 100), ('net book value', 54), ('gross', 40), ('net value', 38)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none computer equipment at cost , res_fuzz_match = [('cost', 100), ('net value', 50), ('net book value', 46), ('gross', 40)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none lowvalue assets (plant and equipment) - at cost , res_fuzz_match = [('cost', 100), ('net value', 62), ('net book value', 62), ('gross', 40)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost', 75), ('net book value', 38), ('net value', 25), ('gross', 20)]
2023-08-11 14:32:11+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 6, 9, 12, 15, 19, 22, 25, 28, 31, 34], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [676749.0, 681110.0, 270219.0, 8895209.0, 4272099.0, 411973.0, 432837.0, 633048.0, 228118.0, 9840278.0, 3650352.0, 411973.0], 'label': ['None Leasehold improvements at cost', 'None Plant and equipment - at cost', 'None Fixtures and fittings - at cost', 'None Motor vehicles at cost', 'None Computer equipment at cost', 'None Lowvalue assets (Plant and equipment) - at cost', 'None Leasehold improvements at cost', 'None Plant and equipment - at cost', 'None Fixtures and fittings - at cost', 'None Motor vehicles at cost', 'None Computer equipment at cost', 'None Lowvalue assets (Plant and equipment) - at cost'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [('plant property equipment', 23), ('property plant equipment', 23)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('plant property equipment', 28), ('property plant equipment', 28)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 6284865.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['13'], 'line_item_value': [6284865.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [('plant property equipment', 23), ('property plant equipment', 23)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('plant property equipment', 28), ('property plant equipment', 28)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 5629485.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['13'], 'line_item_value': [5629485.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['construction in progress ', ' work in progress ', ' capital works in progress ', ' WIP']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('Work in progress ', 38), (' property plant equipment ', 38), (' plant property equipment ', 31), (' plant and equipment ', 31), (' investment property', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), (' property plant equipment ', 80), (' plant property equipment ', 60), (' investment property', 47), ('Work in progress ', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment property', 34), (' property plant equipment ', 33), ('Work in progress ', 31), (' plant property equipment ', 27), (' plant and equipment ', 27)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [(' plant and equipment ', 67), (' property plant equipment ', 50), (' investment property', 50), (' plant property equipment ', 33), ('Work in progress ', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [(' property plant equipment ', 44), (' plant property equipment ', 33), (' investment property', 33), ('Work in progress ', 22), (' plant and equipment ', 22)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 6284865.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['13'], 'line_item_value': [6284865.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('Work in progress ', 38), (' property plant equipment ', 38), (' plant property equipment ', 31), (' plant and equipment ', 31), (' investment property', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), (' property plant equipment ', 80), (' plant property equipment ', 60), (' investment property', 47), ('Work in progress ', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment property', 34), (' property plant equipment ', 33), ('Work in progress ', 31), (' plant property equipment ', 27), (' plant and equipment ', 27)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [(' plant and equipment ', 67), (' property plant equipment ', 50), (' investment property', 50), (' plant property equipment ', 33), ('Work in progress ', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [(' property plant equipment ', 44), (' plant property equipment ', 33), (' investment property', 33), ('Work in progress ', 22), (' plant and equipment ', 22)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 5629485.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['13'], 'line_item_value': [5629485.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['construction in progress ', ' work in progress ', ' capital works in progress ', ' WIP'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 35), (' WIP', 33), (' capital works in progress ', 24), (' work in progress ', 23)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 38), ('construction in progress ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 30), (' work in progress ', 20), (' capital works in progress ', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 38), ('construction in progress ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 36), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 38), ('construction in progress ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('construction in progress ', 44), (' work in progress ', 38), (' WIP', 33), (' capital works in progress ', 32)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 38), ('construction in progress ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 29), (' capital works in progress ', 18), (' work in progress ', 15), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 38), ('construction in progress ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 35), (' WIP', 33), (' capital works in progress ', 24), (' work in progress ', 23)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [(' WIP', 67), (' work in progress ', 31), ('construction in progress ', 28), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 30), (' work in progress ', 20), (' capital works in progress ', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [(' WIP', 67), (' work in progress ', 31), ('construction in progress ', 28), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 36), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [(' WIP', 67), (' work in progress ', 31), ('construction in progress ', 28), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('construction in progress ', 44), (' work in progress ', 38), (' WIP', 33), (' capital works in progress ', 32)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [(' WIP', 67), (' work in progress ', 31), ('construction in progress ', 28), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 29), (' capital works in progress ', 18), (' work in progress ', 15), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [(' WIP', 67), (' work in progress ', 31), ('construction in progress ', 28), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 35), (' WIP', 33), (' capital works in progress ', 24), (' work in progress ', 23)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [(' WIP', 33), (' work in progress ', 31), ('construction in progress ', 28), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 30), (' work in progress ', 20), (' capital works in progress ', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [(' WIP', 33), (' work in progress ', 31), ('construction in progress ', 28), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 36), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [(' WIP', 33), (' work in progress ', 31), ('construction in progress ', 28), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('construction in progress ', 44), (' work in progress ', 38), (' WIP', 33), (' capital works in progress ', 32)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [(' WIP', 33), (' work in progress ', 31), ('construction in progress ', 28), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 29), (' capital works in progress ', 18), (' work in progress ', 15), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [(' WIP', 33), (' work in progress ', 31), ('construction in progress ', 28), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 35), (' WIP', 33), (' capital works in progress ', 24), (' work in progress ', 23)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress ', 37), (' WIP', 33), (' work in progress ', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 30), (' work in progress ', 20), (' capital works in progress ', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress ', 37), (' WIP', 33), (' work in progress ', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 36), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress ', 37), (' WIP', 33), (' work in progress ', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('construction in progress ', 44), (' work in progress ', 38), (' WIP', 33), (' capital works in progress ', 32)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress ', 37), (' WIP', 33), (' work in progress ', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 29), (' capital works in progress ', 18), (' work in progress ', 15), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress ', 37), (' WIP', 33), (' work in progress ', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 35), (' WIP', 33), (' capital works in progress ', 24), (' work in progress ', 23)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 39), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 30), (' work in progress ', 20), (' capital works in progress ', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 39), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 36), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 39), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('construction in progress ', 44), (' work in progress ', 38), (' WIP', 33), (' capital works in progress ', 32)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 39), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 29), (' capital works in progress ', 18), (' work in progress ', 15), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 39), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 35), (' WIP', 33), (' capital works in progress ', 24), (' work in progress ', 23)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 32), (' work in progress ', 31), ('construction in progress ', 28)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 30), (' work in progress ', 20), (' capital works in progress ', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 32), (' work in progress ', 31), ('construction in progress ', 28)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 36), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 32), (' work in progress ', 31), ('construction in progress ', 28)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('construction in progress ', 44), (' work in progress ', 38), (' WIP', 33), (' capital works in progress ', 32)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 32), (' work in progress ', 31), ('construction in progress ', 28)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 29), (' capital works in progress ', 18), (' work in progress ', 15), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 32), (' work in progress ', 31), ('construction in progress ', 28)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 35), (' WIP', 33), (' capital works in progress ', 24), (' work in progress ', 23)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31), ('construction in progress ', 28)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 30), (' work in progress ', 20), (' capital works in progress ', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31), ('construction in progress ', 28)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 36), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31), ('construction in progress ', 28)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('construction in progress ', 44), (' work in progress ', 38), (' WIP', 33), (' capital works in progress ', 32)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31), ('construction in progress ', 28)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 29), (' capital works in progress ', 18), (' work in progress ', 15), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31), ('construction in progress ', 28)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['construction in progress ', ' work in progress ', ' capital works in progress ', ' WIP'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none leasehold improvements at cost , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' work in progress ', 38), ('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('construction in progress ', 40), (' work in progress ', 30), (' capital works in progress ', 30), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none plant and equipment - at cost , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' work in progress ', 38), ('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('construction in progress ', 40), (' work in progress ', 30), (' capital works in progress ', 30), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none fixtures and fittings - at cost , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' work in progress ', 38), ('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('construction in progress ', 40), (' work in progress ', 30), (' capital works in progress ', 30), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none motor vehicles at cost , res_fuzz_match = [('construction in progress ', 39), (' work in progress ', 38), (' WIP', 33), (' capital works in progress ', 32)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' work in progress ', 38), ('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('construction in progress ', 40), (' work in progress ', 30), (' capital works in progress ', 30), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none computer equipment at cost , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 44), (' capital works in progress ', 37), (' work in progress ', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' work in progress ', 38), ('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('construction in progress ', 40), (' work in progress ', 30), (' capital works in progress ', 30), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none lowvalue assets (plant and equipment) - at cost , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' work in progress ', 38), ('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('construction in progress ', 40), (' work in progress ', 30), (' capital works in progress ', 30), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('construction in progress ', 40), (' work in progress ', 30), (' capital works in progress ', 30), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none leasehold improvements at cost , res_fuzz_match = [(' WIP', 67), (' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' work in progress ', 38), ('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('construction in progress ', 40), (' work in progress ', 30), (' capital works in progress ', 30), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none plant and equipment - at cost , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' work in progress ', 38), ('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('construction in progress ', 40), (' work in progress ', 30), (' capital works in progress ', 30), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none fixtures and fittings - at cost , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' work in progress ', 38), ('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('construction in progress ', 40), (' work in progress ', 30), (' capital works in progress ', 30), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none motor vehicles at cost , res_fuzz_match = [('construction in progress ', 39), (' work in progress ', 38), (' WIP', 33), (' capital works in progress ', 32)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' work in progress ', 38), ('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('construction in progress ', 40), (' work in progress ', 30), (' capital works in progress ', 30), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none computer equipment at cost , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 44), (' capital works in progress ', 37), (' work in progress ', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' work in progress ', 38), ('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('construction in progress ', 40), (' work in progress ', 30), (' capital works in progress ', 30), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none lowvalue assets (plant and equipment) - at cost , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' work in progress ', 38), ('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('construction in progress ', 40), (' work in progress ', 30), (' capital works in progress ', 30), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('construction in progress ', 40), (' work in progress ', 30), (' capital works in progress ', 30), (' WIP', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('construction in progress ', 50), (' WIP', 33), (' work in progress ', 25), (' capital works in progress ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [('tangible assets', 42)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('tangible assets', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [('tangible assets', 42)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('tangible assets', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 23), ('goodwill ', 14)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 38), ('goodwill ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' intangible asset', 58), ('goodwill ', 29), (' goodwill on consolidation ', 27)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [(' intangible asset', 100), (' goodwill on consolidation ', 33), ('goodwill ', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [(' goodwill on consolidation ', 22), (' intangible asset', 22), ('goodwill ', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 1627273.0, 'line_item_label': ['Intangibles'], 'note_numbers': ['15'], 'line_item_value': [1627273.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 23), ('goodwill ', 14)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 38), ('goodwill ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' intangible asset', 58), ('goodwill ', 29), (' goodwill on consolidation ', 27)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [(' intangible asset', 100), (' goodwill on consolidation ', 33), ('goodwill ', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [(' goodwill on consolidation ', 22), (' intangible asset', 22), ('goodwill ', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 1627273.0, 'line_item_label': ['Intangibles'], 'note_numbers': ['15'], 'line_item_value': [1627273.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none goodwill - on consolidation , res_fuzz_match = [('goodwill ', 100), (' goodwill on consolidation', 100)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' goodwill on consolidation', 100), ('goodwill ', 43)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none goodwill - on consolidation , res_fuzz_match = [('goodwill ', 100), (' goodwill on consolidation', 100)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' goodwill on consolidation', 100), ('goodwill ', 43)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 0, 1, 1], 'score': [100, 100, 100, 100], 'value': [1627273.0, 1627273.0, 1627273.0, 1627273.0], 'label': ['None Goodwill - on consolidation', 'Consolidated $', 'None Goodwill - on consolidation', 'Consolidated $'], 'year': [], 'colname_found': ['rows', 'columns', 'rows', 'columns']}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['Other intangibles ', ' development and software ', ' software ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible assets under development ', 62), ('intangible assets ', 58), (' intangible under development ', 38), ('property plant equipment', 38), (' plant property equipment', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('property plant equipment', 80), (' plant property equipment', 60), ('intangible assets ', 50), (' intangible under development ', 49), (' intangible assets under development ', 42)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 53), ('property plant equipment', 33), (' intangible under development ', 27), (' plant property equipment', 27)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [('intangible assets ', 100), (' intangible under development ', 100), (' intangible assets under development ', 100), ('property plant equipment', 50), (' plant property equipment', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [(' intangible under development ', 44), (' intangible assets under development ', 44), ('property plant equipment', 44), (' plant property equipment', 33), ('intangible assets ', 22)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 7912138.0, 'line_item_label': ['Property, plant and equipment', 'Intangibles'], 'note_numbers': ['13', '15'], 'line_item_value': [6284865.0, 1627273.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible assets under development ', 62), ('intangible assets ', 58), (' intangible under development ', 38), ('property plant equipment', 38), (' plant property equipment', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('property plant equipment', 80), (' plant property equipment', 60), ('intangible assets ', 50), (' intangible under development ', 49), (' intangible assets under development ', 42)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 53), ('property plant equipment', 33), (' intangible under development ', 27), (' plant property equipment', 27)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [('intangible assets ', 100), (' intangible under development ', 100), (' intangible assets under development ', 100), ('property plant equipment', 50), (' plant property equipment', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [(' intangible under development ', 44), (' intangible assets under development ', 44), ('property plant equipment', 44), (' plant property equipment', 33), ('intangible assets ', 22)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 7256758.0, 'line_item_label': ['Property, plant and equipment', 'Intangibles'], 'note_numbers': ['13', '15'], 'line_item_value': [5629485.0, 1627273.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['Other intangibles ', ' development and software ', ' software ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' water licenses', 50), (' development and software ', 37), (' computer software ', 36), (' consumer contracts ', 33), (' mining rights ', 30), (' software ', 29), ('Other intangibles ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('Other intangibles ', 50), (' mining rights ', 50), (' development and software ', 40), (' consumer contracts ', 40), (' water licenses', 30), (' software ', 29), (' computer software ', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' water licenses', 50), (' development and software ', 37), (' computer software ', 36), (' consumer contracts ', 33), (' mining rights ', 30), (' software ', 29), ('Other intangibles ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' development and software ', 45), (' mining rights ', 40), ('Other intangibles ', 36), (' computer software ', 36), (' consumer contracts ', 36), (' water licenses', 36), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' water licenses', 50), (' development and software ', 37), (' computer software ', 36), (' consumer contracts ', 33), (' mining rights ', 30), (' software ', 29), ('Other intangibles ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' water licenses', 42), (' mining rights ', 40), ('Other intangibles ', 33), (' consumer contracts ', 33), (' development and software ', 32), (' computer software ', 21), (' software ', 14)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' water licenses', 50), (' development and software ', 37), (' computer software ', 36), (' consumer contracts ', 33), (' mining rights ', 30), (' software ', 29), ('Other intangibles ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' water licenses', 50), (' development and software ', 37), (' computer software ', 36), (' consumer contracts ', 33), (' mining rights ', 30), (' software ', 29), ('Other intangibles ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 42), (' computer software ', 36), (' consumer contracts ', 33), (' water licenses', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('Other intangibles ', 50), (' mining rights ', 50), (' development and software ', 40), (' consumer contracts ', 40), (' water licenses', 30), (' software ', 29), (' computer software ', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 42), (' computer software ', 36), (' consumer contracts ', 33), (' water licenses', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' development and software ', 45), (' mining rights ', 40), ('Other intangibles ', 36), (' computer software ', 36), (' consumer contracts ', 36), (' water licenses', 36), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 42), (' computer software ', 36), (' consumer contracts ', 33), (' water licenses', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' water licenses', 42), (' mining rights ', 40), ('Other intangibles ', 33), (' consumer contracts ', 33), (' development and software ', 32), (' computer software ', 21), (' software ', 14)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 42), (' computer software ', 36), (' consumer contracts ', 33), (' water licenses', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 42), (' computer software ', 36), (' consumer contracts ', 33), (' water licenses', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [('Other intangibles ', 50), (' software ', 43), (' development and software ', 42), (' mining rights ', 40), (' computer software ', 36), (' consumer contracts ', 33), (' water licenses', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('Other intangibles ', 50), (' mining rights ', 50), (' development and software ', 40), (' consumer contracts ', 40), (' water licenses', 30), (' software ', 29), (' computer software ', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [('Other intangibles ', 50), (' software ', 43), (' development and software ', 42), (' mining rights ', 40), (' computer software ', 36), (' consumer contracts ', 33), (' water licenses', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' development and software ', 45), (' mining rights ', 40), ('Other intangibles ', 36), (' computer software ', 36), (' consumer contracts ', 36), (' water licenses', 36), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [('Other intangibles ', 50), (' software ', 43), (' development and software ', 42), (' mining rights ', 40), (' computer software ', 36), (' consumer contracts ', 33), (' water licenses', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' water licenses', 42), (' mining rights ', 40), ('Other intangibles ', 33), (' consumer contracts ', 33), (' development and software ', 32), (' computer software ', 21), (' software ', 14)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [('Other intangibles ', 50), (' software ', 43), (' development and software ', 42), (' mining rights ', 40), (' computer software ', 36), (' consumer contracts ', 33), (' water licenses', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [('Other intangibles ', 50), (' software ', 43), (' development and software ', 42), (' mining rights ', 40), (' computer software ', 36), (' consumer contracts ', 33), (' water licenses', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' mining rights ', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('Other intangibles ', 50), (' mining rights ', 50), (' development and software ', 40), (' consumer contracts ', 40), (' water licenses', 30), (' software ', 29), (' computer software ', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' mining rights ', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' development and software ', 45), (' mining rights ', 40), ('Other intangibles ', 36), (' computer software ', 36), (' consumer contracts ', 36), (' water licenses', 36), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' mining rights ', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' water licenses', 42), (' mining rights ', 40), ('Other intangibles ', 33), (' consumer contracts ', 33), (' development and software ', 32), (' computer software ', 21), (' software ', 14)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' mining rights ', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' mining rights ', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' computer software ', 50), (' consumer contracts ', 40), (' development and software ', 37), ('Other intangibles ', 33), (' water licenses', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('Other intangibles ', 50), (' mining rights ', 50), (' development and software ', 40), (' consumer contracts ', 40), (' water licenses', 30), (' software ', 29), (' computer software ', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' computer software ', 50), (' consumer contracts ', 40), (' development and software ', 37), ('Other intangibles ', 33), (' water licenses', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' development and software ', 45), (' mining rights ', 40), ('Other intangibles ', 36), (' computer software ', 36), (' consumer contracts ', 36), (' water licenses', 36), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' computer software ', 50), (' consumer contracts ', 40), (' development and software ', 37), ('Other intangibles ', 33), (' water licenses', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' water licenses', 42), (' mining rights ', 40), ('Other intangibles ', 33), (' consumer contracts ', 33), (' development and software ', 32), (' computer software ', 21), (' software ', 14)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' computer software ', 50), (' consumer contracts ', 40), (' development and software ', 37), ('Other intangibles ', 33), (' water licenses', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' computer software ', 50), (' consumer contracts ', 40), (' development and software ', 37), ('Other intangibles ', 33), (' water licenses', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [('Other intangibles ', 50), (' water licenses', 42), (' development and software ', 37), (' computer software ', 36), (' consumer contracts ', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('Other intangibles ', 50), (' mining rights ', 50), (' development and software ', 40), (' consumer contracts ', 40), (' water licenses', 30), (' software ', 29), (' computer software ', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [('Other intangibles ', 50), (' water licenses', 42), (' development and software ', 37), (' computer software ', 36), (' consumer contracts ', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' development and software ', 45), (' mining rights ', 40), ('Other intangibles ', 36), (' computer software ', 36), (' consumer contracts ', 36), (' water licenses', 36), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [('Other intangibles ', 50), (' water licenses', 42), (' development and software ', 37), (' computer software ', 36), (' consumer contracts ', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' water licenses', 42), (' mining rights ', 40), ('Other intangibles ', 33), (' consumer contracts ', 33), (' development and software ', 32), (' computer software ', 21), (' software ', 14)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [('Other intangibles ', 50), (' water licenses', 42), (' development and software ', 37), (' computer software ', 36), (' consumer contracts ', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [('Other intangibles ', 50), (' water licenses', 42), (' development and software ', 37), (' computer software ', 36), (' consumer contracts ', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' development and software ', 54), ('Other intangibles ', 50), (' software ', 43), (' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), (' mining rights ', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('Other intangibles ', 50), (' mining rights ', 50), (' development and software ', 40), (' consumer contracts ', 40), (' water licenses', 30), (' software ', 29), (' computer software ', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' development and software ', 54), ('Other intangibles ', 50), (' software ', 43), (' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), (' mining rights ', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' development and software ', 45), (' mining rights ', 40), ('Other intangibles ', 36), (' computer software ', 36), (' consumer contracts ', 36), (' water licenses', 36), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' development and software ', 54), ('Other intangibles ', 50), (' software ', 43), (' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), (' mining rights ', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' water licenses', 42), (' mining rights ', 40), ('Other intangibles ', 33), (' consumer contracts ', 33), (' development and software ', 32), (' computer software ', 21), (' software ', 14)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' development and software ', 54), ('Other intangibles ', 50), (' software ', 43), (' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), (' mining rights ', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' development and software ', 54), ('Other intangibles ', 50), (' software ', 43), (' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), (' mining rights ', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['Other intangibles ', ' development and software ', ' software ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none leasehold improvements at cost , res_fuzz_match = [(' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' development and software ', 32), (' mining rights ', 30), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29), (' development and software ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 50), (' software ', 43), (' computer software ', 40), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none plant and equipment - at cost , res_fuzz_match = [('Other intangibles ', 58), (' development and software ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29), (' development and software ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 50), (' software ', 43), (' computer software ', 40), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none fixtures and fittings - at cost , res_fuzz_match = [('Other intangibles ', 50), (' mining rights ', 50), (' software ', 43), (' development and software ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29), (' development and software ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 50), (' software ', 43), (' computer software ', 40), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none motor vehicles at cost , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 37), (' computer software ', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29), (' development and software ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 50), (' software ', 43), (' computer software ', 40), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none computer equipment at cost , res_fuzz_match = [(' computer software ', 50), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29), (' development and software ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 50), (' software ', 43), (' computer software ', 40), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none lowvalue assets (plant and equipment) - at cost , res_fuzz_match = [('Other intangibles ', 50), (' software ', 43), (' development and software ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), (' mining rights ', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29), (' development and software ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 50), (' software ', 43), (' computer software ', 40), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 50), (' software ', 43), (' computer software ', 40), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none leasehold improvements at cost , res_fuzz_match = [(' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' development and software ', 32), (' mining rights ', 30), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29), (' development and software ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 50), (' software ', 43), (' computer software ', 40), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none plant and equipment - at cost , res_fuzz_match = [('Other intangibles ', 58), (' development and software ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29), (' development and software ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 50), (' software ', 43), (' computer software ', 40), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none fixtures and fittings - at cost , res_fuzz_match = [('Other intangibles ', 50), (' mining rights ', 50), (' software ', 43), (' development and software ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29), (' development and software ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 50), (' software ', 43), (' computer software ', 40), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none motor vehicles at cost , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 37), (' computer software ', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29), (' development and software ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 50), (' software ', 43), (' computer software ', 40), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none computer equipment at cost , res_fuzz_match = [(' computer software ', 50), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29), (' development and software ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 50), (' software ', 43), (' computer software ', 40), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none lowvalue assets (plant and equipment) - at cost , res_fuzz_match = [('Other intangibles ', 50), (' software ', 43), (' development and software ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), (' mining rights ', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29), (' development and software ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 50), (' software ', 43), (' computer software ', 40), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 50), (' software ', 43), (' computer software ', 40), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['Other intangibles ', ' development and software ', ' software ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none goodwill - on consolidation , res_fuzz_match = [(' water licenses', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' development and software ', 32), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none goodwill - on consolidation , res_fuzz_match = [(' water licenses', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' development and software ', 32), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' consumer contracts ', 50), (' development and software ', 38), (' computer software ', 38), (' water licenses', 38), (' software ', 29), ('Other intangibles ', 25), (' mining rights ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [('donations', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('donations', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [('donations', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('donations', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [('derivative financial instruments', 67), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investment in associate', 50), (' investments accounted for using the equity method', 50)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('joint ventures and associates', 44), ('derivative financial instruments', 44), ('investment', 33), (' investment in associate', 33), (' investments accounted for using the equity method', 33), (' investment in joint venture', 22)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [('derivative financial instruments', 67), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investment in associate', 50), (' investments accounted for using the equity method', 50)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('joint ventures and associates', 44), ('derivative financial instruments', 44), ('investment', 33), (' investment in associate', 33), (' investments accounted for using the equity method', 33), (' investment in joint venture', 22)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [('deferred tax', 27), ('deferred charges', 24), ('deferred tax assets', 19)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('deferred tax', 100), ('deferred tax assets', 75), ('deferred charges', 50)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 1832902.0, 'line_item_label': ['Deferred tax'], 'note_numbers': ['16'], 'line_item_value': [1832902.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [('deferred tax', 27), ('deferred charges', 24), ('deferred tax assets', 19)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('deferred tax', 100), ('deferred tax assets', 75), ('deferred charges', 50)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 2313929.0, 'line_item_label': ['Deferred tax'], 'note_numbers': ['16'], 'line_item_value': [2313929.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: tax losses , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: allowance for expected credit losses , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: property, plant and equipment , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: contract liabilities , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: employee benefits , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: leases , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: accrued expenses , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: debtors retention , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: prepayments , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: contract assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: other provisions , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: "black hole" expenditure , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: deferred tax asset , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = movements: opening balance , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = movements: credited to profit or loss (note 6) , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = movements: closing balance , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 40)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: tax losses , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: allowance for expected credit losses , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: property, plant and equipment , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: contract liabilities , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: employee benefits , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: leases , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: accrued expenses , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: debtors retention , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: prepayments , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: contract assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: other provisions , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: "black hole" expenditure , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = deferred tax asset comprises temporary differences attributable to: deferred tax asset , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = movements: opening balance , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = movements: credited to profit or loss (note 6) , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = movements: closing balance , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 40)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [1574562.0, 165065.0, -1272783.0, 394509.0, 1311333.0, 1334538.0, 53603.0, -287150.0, -25802.0, -1112261.0, 39187.0, 139128.0, 2313929.0, 1060069.0, 141489.0, 505437.0, 535482.0, 1406479.0, -440175.0, 44879.0, -452414.0, -175722.0, -999673.0, -71204.0, 278255.0, 1832902.0], 'label': ['Deferred tax asset comprises temporary differences attributable to: Tax losses', 'Deferred tax asset comprises temporary differences attributable to: Allowance for expected credit losses', 'Deferred tax asset comprises temporary differences attributable to: Property, plant and equipment', 'Deferred tax asset comprises temporary differences attributable to: Contract liabilities', 'Deferred tax asset comprises temporary differences attributable to: Employee benefits', 'Deferred tax asset comprises temporary differences attributable to: Leases', 'Deferred tax asset comprises temporary differences attributable to: Accrued expenses', 'Deferred tax asset comprises temporary differences attributable to: Debtors retention', 'Deferred tax asset comprises temporary differences attributable to: Prepayments', 'Deferred tax asset comprises temporary differences attributable to: Contract assets', 'Deferred tax asset comprises temporary differences attributable to: Other provisions', 'Deferred tax asset comprises temporary differences attributable to: "Black hole" expenditure', 'Deferred tax asset comprises temporary differences attributable to: Deferred tax asset', 'Deferred tax asset comprises temporary differences attributable to: Tax losses', 'Deferred tax asset comprises temporary differences attributable to: Allowance for expected credit losses', 'Deferred tax asset comprises temporary differences attributable to: Property, plant and equipment', 'Deferred tax asset comprises temporary differences attributable to: Contract liabilities', 'Deferred tax asset comprises temporary differences attributable to: Employee benefits', 'Deferred tax asset comprises temporary differences attributable to: Leases', 'Deferred tax asset comprises temporary differences attributable to: Accrued expenses', 'Deferred tax asset comprises temporary differences attributable to: Debtors retention', 'Deferred tax asset comprises temporary differences attributable to: Prepayments', 'Deferred tax asset comprises temporary differences attributable to: Contract assets', 'Deferred tax asset comprises temporary differences attributable to: Other provisions', 'Deferred tax asset comprises temporary differences attributable to: "Black hole" expenditure', 'Deferred tax asset comprises temporary differences attributable to: Deferred tax asset'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [(' financial assets', 42), ('non-current', 31), (' leased assets', 25), (' loan receivables', 24), (' leases', 20), (' exploration and evaluation expenditure', 18), (' other non-current assets', 16), (' other non-current assets', 16), (' other assets', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [(' exploration and evaluation expenditure', 33), (' leased assets', 32), (' leases', 31), (' other assets', 30), (' other non-current assets', 29), (' other non-current assets', 29), (' financial assets', 27), (' loan receivables', 20), ('non-current', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [(' financial assets', 42), ('non-current', 31), (' leased assets', 25), (' loan receivables', 24), (' leases', 20), (' exploration and evaluation expenditure', 18), (' other non-current assets', 16), (' other non-current assets', 16), (' other assets', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [(' exploration and evaluation expenditure', 33), (' leased assets', 32), (' leases', 31), (' other assets', 30), (' other non-current assets', 29), (' other non-current assets', 29), (' financial assets', 27), (' loan receivables', 20), ('non-current', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft ']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft '] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' lease liabilities ', 71), (' interest bearing liabilites ', 43), ('  leases ', 40), (' loans and borrowings ', 29), (' cash and cash equivalents ', 22), (' borrowings ', 17), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' bank overdraft ', 10), (' cash overdraft ', 10), (' shortterm borrowings ', 9)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' interest bearing liabilites ', 61), (' loans and borrowings ', 34), (' cash and cash equivalents ', 29), (' cash overdraft ', 29), ('  leases ', 22), ('short term debt ', 21), (' short-term debt ', 21), (' shortterm debt ', 21), (' bank overdraft ', 21), (' borrowings ', 20), (' shortterm borrowings ', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [(' borrowings ', 100), (' loans and borrowings ', 57), (' shortterm borrowings ', 55), (' short-term debt ', 40), (' shortterm debt ', 40), (' bank overdraft ', 40), ('short term debt ', 38), (' cash overdraft ', 30), (' interest bearing liabilites ', 21), (' lease liabilities ', 12), ('  leases ', 0), (' cash and cash equivalents ', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' cash overdraft ', 32), (' loans and borrowings ', 31), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites ', 38), (' short-term debt ', 34), (' shortterm debt ', 34), (' bank overdraft ', 34), ('short term debt ', 33), (' loans and borrowings ', 27), (' shortterm borrowings ', 26), (' lease liabilities ', 23), (' cash and cash equivalents ', 22), ('  leases ', 21), (' cash overdraft ', 21), (' borrowings ', 19)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' lease liabilities ', 62), (' interest bearing liabilites ', 59), (' cash and cash equivalents ', 39), (' cash overdraft ', 34), (' loans and borrowings ', 33), (' bank overdraft ', 28), ('short term debt ', 27), (' short-term debt ', 21), (' shortterm debt ', 21), ('  leases ', 21), (' borrowings ', 19), (' shortterm borrowings ', 19)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 3229803.0, 'line_item_label': ['Borrowings', 'Lease liabilities'], 'note_numbers': ['18', '19'], 'line_item_value': [1300741.0, 1929062.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft '] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' lease liabilities ', 71), (' interest bearing liabilites ', 43), ('  leases ', 40), (' loans and borrowings ', 29), (' cash and cash equivalents ', 22), (' borrowings ', 17), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' bank overdraft ', 10), (' cash overdraft ', 10), (' shortterm borrowings ', 9)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' interest bearing liabilites ', 61), (' loans and borrowings ', 34), (' cash and cash equivalents ', 29), (' cash overdraft ', 29), ('  leases ', 22), ('short term debt ', 21), (' short-term debt ', 21), (' shortterm debt ', 21), (' bank overdraft ', 21), (' borrowings ', 20), (' shortterm borrowings ', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [(' borrowings ', 100), (' loans and borrowings ', 57), (' shortterm borrowings ', 55), (' short-term debt ', 40), (' shortterm debt ', 40), (' bank overdraft ', 40), ('short term debt ', 38), (' cash overdraft ', 30), (' interest bearing liabilites ', 21), (' lease liabilities ', 12), ('  leases ', 0), (' cash and cash equivalents ', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' cash overdraft ', 32), (' loans and borrowings ', 31), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites ', 38), (' short-term debt ', 34), (' shortterm debt ', 34), (' bank overdraft ', 34), ('short term debt ', 33), (' loans and borrowings ', 27), (' shortterm borrowings ', 26), (' lease liabilities ', 23), (' cash and cash equivalents ', 22), ('  leases ', 21), (' cash overdraft ', 21), (' borrowings ', 19)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' lease liabilities ', 62), (' interest bearing liabilites ', 59), (' cash and cash equivalents ', 39), (' cash overdraft ', 34), (' loans and borrowings ', 33), (' bank overdraft ', 28), ('short term debt ', 27), (' short-term debt ', 21), (' shortterm debt ', 21), ('  leases ', 21), (' borrowings ', 19), (' shortterm borrowings ', 19)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 1603877.0, 'line_item_label': ['Borrowings', 'Lease liabilities'], 'note_numbers': ['18', '19'], 'line_item_value': [0.0, 1603877.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none bank overdraft , res_fuzz_match = [(' bank overdraft ', 100), (' cash overdraft', 79), ('bank borrowings ', 73), (' secured long-term bank loans ', 59), (' utilised bank borrowings ', 50), (' not later than 1 year ', 47), (' not later than one year ', 47), (' loans from related party ', 42), (' balance at the end of period ', 42), (' lease liabilities - current ', 37), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none bank overdraft , res_fuzz_match = [(' bank overdraft ', 100), (' cash overdraft', 79), ('bank borrowings ', 73), (' secured long-term bank loans ', 59), (' utilised bank borrowings ', 50), (' not later than 1 year ', 47), (' not later than one year ', 47), (' loans from related party ', 42), (' balance at the end of period ', 42), (' lease liabilities - current ', 37), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [0.0, 1300741.0], 'label': ['None Bank overdraft', 'None Bank overdraft'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none borrowings , res_fuzz_match = [('bank borrowings ', 73), (' utilised bank borrowings ', 73), (' not later than one year ', 55), (' secured long-term bank loans ', 45), (' loans from related party ', 45), (' bank overdraft ', 45), (' not later than 1 year ', 36), (' balance at the end of period ', 36), (' cash overdraft', 36), (' lease liabilities - current ', 27), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none borrowings , res_fuzz_match = [('bank borrowings ', 73), (' utilised bank borrowings ', 73), (' not later than one year ', 55), (' secured long-term bank loans ', 45), (' loans from related party ', 45), (' bank overdraft ', 45), (' not later than 1 year ', 36), (' balance at the end of period ', 36), (' cash overdraft', 36), (' lease liabilities - current ', 27), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none lease liabilities , res_fuzz_match = [(' leases ', 100), (' lease liabilities ', 100), (' lease liabilities - current ', 69), (' loans from related party ', 45), (' not later than 1 year ', 44), (' not later than one year ', 44), (' secured long-term bank loans ', 44), (' utilised bank borrowings ', 31), (' balance at the end of period ', 31), (' bank overdraft ', 29), (' cash overdraft', 29), ('bank borrowings ', 27)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none hire purchase liabilities , res_fuzz_match = [(' lease liabilities ', 82), (' lease liabilities - current ', 53), (' leases ', 50), (' loans from related party ', 43), (' not later than 1 year ', 42), (' not later than one year ', 39), (' secured long-term bank loans ', 38), (' balance at the end of period ', 38), (' bank overdraft ', 36), (' cash overdraft', 36), (' utilised bank borrowings ', 28), ('bank borrowings ', 27)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: unexpired interest , res_fuzz_match = [(' leases ', 75), (' not later than one year ', 48), (' not later than 1 year ', 47), (' lease liabilities ', 45), (' lease liabilities - current ', 42), (' loans from related party ', 38), (' cash overdraft', 36), (' secured long-term bank loans ', 33), (' balance at the end of period ', 33), (' bank overdraft ', 29), (' utilised bank borrowings ', 28), ('bank borrowings ', 18)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' not later than one year ', 60), (' not later than 1 year ', 40), (' secured long-term bank loans ', 40), (' loans from related party ', 40), (' lease liabilities - current ', 40), (' lease liabilities ', 40), (' bank overdraft ', 40), ('bank borrowings ', 30), (' utilised bank borrowings ', 30), (' balance at the end of period ', 30), (' cash overdraft', 30), (' leases ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = future lease payments are due as follows: within one year , res_fuzz_match = [(' leases ', 100), (' not later than one year ', 65), (' lease liabilities ', 55), (' not later than 1 year ', 53), (' lease liabilities - current ', 47), (' utilised bank borrowings ', 44), (' loans from related party ', 43), (' balance at the end of period ', 43), (' secured long-term bank loans ', 42), ('bank borrowings ', 36), (' bank overdraft ', 36), (' cash overdraft', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = future lease payments are due as follows: one to five years , res_fuzz_match = [(' leases ', 100), (' lease liabilities ', 55), (' not later than 1 year ', 53), (' not later than one year ', 48), (' lease liabilities - current ', 47), (' utilised bank borrowings ', 44), (' loans from related party ', 43), (' secured long-term bank loans ', 42), (' balance at the end of period ', 38), ('bank borrowings ', 36), (' bank overdraft ', 36), (' cash overdraft', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = future lease payments are due as follows: more than five years , res_fuzz_match = [(' leases ', 100), (' not later than one year ', 65), (' not later than 1 year ', 63), (' lease liabilities ', 55), (' lease liabilities - current ', 47), (' utilised bank borrowings ', 44), (' loans from related party ', 43), (' bank overdraft ', 43), (' secured long-term bank loans ', 38), (' balance at the end of period ', 38), ('bank borrowings ', 36), (' cash overdraft', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = future lease payments are due as follows: total , res_fuzz_match = [(' leases ', 100), (' lease liabilities ', 55), (' not later than 1 year ', 53), (' lease liabilities - current ', 47), (' utilised bank borrowings ', 44), (' not later than one year ', 43), (' loans from related party ', 43), (' secured long-term bank loans ', 42), (' balance at the end of period ', 38), ('bank borrowings ', 36), (' bank overdraft ', 36), (' cash overdraft', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none lease liabilities , res_fuzz_match = [(' leases ', 100), (' lease liabilities ', 100), (' lease liabilities - current ', 69), (' loans from related party ', 45), (' not later than 1 year ', 44), (' not later than one year ', 44), (' secured long-term bank loans ', 44), (' utilised bank borrowings ', 31), (' balance at the end of period ', 31), (' bank overdraft ', 29), (' cash overdraft', 29), ('bank borrowings ', 27)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none hire purchase liabilities , res_fuzz_match = [(' lease liabilities ', 82), (' lease liabilities - current ', 53), (' leases ', 50), (' loans from related party ', 43), (' not later than 1 year ', 42), (' not later than one year ', 39), (' secured long-term bank loans ', 38), (' balance at the end of period ', 38), (' bank overdraft ', 36), (' cash overdraft', 36), (' utilised bank borrowings ', 28), ('bank borrowings ', 27)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: unexpired interest , res_fuzz_match = [(' leases ', 75), (' not later than one year ', 48), (' not later than 1 year ', 47), (' lease liabilities ', 45), (' lease liabilities - current ', 42), (' loans from related party ', 38), (' cash overdraft', 36), (' secured long-term bank loans ', 33), (' balance at the end of period ', 33), (' bank overdraft ', 29), (' utilised bank borrowings ', 28), ('bank borrowings ', 18)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' not later than one year ', 60), (' not later than 1 year ', 40), (' secured long-term bank loans ', 40), (' loans from related party ', 40), (' lease liabilities - current ', 40), (' lease liabilities ', 40), (' bank overdraft ', 40), ('bank borrowings ', 30), (' utilised bank borrowings ', 30), (' balance at the end of period ', 30), (' cash overdraft', 30), (' leases ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = future lease payments are due as follows: within one year , res_fuzz_match = [(' leases ', 100), (' not later than one year ', 65), (' lease liabilities ', 55), (' not later than 1 year ', 53), (' lease liabilities - current ', 47), (' utilised bank borrowings ', 44), (' loans from related party ', 43), (' balance at the end of period ', 43), (' secured long-term bank loans ', 42), ('bank borrowings ', 36), (' bank overdraft ', 36), (' cash overdraft', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = future lease payments are due as follows: one to five years , res_fuzz_match = [(' leases ', 100), (' lease liabilities ', 55), (' not later than 1 year ', 53), (' not later than one year ', 48), (' lease liabilities - current ', 47), (' utilised bank borrowings ', 44), (' loans from related party ', 43), (' secured long-term bank loans ', 42), (' balance at the end of period ', 38), ('bank borrowings ', 36), (' bank overdraft ', 36), (' cash overdraft', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = future lease payments are due as follows: more than five years , res_fuzz_match = [(' leases ', 100), (' not later than one year ', 65), (' not later than 1 year ', 63), (' lease liabilities ', 55), (' lease liabilities - current ', 47), (' utilised bank borrowings ', 44), (' loans from related party ', 43), (' bank overdraft ', 43), (' secured long-term bank loans ', 38), (' balance at the end of period ', 38), ('bank borrowings ', 36), (' cash overdraft', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = future lease payments are due as follows: total , res_fuzz_match = [(' leases ', 100), (' lease liabilities ', 55), (' not later than 1 year ', 53), (' lease liabilities - current ', 47), (' utilised bank borrowings ', 44), (' not later than one year ', 43), (' loans from related party ', 43), (' secured long-term bank loans ', 42), (' balance at the end of period ', 38), ('bank borrowings ', 36), (' bank overdraft ', 36), (' cash overdraft', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' not later than 1 year ', 38), (' not later than one year ', 38), (' secured long-term bank loans ', 38), (' loans from related party ', 38), (' lease liabilities - current ', 38), (' lease liabilities ', 38), (' bank overdraft ', 38), (' cash overdraft', 38), ('bank borrowings ', 25), (' utilised bank borrowings ', 25), (' leases ', 25), (' balance at the end of period ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15], 'score': [100, 82, 100, 100, 100, 100, 100, 82, 100, 100, 100, 100], 'value': [3700183.0, 319286.0, 777823.0, 3240264.0, 474620.0, 4492707.0, 1780907.0, 1228670.0, 1929062.0, 2055386.0, 913432.0, 4897880.0], 'label': ['None Lease liabilities', 'None Hire purchase liabilities', 'Future lease payments are due as follows: Within one year', 'Future lease payments are due as follows: One to five years', 'Future lease payments are due as follows: More than five years', 'Future lease payments are due as follows: Total', 'None Lease liabilities', 'None Hire purchase liabilities', 'Future lease payments are due as follows: Within one year', 'Future lease payments are due as follows: One to five years', 'Future lease payments are due as follows: More than five years', 'Future lease payments are due as follows: Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', '  accounts payable - trade ', ' Related party payables ', ' trade payables - related parties']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other trade payables', 42), ('trade and other payables', 38), ('trade payable', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 13141957.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['17'], 'line_item_value': [13141957.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other trade payables', 42), ('trade and other payables', 38), ('trade payable', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 14583624.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['17'], 'line_item_value': [14583624.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', '  accounts payable - trade ', ' Related party payables ', ' trade payables - related parties'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [(' trade payables ', 100), (' other trade payables ', 82), (' trade payables - other parties ', 71), (' trade payables - related parties', 71), (' trade and other payables ', 65), (' amounts payable to controlling entity ', 59), ('  accounts payable - trade ', 59), (' Related party payables ', 59), ('trade creditors ', 46), (' payables to related parties ', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amounts payable to controlling entity ', 62), ('  accounts payable - trade ', 38), ('trade creditors ', 25), (' trade and other payables ', 25), (' trade payables ', 12), (' trade payables - other parties ', 12), (' other trade payables ', 12), (' payables to related parties ', 12), (' Related party payables ', 12), (' trade payables - related parties', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none accruals , res_fuzz_match = [(' trade and other payables ', 50), (' amounts payable to controlling entity ', 50), ('  accounts payable - trade ', 50), (' trade payables ', 42), (' trade payables - other parties ', 42), (' other trade payables ', 42), (' trade payables - related parties', 42), ('trade creditors ', 33), (' payables to related parties ', 33), (' Related party payables ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amounts payable to controlling entity ', 62), ('  accounts payable - trade ', 38), ('trade creditors ', 25), (' trade and other payables ', 25), (' trade payables ', 12), (' trade payables - other parties ', 12), (' other trade payables ', 12), (' payables to related parties ', 12), (' Related party payables ', 12), (' trade payables - related parties', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none payroll tax , res_fuzz_match = [('  accounts payable - trade ', 67), (' trade and other payables ', 53), (' trade payables - other parties ', 53), (' amounts payable to controlling entity ', 53), (' trade payables ', 50), (' payables to related parties ', 47), (' Related party payables ', 47), (' trade payables - related parties', 47), (' other trade payables ', 40), ('trade creditors ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amounts payable to controlling entity ', 62), ('  accounts payable - trade ', 38), ('trade creditors ', 25), (' trade and other payables ', 25), (' trade payables ', 12), (' trade payables - other parties ', 12), (' other trade payables ', 12), (' payables to related parties ', 12), (' Related party payables ', 12), (' trade payables - related parties', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none purchase provisions , res_fuzz_match = [(' amounts payable to controlling entity ', 42), (' trade payables - related parties', 42), (' other trade payables ', 39), (' payables to related parties ', 39), ('  accounts payable - trade ', 39), (' trade payables - other parties ', 38), ('trade creditors ', 36), (' trade payables ', 33), (' Related party payables ', 33), (' trade and other payables ', 32)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amounts payable to controlling entity ', 62), ('  accounts payable - trade ', 38), ('trade creditors ', 25), (' trade and other payables ', 25), (' trade payables ', 12), (' trade payables - other parties ', 12), (' other trade payables ', 12), (' payables to related parties ', 12), (' Related party payables ', 12), (' trade payables - related parties', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none payg payable , res_fuzz_match = [(' trade payables ', 67), (' trade and other payables ', 62), (' other trade payables ', 62), (' Related party payables ', 62), (' amounts payable to controlling entity ', 56), ('  accounts payable - trade ', 56), (' trade payables - other parties ', 50), (' trade payables - related parties', 50), (' payables to related parties ', 32), ('trade creditors ', 14)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amounts payable to controlling entity ', 62), ('  accounts payable - trade ', 38), ('trade creditors ', 25), (' trade and other payables ', 25), (' trade payables ', 12), (' trade payables - other parties ', 12), (' other trade payables ', 12), (' payables to related parties ', 12), (' Related party payables ', 12), (' trade payables - related parties', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none superannuation payable , res_fuzz_match = [(' trade payables ', 75), (' other trade payables ', 61), (' Related party payables ', 61), (' trade and other payables ', 52), ('  accounts payable - trade ', 50), (' amounts payable to controlling entity ', 48), (' trade payables - other parties ', 43), (' trade payables - related parties', 43), (' payables to related parties ', 33), ('trade creditors ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amounts payable to controlling entity ', 62), ('  accounts payable - trade ', 38), ('trade creditors ', 25), (' trade and other payables ', 25), (' trade payables ', 12), (' trade payables - other parties ', 12), (' other trade payables ', 12), (' payables to related parties ', 12), (' Related party payables ', 12), (' trade payables - related parties', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none gst payable , res_fuzz_match = [(' trade and other payables ', 67), (' trade payables ', 67), (' amounts payable to controlling entity ', 67), (' other trade payables ', 67), ('  accounts payable - trade ', 67), (' Related party payables ', 60), (' trade payables - other parties ', 53), (' trade payables - related parties', 53), (' payables to related parties ', 34), ('trade creditors ', 21)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amounts payable to controlling entity ', 62), ('  accounts payable - trade ', 38), ('trade creditors ', 25), (' trade and other payables ', 25), (' trade payables ', 12), (' trade payables - other parties ', 12), (' other trade payables ', 12), (' payables to related parties ', 12), (' Related party payables ', 12), (' trade payables - related parties', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' amounts payable to controlling entity ', 50), (' other trade payables ', 50), ('trade creditors ', 40), (' trade and other payables ', 40), (' trade payables ', 40), (' trade payables - other parties ', 40), ('  accounts payable - trade ', 40), (' payables to related parties ', 30), (' Related party payables ', 30), (' trade payables - related parties', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amounts payable to controlling entity ', 62), ('  accounts payable - trade ', 38), ('trade creditors ', 25), (' trade and other payables ', 25), (' trade payables ', 12), (' trade payables - other parties ', 12), (' other trade payables ', 12), (' payables to related parties ', 12), (' Related party payables ', 12), (' trade payables - related parties', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [(' trade payables ', 100), (' other trade payables ', 82), (' trade payables - other parties ', 71), (' trade payables - related parties', 71), (' trade and other payables ', 65), (' amounts payable to controlling entity ', 59), ('  accounts payable - trade ', 59), (' Related party payables ', 59), ('trade creditors ', 46), (' payables to related parties ', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amounts payable to controlling entity ', 62), ('  accounts payable - trade ', 38), ('trade creditors ', 25), (' trade and other payables ', 25), (' trade payables ', 12), (' trade payables - other parties ', 12), (' other trade payables ', 12), (' payables to related parties ', 12), (' Related party payables ', 12), (' trade payables - related parties', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none accruals , res_fuzz_match = [(' trade and other payables ', 50), (' amounts payable to controlling entity ', 50), ('  accounts payable - trade ', 50), (' trade payables ', 42), (' trade payables - other parties ', 42), (' other trade payables ', 42), (' trade payables - related parties', 42), ('trade creditors ', 33), (' payables to related parties ', 33), (' Related party payables ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amounts payable to controlling entity ', 62), ('  accounts payable - trade ', 38), ('trade creditors ', 25), (' trade and other payables ', 25), (' trade payables ', 12), (' trade payables - other parties ', 12), (' other trade payables ', 12), (' payables to related parties ', 12), (' Related party payables ', 12), (' trade payables - related parties', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none payroll tax , res_fuzz_match = [('  accounts payable - trade ', 67), (' trade and other payables ', 53), (' trade payables - other parties ', 53), (' amounts payable to controlling entity ', 53), (' trade payables ', 50), (' payables to related parties ', 47), (' Related party payables ', 47), (' trade payables - related parties', 47), (' other trade payables ', 40), ('trade creditors ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amounts payable to controlling entity ', 62), ('  accounts payable - trade ', 38), ('trade creditors ', 25), (' trade and other payables ', 25), (' trade payables ', 12), (' trade payables - other parties ', 12), (' other trade payables ', 12), (' payables to related parties ', 12), (' Related party payables ', 12), (' trade payables - related parties', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none purchase provisions , res_fuzz_match = [(' amounts payable to controlling entity ', 42), (' trade payables - related parties', 42), (' other trade payables ', 39), (' payables to related parties ', 39), ('  accounts payable - trade ', 39), (' trade payables - other parties ', 38), ('trade creditors ', 36), (' trade payables ', 33), (' Related party payables ', 33), (' trade and other payables ', 32)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amounts payable to controlling entity ', 62), ('  accounts payable - trade ', 38), ('trade creditors ', 25), (' trade and other payables ', 25), (' trade payables ', 12), (' trade payables - other parties ', 12), (' other trade payables ', 12), (' payables to related parties ', 12), (' Related party payables ', 12), (' trade payables - related parties', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none payg payable , res_fuzz_match = [(' trade payables ', 67), (' trade and other payables ', 62), (' other trade payables ', 62), (' Related party payables ', 62), (' amounts payable to controlling entity ', 56), ('  accounts payable - trade ', 56), (' trade payables - other parties ', 50), (' trade payables - related parties', 50), (' payables to related parties ', 32), ('trade creditors ', 14)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amounts payable to controlling entity ', 62), ('  accounts payable - trade ', 38), ('trade creditors ', 25), (' trade and other payables ', 25), (' trade payables ', 12), (' trade payables - other parties ', 12), (' other trade payables ', 12), (' payables to related parties ', 12), (' Related party payables ', 12), (' trade payables - related parties', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none superannuation payable , res_fuzz_match = [(' trade payables ', 75), (' other trade payables ', 61), (' Related party payables ', 61), (' trade and other payables ', 52), ('  accounts payable - trade ', 50), (' amounts payable to controlling entity ', 48), (' trade payables - other parties ', 43), (' trade payables - related parties', 43), (' payables to related parties ', 33), ('trade creditors ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amounts payable to controlling entity ', 62), ('  accounts payable - trade ', 38), ('trade creditors ', 25), (' trade and other payables ', 25), (' trade payables ', 12), (' trade payables - other parties ', 12), (' other trade payables ', 12), (' payables to related parties ', 12), (' Related party payables ', 12), (' trade payables - related parties', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none gst payable , res_fuzz_match = [(' trade and other payables ', 67), (' trade payables ', 67), (' amounts payable to controlling entity ', 67), (' other trade payables ', 67), ('  accounts payable - trade ', 67), (' Related party payables ', 60), (' trade payables - other parties ', 53), (' trade payables - related parties', 53), (' payables to related parties ', 34), ('trade creditors ', 21)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amounts payable to controlling entity ', 62), ('  accounts payable - trade ', 38), ('trade creditors ', 25), (' trade and other payables ', 25), (' trade payables ', 12), (' trade payables - other parties ', 12), (' other trade payables ', 12), (' payables to related parties ', 12), (' Related party payables ', 12), (' trade payables - related parties', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' amounts payable to controlling entity ', 50), (' other trade payables ', 50), ('trade creditors ', 40), (' trade and other payables ', 40), (' trade payables ', 40), (' trade payables - other parties ', 40), ('  accounts payable - trade ', 40), (' payables to related parties ', 30), (' Related party payables ', 30), (' trade payables - related parties', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' amounts payable to controlling entity ', 62), ('  accounts payable - trade ', 38), ('trade creditors ', 25), (' trade and other payables ', 25), (' trade payables ', 12), (' trade payables - other parties ', 12), (' other trade payables ', 12), (' payables to related parties ', 12), (' Related party payables ', 12), (' trade payables - related parties', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 8], 'score': [100, 100], 'value': [13112931.0, 11727321.0], 'label': ['None Trade payables', 'None Trade payables'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses ', ' interest accrued']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('trade and other payables', 21)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('trade and other payables', 38)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 13141957.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['17'], 'line_item_value': [13141957.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('trade and other payables', 21)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('trade and other payables', 38)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 14583624.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['17'], 'line_item_value': [14583624.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['accrued expenses ', ' interest accrued'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [(' interest accrued', 43), ('accrued expenses ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accrued expenses ', 25), (' interest accrued', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none accruals , res_fuzz_match = [(' interest accrued', 64), ('accrued expenses ', 42)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accrued expenses ', 25), (' interest accrued', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none payroll tax , res_fuzz_match = [(' interest accrued', 36), ('accrued expenses ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accrued expenses ', 25), (' interest accrued', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none purchase provisions , res_fuzz_match = [(' interest accrued', 43), ('accrued expenses ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accrued expenses ', 25), (' interest accrued', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none payg payable , res_fuzz_match = [(' interest accrued', 29), ('accrued expenses ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accrued expenses ', 25), (' interest accrued', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none superannuation payable , res_fuzz_match = [(' interest accrued', 36), ('accrued expenses ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accrued expenses ', 25), (' interest accrued', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none gst payable , res_fuzz_match = [(' interest accrued', 43), ('accrued expenses ', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accrued expenses ', 25), (' interest accrued', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' interest accrued', 40), ('accrued expenses ', 10)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accrued expenses ', 25), (' interest accrued', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [(' interest accrued', 43), ('accrued expenses ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accrued expenses ', 25), (' interest accrued', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none accruals , res_fuzz_match = [(' interest accrued', 64), ('accrued expenses ', 42)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accrued expenses ', 25), (' interest accrued', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none payroll tax , res_fuzz_match = [(' interest accrued', 36), ('accrued expenses ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accrued expenses ', 25), (' interest accrued', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none purchase provisions , res_fuzz_match = [(' interest accrued', 43), ('accrued expenses ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accrued expenses ', 25), (' interest accrued', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none payg payable , res_fuzz_match = [(' interest accrued', 29), ('accrued expenses ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accrued expenses ', 25), (' interest accrued', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none superannuation payable , res_fuzz_match = [(' interest accrued', 36), ('accrued expenses ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accrued expenses ', 25), (' interest accrued', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none gst payable , res_fuzz_match = [(' interest accrued', 43), ('accrued expenses ', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accrued expenses ', 25), (' interest accrued', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' interest accrued', 40), ('accrued expenses ', 10)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accrued expenses ', 25), (' interest accrued', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' income tax payable ', 50), (' tax ', 33), (' provision', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities ', 71), (' income tax payable ', 43), (' tax ', 33), (' provision', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities ', 33), (' provision', 33), (' income tax payable ', 17), (' tax ', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' tax ', 33), (' provision', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' tax ', 33), (' provision', 33), ('current tax liabilities ', 27), (' income tax payable ', 27)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current tax liabilities ', 67), (' tax ', 67), (' income tax payable ', 55), (' provision', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 0.0, 'line_item_label': ['Liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' income tax payable ', 50), (' tax ', 33), (' provision', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities ', 71), (' income tax payable ', 43), (' tax ', 33), (' provision', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities ', 33), (' provision', 33), (' income tax payable ', 17), (' tax ', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' tax ', 33), (' provision', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' tax ', 33), (' provision', 33), ('current tax liabilities ', 27), (' income tax payable ', 27)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current tax liabilities ', 67), (' tax ', 67), (' income tax payable ', 55), (' provision', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 0.0, 'line_item_label': ['Liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' foreign exchange contract liability', 65), ('other current liabilities', 57), (' other current liabilities', 57), (' other financial liabilities', 57), (' trade and other payables', 38), (' customer deposits', 28), (' employee benefits', 27), ('provisions', 19), (' deferred revenue', 15)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 5], 'score': 100, 'value': 17416283.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Employee benefits'], 'note_numbers': [nan, '17', '20'], 'line_item_value': [0.0, 13141957.0, 4274326.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' foreign exchange contract liability', 65), ('other current liabilities', 57), (' other current liabilities', 57), (' other financial liabilities', 57), (' trade and other payables', 38), (' customer deposits', 28), (' employee benefits', 27), ('provisions', 19), (' deferred revenue', 15)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 5], 'score': 100, 'value': 18589417.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Employee benefits'], 'note_numbers': [nan, '17', '20'], 'line_item_value': [0.0, 14583624.0, 4005793.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [(' gst payables', 70), (' share of joint venture payables', 65), (' derivative contracts - at fair value', 53), (' loan payable to relayed party under tax funding agreement', 53), (' contract liabilites - current', 53), ('other creditors and accruals', 47), (' other related parties', 47), (' loans from related party', 47), (' gst payable and accruals', 47), (' employee benefits - payroll', 47), (' gst liabilities', 42), (' secured long-term bank loans', 41), (' current - liability for annual and long service leave', 41), (' abandonment and decommissioning costs', 41), (' total current employee benefits', 41), (' rebates', 40), (' other', 40), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 35), (' forward exchange contracts', 35), (' gst', 33), (' make good provisions', 31), (' restructuring', 30), (' employee benefits - current', 29), (' provisions - current', 29), (' provision for associate funding', 29), (' warranty', 25), (' ultimate parent entity', 24)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none accruals , res_fuzz_match = [('other creditors and accruals', 75), (' gst payable and accruals', 75), (' loan payable to relayed party under tax funding agreement', 50), (' current - liability for annual and long service leave', 50), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 50), (' other related parties', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' loans from related party', 42), (' other creditors', 42), (' employee benefits - current', 42), (' contract liabilites - current', 42), (' share of joint venture payables', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' gst payables', 40), (' rebates', 40), (' other', 40), (' warranty', 38), (' provisions - current', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' gst liabilities', 30), (' restructuring', 30), (' ultimate parent entity', 25), (' make good provisions', 25), (' gst', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none payroll tax , res_fuzz_match = [(' employee benefits - payroll', 62), (' loan payable to relayed party under tax funding agreement', 53), (' gst payables', 50), (' other related parties', 47), (' loans from related party', 47), (' gst payable and accruals', 47), (' share of joint venture payables', 47), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' current - liability for annual and long service leave', 40), (' abandonment and decommissioning costs', 40), (' rebates', 40), (' other', 40), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' employee benefits - current', 33), (' contract liabilites - current', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' gst', 33), (' forward exchange contracts', 33), (' total current employee benefits', 33), (' gst liabilities', 30), (' restructuring', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none purchase provisions , res_fuzz_match = [(' make good provisions', 56), (' other related parties', 53), (' loans from related party', 49), (' abandonment and decommissioning costs', 47), (' provisions - current', 44), (' loan payable to relayed party under tax funding agreement', 42), (' current - liability for annual and long service leave', 42), (' employee benefits - payroll', 42), (' rebates', 40), (' other', 40), (' secured long-term bank loans', 38), (' warranty', 38), (' derivative contracts - at fair value', 37), (' employee benefits - current', 37), (' share of joint venture payables', 37), (' provision for associate funding', 37), (' arising from service contracts', 37), (' forward exchange contracts', 37), (' total current employee benefits', 37), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' gst', 33), ('other creditors and accruals', 32), (' contract liabilites - current', 32), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' ultimate parent entity', 26), (' gst payable and accruals', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none payg payable , res_fuzz_match = [(' gst payables', 80), (' loan payable to relayed party under tax funding agreement', 56), (' share of joint venture payables', 56), (' gst payable and accruals', 50), (' gst liabilities', 50), ('other creditors and accruals', 44), (' other related parties', 44), (' secured long-term bank loans', 44), (' contract liabilites - current', 44), (' employee benefits - payroll', 44), (' rebates', 40), (' other', 40), (' loans from related party', 39), (' derivative contracts - at fair value', 38), (' current - liability for annual and long service leave', 38), (' abandonment and decommissioning costs', 38), (' total current employee benefits', 38), (' gst', 33), (' make good provisions', 31), (' forward exchange contracts', 31), (' ultimate parent entity', 25), (' employee benefits - current', 25), (' provision for associate funding', 25), (' warranty', 25), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21), (' arising from service contracts', 19), (' provisions - current', 14), (' restructuring', 10)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none superannuation payable , res_fuzz_match = [(' gst payables', 70), (' share of joint venture payables', 62), (' employee benefits - payroll', 50), (' loan payable to relayed party under tax funding agreement', 48), (' other related parties', 47), ('other creditors and accruals', 43), (' current - liability for annual and long service leave', 43), (' gst liabilities', 42), (' secured long-term bank loans', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' loans from related party', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' warranty', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' employee benefits - current', 34), (' abandonment and decommissioning costs', 33), (' arising from service contracts', 33), (' gst', 33), (' forward exchange contracts', 29), (' ultimate parent entity', 26), (' make good provisions', 25), (' provision for associate funding', 24)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none gst payable , res_fuzz_match = [(' gst payables', 100), (' gst', 100), (' gst liabilities', 70), (' gst payable and accruals', 67), (' loan payable to relayed party under tax funding agreement', 60), (' share of joint venture payables', 60), (' employee benefits - payroll', 53), (' other related parties', 47), (' secured long-term bank loans', 47), (' contract liabilites - current', 47), (' loans from related party', 41), ('other creditors and accruals', 40), (' current - liability for annual and long service leave', 40), (' other', 40), (' total current employee benefits', 40), (' derivative contracts - at fair value', 33), (' employee benefits - current', 33), (' abandonment and decommissioning costs', 33), (' make good provisions', 33), (' forward exchange contracts', 33), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' ultimate parent entity', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' warranty', 25), (' provisions - current', 21), (' rebates', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [(' gst payables', 70), (' share of joint venture payables', 65), (' derivative contracts - at fair value', 53), (' loan payable to relayed party under tax funding agreement', 53), (' contract liabilites - current', 53), ('other creditors and accruals', 47), (' other related parties', 47), (' loans from related party', 47), (' gst payable and accruals', 47), (' employee benefits - payroll', 47), (' gst liabilities', 42), (' secured long-term bank loans', 41), (' current - liability for annual and long service leave', 41), (' abandonment and decommissioning costs', 41), (' total current employee benefits', 41), (' rebates', 40), (' other', 40), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 35), (' forward exchange contracts', 35), (' gst', 33), (' make good provisions', 31), (' restructuring', 30), (' employee benefits - current', 29), (' provisions - current', 29), (' provision for associate funding', 29), (' warranty', 25), (' ultimate parent entity', 24)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none accruals , res_fuzz_match = [('other creditors and accruals', 75), (' gst payable and accruals', 75), (' loan payable to relayed party under tax funding agreement', 50), (' current - liability for annual and long service leave', 50), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 50), (' other related parties', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' loans from related party', 42), (' other creditors', 42), (' employee benefits - current', 42), (' contract liabilites - current', 42), (' share of joint venture payables', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' gst payables', 40), (' rebates', 40), (' other', 40), (' warranty', 38), (' provisions - current', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' total current employee benefits', 33), (' gst liabilities', 30), (' restructuring', 30), (' ultimate parent entity', 25), (' make good provisions', 25), (' gst', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none payroll tax , res_fuzz_match = [(' employee benefits - payroll', 62), (' loan payable to relayed party under tax funding agreement', 53), (' gst payables', 50), (' other related parties', 47), (' loans from related party', 47), (' gst payable and accruals', 47), (' share of joint venture payables', 47), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' current - liability for annual and long service leave', 40), (' abandonment and decommissioning costs', 40), (' rebates', 40), (' other', 40), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' employee benefits - current', 33), (' contract liabilites - current', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' gst', 33), (' forward exchange contracts', 33), (' total current employee benefits', 33), (' gst liabilities', 30), (' restructuring', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none purchase provisions , res_fuzz_match = [(' make good provisions', 56), (' other related parties', 53), (' loans from related party', 49), (' abandonment and decommissioning costs', 47), (' provisions - current', 44), (' loan payable to relayed party under tax funding agreement', 42), (' current - liability for annual and long service leave', 42), (' employee benefits - payroll', 42), (' rebates', 40), (' other', 40), (' secured long-term bank loans', 38), (' warranty', 38), (' derivative contracts - at fair value', 37), (' employee benefits - current', 37), (' share of joint venture payables', 37), (' provision for associate funding', 37), (' arising from service contracts', 37), (' forward exchange contracts', 37), (' total current employee benefits', 37), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' gst', 33), ('other creditors and accruals', 32), (' contract liabilites - current', 32), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' ultimate parent entity', 26), (' gst payable and accruals', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none payg payable , res_fuzz_match = [(' gst payables', 80), (' loan payable to relayed party under tax funding agreement', 56), (' share of joint venture payables', 56), (' gst payable and accruals', 50), (' gst liabilities', 50), ('other creditors and accruals', 44), (' other related parties', 44), (' secured long-term bank loans', 44), (' contract liabilites - current', 44), (' employee benefits - payroll', 44), (' rebates', 40), (' other', 40), (' loans from related party', 39), (' derivative contracts - at fair value', 38), (' current - liability for annual and long service leave', 38), (' abandonment and decommissioning costs', 38), (' total current employee benefits', 38), (' gst', 33), (' make good provisions', 31), (' forward exchange contracts', 31), (' ultimate parent entity', 25), (' employee benefits - current', 25), (' provision for associate funding', 25), (' warranty', 25), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21), (' arising from service contracts', 19), (' provisions - current', 14), (' restructuring', 10)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none superannuation payable , res_fuzz_match = [(' gst payables', 70), (' share of joint venture payables', 62), (' employee benefits - payroll', 50), (' loan payable to relayed party under tax funding agreement', 48), (' other related parties', 47), ('other creditors and accruals', 43), (' current - liability for annual and long service leave', 43), (' gst liabilities', 42), (' secured long-term bank loans', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' loans from related party', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' warranty', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' employee benefits - current', 34), (' abandonment and decommissioning costs', 33), (' arising from service contracts', 33), (' gst', 33), (' forward exchange contracts', 29), (' ultimate parent entity', 26), (' make good provisions', 25), (' provision for associate funding', 24)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none gst payable , res_fuzz_match = [(' gst payables', 100), (' gst', 100), (' gst liabilities', 70), (' gst payable and accruals', 67), (' loan payable to relayed party under tax funding agreement', 60), (' share of joint venture payables', 60), (' employee benefits - payroll', 53), (' other related parties', 47), (' secured long-term bank loans', 47), (' contract liabilites - current', 47), (' loans from related party', 41), ('other creditors and accruals', 40), (' current - liability for annual and long service leave', 40), (' other', 40), (' total current employee benefits', 40), (' derivative contracts - at fair value', 33), (' employee benefits - current', 33), (' abandonment and decommissioning costs', 33), (' make good provisions', 33), (' forward exchange contracts', 33), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' ultimate parent entity', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' warranty', 25), (' provisions - current', 21), (' rebates', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 6, 12, 14], 'score': [80, 100, 80, 100], 'value': [8965.0, 496612.0, 11467.0, 391540.0], 'label': ['None PAYG payable', 'None GST payable', 'None PAYG payable', 'None GST payable'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none annual leave , res_fuzz_match = [(' current - liability for annual and long service leave', 62), (' loan payable to relayed party under tax funding agreement', 56), (' secured long-term bank loans', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 44), (' share of joint venture payables', 44), (' gst payables', 40), (' rebates', 40), (' other', 40), (' other related parties', 38), (' derivative contracts - at fair value', 38), (' loans from related party', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' employee benefits - payroll', 38), (' total current employee benefits', 38), (' ultimate parent entity', 31), (' employee benefits - current', 31), (' forward exchange contracts', 31), (' gst liabilities', 30), (' other creditors', 29), (' other creditors', 29), (' provisions - current', 29), (' other creditors', 29), (' provision for associate funding', 25), (' arising from service contracts', 25), (' make good provisions', 25), (' warranty', 25), (' restructuring', 20), (' gst', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none long service leave , res_fuzz_match = [(' current - liability for annual and long service leave', 86), (' gst', 67), (' arising from service contracts', 52), (' secured long-term bank loans', 48), (' make good provisions', 44), (' derivative contracts - at fair value', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' other related parties', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' employee benefits - current', 38), (' employee benefits - payroll', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' provision for associate funding', 34), ('other creditors and accruals', 33), (' contract liabilites - current', 33), (' forward exchange contracts', 33), (' total current employee benefits', 33), (' restructuring', 30), (' gst payable and accruals', 29), (' ultimate parent entity', 28), (' warranty', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none annual leave , res_fuzz_match = [(' current - liability for annual and long service leave', 62), (' loan payable to relayed party under tax funding agreement', 56), (' secured long-term bank loans', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 44), (' share of joint venture payables', 44), (' gst payables', 40), (' rebates', 40), (' other', 40), (' other related parties', 38), (' derivative contracts - at fair value', 38), (' loans from related party', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' employee benefits - payroll', 38), (' total current employee benefits', 38), (' ultimate parent entity', 31), (' employee benefits - current', 31), (' forward exchange contracts', 31), (' gst liabilities', 30), (' other creditors', 29), (' other creditors', 29), (' provisions - current', 29), (' other creditors', 29), (' provision for associate funding', 25), (' arising from service contracts', 25), (' make good provisions', 25), (' warranty', 25), (' restructuring', 20), (' gst', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none long service leave , res_fuzz_match = [(' current - liability for annual and long service leave', 86), (' gst', 67), (' arising from service contracts', 52), (' secured long-term bank loans', 48), (' make good provisions', 44), (' derivative contracts - at fair value', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' other related parties', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' employee benefits - current', 38), (' employee benefits - payroll', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' provision for associate funding', 34), ('other creditors and accruals', 33), (' contract liabilites - current', 33), (' forward exchange contracts', 33), (' total current employee benefits', 33), (' restructuring', 30), (' gst payable and accruals', 29), (' ultimate parent entity', 28), (' warranty', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4], 'score': [86, 86], 'value': [445043.0, 390624.0], 'label': ['None Long service leave', 'None Long service leave'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('long term debt', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term debt', 41)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('long term debt', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term debt', 41)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' later than 1 year ', ' not later than 5 years']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' lease liability', 64), ('interest bearing loans and borrowings ', 36), (' loans and borrowings', 36), (' borrowings ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings ', 100), (' borrowings ', 100), (' loans and borrowings', 100), (' lease liabilities ', 17), (' lease liability', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' lease liability', 100), ('interest bearing loans and borrowings ', 45), (' loans and borrowings', 45), (' borrowings ', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' lease liabilities ', 45), (' lease liability', 45), ('interest bearing loans and borrowings ', 40), (' loans and borrowings', 27), (' borrowings ', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings ', 44), (' lease liabilities ', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings ', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 7468818.0, 'line_item_label': ['Borrowings', 'Lease liabilities'], 'note_numbers': ['22', '23'], 'line_item_value': [4500000.0, 2968818.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' lease liability', 64), ('interest bearing loans and borrowings ', 36), (' loans and borrowings', 36), (' borrowings ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings ', 100), (' borrowings ', 100), (' loans and borrowings', 100), (' lease liabilities ', 17), (' lease liability', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' lease liability', 100), ('interest bearing loans and borrowings ', 45), (' loans and borrowings', 45), (' borrowings ', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' lease liabilities ', 45), (' lease liability', 45), ('interest bearing loans and borrowings ', 40), (' loans and borrowings', 27), (' borrowings ', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings ', 44), (' lease liabilities ', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings ', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 7513764.0, 'line_item_label': ['Borrowings', 'Lease liabilities'], 'note_numbers': ['22', '23'], 'line_item_value': [3500000.0, 4013764.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' later than 1 year ', ' not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none bank overdraft , res_fuzz_match = [(' bank loan ', 67), (' later than 1 year ', 47), (' not later than 5 years', 47), (' secured finance debt ', 41), (' lease liabilities - non-current ', 37), (' lease liabilities ', 27), (' lease liability ', 27), ('leases ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none bank overdraft , res_fuzz_match = [(' bank loan ', 67), (' later than 1 year ', 47), (' not later than 5 years', 47), (' secured finance debt ', 41), (' lease liabilities - non-current ', 37), (' lease liabilities ', 27), (' lease liability ', 27), ('leases ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' later than 1 year ', ' not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none borrowings , res_fuzz_match = [(' lease liabilities - non-current ', 45), (' secured finance debt ', 36), (' not later than 5 years', 36), (' bank loan ', 33), (' lease liabilities ', 27), (' lease liability ', 27), (' later than 1 year ', 27), ('leases ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none borrowings , res_fuzz_match = [(' lease liabilities - non-current ', 45), (' secured finance debt ', 36), (' not later than 5 years', 36), (' bank loan ', 33), (' lease liabilities ', 27), (' lease liability ', 27), (' later than 1 year ', 27), ('leases ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' later than 1 year ', ' not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none lease liabilities , res_fuzz_match = [('leases ', 100), (' lease liabilities ', 100), (' lease liability ', 100), (' lease liabilities - non-current ', 69), (' bank loan ', 44), (' not later than 5 years', 44), (' later than 1 year ', 33), (' secured finance debt ', 32)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none hire purchase liabilities , res_fuzz_match = [(' lease liabilities ', 82), (' lease liability ', 82), (' lease liabilities - non-current ', 53), ('leases ', 50), (' bank loan ', 44), (' not later than 5 years', 42), (' secured finance debt ', 41), (' later than 1 year ', 40)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: unexpired interest , res_fuzz_match = [('leases ', 75), (' not later than 5 years', 47), (' lease liabilities ', 45), (' lease liability ', 45), (' lease liabilities - non-current ', 42), (' secured finance debt ', 41), (' later than 1 year ', 41), (' bank loan ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' bank loan ', 44), (' secured finance debt ', 42), (' lease liabilities ', 40), (' lease liability ', 40), (' later than 1 year ', 40), (' not later than 5 years', 40), (' lease liabilities - non-current ', 30), ('leases ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = future lease payments are due as follows: within one year , res_fuzz_match = [('leases ', 100), (' lease liabilities ', 55), (' lease liability ', 55), (' later than 1 year ', 53), (' not later than 5 years', 53), (' lease liabilities - non-current ', 42), (' secured finance debt ', 41), (' bank loan ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = future lease payments are due as follows: one to five years , res_fuzz_match = [('leases ', 100), (' lease liabilities ', 55), (' lease liability ', 55), (' later than 1 year ', 53), (' not later than 5 years', 53), (' lease liabilities - non-current ', 42), (' secured finance debt ', 41), (' bank loan ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = future lease payments are due as follows: more than five years , res_fuzz_match = [('leases ', 100), (' later than 1 year ', 67), (' not later than 5 years', 63), (' lease liabilities ', 55), (' lease liability ', 55), (' lease liabilities - non-current ', 42), (' secured finance debt ', 41), (' bank loan ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = future lease payments are due as follows: total , res_fuzz_match = [('leases ', 100), (' lease liabilities ', 55), (' lease liability ', 55), (' later than 1 year ', 53), (' not later than 5 years', 53), (' lease liabilities - non-current ', 42), (' secured finance debt ', 35), (' bank loan ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none lease liabilities , res_fuzz_match = [('leases ', 100), (' lease liabilities ', 100), (' lease liability ', 100), (' lease liabilities - non-current ', 69), (' bank loan ', 44), (' not later than 5 years', 44), (' later than 1 year ', 33), (' secured finance debt ', 32)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none hire purchase liabilities , res_fuzz_match = [(' lease liabilities ', 82), (' lease liability ', 82), (' lease liabilities - non-current ', 53), ('leases ', 50), (' bank loan ', 44), (' not later than 5 years', 42), (' secured finance debt ', 41), (' later than 1 year ', 40)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none less: unexpired interest , res_fuzz_match = [('leases ', 75), (' not later than 5 years', 47), (' lease liabilities ', 45), (' lease liability ', 45), (' lease liabilities - non-current ', 42), (' secured finance debt ', 41), (' later than 1 year ', 41), (' bank loan ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' bank loan ', 44), (' secured finance debt ', 42), (' lease liabilities ', 40), (' lease liability ', 40), (' later than 1 year ', 40), (' not later than 5 years', 40), (' lease liabilities - non-current ', 30), ('leases ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = future lease payments are due as follows: within one year , res_fuzz_match = [('leases ', 100), (' lease liabilities ', 55), (' lease liability ', 55), (' later than 1 year ', 53), (' not later than 5 years', 53), (' lease liabilities - non-current ', 42), (' secured finance debt ', 41), (' bank loan ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = future lease payments are due as follows: one to five years , res_fuzz_match = [('leases ', 100), (' lease liabilities ', 55), (' lease liability ', 55), (' later than 1 year ', 53), (' not later than 5 years', 53), (' lease liabilities - non-current ', 42), (' secured finance debt ', 41), (' bank loan ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = future lease payments are due as follows: more than five years , res_fuzz_match = [('leases ', 100), (' later than 1 year ', 67), (' not later than 5 years', 63), (' lease liabilities ', 55), (' lease liability ', 55), (' lease liabilities - non-current ', 42), (' secured finance debt ', 41), (' bank loan ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = future lease payments are due as follows: total , res_fuzz_match = [('leases ', 100), (' lease liabilities ', 55), (' lease liability ', 55), (' later than 1 year ', 53), (' not later than 5 years', 53), (' lease liabilities - non-current ', 42), (' secured finance debt ', 35), (' bank loan ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' lease liabilities ', 38), (' lease liability ', 38), (' lease liabilities - non-current ', 38), (' not later than 5 years', 38), ('leases ', 25), (' secured finance debt ', 25), (' bank loan ', 25), (' later than 1 year ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15], 'score': [100, 82, 100, 100, 100, 100, 100, 82, 100, 100, 100, 100], 'value': [3700183.0, 319286.0, 777823.0, 3240264.0, 474620.0, 4492707.0, 1780907.0, 1228670.0, 1929062.0, 2055386.0, 913432.0, 4897880.0], 'label': ['None Lease liabilities', 'None Hire purchase liabilities', 'Future lease payments are due as follows: Within one year', 'Future lease payments are due as follows: One to five years', 'Future lease payments are due as follows: More than five years', 'Future lease payments are due as follows: Total', 'None Lease liabilities', 'None Hire purchase liabilities', 'Future lease payments are due as follows: Within one year', 'Future lease payments are due as follows: One to five years', 'Future lease payments are due as follows: More than five years', 'Future lease payments are due as follows: Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('(bond)', 40), ('interest bearing loans and borrowings', 34)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 21)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('(bond)', 40), ('interest bearing loans and borrowings', 34)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 21)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes ', ' deferred tax liabilities']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities ', ' total deferred tax (assets) / liabilities']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' deferred tax liabilities', 57), ('deferred taxes ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('deferred taxes ', 17), (' deferred tax liabilities', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' deferred tax liabilities', 73), ('deferred taxes ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('deferred taxes ', 33), (' deferred tax liabilities', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes ', 33), (' deferred tax liabilities', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' deferred tax liabilities', 57), ('deferred taxes ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('deferred taxes ', 17), (' deferred tax liabilities', 17)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' deferred tax liabilities', 73), ('deferred taxes ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('deferred taxes ', 33), (' deferred tax liabilities', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes ', 33), (' deferred tax liabilities', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities ', 82), ('other long term liabilities ', 61), (' other financial liabilities ', 53), (' financial liabilities ', 43), (' provision for associate funding ', 33), (' trade and other payables ', 28), (' employee benefits ', 28), (' deferred revenue', 23), (' provisions ', 10)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [(' other non-current liabilities ', 38), (' provisions ', 33), ('other long term liabilities ', 29), (' provision for associate funding ', 29), (' other financial liabilities ', 23), (' deferred revenue', 22), (' trade and other payables ', 21), (' employee benefits ', 19), (' financial liabilities ', 10)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities ', 64), (' other financial liabilities ', 52), (' other non-current liabilities ', 39), ('other long term liabilities ', 36), (' trade and other payables ', 30), (' provision for associate funding ', 24), (' employee benefits ', 23), (' deferred revenue', 17), (' provisions ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits ', 100), (' deferred revenue', 37), (' other financial liabilities ', 34), ('other long term liabilities ', 32), (' trade and other payables ', 32), (' other non-current liabilities ', 29), (' financial liabilities ', 28), (' provision for associate funding ', 22), (' provisions ', 19)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits ', 33), ('other long term liabilities ', 32), (' provision for associate funding ', 32), (' deferred revenue', 29), (' other non-current liabilities ', 28), (' trade and other payables ', 26), (' other financial liabilities ', 21), (' financial liabilities ', 17), (' provisions ', 13)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': 100, 'value': 389670.0, 'line_item_label': ['Non-current liabilities', 'Employee benefits'], 'note_numbers': [nan, '24'], 'line_item_value': [0.0, 389670.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities ', 82), ('other long term liabilities ', 61), (' other financial liabilities ', 53), (' financial liabilities ', 43), (' provision for associate funding ', 33), (' trade and other payables ', 28), (' employee benefits ', 28), (' deferred revenue', 23), (' provisions ', 10)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [(' other non-current liabilities ', 38), (' provisions ', 33), ('other long term liabilities ', 29), (' provision for associate funding ', 29), (' other financial liabilities ', 23), (' deferred revenue', 22), (' trade and other payables ', 21), (' employee benefits ', 19), (' financial liabilities ', 10)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities ', 64), (' other financial liabilities ', 52), (' other non-current liabilities ', 39), ('other long term liabilities ', 36), (' trade and other payables ', 30), (' provision for associate funding ', 24), (' employee benefits ', 23), (' deferred revenue', 17), (' provisions ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits ', 100), (' deferred revenue', 37), (' other financial liabilities ', 34), ('other long term liabilities ', 32), (' trade and other payables ', 32), (' other non-current liabilities ', 29), (' financial liabilities ', 28), (' provision for associate funding ', 22), (' provisions ', 19)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits ', 33), ('other long term liabilities ', 32), (' provision for associate funding ', 32), (' deferred revenue', 29), (' other non-current liabilities ', 28), (' trade and other payables ', 26), (' other financial liabilities ', 21), (' financial liabilities ', 17), (' provisions ', 13)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': 100, 'value': 293491.0, 'line_item_label': ['Non-current liabilities', 'Employee benefits'], 'note_numbers': [nan, '24'], 'line_item_value': [0.0, 293491.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none annual leave , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' abandonment and decommissioning costs ', 50), (' trade payables - related parties ', 50), ('non-current trade and other payables ', 44), (' total non-current employee benefits', 44), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' employee benefits - non current ', 38), (' contract liabilites - non-current ', 38), (' employee benefits - payroll ', 38), (' provisions - non-current ', 36), (' provision for associate funding ', 25), (' make good provisions ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' provisions - non-current ', 38), (' contract liabilites - non-current ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 38), (' make good provisions ', 38), (' total non-current employee benefits', 38), ('non-current trade and other payables ', 25), (' employee benefits - non current ', 25), (' employee benefits - payroll ', 25), (' trade payables - related parties ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none long service leave , res_fuzz_match = [(' non-current - liability for long-service leave ', 83), (' make good provisions ', 44), (' derivative contracts - at fair value ', 43), (' abandonment and decommissioning costs ', 43), (' total non-current employee benefits', 43), ('non-current trade and other payables ', 39), (' electricity derivatives at fair value through oci ', 38), (' employee benefits - non current ', 38), (' employee benefits - payroll ', 38), (' provision for associate funding ', 34), (' contract liabilites - non-current ', 33), (' trade payables - related parties ', 33), (' provisions - non-current ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' provisions - non-current ', 38), (' contract liabilites - non-current ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 38), (' make good provisions ', 38), (' total non-current employee benefits', 38), ('non-current trade and other payables ', 25), (' employee benefits - non current ', 25), (' employee benefits - payroll ', 25), (' trade payables - related parties ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('non-current trade and other payables ', 50), (' non-current - liability for long-service leave ', 50), (' contract liabilites - non-current ', 50), (' abandonment and decommissioning costs ', 50), (' derivative contracts - at fair value ', 40), (' employee benefits - non current ', 40), (' employee benefits - payroll ', 40), (' provision for associate funding ', 40), (' total non-current employee benefits', 40), (' electricity derivatives at fair value through oci ', 30), (' provisions - non-current ', 30), (' make good provisions ', 30), (' trade payables - related parties ', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' provisions - non-current ', 38), (' contract liabilites - non-current ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 38), (' make good provisions ', 38), (' total non-current employee benefits', 38), ('non-current trade and other payables ', 25), (' employee benefits - non current ', 25), (' employee benefits - payroll ', 25), (' trade payables - related parties ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none annual leave , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' abandonment and decommissioning costs ', 50), (' trade payables - related parties ', 50), ('non-current trade and other payables ', 44), (' total non-current employee benefits', 44), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' employee benefits - non current ', 38), (' contract liabilites - non-current ', 38), (' employee benefits - payroll ', 38), (' provisions - non-current ', 36), (' provision for associate funding ', 25), (' make good provisions ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' provisions - non-current ', 38), (' contract liabilites - non-current ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 38), (' make good provisions ', 38), (' total non-current employee benefits', 38), ('non-current trade and other payables ', 25), (' employee benefits - non current ', 25), (' employee benefits - payroll ', 25), (' trade payables - related parties ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none long service leave , res_fuzz_match = [(' non-current - liability for long-service leave ', 83), (' make good provisions ', 44), (' derivative contracts - at fair value ', 43), (' abandonment and decommissioning costs ', 43), (' total non-current employee benefits', 43), ('non-current trade and other payables ', 39), (' electricity derivatives at fair value through oci ', 38), (' employee benefits - non current ', 38), (' employee benefits - payroll ', 38), (' provision for associate funding ', 34), (' contract liabilites - non-current ', 33), (' trade payables - related parties ', 33), (' provisions - non-current ', 29)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' provisions - non-current ', 38), (' contract liabilites - non-current ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 38), (' make good provisions ', 38), (' total non-current employee benefits', 38), ('non-current trade and other payables ', 25), (' employee benefits - non current ', 25), (' employee benefits - payroll ', 25), (' trade payables - related parties ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('non-current trade and other payables ', 50), (' non-current - liability for long-service leave ', 50), (' contract liabilites - non-current ', 50), (' abandonment and decommissioning costs ', 50), (' derivative contracts - at fair value ', 40), (' employee benefits - non current ', 40), (' employee benefits - payroll ', 40), (' provision for associate funding ', 40), (' total non-current employee benefits', 40), (' electricity derivatives at fair value through oci ', 30), (' provisions - non-current ', 30), (' make good provisions ', 30), (' trade payables - related parties ', 30)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' provisions - non-current ', 38), (' contract liabilites - non-current ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 38), (' make good provisions ', 38), (' total non-current employee benefits', 38), ('non-current trade and other payables ', 25), (' employee benefits - non current ', 25), (' employee benefits - payroll ', 25), (' trade payables - related parties ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4], 'score': [83, 83], 'value': [445043.0, 390624.0], 'label': ['None Long service leave', 'None Long service leave'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital ', 100), (' share capital ', 67), (' share capital ', 67), (' equity share capital ', 57), (' contributed equity ', 38), (' contributed equity', 38), (' perpetual equity instrument ', 34), ('common stock ', 27)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [(' share capital ', 50), (' share capital ', 50), (' contributed equity ', 48), (' contributed equity', 48), (' equity share capital ', 45), (' issued capital ', 43), (' perpetual equity instrument ', 32), ('common stock ', 24)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 5014754.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['25'], 'line_item_value': [5014754.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital ', 100), (' share capital ', 67), (' share capital ', 67), (' equity share capital ', 57), (' contributed equity ', 38), (' contributed equity', 38), (' perpetual equity instrument ', 34), ('common stock ', 27)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [(' share capital ', 50), (' share capital ', 50), (' contributed equity ', 48), (' contributed equity', 48), (' equity share capital ', 45), (' issued capital ', 43), (' perpetual equity instrument ', 32), ('common stock ', 24)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 10014754.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['25'], 'line_item_value': [10014754.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none ordinary shares fully paid 7565407835 5065407835 , res_fuzz_match = [('ordinary shares ', 100), (' ordinary shares fully paid ', 100), (' on issue, fully paid ', 73), (' fully paid ordinary shares ', 60), (' issued and paid-up share capital ', 48), (' retained profits ', 46), (' Fully paid Preference shares ', 43), (' total issued capital ', 38), (' Profits captialised on redemption of preference shares', 37)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' retained profits ', 38), (' ordinary shares fully paid ', 38), (' total issued capital ', 38), (' on issue, fully paid ', 38), (' Fully paid Preference shares ', 38), (' Profits captialised on redemption of preference shares', 38), ('ordinary shares ', 25), (' fully paid ordinary shares ', 25), (' issued and paid-up share capital ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none ordinary shares fully paid 7565407835 5065407835 , res_fuzz_match = [('ordinary shares ', 100), (' ordinary shares fully paid ', 100), (' on issue, fully paid ', 73), (' fully paid ordinary shares ', 60), (' issued and paid-up share capital ', 48), (' retained profits ', 46), (' Fully paid Preference shares ', 43), (' total issued capital ', 38), (' Profits captialised on redemption of preference shares', 37)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' retained profits ', 38), (' ordinary shares fully paid ', 38), (' total issued capital ', 38), (' on issue, fully paid ', 38), (' Fully paid Preference shares ', 38), (' Profits captialised on redemption of preference shares', 38), ('ordinary shares ', 25), (' fully paid ordinary shares ', 25), (' issued and paid-up share capital ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [10014754.0, 5014754.0], 'label': ['None Ordinary shares fully paid 7565407835 5065407835', 'None Ordinary shares fully paid 7565407835 5065407835'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('Share premium', 35)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('Share premium', 46)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('Share premium', 35)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('Share premium', 46)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings ', ' general reserves ', ' accumulated losses ', ' retained earnings and dividends on equity instruments']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:12+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-11 14:32:12+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' retained profits', 43), (' accumulated losses ', 36), (' retained earnings ', 29), ('other equity ', 27), (' reserves surplus ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [(' retained profits', 100), (' retained earnings ', 67), ('other equity ', 32), (' reserves surplus ', 23), (' accumulated losses ', 8)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 5146496.0, 'line_item_label': ['Retained profits'], 'note_numbers': ['26'], 'line_item_value': [5146496.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' retained profits', 43), (' accumulated losses ', 36), (' retained earnings ', 29), ('other equity ', 27), (' reserves surplus ', 26)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [(' retained profits', 100), (' retained earnings ', 67), ('other equity ', 32), (' reserves surplus ', 23), (' accumulated losses ', 8)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 3943309.0, 'line_item_label': ['Retained profits'], 'note_numbers': ['26'], 'line_item_value': [3943309.0]}
2023-08-11 14:32:12+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:12+0530 - sLogger - DEBUG - keywords = ['retained earnings ', ' general reserves ', ' accumulated losses ', ' retained earnings and dividends on equity instruments'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none retained profits at the beginning of the financial year , res_fuzz_match = [('retained earnings ', 73), (' retained earnings and dividends on equity instruments', 44), (' general reserves ', 42), (' accumulated losses ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' retained earnings and dividends on equity instruments', 38), (' accumulated losses ', 25), ('retained earnings ', 12), (' general reserves ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none loss after income tax benefit for the year , res_fuzz_match = [('retained earnings ', 55), (' general reserves ', 42), (' retained earnings and dividends on equity instruments', 38), (' accumulated losses ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' retained earnings and dividends on equity instruments', 38), (' accumulated losses ', 25), ('retained earnings ', 12), (' general reserves ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none retained profits at the end of the financial year , res_fuzz_match = [('retained earnings ', 73), (' retained earnings and dividends on equity instruments', 48), (' general reserves ', 42), (' accumulated losses ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' retained earnings and dividends on equity instruments', 38), (' accumulated losses ', 25), ('retained earnings ', 12), (' general reserves ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none retained profits at the beginning of the financial year , res_fuzz_match = [('retained earnings ', 73), (' retained earnings and dividends on equity instruments', 44), (' general reserves ', 42), (' accumulated losses ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' retained earnings and dividends on equity instruments', 38), (' accumulated losses ', 25), ('retained earnings ', 12), (' general reserves ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none loss after income tax benefit for the year , res_fuzz_match = [('retained earnings ', 55), (' general reserves ', 42), (' retained earnings and dividends on equity instruments', 38), (' accumulated losses ', 33)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' retained earnings and dividends on equity instruments', 38), (' accumulated losses ', 25), ('retained earnings ', 12), (' general reserves ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = none retained profits at the end of the financial year , res_fuzz_match = [('retained earnings ', 73), (' retained earnings and dividends on equity instruments', 48), (' general reserves ', 42), (' accumulated losses ', 25)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' retained earnings and dividends on equity instruments', 38), (' accumulated losses ', 25), ('retained earnings ', 12), (' general reserves ', 12)]
2023-08-11 14:32:12+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest ', 33), (' non controlling interest ', 33), (' minority interest ', 33), (' noncontrolling interest ', 21), (' non-controlling interest', 21)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('minority interest ', 52), (' minority interest ', 52), (' non controlling interest ', 48), (' noncontrolling interest ', 38), (' non-controlling interest', 38)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest ', 33), (' non controlling interest ', 33), (' minority interest ', 33), (' noncontrolling interest ', 21), (' non-controlling interest', 21)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('minority interest ', 52), (' minority interest ', 52), (' non controlling interest ', 48), (' noncontrolling interest ', 38), (' non-controlling interest', 38)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('shareholders equity(a)', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('shareholders equity(a)', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve ', ' cash flow hedge reserve ', ' reserve in joint venture ', ' other reserve ', ' total other reserves ', ' tax reserve ', ' other  components of equity']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve', 16), ('other reserves ', 11)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' foreign currency translation reserve', 24), (' reserves ', 12)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [(' foreign currency translation reserve', 41), ('other reserves ', 40), (' reserves ', 21)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve', 16), ('other reserves ', 11)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' foreign currency translation reserve', 24), (' reserves ', 12)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [(' foreign currency translation reserve', 41), ('other reserves ', 40), (' reserves ', 21)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', '']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' Exploration and evaluation assets', 46), (' investment property ', 36), (' oil and gas properties ', 31), ('plant property equipment ', 30), (' property plant equipment ', 30), (' plant and equipment ', 29), (' property ', 19)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment ', 91), (' property plant equipment ', 91), (' plant and equipment ', 77), (' oil and gas properties ', 70), (' investment property ', 62), (' property ', 50), (' Exploration and evaluation assets', 48)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' Exploration and evaluation assets', 38), (' investment property ', 33), ('plant property equipment ', 29), (' property plant equipment ', 29), (' plant and equipment ', 27), (' property ', 26), (' oil and gas properties ', 24)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [(' plant and equipment ', 29), (' investment property ', 29), (' oil and gas properties ', 24), ('plant property equipment ', 23), (' property plant equipment ', 23), (' Exploration and evaluation assets', 21), (' property ', 14)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [(' property ', 35), (' plant and equipment ', 33), (' investment property ', 33), (' Exploration and evaluation assets', 32), (' oil and gas properties ', 29), ('plant property equipment ', 28), (' property plant equipment ', 28)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 6284865.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['13'], 'line_item_value': [6284865.0]}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' Exploration and evaluation assets', 46), (' investment property ', 36), (' oil and gas properties ', 31), ('plant property equipment ', 30), (' property plant equipment ', 30), (' plant and equipment ', 29), (' property ', 19)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment ', 91), (' property plant equipment ', 91), (' plant and equipment ', 77), (' oil and gas properties ', 70), (' investment property ', 62), (' property ', 50), (' Exploration and evaluation assets', 48)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' Exploration and evaluation assets', 38), (' investment property ', 33), ('plant property equipment ', 29), (' property plant equipment ', 29), (' plant and equipment ', 27), (' property ', 26), (' oil and gas properties ', 24)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = intangibles , res_fuzz_match = [(' plant and equipment ', 29), (' investment property ', 29), (' oil and gas properties ', 24), ('plant property equipment ', 23), (' property plant equipment ', 23), (' Exploration and evaluation assets', 21), (' property ', 14)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [(' property ', 35), (' plant and equipment ', 33), (' investment property ', 33), (' Exploration and evaluation assets', 32), (' oil and gas properties ', 29), ('plant property equipment ', 28), (' property plant equipment ', 28)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 5629485.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['13'], 'line_item_value': [5629485.0]}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', ''] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), (' Buildings ', 44), (' Other assets in progress ', 41), (' Leasehold buildings ', 41), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Mine infrastructure ', 35), (' Capitalised pre stripping costs ', 35), (' Building & mine infrastructure ', 35), (' Marine  Development properties ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Construction ', 22), (' Stripping WIP ', 22), (' gross ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Asset Retirement Obligation ', 59), (' Freehold land ', 54), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Other assets in progress ', 50), (' Subsea ', 50), (' Assets under construction ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Freehold land and buildings ', 35), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 29), (' Mine infrastructure ', 28), (' under construction ', 27), (' Construction ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Construction ', 33), (' Subsea ', 33), (' investment property ', 30), (' Asset Retirement Obligation ', 30), (' Capitalised pre stripping costs ', 30), (' Marine  Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), ('cost ', 25), (' Stripping WIP ', 22), (' Buildings ', 20), (' gross ', 0), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Asset Retirement Obligation ', 59), (' Freehold land ', 54), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Other assets in progress ', 50), (' Subsea ', 50), (' Assets under construction ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Freehold land and buildings ', 35), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 29), (' Mine infrastructure ', 28), (' under construction ', 27), (' Construction ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), ('cost ', 50), (' investment property ', 45), (' Mine infrastructure ', 45), (' Assets under construction ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' gross ', 40), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Marine  Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Asset Retirement Obligation ', 59), (' Freehold land ', 54), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Other assets in progress ', 50), (' Subsea ', 50), (' Assets under construction ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Freehold land and buildings ', 35), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 29), (' Mine infrastructure ', 28), (' under construction ', 27), (' Construction ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' Mining properties ', 54), (' investment property ', 47), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Other assets in progress ', 42), (' Marine  Development properties ', 42), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 37), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land ', 31), (' Freehold land and buildings ', 26), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Asset Retirement Obligation ', 59), (' Freehold land ', 54), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Other assets in progress ', 50), (' Subsea ', 50), (' Assets under construction ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Freehold land and buildings ', 35), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 29), (' Mine infrastructure ', 28), (' under construction ', 27), (' Construction ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Assets under construction ', 35), (' Other assets in progress ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Subsea ', 33), (' Capitalised pre stripping costs ', 29), (' Marine  Development properties ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), (' gross ', 20), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Asset Retirement Obligation ', 59), (' Freehold land ', 54), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Other assets in progress ', 50), (' Subsea ', 50), (' Assets under construction ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Freehold land and buildings ', 35), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 29), (' Mine infrastructure ', 28), (' under construction ', 27), (' Construction ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), (' Buildings ', 44), (' Other assets in progress ', 41), (' Leasehold buildings ', 41), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Mine infrastructure ', 35), (' Capitalised pre stripping costs ', 35), (' Building & mine infrastructure ', 35), (' Marine  Development properties ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Construction ', 22), (' Stripping WIP ', 22), (' gross ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), ('cost ', 50), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Marine  Development properties ', 41), (' gross ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' investment property ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Mine infrastructure ', 28), (' Workshop tooling ', 23), (' Construction ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Construction ', 33), (' Subsea ', 33), (' investment property ', 30), (' Asset Retirement Obligation ', 30), (' Capitalised pre stripping costs ', 30), (' Marine  Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), ('cost ', 25), (' Stripping WIP ', 22), (' Buildings ', 20), (' gross ', 0), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), ('cost ', 50), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Marine  Development properties ', 41), (' gross ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' investment property ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Mine infrastructure ', 28), (' Workshop tooling ', 23), (' Construction ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), ('cost ', 50), (' investment property ', 45), (' Mine infrastructure ', 45), (' Assets under construction ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' gross ', 40), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Marine  Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), ('cost ', 50), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Marine  Development properties ', 41), (' gross ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' investment property ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Mine infrastructure ', 28), (' Workshop tooling ', 23), (' Construction ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' Mining properties ', 54), (' investment property ', 47), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Other assets in progress ', 42), (' Marine  Development properties ', 42), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 37), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land ', 31), (' Freehold land and buildings ', 26), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), ('cost ', 50), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Marine  Development properties ', 41), (' gross ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' investment property ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Mine infrastructure ', 28), (' Workshop tooling ', 23), (' Construction ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Assets under construction ', 35), (' Other assets in progress ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Subsea ', 33), (' Capitalised pre stripping costs ', 29), (' Marine  Development properties ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), (' gross ', 20), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), ('cost ', 50), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Marine  Development properties ', 41), (' gross ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' investment property ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Mine infrastructure ', 28), (' Workshop tooling ', 23), (' Construction ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), (' Buildings ', 44), (' Other assets in progress ', 41), (' Leasehold buildings ', 41), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Mine infrastructure ', 35), (' Capitalised pre stripping costs ', 35), (' Building & mine infrastructure ', 35), (' Marine  Development properties ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Construction ', 22), (' Stripping WIP ', 22), (' gross ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [(' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), (' Subsea ', 50), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Freehold land ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mine infrastructure ', 39), (' Pipeline Asset ', 38), (' investment property ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Marine  Development properties ', 27), ('cost ', 25), (' Workshop tooling ', 23), (' Construction ', 22), (' Buildings ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Construction ', 33), (' Subsea ', 33), (' investment property ', 30), (' Asset Retirement Obligation ', 30), (' Capitalised pre stripping costs ', 30), (' Marine  Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), ('cost ', 25), (' Stripping WIP ', 22), (' Buildings ', 20), (' gross ', 0), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [(' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), (' Subsea ', 50), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Freehold land ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mine infrastructure ', 39), (' Pipeline Asset ', 38), (' investment property ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Marine  Development properties ', 27), ('cost ', 25), (' Workshop tooling ', 23), (' Construction ', 22), (' Buildings ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), ('cost ', 50), (' investment property ', 45), (' Mine infrastructure ', 45), (' Assets under construction ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' gross ', 40), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Marine  Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [(' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), (' Subsea ', 50), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Freehold land ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mine infrastructure ', 39), (' Pipeline Asset ', 38), (' investment property ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Marine  Development properties ', 27), ('cost ', 25), (' Workshop tooling ', 23), (' Construction ', 22), (' Buildings ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' Mining properties ', 54), (' investment property ', 47), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Other assets in progress ', 42), (' Marine  Development properties ', 42), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 37), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land ', 31), (' Freehold land and buildings ', 26), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [(' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), (' Subsea ', 50), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Freehold land ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mine infrastructure ', 39), (' Pipeline Asset ', 38), (' investment property ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Marine  Development properties ', 27), ('cost ', 25), (' Workshop tooling ', 23), (' Construction ', 22), (' Buildings ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Assets under construction ', 35), (' Other assets in progress ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Subsea ', 33), (' Capitalised pre stripping costs ', 29), (' Marine  Development properties ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), (' gross ', 20), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [(' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), (' Subsea ', 50), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Freehold land ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mine infrastructure ', 39), (' Pipeline Asset ', 38), (' investment property ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Marine  Development properties ', 27), ('cost ', 25), (' Workshop tooling ', 23), (' Construction ', 22), (' Buildings ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), (' Buildings ', 44), (' Other assets in progress ', 41), (' Leasehold buildings ', 41), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Mine infrastructure ', 35), (' Capitalised pre stripping costs ', 35), (' Building & mine infrastructure ', 35), (' Marine  Development properties ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Construction ', 22), (' Stripping WIP ', 22), (' gross ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [(' Asset Retirement Obligation ', 59), (' Pipeline Asset ', 54), ('cost ', 50), (' Other assets in progress ', 50), (' Subsea ', 50), (' Assets under construction ', 48), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' Fishing vessels & equipment ', 41), (' investment property ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), (' gross ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Construction ', 33), (' Subsea ', 33), (' investment property ', 30), (' Asset Retirement Obligation ', 30), (' Capitalised pre stripping costs ', 30), (' Marine  Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), ('cost ', 25), (' Stripping WIP ', 22), (' Buildings ', 20), (' gross ', 0), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [(' Asset Retirement Obligation ', 59), (' Pipeline Asset ', 54), ('cost ', 50), (' Other assets in progress ', 50), (' Subsea ', 50), (' Assets under construction ', 48), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' Fishing vessels & equipment ', 41), (' investment property ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), (' gross ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), ('cost ', 50), (' investment property ', 45), (' Mine infrastructure ', 45), (' Assets under construction ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' gross ', 40), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Marine  Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [(' Asset Retirement Obligation ', 59), (' Pipeline Asset ', 54), ('cost ', 50), (' Other assets in progress ', 50), (' Subsea ', 50), (' Assets under construction ', 48), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' Fishing vessels & equipment ', 41), (' investment property ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), (' gross ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' Mining properties ', 54), (' investment property ', 47), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Other assets in progress ', 42), (' Marine  Development properties ', 42), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 37), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land ', 31), (' Freehold land and buildings ', 26), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [(' Asset Retirement Obligation ', 59), (' Pipeline Asset ', 54), ('cost ', 50), (' Other assets in progress ', 50), (' Subsea ', 50), (' Assets under construction ', 48), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' Fishing vessels & equipment ', 41), (' investment property ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), (' gross ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Assets under construction ', 35), (' Other assets in progress ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Subsea ', 33), (' Capitalised pre stripping costs ', 29), (' Marine  Development properties ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), (' gross ', 20), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [(' Asset Retirement Obligation ', 59), (' Pipeline Asset ', 54), ('cost ', 50), (' Other assets in progress ', 50), (' Subsea ', 50), (' Assets under construction ', 48), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' Fishing vessels & equipment ', 41), (' investment property ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' Freehold land and buildings ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), (' gross ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), (' Buildings ', 44), (' Other assets in progress ', 41), (' Leasehold buildings ', 41), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Mine infrastructure ', 35), (' Capitalised pre stripping costs ', 35), (' Building & mine infrastructure ', 35), (' Marine  Development properties ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Construction ', 22), (' Stripping WIP ', 22), (' gross ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' Plant and equipment ', 53), (' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), ('cost ', 50), (' Subsea ', 50), (' investment property ', 47), (' under construction ', 47), (' Fishing vessels & equipment ', 47), (' Capitalised pre stripping costs ', 46), (' Other assets in progress ', 45), (' Construction ', 44), (' Stripping WIP ', 44), (' Marine  Development properties ', 41), (' gross ', 40), (' land and improvement ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mining properties ', 38), (' Building & mine infrastructure ', 33), (' Leasehold buildings ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Freehold land ', 23), (' Freehold land and buildings ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Construction ', 33), (' Subsea ', 33), (' investment property ', 30), (' Asset Retirement Obligation ', 30), (' Capitalised pre stripping costs ', 30), (' Marine  Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), ('cost ', 25), (' Stripping WIP ', 22), (' Buildings ', 20), (' gross ', 0), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' Plant and equipment ', 53), (' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), ('cost ', 50), (' Subsea ', 50), (' investment property ', 47), (' under construction ', 47), (' Fishing vessels & equipment ', 47), (' Capitalised pre stripping costs ', 46), (' Other assets in progress ', 45), (' Construction ', 44), (' Stripping WIP ', 44), (' Marine  Development properties ', 41), (' gross ', 40), (' land and improvement ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mining properties ', 38), (' Building & mine infrastructure ', 33), (' Leasehold buildings ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Freehold land ', 23), (' Freehold land and buildings ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), ('cost ', 50), (' investment property ', 45), (' Mine infrastructure ', 45), (' Assets under construction ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' gross ', 40), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Marine  Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' Plant and equipment ', 53), (' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), ('cost ', 50), (' Subsea ', 50), (' investment property ', 47), (' under construction ', 47), (' Fishing vessels & equipment ', 47), (' Capitalised pre stripping costs ', 46), (' Other assets in progress ', 45), (' Construction ', 44), (' Stripping WIP ', 44), (' Marine  Development properties ', 41), (' gross ', 40), (' land and improvement ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mining properties ', 38), (' Building & mine infrastructure ', 33), (' Leasehold buildings ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Freehold land ', 23), (' Freehold land and buildings ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' Mining properties ', 54), (' investment property ', 47), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Other assets in progress ', 42), (' Marine  Development properties ', 42), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 37), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land ', 31), (' Freehold land and buildings ', 26), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' Plant and equipment ', 53), (' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), ('cost ', 50), (' Subsea ', 50), (' investment property ', 47), (' under construction ', 47), (' Fishing vessels & equipment ', 47), (' Capitalised pre stripping costs ', 46), (' Other assets in progress ', 45), (' Construction ', 44), (' Stripping WIP ', 44), (' Marine  Development properties ', 41), (' gross ', 40), (' land and improvement ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mining properties ', 38), (' Building & mine infrastructure ', 33), (' Leasehold buildings ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Freehold land ', 23), (' Freehold land and buildings ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Assets under construction ', 35), (' Other assets in progress ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Subsea ', 33), (' Capitalised pre stripping costs ', 29), (' Marine  Development properties ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), (' gross ', 20), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [(' Plant and equipment ', 53), (' Asset Retirement Obligation ', 53), (' Assets under construction ', 52), ('cost ', 50), (' Subsea ', 50), (' investment property ', 47), (' under construction ', 47), (' Fishing vessels & equipment ', 47), (' Capitalised pre stripping costs ', 46), (' Other assets in progress ', 45), (' Construction ', 44), (' Stripping WIP ', 44), (' Marine  Development properties ', 41), (' gross ', 40), (' land and improvement ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mining properties ', 38), (' Building & mine infrastructure ', 33), (' Leasehold buildings ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Freehold land ', 23), (' Freehold land and buildings ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), (' Buildings ', 44), (' Other assets in progress ', 41), (' Leasehold buildings ', 41), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Mine infrastructure ', 35), (' Capitalised pre stripping costs ', 35), (' Building & mine infrastructure ', 35), (' Marine  Development properties ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Construction ', 22), (' Stripping WIP ', 22), (' gross ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 53), ('cost ', 50), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Leasehold buildings ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' investment property ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Building & mine infrastructure ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23), (' Construction ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Construction ', 33), (' Subsea ', 33), (' investment property ', 30), (' Asset Retirement Obligation ', 30), (' Capitalised pre stripping costs ', 30), (' Marine  Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), ('cost ', 25), (' Stripping WIP ', 22), (' Buildings ', 20), (' gross ', 0), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 53), ('cost ', 50), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Leasehold buildings ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' investment property ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Building & mine infrastructure ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23), (' Construction ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), ('cost ', 50), (' investment property ', 45), (' Mine infrastructure ', 45), (' Assets under construction ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' gross ', 40), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Marine  Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 53), ('cost ', 50), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Leasehold buildings ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' investment property ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Building & mine infrastructure ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23), (' Construction ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' Mining properties ', 54), (' investment property ', 47), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Other assets in progress ', 42), (' Marine  Development properties ', 42), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 37), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land ', 31), (' Freehold land and buildings ', 26), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 53), ('cost ', 50), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Leasehold buildings ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' investment property ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Building & mine infrastructure ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23), (' Construction ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Assets under construction ', 35), (' Other assets in progress ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Subsea ', 33), (' Capitalised pre stripping costs ', 29), (' Marine  Development properties ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), (' gross ', 20), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 53), ('cost ', 50), (' Subsea ', 50), (' Assets under construction ', 48), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Leasehold buildings ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' investment property ', 33), (' Capitalised pre stripping costs ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Building & mine infrastructure ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23), (' Construction ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), (' Buildings ', 44), (' Other assets in progress ', 41), (' Leasehold buildings ', 41), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Mine infrastructure ', 35), (' Capitalised pre stripping costs ', 35), (' Building & mine infrastructure ', 35), (' Marine  Development properties ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Construction ', 22), (' Stripping WIP ', 22), (' gross ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 62), (' Pipeline Asset ', 54), (' Assets under construction ', 52), ('cost ', 50), (' Subsea ', 50), (' Freehold land and buildings ', 48), (' Asset Retirement Obligation ', 47), (' Freehold land ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Workshop tooling ', 31), (' Buildings ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Construction ', 33), (' Subsea ', 33), (' investment property ', 30), (' Asset Retirement Obligation ', 30), (' Capitalised pre stripping costs ', 30), (' Marine  Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), ('cost ', 25), (' Stripping WIP ', 22), (' Buildings ', 20), (' gross ', 0), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 62), (' Pipeline Asset ', 54), (' Assets under construction ', 52), ('cost ', 50), (' Subsea ', 50), (' Freehold land and buildings ', 48), (' Asset Retirement Obligation ', 47), (' Freehold land ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Workshop tooling ', 31), (' Buildings ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), ('cost ', 50), (' investment property ', 45), (' Mine infrastructure ', 45), (' Assets under construction ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' gross ', 40), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Marine  Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 62), (' Pipeline Asset ', 54), (' Assets under construction ', 52), ('cost ', 50), (' Subsea ', 50), (' Freehold land and buildings ', 48), (' Asset Retirement Obligation ', 47), (' Freehold land ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Workshop tooling ', 31), (' Buildings ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' Mining properties ', 54), (' investment property ', 47), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Other assets in progress ', 42), (' Marine  Development properties ', 42), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 37), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land ', 31), (' Freehold land and buildings ', 26), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 62), (' Pipeline Asset ', 54), (' Assets under construction ', 52), ('cost ', 50), (' Subsea ', 50), (' Freehold land and buildings ', 48), (' Asset Retirement Obligation ', 47), (' Freehold land ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Workshop tooling ', 31), (' Buildings ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Assets under construction ', 35), (' Other assets in progress ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Subsea ', 33), (' Capitalised pre stripping costs ', 29), (' Marine  Development properties ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), (' gross ', 20), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 62), (' Pipeline Asset ', 54), (' Assets under construction ', 52), ('cost ', 50), (' Subsea ', 50), (' Freehold land and buildings ', 48), (' Asset Retirement Obligation ', 47), (' Freehold land ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Workshop tooling ', 31), (' Buildings ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 7, 8, 9, 25, 26, 27, 28, 29], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [390991.0, 48062.0, 0.0, -66883.0, 372170.0, 60996.0, 0.0, 0.0, -21078.0, 39918.0], 'label': ['Low value assets Plant and equipment $ Plant and equipment $ Plant and equipment $', 'Low value assets Plant and equipment $ Plant and equipment $ Plant and equipment $', 'Low value assets Plant and equipment $ Plant and equipment $ Plant and equipment $', 'Low value assets Plant and equipment $ Plant and equipment $ Plant and equipment $', 'Low value assets Plant and equipment $ Plant and equipment $ Plant and equipment $', 'Low value assets (Plant and equipment) $', 'Low value assets (Plant and equipment) $', 'Low value assets (Plant and equipment) $', 'Low value assets (Plant and equipment) $', 'Low value assets (Plant and equipment) $'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('net value', 38), ('net book value', 36), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 53), ('net value', 38), ('net book value', 31)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets leasehold improvements $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('net value', 38), ('net book value', 36), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 53), ('net value', 38), ('net book value', 31)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets plant and equipment $ plant and equipment $ plant and equipment $ , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('net value', 38), ('net book value', 36), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 53), ('net value', 38), ('net book value', 31)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets fixtures and fittings $ fixtures and fittings $ fixtures and fittings $ , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [('net book value', 54), ('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [('net book value', 54), ('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('net value', 38), ('net book value', 36), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [('net book value', 54), ('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 53), ('net value', 38), ('net book value', 31)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [('net book value', 54), ('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets motor vehicles $ motor vehicles $ motor vehicles $ , res_fuzz_match = [('net book value', 54), ('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 47), ('net book value', 38), ('depreciatio', 36)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 47), ('net book value', 38), ('depreciatio', 36)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('net value', 38), ('net book value', 36), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 47), ('net book value', 38), ('depreciatio', 36)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 53), ('net value', 38), ('net book value', 31)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 47), ('net book value', 38), ('depreciatio', 36)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets computer equipment $ computer equipment $ computer equipment $ , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 47), ('net book value', 38), ('depreciatio', 36)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('net value', 38), ('net book value', 36), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 53), ('net value', 38), ('net book value', 31)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and equipment) $ , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 1 april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [('net value', 62), ('net book value', 48), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [('net value', 62), ('net book value', 48), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('net value', 38), ('net book value', 36), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [('net value', 62), ('net book value', 48), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 53), ('net value', 38), ('net book value', 31)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [('net value', 62), ('net book value', 48), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = low value assets (plant and total $ , res_fuzz_match = [('net value', 62), ('net book value', 48), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', ''] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none leasehold improvements at cost , res_fuzz_match = [('cost ', 100), (' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Assets under construction ', 48), (' under construction ', 47), (' Fishing vessels & equipment ', 47), (' Capitalised pre stripping costs ', 46), (' Construction ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' gross ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Pipeline Asset ', 40), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Freehold land and buildings ', 37), (' investment property ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Facilities ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Subsea ', 50), (' Leasehold buildings ', 47), (' Mining properties ', 46), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Other assets in progress ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('cost ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Construction ', 44), (' investment property ', 40), (' Asset Retirement Obligation ', 40), (' Mine infrastructure ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Freehold land ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings ', 30), (' gross ', 20), (' Buildings ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none plant and equipment - at cost , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 100), (' land and improvement ', 67), (' Assets under construction ', 55), (' under construction ', 53), (' Freehold land and buildings ', 52), (' Capitalised pre stripping costs ', 50), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Marine  Development properties ', 45), (' Construction ', 44), (' gross ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Mining properties ', 38), (' Asset Retirement Obligation ', 36), (' Other assets in progress ', 35), (' investment property ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Workshop tooling ', 23), (' Facilities ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Subsea ', 50), (' Leasehold buildings ', 47), (' Mining properties ', 46), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Other assets in progress ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('cost ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Construction ', 44), (' investment property ', 40), (' Asset Retirement Obligation ', 40), (' Mine infrastructure ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Freehold land ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings ', 30), (' gross ', 20), (' Buildings ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none fixtures and fittings - at cost , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 48), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Freehold land ', 46), (' Construction ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 42), (' gross ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Freehold land and buildings ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Marine  Development properties ', 27), (' Leasehold buildings ', 27), (' Workshop tooling ', 23), (' Buildings ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Subsea ', 50), (' Leasehold buildings ', 47), (' Mining properties ', 46), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Other assets in progress ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('cost ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Construction ', 44), (' investment property ', 40), (' Asset Retirement Obligation ', 40), (' Mine infrastructure ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Freehold land ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings ', 30), (' gross ', 20), (' Buildings ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none motor vehicles at cost , res_fuzz_match = [('cost ', 100), (' Capitalised pre stripping costs ', 47), (' under construction ', 47), (' Construction ', 44), (' Stripping WIP ', 44), (' Marine  Development properties ', 44), (' Assets under construction ', 43), (' Asset Retirement Obligation ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' land and improvement ', 40), (' Buildings ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' Leasehold buildings ', 33), (' Building & mine infrastructure ', 32), (' Fishing vessels & equipment ', 30), (' Freehold land and buildings ', 27), (' Subsea ', 17), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Subsea ', 50), (' Leasehold buildings ', 47), (' Mining properties ', 46), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Other assets in progress ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('cost ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Construction ', 44), (' investment property ', 40), (' Asset Retirement Obligation ', 40), (' Mine infrastructure ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Freehold land ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings ', 30), (' gross ', 20), (' Buildings ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none computer equipment at cost , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 53), (' Capitalised pre stripping costs ', 50), (' investment property ', 47), (' under construction ', 47), (' Mining properties ', 46), (' Construction ', 44), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Buildings ', 40), (' Pipeline Asset ', 40), (' Asset Retirement Obligation ', 36), (' Marine  Development properties ', 36), (' Other assets in progress ', 35), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Building & mine infrastructure ', 32), (' Workshop tooling ', 31), (' Freehold land and buildings ', 27), (' Freehold land ', 23), (' Facilities ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Subsea ', 50), (' Leasehold buildings ', 47), (' Mining properties ', 46), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Other assets in progress ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('cost ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Construction ', 44), (' investment property ', 40), (' Asset Retirement Obligation ', 40), (' Mine infrastructure ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Freehold land ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings ', 30), (' gross ', 20), (' Buildings ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none lowvalue assets (plant and equipment) - at cost , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 100), (' land and improvement ', 67), (' Pipeline Asset ', 54), (' under construction ', 53), (' Freehold land and buildings ', 52), (' Assets under construction ', 52), (' Capitalised pre stripping costs ', 50), (' Other assets in progress ', 50), (' Subsea ', 50), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Construction ', 44), (' Stripping WIP ', 44), (' Marine  Development properties ', 41), (' gross ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mining properties ', 38), (' investment property ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 29), (' Workshop tooling ', 23), (' Buildings ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Subsea ', 50), (' Leasehold buildings ', 47), (' Mining properties ', 46), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Other assets in progress ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('cost ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Construction ', 44), (' investment property ', 40), (' Asset Retirement Obligation ', 40), (' Mine infrastructure ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Freehold land ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings ', 30), (' gross ', 20), (' Buildings ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('cost ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Construction ', 44), (' investment property ', 40), (' Asset Retirement Obligation ', 40), (' Mine infrastructure ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Freehold land ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings ', 30), (' gross ', 20), (' Buildings ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none leasehold improvements at cost , res_fuzz_match = [('cost ', 100), (' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Assets under construction ', 48), (' under construction ', 47), (' Fishing vessels & equipment ', 47), (' Capitalised pre stripping costs ', 46), (' Construction ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' gross ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Pipeline Asset ', 40), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Freehold land and buildings ', 37), (' investment property ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Facilities ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Subsea ', 50), (' Leasehold buildings ', 47), (' Mining properties ', 46), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Other assets in progress ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('cost ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Construction ', 44), (' investment property ', 40), (' Asset Retirement Obligation ', 40), (' Mine infrastructure ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Freehold land ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings ', 30), (' gross ', 20), (' Buildings ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none plant and equipment - at cost , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 100), (' land and improvement ', 67), (' Assets under construction ', 55), (' under construction ', 53), (' Freehold land and buildings ', 52), (' Capitalised pre stripping costs ', 50), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Marine  Development properties ', 45), (' Construction ', 44), (' gross ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Mining properties ', 38), (' Asset Retirement Obligation ', 36), (' Other assets in progress ', 35), (' investment property ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Workshop tooling ', 23), (' Facilities ', 20), (' Subsea ', 17), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Subsea ', 50), (' Leasehold buildings ', 47), (' Mining properties ', 46), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Other assets in progress ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('cost ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Construction ', 44), (' investment property ', 40), (' Asset Retirement Obligation ', 40), (' Mine infrastructure ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Freehold land ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings ', 30), (' gross ', 20), (' Buildings ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none fixtures and fittings - at cost , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 48), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Freehold land ', 46), (' Construction ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 42), (' gross ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Freehold land and buildings ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Marine  Development properties ', 27), (' Leasehold buildings ', 27), (' Workshop tooling ', 23), (' Buildings ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Subsea ', 50), (' Leasehold buildings ', 47), (' Mining properties ', 46), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Other assets in progress ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('cost ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Construction ', 44), (' investment property ', 40), (' Asset Retirement Obligation ', 40), (' Mine infrastructure ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Freehold land ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings ', 30), (' gross ', 20), (' Buildings ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none motor vehicles at cost , res_fuzz_match = [('cost ', 100), (' Capitalised pre stripping costs ', 47), (' under construction ', 47), (' Construction ', 44), (' Stripping WIP ', 44), (' Marine  Development properties ', 44), (' Assets under construction ', 43), (' Asset Retirement Obligation ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' land and improvement ', 40), (' Buildings ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' Leasehold buildings ', 33), (' Building & mine infrastructure ', 32), (' Fishing vessels & equipment ', 30), (' Freehold land and buildings ', 27), (' Subsea ', 17), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Subsea ', 50), (' Leasehold buildings ', 47), (' Mining properties ', 46), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Other assets in progress ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('cost ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Construction ', 44), (' investment property ', 40), (' Asset Retirement Obligation ', 40), (' Mine infrastructure ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Freehold land ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings ', 30), (' gross ', 20), (' Buildings ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none computer equipment at cost , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 53), (' Capitalised pre stripping costs ', 50), (' investment property ', 47), (' under construction ', 47), (' Mining properties ', 46), (' Construction ', 44), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Buildings ', 40), (' Pipeline Asset ', 40), (' Asset Retirement Obligation ', 36), (' Marine  Development properties ', 36), (' Other assets in progress ', 35), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Building & mine infrastructure ', 32), (' Workshop tooling ', 31), (' Freehold land and buildings ', 27), (' Freehold land ', 23), (' Facilities ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Subsea ', 50), (' Leasehold buildings ', 47), (' Mining properties ', 46), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Other assets in progress ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('cost ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Construction ', 44), (' investment property ', 40), (' Asset Retirement Obligation ', 40), (' Mine infrastructure ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Freehold land ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings ', 30), (' gross ', 20), (' Buildings ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none lowvalue assets (plant and equipment) - at cost , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 100), (' land and improvement ', 67), (' Pipeline Asset ', 54), (' under construction ', 53), (' Freehold land and buildings ', 52), (' Assets under construction ', 52), (' Capitalised pre stripping costs ', 50), (' Other assets in progress ', 50), (' Subsea ', 50), (' Asset Retirement Obligation ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Construction ', 44), (' Stripping WIP ', 44), (' Marine  Development properties ', 41), (' gross ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mining properties ', 38), (' investment property ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 29), (' Workshop tooling ', 23), (' Buildings ', 20), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Subsea ', 50), (' Leasehold buildings ', 47), (' Mining properties ', 46), (' Fishing vessels & equipment ', 41), (' gross ', 40), (' Other assets in progress ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Capitalised pre stripping costs ', 29), (' Building & mine infrastructure ', 29), ('cost ', 25), (' Workshop tooling ', 23), (' Stripping WIP ', 22), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('cost ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Construction ', 44), (' investment property ', 40), (' Asset Retirement Obligation ', 40), (' Mine infrastructure ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Freehold land ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings ', 30), (' gross ', 20), (' Buildings ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('cost ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Workshop tooling ', 50), (' Construction ', 44), (' investment property ', 40), (' Asset Retirement Obligation ', 40), (' Mine infrastructure ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' Facilities ', 40), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Plant and equipment ', 30), (' Capitalised pre stripping costs ', 30), (' land and improvement ', 30), (' Freehold land ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Leasehold buildings ', 30), (' gross ', 20), (' Buildings ', 20), (' Fishing vessels & equipment ', 20), (' Stripping WIP ', 11), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('cost ', 75), (' Construction ', 50), (' Assets under construction ', 50), (' under construction ', 50), (' Leasehold buildings ', 50), (' Buildings ', 40), (' Freehold land and buildings ', 38), (' Asset Retirement Obligation ', 38), (' Capitalised pre stripping costs ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 25), (' Plant and equipment ', 25), (' Mine infrastructure ', 25), (' Other assets in progress ', 25), (' land and improvement ', 25), (' Building & mine infrastructure ', 25), (' Mining properties ', 25), (' Marine  Development properties ', 25), (' Pipeline Asset ', 25), (' Fishing vessels & equipment ', 25), (' gross ', 20), (' Facilities ', 20), (' Subsea ', 17), (' Stripping WIP ', 12), ('', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 6, 9, 12, 15, 19, 22, 25, 28, 31, 34], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [676749.0, 681110.0, 270219.0, 8895209.0, 4272099.0, 411973.0, 432837.0, 633048.0, 228118.0, 9840278.0, 3650352.0, 411973.0], 'label': ['None Leasehold improvements at cost', 'None Plant and equipment - at cost', 'None Fixtures and fittings - at cost', 'None Motor vehicles at cost', 'None Computer equipment at cost', 'None Lowvalue assets (Plant and equipment) - at cost', 'None Leasehold improvements at cost', 'None Plant and equipment - at cost', 'None Fixtures and fittings - at cost', 'None Motor vehicles at cost', 'None Computer equipment at cost', 'None Lowvalue assets (Plant and equipment) - at cost'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none leasehold improvements at cost , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 46)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('net book value', 40), ('depreciatio', 30), ('accumulated depreciation', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none plant and equipment - at cost , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 46)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('net book value', 40), ('depreciatio', 30), ('accumulated depreciation', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none fixtures and fittings - at cost , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 46)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('net book value', 40), ('depreciatio', 30), ('accumulated depreciation', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none motor vehicles at cost , res_fuzz_match = [('net book value', 54), ('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 46)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('net book value', 40), ('depreciatio', 30), ('accumulated depreciation', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none computer equipment at cost , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 47), ('net book value', 46), ('depreciatio', 36)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 46)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('net book value', 40), ('depreciatio', 30), ('accumulated depreciation', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none lowvalue assets (plant and equipment) - at cost , res_fuzz_match = [('net value', 62), ('net book value', 62), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 46)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('net book value', 40), ('depreciatio', 30), ('accumulated depreciation', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('net book value', 40), ('depreciatio', 30), ('accumulated depreciation', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none leasehold improvements at cost , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 46)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('net book value', 40), ('depreciatio', 30), ('accumulated depreciation', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none plant and equipment - at cost , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 46)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('net book value', 40), ('depreciatio', 30), ('accumulated depreciation', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none fixtures and fittings - at cost , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 46)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('net book value', 40), ('depreciatio', 30), ('accumulated depreciation', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none motor vehicles at cost , res_fuzz_match = [('net book value', 54), ('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 46)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('net book value', 40), ('depreciatio', 30), ('accumulated depreciation', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none computer equipment at cost , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 47), ('net book value', 46), ('depreciatio', 36)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 46)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('net book value', 40), ('depreciatio', 30), ('accumulated depreciation', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none lowvalue assets (plant and equipment) - at cost , res_fuzz_match = [('net value', 62), ('net book value', 62), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 46)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('net book value', 40), ('depreciatio', 30), ('accumulated depreciation', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('net value', 62), ('net book value', 40), ('depreciatio', 30), ('accumulated depreciation', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [('accumulated depreciation', 38), ('net book value', 38), ('depreciatio', 25), ('net value', 25)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4, 7, 10, 13, 16, 20, 23, 26, 29, 32, 35], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [-331349.0, -308940.0, -155959.0, -5705913.0, -2703658.0, -372055.0, -305978.0, -242057.0, -133594.0, -5692994.0, -2186141.0, -350977.0], 'label': ['None Less: Accumulated depreciation', 'None Less: Accumulated depreciation', 'None Less: Accumulated depreciation', 'None Less: Accumulated depreciation', 'None Less: Accumulated depreciation', 'None Less: Accumulated depreciation', 'None Less: Accumulated depreciation', 'None Less: Accumulated depreciation', 'None Less: Accumulated depreciation', 'None Less: Accumulated depreciation', 'None Less: Accumulated depreciation', 'None Less: Accumulated depreciation'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' trade receivables ', 40), (' government subsidies receivable ', 40), (' trade and other receivables', 40), ('account receivables ', 20), (' receivable ', 20), (' billed ', 0), (' unbilled ', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables ', 46), (' unbilled ', 40), (' government subsidies receivable ', 38), (' trade and other receivables', 38), (' trade receivables ', 35), (' receivable ', 33), (' billed ', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' unbilled ', 60), (' trade and other receivables', 54), ('account receivables ', 50), (' trade receivables ', 50), (' receivable ', 50), (' billed ', 50), (' government subsidies receivable ', 34)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax refund due , res_fuzz_match = [('account receivables ', 43), (' trade receivables ', 42), (' unbilled ', 40), (' trade and other receivables', 35), (' receivable ', 33), (' government subsidies receivable ', 30), (' billed ', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = contract assets , res_fuzz_match = [('account receivables ', 50), (' trade receivables ', 43), (' government subsidies receivable ', 36), (' trade and other receivables', 36), (' receivable ', 33), (' unbilled ', 20), (' billed ', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = capitalised contract costs , res_fuzz_match = [('account receivables ', 43), (' trade receivables ', 42), (' unbilled ', 40), (' trade and other receivables', 36), (' receivable ', 33), (' billed ', 25), (' government subsidies receivable ', 24)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [(' trade and other receivables', 47), ('account receivables ', 44), (' trade receivables ', 42), (' government subsidies receivable ', 42), (' unbilled ', 40), (' receivable ', 33), (' billed ', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 21734371.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['8'], 'line_item_value': [21734371.0]}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' trade receivables ', 40), (' government subsidies receivable ', 40), (' trade and other receivables', 40), ('account receivables ', 20), (' receivable ', 20), (' billed ', 0), (' unbilled ', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables ', 46), (' unbilled ', 40), (' government subsidies receivable ', 38), (' trade and other receivables', 38), (' trade receivables ', 35), (' receivable ', 33), (' billed ', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' unbilled ', 60), (' trade and other receivables', 54), ('account receivables ', 50), (' trade receivables ', 50), (' receivable ', 50), (' billed ', 50), (' government subsidies receivable ', 34)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax refund due , res_fuzz_match = [('account receivables ', 43), (' trade receivables ', 42), (' unbilled ', 40), (' trade and other receivables', 35), (' receivable ', 33), (' government subsidies receivable ', 30), (' billed ', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = contract assets , res_fuzz_match = [('account receivables ', 50), (' trade receivables ', 43), (' government subsidies receivable ', 36), (' trade and other receivables', 36), (' receivable ', 33), (' unbilled ', 20), (' billed ', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = capitalised contract costs , res_fuzz_match = [('account receivables ', 43), (' trade receivables ', 42), (' unbilled ', 40), (' trade and other receivables', 36), (' receivable ', 33), (' billed ', 25), (' government subsidies receivable ', 24)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [(' trade and other receivables', 47), ('account receivables ', 44), (' trade receivables ', 42), (' government subsidies receivable ', 42), (' unbilled ', 40), (' receivable ', 33), (' billed ', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 19697457.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['8'], 'line_item_value': [19697457.0]}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none trade receivables , res_fuzz_match = [('trade receivables ', 100), (' share of joint venture receivables ', 65), (' net trade debtors ', 62), (' related party receivables ', 59), (' trade debtors ', 58), (' other debtors ', 50), (' receivables from related parties ', 41), (' allowance for expected credit loss ', 41), (' trade debtors from contracts with customers', 41), ('charges paid in advance ', 29), (' provision for impairment losses ', 29)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' provision for impairment losses ', 38), (' trade debtors from contracts with customers', 38), ('trade receivables ', 25), (' related party receivables ', 25), (' other debtors ', 25), (' share of joint venture receivables ', 25), (' net trade debtors ', 25), ('charges paid in advance ', 25), (' receivables from related parties ', 25), (' allowance for expected credit loss ', 25), (' trade debtors ', 12)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none debtors retention , res_fuzz_match = [(' other debtors ', 75), (' trade debtors ', 67), (' trade debtors from contracts with customers', 67), (' share of joint venture receivables ', 56), (' net trade debtors ', 56), ('trade receivables ', 50), (' allowance for expected credit loss ', 44), (' related party receivables ', 39), (' receivables from related parties ', 39), (' provision for impairment losses ', 33), ('charges paid in advance ', 24)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' provision for impairment losses ', 38), (' trade debtors from contracts with customers', 38), ('trade receivables ', 25), (' related party receivables ', 25), (' other debtors ', 25), (' share of joint venture receivables ', 25), (' net trade debtors ', 25), ('charges paid in advance ', 25), (' receivables from related parties ', 25), (' allowance for expected credit loss ', 25), (' trade debtors ', 12)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: allowance for expected credit losses , res_fuzz_match = [(' allowance for expected credit loss ', 100), (' trade debtors ', 50), (' net trade debtors ', 50), (' provision for impairment losses ', 50), (' related party receivables ', 44), (' share of joint venture receivables ', 44), ('trade receivables ', 42), (' other debtors ', 42), (' trade debtors from contracts with customers', 41), (' receivables from related parties ', 39), ('charges paid in advance ', 29)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' provision for impairment losses ', 38), (' trade debtors from contracts with customers', 38), ('trade receivables ', 25), (' related party receivables ', 25), (' other debtors ', 25), (' share of joint venture receivables ', 25), (' net trade debtors ', 25), ('charges paid in advance ', 25), (' receivables from related parties ', 25), (' allowance for expected credit loss ', 25), (' trade debtors ', 12)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' net trade debtors ', 50), (' trade debtors from contracts with customers', 50), (' trade debtors ', 40), (' other debtors ', 40), (' share of joint venture receivables ', 40), (' related party receivables ', 30), (' provision for impairment losses ', 30), (' receivables from related parties ', 30), (' allowance for expected credit loss ', 30), ('trade receivables ', 20), ('charges paid in advance ', 20)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' provision for impairment losses ', 38), (' trade debtors from contracts with customers', 38), ('trade receivables ', 25), (' related party receivables ', 25), (' other debtors ', 25), (' share of joint venture receivables ', 25), (' net trade debtors ', 25), ('charges paid in advance ', 25), (' receivables from related parties ', 25), (' allowance for expected credit loss ', 25), (' trade debtors ', 12)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none trade receivables , res_fuzz_match = [('trade receivables ', 100), (' share of joint venture receivables ', 65), (' net trade debtors ', 62), (' related party receivables ', 59), (' trade debtors ', 58), (' other debtors ', 50), (' receivables from related parties ', 41), (' allowance for expected credit loss ', 41), (' trade debtors from contracts with customers', 41), ('charges paid in advance ', 29), (' provision for impairment losses ', 29)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' provision for impairment losses ', 38), (' trade debtors from contracts with customers', 38), ('trade receivables ', 25), (' related party receivables ', 25), (' other debtors ', 25), (' share of joint venture receivables ', 25), (' net trade debtors ', 25), ('charges paid in advance ', 25), (' receivables from related parties ', 25), (' allowance for expected credit loss ', 25), (' trade debtors ', 12)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none debtors retention , res_fuzz_match = [(' other debtors ', 75), (' trade debtors ', 67), (' trade debtors from contracts with customers', 67), (' share of joint venture receivables ', 56), (' net trade debtors ', 56), ('trade receivables ', 50), (' allowance for expected credit loss ', 44), (' related party receivables ', 39), (' receivables from related parties ', 39), (' provision for impairment losses ', 33), ('charges paid in advance ', 24)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' provision for impairment losses ', 38), (' trade debtors from contracts with customers', 38), ('trade receivables ', 25), (' related party receivables ', 25), (' other debtors ', 25), (' share of joint venture receivables ', 25), (' net trade debtors ', 25), ('charges paid in advance ', 25), (' receivables from related parties ', 25), (' allowance for expected credit loss ', 25), (' trade debtors ', 12)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none less: allowance for expected credit losses , res_fuzz_match = [(' allowance for expected credit loss ', 100), (' trade debtors ', 50), (' net trade debtors ', 50), (' provision for impairment losses ', 50), (' related party receivables ', 44), (' share of joint venture receivables ', 44), ('trade receivables ', 42), (' other debtors ', 42), (' trade debtors from contracts with customers', 41), (' receivables from related parties ', 39), ('charges paid in advance ', 29)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' provision for impairment losses ', 38), (' trade debtors from contracts with customers', 38), ('trade receivables ', 25), (' related party receivables ', 25), (' other debtors ', 25), (' share of joint venture receivables ', 25), (' net trade debtors ', 25), ('charges paid in advance ', 25), (' receivables from related parties ', 25), (' allowance for expected credit loss ', 25), (' trade debtors ', 12)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' net trade debtors ', 50), (' trade debtors from contracts with customers', 50), (' trade debtors ', 40), (' other debtors ', 40), (' share of joint venture receivables ', 40), (' related party receivables ', 30), (' provision for impairment losses ', 30), (' receivables from related parties ', 30), (' allowance for expected credit loss ', 30), ('trade receivables ', 20), ('charges paid in advance ', 20)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_rows = consolidated $ , res_fuzz_match = [(' provision for impairment losses ', 38), (' trade debtors from contracts with customers', 38), ('trade receivables ', 25), (' related party receivables ', 25), (' other debtors ', 25), (' share of joint venture receivables ', 25), (' net trade debtors ', 25), ('charges paid in advance ', 25), (' receivables from related parties ', 25), (' allowance for expected credit loss ', 25), (' trade debtors ', 12)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 4, 6], 'score': [100, 100, 100, 100], 'value': [19290507.0, -550217.0, 20697953.0, -471631.0], 'label': ['None Trade receivables', 'None Less: Allowance for expected credit losses', 'None Trade receivables', 'None Less: Allowance for expected credit losses'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods ', ' LNG ', ' Condensate ', ' Domgas ', ' Feed gas income ', ' Gas transportation income ', ' Sale of goods - Cars ', ' Sale of goods - Motorcycles ', ' Sale of goods - Marine ', ' Sale of goods - Spareparts ', ' Total Revenue ', ' Goods sold to customer from warehouse ', ' Goods sold to customer direct from supplier ', ' revenue from continuing activities ', ' revenue form contracts with customers ', ' hedge loss / gain ', ' contribution from joint venture']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities', 39), (' revenue from contracts with customers ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' from trading business ', 50), (' net sales ', 40), (' Sales revenue ', 36), (' revenue from contracts with customers ', 33), (' revenue from continuing activities', 33), (' transmission and distribution business ', 31), (' Sale of coal ', 31), (' Revenue ', 26), ('revenue from operations ', 24), (' sale of products ', 21)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [(' revenue from continuing activities', 38), (' revenue from contracts with customers ', 37), (' transmission and distribution business ', 37), (' from trading business ', 28), ('revenue from operations ', 27), (' sale of products ', 22), (' Sales revenue ', 22), (' net sales ', 20), (' Sale of coal ', 19), (' Revenue ', 16)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 121891318.0, 'line_item_label': ['Revenue'], 'note_numbers': [], 'line_item_value': [121891318.0]}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities', 39), (' revenue from contracts with customers ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' from trading business ', 50), (' net sales ', 40), (' Sales revenue ', 36), (' revenue from contracts with customers ', 33), (' revenue from continuing activities', 33), (' transmission and distribution business ', 31), (' Sale of coal ', 31), (' Revenue ', 26), ('revenue from operations ', 24), (' sale of products ', 21)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [(' revenue from continuing activities', 38), (' revenue from contracts with customers ', 37), (' transmission and distribution business ', 37), (' from trading business ', 28), ('revenue from operations ', 27), (' sale of products ', 22), (' Sales revenue ', 22), (' net sales ', 20), (' Sale of coal ', 19), (' Revenue ', 16)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 4.0, 'line_item_label': ['Revenue'], 'note_numbers': [], 'line_item_value': [4.0]}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales ', ' cost of goods']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory', 29), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('total expenditure', 48), ('total expenses', 41), (' Cost of inventory sold', 33), ('cost of sales', 31), ('Cost of sales', 31), (' change in inventory', 31), ('expenditure', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 28), ('expense', 26), (' cost of coal sold', 26), (' cost of goods sold ', 26), (' Cost of product sold', 24), (' Personnel costs', 19)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [(' Cost of goods and services sold', 44), (' Cost of inventory sold', 39), (' Cost of product sold', 37), (' cost of goods sold ', 35), (' cost of coal sold', 32), (' change in inventory', 31), ('purchase of stock-in-trade', 29), (' Personnel costs', 28), ('total expenditure', 27), ('total expenses', 22), ('expenditure', 19), ('cost of sales', 19), ('Cost of sales', 19), ('expense', 8)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory', 29), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('total expenditure', 48), ('total expenses', 41), (' Cost of inventory sold', 33), ('cost of sales', 31), ('Cost of sales', 31), (' change in inventory', 31), ('expenditure', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 28), ('expense', 26), (' cost of coal sold', 26), (' cost of goods sold ', 26), (' Cost of product sold', 24), (' Personnel costs', 19)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [(' Cost of goods and services sold', 44), (' Cost of inventory sold', 39), (' Cost of product sold', 37), (' cost of goods sold ', 35), (' cost of coal sold', 32), (' change in inventory', 31), ('purchase of stock-in-trade', 29), (' Personnel costs', 28), ('total expenditure', 27), ('total expenses', 22), ('expenditure', 19), ('cost of sales', 19), ('Cost of sales', 19), ('expense', 8)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['consum ', ' power ', ' machinery ', ' charges ', ' research ', ' analytical ', ' equipment ', ' exchange ', ' loss on ', ' donation ', ' csr ', ' social ', ' miscellaneous ', ' loss allowance ', ' Included in administrative expenses ', ' Depreciation property ', ' plant and equipment ', ' Depreciation right-of-use assets ', ' Administrative expenses ', ' Wages and salaries ', ' Compulsory superannuation contributions ', ' Payroll on-costs (excluding employee benefit provision) ', ' Staff welfare ', ' Contractors, subcontractors and employee related expenses ', ' Facilities Expense ', ' Rental equipment expenses ', ' Depreciation expense right-of-use asset ', ' Depreciation expense ', ' Amortisation expense ', ' Other expenses ', ' Research and development expenses ', ' employee benefits expenses ', ' depreciation and amortisation expenses ', ' Employee expenses ', ' Distribution Expenses ', ' Depreciation and Amortisation Expenses ', ' Other Expenses from Ordinary Activities ', '  ', ' Defined contribution plans ', ' Other employement costs']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' employee benefits expense ', 56), (' employee benefit espense ', 51), (' Lease expenses ', 36), (' other expenses ', 34), (' Other expenses ', 34), (' Management expenses ', 34), (' Other expenses ', 34), (' Marketing expenses ', 33), (' Administrative and other expenses ', 33), (' Depreciation expenses ', 32), (' Logistics and distribution ', 32), (' Advertising expenses ', 31), (' Sales and marketing ', 31), (' property espense ', 31), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Selling Expenses ', 29), (' Occupancy expenses ', 28), (' Depreciation and amortisation expenses ', 28), ('expenses ', 26), (' Selling & distribution expenses ', 26), (' Amortisation expenses ', 26), (' depreciation ', 25), (' Administration ', 23), (' levies', 19), (' Royalties ', 17), (' Occupancy ', 9)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [(' Administrative and other expenses ', 38), (' Logistics and distribution ', 38), (' Depreciation and amortisation expenses ', 35), (' Selling & distribution expenses ', 31), (' Sales and marketing ', 31), (' employee benefits expense ', 28), (' property espense ', 28), (' employee benefit espense ', 28), (' Distribution expenses ', 27), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Amortisation expenses ', 25), (' Advertising expenses ', 24), (' Administration ', 23), (' other expenses ', 22), (' Occupancy expenses ', 22), (' Other expenses ', 22), (' Other expenses ', 22), (' Depreciation expenses ', 21), (' Royalties ', 20), (' Selling Expenses ', 19), (' Marketing expenses ', 18), (' depreciation ', 16), (' Lease expenses ', 15), (' Management expenses ', 15), (' levies', 13), (' Occupancy ', 12), ('expenses ', 8)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' employee benefits expense ', 56), (' employee benefit espense ', 51), (' Lease expenses ', 36), (' other expenses ', 34), (' Other expenses ', 34), (' Management expenses ', 34), (' Other expenses ', 34), (' Marketing expenses ', 33), (' Administrative and other expenses ', 33), (' Depreciation expenses ', 32), (' Logistics and distribution ', 32), (' Advertising expenses ', 31), (' Sales and marketing ', 31), (' property espense ', 31), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Selling Expenses ', 29), (' Occupancy expenses ', 28), (' Depreciation and amortisation expenses ', 28), ('expenses ', 26), (' Selling & distribution expenses ', 26), (' Amortisation expenses ', 26), (' depreciation ', 25), (' Administration ', 23), (' levies', 19), (' Royalties ', 17), (' Occupancy ', 9)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [(' Administrative and other expenses ', 38), (' Logistics and distribution ', 38), (' Depreciation and amortisation expenses ', 35), (' Selling & distribution expenses ', 31), (' Sales and marketing ', 31), (' employee benefits expense ', 28), (' property espense ', 28), (' employee benefit espense ', 28), (' Distribution expenses ', 27), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Amortisation expenses ', 25), (' Advertising expenses ', 24), (' Administration ', 23), (' other expenses ', 22), (' Occupancy expenses ', 22), (' Other expenses ', 22), (' Other expenses ', 22), (' Depreciation expenses ', 21), (' Royalties ', 20), (' Selling Expenses ', 19), (' Marketing expenses ', 18), (' depreciation ', 16), (' Lease expenses ', 15), (' Management expenses ', 15), (' levies', 13), (' Occupancy ', 12), ('expenses ', 8)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses', ' Occupancy', ' Occupancy expenses']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses', 44), (' Administration expenses ', 36), (' Rental expenses ', 32), (' Occupancy ', 18)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' Rental expenses ', 40), (' Administration expenses ', 30), ('Rent ', 29), (' Occupancy expenses', 28), (' Occupancy ', 9)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [(' Administration expenses ', 27), (' Rental expenses ', 25), (' Occupancy expenses', 22), ('Rent ', 17), (' Occupancy ', 12)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses', 44), (' Administration expenses ', 36), (' Rental expenses ', 32), (' Occupancy ', 18)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' Rental expenses ', 40), (' Administration expenses ', 30), ('Rent ', 29), (' Occupancy expenses', 28), (' Occupancy ', 9)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [(' Administration expenses ', 27), (' Rental expenses ', 25), (' Occupancy expenses', 22), ('Rent ', 17), (' Occupancy ', 12)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['Other income ', ' Commission revenue ', ' Rent ', ' rental revenue']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' Other income', 50), ('other operating', 30), ('Other revenue', 21)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [(' Other income', 26), ('Other revenue', 25), ('other operating', 23)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' Other income', 50), ('other operating', 30), ('Other revenue', 21)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [(' Other income', 26), ('Other revenue', 25), ('other operating', 23)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('finance income', 55), ('other income', 50), ('Finance income and costs', 47), (' Net finance costs', 44), (' Finance income and finance costs', 40), (' Interest revenue', 31)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [('Finance income and costs', 38), (' Finance income and finance costs', 37), (' Interest revenue', 31), ('finance income', 29), ('other income', 26), (' Net finance costs', 24)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('finance income', 55), ('other income', 50), ('Finance income and costs', 47), (' Net finance costs', 44), (' Finance income and finance costs', 40), (' Interest revenue', 31)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [('Finance income and costs', 38), (' Finance income and finance costs', 37), (' Interest revenue', 31), ('finance income', 29), ('other income', 26), (' Net finance costs', 24)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['loan ', ' debt ', ' debenture ', ' cash credit ', ' borrowings ', ' bank facilities ', ' bonds ', ' interest ', ' Interest expenses ', ' Discount unwind on the provision for asset retirement obligation ', ' Other interest expense ', ' Interest on leases ', ' Interest on bank overdrafts and loans (other than those from related parties) ', ' Interest accrued on loans ', ' Interest accrued on lease liabilities ', ' Lease interest expense ', ' Interest expense on financial liabilities using the effective interest rate method - other ', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', ' Lease liabilities interest expense ', ' interest income']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense', 29), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses ', 40), (' interest expense', 38), ('finance cost ', 36)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [(' net finance costs ', 24), (' interest expense', 24), ('finance cost ', 19), (' finance expenses ', 14)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense', 29), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses ', 40), (' interest expense', 38), ('finance cost ', 36)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [(' net finance costs ', 24), (' interest expense', 24), ('finance cost ', 19), (' finance expenses ', 14)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['Accretion expense ', ' Arising from inventory of cranes ', ' Arising from inventory of spare parts ', ' Asset impairment ', ' commission revenue ', ' dividend from other parties ', ' effective portion of changes in fair value of cash flow ', ' foreign exchange gain ', ' government grants ', ' Impairment loss ', ' insurance proceeds ', ' Interest on unwinding of discount in provisions ', ' Investment in joint venture ', ' japan recoveries ', ' Loss on loan refinancing ', ' Loss on sale of disposal of assets ', ' margin charge income ', ' net (loss)/profit on disposal of non-current assets ', ' net foreign exchange (loss)/gain ', ' net foreign exchange gain ', ' net foreign exchange gains/(losses) ', ' net gain / loss on disposal of property plant and equipment ', ' Net loss on disposal of property ', ' net of tax ', ' Net other foreign exchange (losses)/gains ', ' net ppe disposal (loss)/gain ', ' other ', ' other income ', ' other miscellaneous - net (loss)/gain ', ' paid by customers - at amortised cost ', ' plant and equipment ', ' Power purchase agreement realised gain ', ' Power purchase agreement unrelaised gain ', ' profit from discontinued operation ', ' Profit on sale of assets ', ' quota lease income ', ' Remuneration from services linked to newly acquired entities ', ' secondment income (tw recovery) ', ' Share of gain/(loss) of joint venture ', ' share of jv income ', ' Sub-lease rental income ', ' sundry income ', ' other revenue']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' net of tax ', 58), (' net of tax ', 58), (' other income ', 50), (' Other income ', 50), (' finance income and costs ', 47), (' Finance income and costs ', 47), (' other opertaing income ', 46), (' other income and revenue ', 46), (' net finance costs ', 44), (' finance expenses', 40), (' finance income and finance cost ', 40), (' Finance income and finance costs ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 37), ('finance cost ', 36), (' Profit from discontinued operation ', 36), (' Impairement (expenses)/reversal ', 32), (' other gains/losses ', 31), (' interest revenue ', 31), (' interest gains and losses ', 31), (' Share of gain/(loss) of joint venture ', 31), (' expenses ', 26), (' Impairment loss ', 21)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [(' share of profit of equity accounted investees ', 41), (' Profit from discontinued operation ', 40), (' finance income and costs ', 38), (' Finance income and costs ', 38), (' finance income and finance cost ', 37), (' interest gains and losses ', 37), (' other income and revenue ', 37), (' Share of gain/(loss) of joint venture ', 37), (' Finance income and finance costs ', 37), (' other opertaing income ', 33), (' other gains/losses ', 31), (' interest revenue ', 31), (' Loss on revaluation of inventories', 31), (' other income ', 26), (' Other income ', 26), (' net finance costs ', 24), (' Impairment loss ', 22), (' Impairement (expenses)/reversal ', 22), (' net of tax ', 20), (' net of tax ', 20), ('finance cost ', 19), (' finance expenses', 14), (' expenses ', 8)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' net of tax ', 58), (' net of tax ', 58), (' other income ', 50), (' Other income ', 50), (' finance income and costs ', 47), (' Finance income and costs ', 47), (' other opertaing income ', 46), (' other income and revenue ', 46), (' net finance costs ', 44), (' finance expenses', 40), (' finance income and finance cost ', 40), (' Finance income and finance costs ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 37), ('finance cost ', 36), (' Profit from discontinued operation ', 36), (' Impairement (expenses)/reversal ', 32), (' other gains/losses ', 31), (' interest revenue ', 31), (' interest gains and losses ', 31), (' Share of gain/(loss) of joint venture ', 31), (' expenses ', 26), (' Impairment loss ', 21)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [(' share of profit of equity accounted investees ', 41), (' Profit from discontinued operation ', 40), (' finance income and costs ', 38), (' Finance income and costs ', 38), (' finance income and finance cost ', 37), (' interest gains and losses ', 37), (' other income and revenue ', 37), (' Share of gain/(loss) of joint venture ', 37), (' Finance income and finance costs ', 37), (' other opertaing income ', 33), (' other gains/losses ', 31), (' interest revenue ', 31), (' Loss on revaluation of inventories', 31), (' other income ', 26), (' Other income ', 26), (' net finance costs ', 24), (' Impairment loss ', 22), (' Impairement (expenses)/reversal ', 22), (' net of tax ', 20), (' net of tax ', 20), ('finance cost ', 19), (' finance expenses', 14), (' expenses ', 8)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [('NULL', 17)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [('NULL', 17)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' income tax benefit', 100), (' income tax benefit/(expense)', 83), (' tax (expense)/benefit', 74), (' income tax expense', 73), (' income tax', 69), ('minimum alternate tax credit entitlement', 53), ('current tax', 50), ('deferred tax', 46), ('amount transferred to retained earnings', 41), ('provision for taxation previous year', 35), ('prior year ', 30), ('earlier year', 28)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [('minimum alternate tax credit entitlement', 48), ('amount transferred to retained earnings', 34), ('provision for taxation previous year', 33), (' income tax benefit/(expense)', 33), (' income tax benefit', 30), (' income tax', 27), ('current tax', 26), (' tax (expense)/benefit', 26), (' income tax expense', 24), ('prior year ', 23), ('earlier year', 22), ('deferred tax', 19)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 481027.0, 'line_item_label': ['Income tax benefit'], 'note_numbers': [], 'line_item_value': [481027.0]}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' income tax benefit', 100), (' income tax benefit/(expense)', 83), (' tax (expense)/benefit', 74), (' income tax expense', 73), (' income tax', 69), ('minimum alternate tax credit entitlement', 53), ('current tax', 50), ('deferred tax', 46), ('amount transferred to retained earnings', 41), ('provision for taxation previous year', 35), ('prior year ', 30), ('earlier year', 28)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [('minimum alternate tax credit entitlement', 48), ('amount transferred to retained earnings', 34), ('provision for taxation previous year', 33), (' income tax benefit/(expense)', 33), (' income tax benefit', 30), (' income tax', 27), ('current tax', 26), (' tax (expense)/benefit', 26), (' income tax expense', 24), ('prior year ', 23), ('earlier year', 22), ('deferred tax', 19)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 6.0, 'line_item_label': ['Income tax benefit'], 'note_numbers': [], 'line_item_value': [6.0]}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 48), (' prior period ', 34), ('exceptional ', 26)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 48), (' prior period ', 25), ('exceptional ', 16)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 48), (' prior period ', 34), ('exceptional ', 26)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 48), (' prior period ', 25), ('exceptional ', 16)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:32:13+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-11 14:32:13+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [('NULL', 17)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:32:13+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:32:13+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - txt_particular = air group (holdings) pty limited and controlled entities , res_fuzz_match = [('NULL', 17)]
2023-08-11 14:32:13+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:37:21+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-08-11 14:37:21+0530 - sLogger - DEBUG - {'fileid': 'c29cb70d-6919-401e-a1df-c160d1cd4b79', 'filename': '【MHIAA 31 March 2023 GPFS_final 2 director signed】.pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/【MHIAA 31 March 2023 GPFS_final 2 director signed】.pdf', 'status': 'Processing'}
2023-08-11 14:37:21+0530 - sLogger - DEBUG - save file completed
2023-08-11 14:37:21+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-08-11 14:37:21+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-08-11 14:37:21+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-08-11 14:37:21+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-08-11 14:37:21+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-08-11 14:37:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:37:21+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:37:25+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:37:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:37:25+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:37:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:37:25+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:37:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:37:25+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:37:28+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:37:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:37:28+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:37:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:37:29+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:37:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:37:29+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:37:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:37:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:37:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:37:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:37:35+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:37:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:37:35+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:37:41+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:37:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:37:41+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:37:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:37:41+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:37:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:37:42+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:37:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:37:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:37:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:37:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:37:47+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:37:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:37:47+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:37:51+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:37:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:37:51+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:37:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:37:51+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:37:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:37:51+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:37:56+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:37:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:37:56+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:37:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:37:56+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:37:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:37:56+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:38:01+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:38:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:38:01+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:38:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:38:01+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:38:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:38:01+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:38:05+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:38:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:38:05+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:38:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:38:05+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:38:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:38:05+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:38:14+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:38:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:38:14+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:38:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:38:14+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:38:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:38:14+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:38:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:38:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:38:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:38:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:38:23+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:38:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:38:23+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:38:32+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:38:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:38:32+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:38:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:38:32+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:38:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:38:32+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:38:41+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:38:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:38:41+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:38:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:38:41+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:38:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:38:41+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:38:51+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:38:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:38:51+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:38:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:38:51+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:38:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:38:51+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:38:59+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:38:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:38:59+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:38:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:38:59+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:38:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:38:59+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:39:09+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:39:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:39:09+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:39:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:39:09+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:39:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:39:09+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:39:13+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:39:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:39:13+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:39:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:39:13+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:39:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:39:13+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:39:22+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:39:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:39:22+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:39:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:39:22+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:39:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:39:22+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:39:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:39:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:39:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:39:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:39:26+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:39:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:39:26+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:39:32+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:39:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:39:32+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:39:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:39:32+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:39:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:39:32+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:39:36+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:39:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:39:36+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:39:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:39:36+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:39:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:39:36+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:39:41+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:39:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:39:41+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:39:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:39:41+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:39:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:39:41+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:39:46+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:39:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:39:46+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:39:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:39:46+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:39:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:39:46+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:39:53+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:39:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:39:53+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:39:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:39:53+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:39:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:39:53+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:39:59+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:39:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:39:59+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:39:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:39:59+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:39:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:39:59+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:40:05+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:40:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:40:05+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:40:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:40:05+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:40:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:40:05+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:40:11+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:40:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:40:11+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:40:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:40:11+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:40:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:40:12+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:40:15+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:40:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:40:15+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:40:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:40:15+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:40:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:40:15+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:40:20+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:40:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:40:20+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:40:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:40:20+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:40:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:40:21+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:40:29+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:40:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:40:29+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:40:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:40:29+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:40:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:40:29+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:40:37+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:40:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:40:37+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:40:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:40:37+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:40:37+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-08-11 14:40:37+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [6, 22], 'predicted_cpl_pages': [5, 7, 18, 19], 'predicted_ccf_pages': [8], 'filtered_cbs_pages': [6], 'filtered_cpl_pages': [5, 7], 'filtered_ccf_pages': [8], 'month': 'march', 'status': 'Page Classification Completed'}
2023-08-11 14:40:37+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-08-11 14:40:37+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-08-11 14:40:37+0530 - sLogger - DEBUG - process file completed
2023-08-11 14:40:37+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-08-11 14:40:37+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-08-11 14:40:37+0530 - sLogger - DEBUG - TE process file started
2023-08-11 14:44:02+0530 - sLogger - DEBUG - TE Proces file completed
2023-08-11 14:44:02+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-11 14:44:02+0530 - sLogger - DEBUG - process_main_pages started
2023-08-11 14:44:02+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-11 14:44:02+0530 - sLogger - DEBUG - start_refactoring started
2023-08-11 14:44:02+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-11 14:44:02+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-11 14:44:02+0530 - sLogger - DEBUG - start_refactoring started
2023-08-11 14:44:02+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-08-11 14:44:02+0530 - sLogger - ERROR - error occured: zero-size array to reduction operation maximum which has no identity
2023-08-11 14:44:02+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: ideal_format_processing
2023-08-11 14:44:02+0530 - sLogger - ERROR - error occured: list index out of range
2023-08-11 14:44:02+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-11 14:44:02+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-11 14:44:02+0530 - sLogger - DEBUG - start_refactoring started
2023-08-11 14:44:02+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-11 14:44:02+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-11 14:44:02+0530 - sLogger - DEBUG - start_refactoring started
2023-08-11 14:44:02+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-11 14:44:02+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL
2023-08-11 14:44:02+0530 - sLogger - ERROR - error occured: 'headers'
2023-08-11 14:44:02+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL notes_number_processing
2023-08-11 14:44:02+0530 - sLogger - ERROR - error occured: local variable 'cpl_header' referenced before assignment
2023-08-11 14:44:02+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-11 14:44:02+0530 - sLogger - DEBUG - set_section_details started
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Asset ts | [('assets', 100), ('currentassets', 59), ('current assets', 56), ('noncurrent assets', 56), ('noncurrentassets', 50), ('equity', 36), ('equityliabilities', 31), ('currentliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('noncurrentliabilities', 24), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Asset ts | MATCH WORD current assets | score 68
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Asset ts | MATCH WORD currentassets | score 68
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Asset ts | MATCH WORD current liabilities | score 37
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Asset ts | MATCH WORD currentliabilities | score 31
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Asset ts | MATCH WORD noncurrent assets | score 68
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Asset ts | MATCH WORD noncurrentassets | score 68
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Asset ts | MATCH WORD noncurrent liabilities | score 34
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Asset ts | MATCH WORD non current assets | score 68
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Asset ts | MATCH WORD non current liabilities | score 34
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Asset ts | MATCH WORD noncurrentliabilities | score 28
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Asset ts | MATCH WORD noncurrentassets | score 68
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Asset ts | MATCH WORD noncurrentliabilities | score 28
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Asset ts | MATCH WORD equity and liabilities | score 34
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Asset ts | MATCH WORD equity | score 29
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Asset ts | MATCH WORD equityandliabilities | score 29
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Current assets | [('current assets', 100), ('noncurrent assets', 77), ('currentliabilities', 64), ('assets', 56), ('currentassets', 56), ('noncurrentliabilities', 56), ('current liabilities', 52), ('noncurrentassets', 50), ('noncurrent liabilities', 44), ('equity', 32), ('equityliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('liabilities', 11)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current assets | score 100
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD currentassets | score 96
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current liabilities | score 67
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD currentliabilities | score 62
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent assets | score 90
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentassets | score 87
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent liabilities | score 61
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current assets | score 95
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current liabilities | score 86
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentliabilities | score 57
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentassets | score 87
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentliabilities | score 57
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity and liabilities | score 33
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equityandliabilities | score 29
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Cash | [('assets', 44), ('currentassets', 38), ('noncurrentassets', 32), ('current assets', 24), ('noncurrent assets', 24), ('current liabilities', 22), ('liabilities', 20), ('currentliabilities', 15), ('equityandliabilities', 13), ('equity liabilities', 12), ('noncurrentliabilities', 12), ('noncurrent liabilities', 11), ('equity and liabilities', 10), ('equity', 0), ('equityliabilities', 0)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD current assets | score 45
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD currentassets | score 45
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD current liabilities | score 26
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD currentliabilities | score 27
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD noncurrent assets | score 45
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD noncurrentassets | score 45
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD noncurrent liabilities | score 23
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD non current assets | score 45
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD non current liabilities | score 22
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD noncurrentliabilities | score 24
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD noncurrentassets | score 45
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD noncurrentliabilities | score 24
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD equity and liabilities | score 22
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD equity | score 0
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD equityandliabilities | score 22
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Trade and other receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentassets | score 41
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentliabilities | score 45
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equityandliabilities | score 43
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentassets | score 42
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentliabilities | score 41
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equityandliabilities | score 40
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Prepayments | [('currentassets', 33), ('current liabilities', 30), ('noncurrentassets', 29), ('equityliabilities', 29), ('currentliabilities', 27), ('equityandliabilities', 24), ('noncurrentliabilities', 22), ('current assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equity and liabilities', 17), ('noncurrent assets', 11), ('noncurrent liabilities', 10)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current assets | score 48
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD currentassets | score 50
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current liabilities | score 33
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD currentliabilities | score 34
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent assets | score 50
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentassets | score 44
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent liabilities | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current assets | score 50
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current liabilities | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentassets | score 44
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity and liabilities | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equityandliabilities | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Income tax receivable | [('noncurrentassets', 39), ('currentassets', 36), ('equity and liabilities', 36), ('noncurrentliabilities', 36), ('current liabilities', 33), ('currentliabilities', 32), ('equityandliabilities', 30), ('current assets', 28), ('equity liabilities', 28), ('equity', 27), ('noncurrent liabilities', 27), ('equityliabilities', 25), ('noncurrent assets', 21), ('assets', 19), ('liabilities', 18)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD current assets | score 34
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD currentassets | score 34
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD current liabilities | score 45
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD currentliabilities | score 41
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD noncurrent assets | score 37
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD noncurrentassets | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD noncurrent liabilities | score 47
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD non current assets | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD non current liabilities | score 45
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD noncurrentliabilities | score 43
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD noncurrentassets | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD noncurrentliabilities | score 43
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD equity and liabilities | score 42
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD equityandliabilities | score 39
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Total current a ssets | [('currentassets', 73), ('noncurrentassets', 67), ('current liabilities', 62), ('currentliabilities', 59), ('noncurrentliabilities', 53), ('current assets', 45), ('equity and liabilities', 40), ('noncurrent assets', 39), ('assets', 35), ('equity liabilities', 32), ('equityandliabilities', 28), ('noncurrent liabilities', 25), ('equityliabilities', 23), ('liabilities', 17), ('equity', 17)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current a ssets | MATCH WORD current assets | score 86
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current a ssets | MATCH WORD currentassets | score 79
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current a ssets | MATCH WORD current liabilities | score 55
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current a ssets | MATCH WORD currentliabilities | score 51
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current a ssets | MATCH WORD noncurrent assets | score 79
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current a ssets | MATCH WORD noncurrentassets | score 76
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current a ssets | MATCH WORD noncurrent liabilities | score 56
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current a ssets | MATCH WORD non current assets | score 82
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current a ssets | MATCH WORD non current liabilities | score 59
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current a ssets | MATCH WORD noncurrentliabilities | score 52
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current a ssets | MATCH WORD noncurrentassets | score 76
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current a ssets | MATCH WORD noncurrentliabilities | score 52
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current a ssets | MATCH WORD equity and liabilities | score 35
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current a ssets | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current a ssets | MATCH WORD equityandliabilities | score 29
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Noncurrent assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('noncurrentliabilities', 56), ('noncurrentassets', 50), ('currentassets', 40), ('currentliabilities', 36), ('current liabilities', 30), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('equity', 21), ('equityliabilities', 19), ('liabilities', 11)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current assets | score 90
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD currentassets | score 87
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current liabilities | score 61
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD currentliabilities | score 57
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent assets | score 100
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentassets | score 97
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent liabilities | score 72
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current assets | score 97
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current liabilities | score 70
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentliabilities | score 68
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentassets | score 97
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentliabilities | score 68
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equityandliabilities | score 27
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('equityandliabilities', 40), ('current assets', 38), ('equityliabilities', 38), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('currentassets', 28), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentassets | score 39
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentliabilities | score 35
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equityandliabilities | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equityandliabilities', 43), ('currentassets', 42), ('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 38), ('noncurrentassets', 37), ('equity', 33), ('noncurrent liabilities', 31), ('equityliabilities', 30), ('currentliabilities', 29), ('noncurrentliabilities', 25), ('liabilities', 22)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current assets | score 58
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentassets | score 53
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current liabilities | score 42
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentliabilities | score 40
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent assets | score 59
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current assets | score 57
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current liabilities | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity and liabilities | score 46
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equityandliabilities | score 49
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('equityandliabilities', 23), ('noncurrent liabilities', 21), ('equity', 19), ('currentliabilities', 17), ('equityliabilities', 17), ('noncurrentliabilities', 15), ('liabilities', 10)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentassets | score 62
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentliabilities | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equityandliabilities | score 31
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentassets | score 53
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentliabilities | score 29
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equityandliabilities | score 27
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Other assets | [('noncurrent assets', 67), ('assets', 62), ('current assets', 58), ('currentassets', 43), ('noncurrentassets', 38), ('noncurrent liabilities', 32), ('equity and liabilities', 29), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('equityliabilities', 21), ('currentliabilities', 20), ('equityandliabilities', 18), ('noncurrentliabilities', 17), ('liabilities', 12)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current assets | score 64
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD currentassets | score 56
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current liabilities | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD currentliabilities | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent assets | score 64
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentassets | score 57
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current assets | score 86
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current liabilities | score 34
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentassets | score 57
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity and liabilities | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equityandliabilities | score 25
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrentliabilities', 58), ('noncurrent liabilities', 55), ('noncurrentassets', 53), ('currentliabilities', 43), ('assets', 42), ('current liabilities', 42), ('currentassets', 39), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentassets | score 83
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentliabilities | score 49
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equityandliabilities | score 28
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentassets | score 56
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentliabilities | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equityandliabilities | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Liabilities and equity | [('equity and liabilities', 100), ('equity liabilities', 87), ('current liabilities', 58), ('equityliabilities', 56), ('liabilities', 52), ('equity', 52), ('equityandliabilities', 50), ('noncurrent liabilities', 39), ('noncurrentliabilities', 34), ('currentliabilities', 31), ('assets', 27), ('current assets', 27), ('noncurrent assets', 27), ('noncurrentassets', 25), ('currentassets', 21)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD current assets | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD currentassets | score 28
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD current liabilities | score 69
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD currentliabilities | score 62
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD noncurrent assets | score 26
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD noncurrentassets | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD noncurrent liabilities | score 65
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD non current assets | score 25
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD non current liabilities | score 64
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD noncurrentliabilities | score 62
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD noncurrentassets | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD noncurrentliabilities | score 62
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD equity and liabilities | score 95
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD equity | score 90
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD equityandliabilities | score 77
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Current liabilities | [('current liabilities', 100), ('currentliabilities', 78), ('noncurrentliabilities', 69), ('equity liabilities', 67), ('currentassets', 62), ('liabilities', 60), ('equity and liabilities', 58), ('noncurrentassets', 55), ('current assets', 52), ('noncurrent liabilities', 43), ('equityliabilities', 36), ('equityandliabilities', 32), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current assets | score 67
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD currentassets | score 62
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current liabilities | score 100
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD currentliabilities | score 97
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent assets | score 61
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentassets | score 57
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent liabilities | score 93
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current assets | score 59
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current liabilities | score 95
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentassets | score 57
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity and liabilities | score 69
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equityandliabilities | score 67
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentassets | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentliabilities | score 43
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equityandliabilities | score 41
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Employee benefit liabilities | [('equity liabilities', 57), ('current liabilities', 56), ('equity and liabilities', 56), ('liabilities', 43), ('equityliabilities', 40), ('equityandliabilities', 36), ('noncurrent liabilities', 33), ('currentliabilities', 32), ('equity', 29), ('noncurrentliabilities', 29), ('currentassets', 24), ('current assets', 23), ('noncurrent assets', 23), ('noncurrentassets', 22), ('assets', 15)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD current assets | score 33
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD currentassets | score 29
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD current liabilities | score 69
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD currentliabilities | score 70
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrent assets | score 37
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrentassets | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrent liabilities | score 64
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD non current assets | score 39
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD non current liabilities | score 67
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrentliabilities | score 61
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrentassets | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrentliabilities | score 61
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD equity and liabilities | score 65
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD equity | score 45
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD equityandliabilities | score 59
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Provision | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD current assets | score 20
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD currentassets | score 18
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD current liabilities | score 21
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD currentliabilities | score 22
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD noncurrent assets | score 28
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD noncurrentassets | score 20
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD noncurrent liabilities | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD non current assets | score 28
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD non current liabilities | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD noncurrentliabilities | score 20
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD noncurrentassets | score 20
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD noncurrentliabilities | score 20
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD equity and liabilities | score 20
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD equity | score 15
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD equityandliabilities | score 20
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Deferred income | [('noncurrent assets', 33), ('equity and liabilities', 29), ('equityandliabilities', 27), ('current assets', 25), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('noncurrent liabilities', 24), ('equityliabilities', 21), ('currentliabilities', 20), ('currentassets', 17), ('noncurrentliabilities', 17), ('noncurrentassets', 15), ('assets', 12), ('liabilities', 12)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD current assets | score 34
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD currentassets | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD current liabilities | score 35
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD currentliabilities | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD noncurrent assets | score 31
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD noncurrentassets | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD noncurrent liabilities | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD non current assets | score 40
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD non current liabilities | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD noncurrentliabilities | score 28
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD noncurrentassets | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD noncurrentliabilities | score 28
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD equity and liabilities | score 27
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD equityandliabilities | score 23
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Income tax payable | [('liabilities', 36), ('equity liabilities', 34), ('current liabilities', 33), ('noncurrent liabilities', 33), ('equity and liabilities', 30), ('equityandliabilities', 30), ('noncurrentassets', 26), ('equityliabilities', 25), ('current assets', 21), ('currentassets', 21), ('noncurrentliabilities', 21), ('assets', 19), ('equity', 18), ('currentliabilities', 16), ('noncurrent assets', 14)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD current assets | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD currentassets | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD current liabilities | score 43
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD currentliabilities | score 39
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD noncurrent assets | score 40
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD noncurrentassets | score 35
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD noncurrent liabilities | score 45
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD non current assets | score 39
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD non current liabilities | score 44
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD noncurrentliabilities | score 41
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD noncurrentassets | score 35
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD noncurrentliabilities | score 41
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD equity and liabilities | score 40
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD equityandliabilities | score 37
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentassets | score 56
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentliabilities | score 84
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equityandliabilities | score 62
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Noncurrent liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('noncurrentliabilities', 54), ('noncurrentassets', 48), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('currentliabilities', 35), ('currentassets', 31), ('equityandliabilities', 24), ('equity', 20), ('equityliabilities', 18), ('assets', 11)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current assets | score 61
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD currentassets | score 57
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current liabilities | score 93
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD currentliabilities | score 90
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent assets | score 72
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentassets | score 68
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent liabilities | score 100
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current assets | score 70
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current liabilities | score 98
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentliabilities | score 98
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentassets | score 68
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentliabilities | score 98
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity and liabilities | score 65
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equityandliabilities | score 62
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Employee benefit liabilities | [('equity liabilities', 57), ('current liabilities', 56), ('equity and liabilities', 56), ('liabilities', 43), ('equityliabilities', 40), ('equityandliabilities', 36), ('noncurrent liabilities', 33), ('currentliabilities', 32), ('equity', 29), ('noncurrentliabilities', 29), ('currentassets', 24), ('current assets', 23), ('noncurrent assets', 23), ('noncurrentassets', 22), ('assets', 15)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD current assets | score 33
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD currentassets | score 29
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD current liabilities | score 69
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD currentliabilities | score 70
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrent assets | score 37
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrentassets | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrent liabilities | score 64
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD non current assets | score 39
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD non current liabilities | score 67
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrentliabilities | score 61
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrentassets | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrentliabilities | score 61
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD equity and liabilities | score 65
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD equity | score 45
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD equityandliabilities | score 59
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Other liabilities | [('noncurrent liabilities', 69), ('liabilities', 67), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('noncurrent assets', 32), ('equityandliabilities', 26), ('assets', 24), ('current assets', 24), ('noncurrentassets', 22), ('equity', 22), ('equityliabilities', 20), ('currentliabilities', 19), ('currentassets', 17), ('noncurrentliabilities', 17)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD current assets | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD currentassets | score 27
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD current liabilities | score 75
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD currentliabilities | score 69
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrent assets | score 35
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrentassets | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD non current assets | score 34
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD non current liabilities | score 75
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrentassets | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD equity and liabilities | score 75
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD equityandliabilities | score 65
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentassets | score 56
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentliabilities | score 85
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equityandliabilities | score 58
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentassets | score 27
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentliabilities | score 69
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equityandliabilities | score 70
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentassets | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentliabilities | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equityandliabilities | score 90
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('equity and liabilities', 37), ('currentassets', 36), ('current assets', 35), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('equityliabilities', 33), ('noncurrentassets', 32), ('currentliabilities', 32), ('equityandliabilities', 29), ('noncurrentliabilities', 27), ('liabilities', 25)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD currentassets | score 42
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD currentliabilities | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentassets | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 39
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 31
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 39
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentassets | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equityandliabilities | score 33
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('currentliabilities', 50), ('current liabilities', 48), ('currentassets', 43), ('noncurrentliabilities', 43), ('current assets', 42), ('assets', 38), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('equityliabilities', 32), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentassets | score 40
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentliabilities | score 40
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equityandliabilities | score 43
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentassets | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentliabilities | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equityandliabilities | score 57
2023-08-11 14:44:02+0530 - sLogger - DEBUG - Total equity and liabilities | [('equity and liabilities', 85), ('equity liabilities', 72), ('current liabilities', 49), ('equityliabilities', 45), ('noncurrent liabilities', 43), ('liabilities', 41), ('equity', 41), ('equityandliabilities', 41), ('noncurrentliabilities', 29), ('current assets', 28), ('noncurrent assets', 28), ('noncurrentassets', 26), ('currentliabilities', 25), ('currentassets', 23), ('assets', 21)]
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD current assets | score 32
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD currentassets | score 28
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD current liabilities | score 69
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD currentliabilities | score 62
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD noncurrent assets | score 31
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD noncurrentassets | score 28
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD noncurrent liabilities | score 64
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD non current assets | score 35
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD non current liabilities | score 63
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD noncurrentliabilities | score 57
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD noncurrentassets | score 28
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD noncurrentliabilities | score 57
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD equity and liabilities | score 95
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD equity | score 90
2023-08-11 14:44:02+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD equityandliabilities | score 83
2023-08-11 14:44:02+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-11 14:44:02+0530 - sLogger - DEBUG - set_section_details started
2023-08-11 14:44:02+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Operating activities | working capital adjustments
2023-08-11 14:44:02+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-08-11 14:44:02+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-08-11 14:44:02+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-08-11 14:44:02+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid | movements in working capital
2023-08-11 14:44:02+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Govemment subsidy received | changes in assets liabilities
2023-08-11 14:44:02+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax paid | changes in working capital
2023-08-11 14:44:02+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows from operating activities | operating cash flow before working capital changes
2023-08-11 14:44:02+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Investing activities | movements in working capital
2023-08-11 14:44:02+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Purchase of property, plant and equipment | changes in operating assets and liabilities
2023-08-11 14:44:02+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in investing activities | adjustments for increase decrease in operating liabilities
2023-08-11 14:44:02+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Financing activities | changes in working capital
2023-08-11 14:44:02+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of lease liabilities principal | changes in operating assets and liabilities
2023-08-11 14:44:02+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in financing activities | operating cash flow before working capital changes
2023-08-11 14:44:02+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-08-11 14:44:02+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at 1 April | changes in operating assets and liabilities
2023-08-11 14:44:02+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at 31 March | changes in operating assets and liabilities
2023-08-11 14:44:03+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-11 14:44:03+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits']
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-11 14:44:03+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand ', ' cash at bank ', ' cash at bank and on hand ', ' short term deposits ', ' cash at banks earns interest at floating rates based on daily bank deposit rates ', ' cash and cash equivalents ', ' cash on hand and at bank ', ' bank balances ', '  cash and bank balances ', ' cash asset']
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-11 14:44:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:03+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits', 35), ('cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('cash asset', 57), ('cash and bank balances', 33), ('cash and cash equivalents', 32), ('other bank balances', 29), ('cash and short term deposits', 26), ('Cash and short term deposits', 26), ('bank balances other than above', 19), ('bank balances other than cash and cash equivalents', 17)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [('cash and cash equivalents', 43), ('bank balances other than cash and cash equivalents', 33), ('bank balances other than above', 33), ('cash and short term deposits', 33), ('Cash and short term deposits', 33), ('other bank balances', 30), ('cash and bank balances', 28), ('cash asset', 23)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = total current a ssets , res_fuzz_match = [('cash asset', 43), ('cash and cash equivalents', 36), ('cash and short term deposits', 36), ('Cash and short term deposits', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('other bank balances', 29), ('cash and bank balances', 21)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:03+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits', 35), ('cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('cash asset', 57), ('cash and bank balances', 33), ('cash and cash equivalents', 32), ('other bank balances', 29), ('cash and short term deposits', 26), ('Cash and short term deposits', 26), ('bank balances other than above', 19), ('bank balances other than cash and cash equivalents', 17)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [('cash and cash equivalents', 43), ('bank balances other than cash and cash equivalents', 33), ('bank balances other than above', 33), ('cash and short term deposits', 33), ('Cash and short term deposits', 33), ('other bank balances', 30), ('cash and bank balances', 28), ('cash asset', 23)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = total current a ssets , res_fuzz_match = [('cash asset', 43), ('cash and cash equivalents', 36), ('cash and short term deposits', 36), ('Cash and short term deposits', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('other bank balances', 29), ('cash and bank balances', 21)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-11 14:44:03+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-11 14:44:03+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' parts and accessories (at cost) ', ' stock in transit']
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-11 14:44:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:03+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('inventories', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = total current a ssets , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 46783425.0, 'line_item_label': ['Inventories'], 'note_numbers': ['12'], 'line_item_value': [46783425.0]}
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:03+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('inventories', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = total current a ssets , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 95642916.0, 'line_item_label': ['Inventories'], 'note_numbers': ['12'], 'line_item_value': [95642916.0]}
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:03+0530 - sLogger - DEBUG - keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' parts and accessories (at cost) ', ' stock in transit'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = finished goods at cost , res_fuzz_match = [(' finished goods ', 100), (' finished goods at cost ', 100), (' goods in transit ', 67), (' stores and other consumables at cost ', 50), (' parts and accessories (at cost) ', 44), (' provision for inventory obsolescence ', 38), (' stock in transit', 38), (' inventories ', 33), (' work in progress ', 31), (' cranes - in transit ', 23), ('raw materials ', 20), (' raw materials ', 20), (' cranes ', 20), (' spare parts ', 20)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = finished goods provision for obsolescence , res_fuzz_match = [(' finished goods ', 100), (' finished goods at cost ', 81), (' provision for inventory obsolescence ', 67), (' goods in transit ', 58), (' work in progress ', 46), (' stores and other consumables at cost ', 41), (' spare parts ', 40), (' parts and accessories (at cost) ', 39), (' stock in transit', 38), (' inventories ', 33), (' cranes - in transit ', 31), ('raw materials ', 30), (' raw materials ', 30), (' cranes ', 20)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = finished goods total , res_fuzz_match = [(' finished goods ', 100), (' finished goods at cost ', 88), (' goods in transit ', 64), (' provision for inventory obsolescence ', 41), (' stock in transit', 38), (' stores and other consumables at cost ', 36), (' parts and accessories (at cost) ', 35), (' inventories ', 33), (' cranes - in transit ', 31), (' spare parts ', 30), (' work in progress ', 23), ('raw materials ', 20), (' raw materials ', 20), (' cranes ', 20)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = finished goods at cost , res_fuzz_match = [(' finished goods ', 100), (' finished goods at cost ', 100), (' goods in transit ', 67), (' stores and other consumables at cost ', 50), (' parts and accessories (at cost) ', 44), (' provision for inventory obsolescence ', 38), (' stock in transit', 38), (' inventories ', 33), (' work in progress ', 31), (' cranes - in transit ', 23), ('raw materials ', 20), (' raw materials ', 20), (' cranes ', 20), (' spare parts ', 20)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = finished goods provision for obsolescence , res_fuzz_match = [(' finished goods ', 100), (' finished goods at cost ', 81), (' provision for inventory obsolescence ', 67), (' goods in transit ', 58), (' work in progress ', 46), (' stores and other consumables at cost ', 41), (' spare parts ', 40), (' parts and accessories (at cost) ', 39), (' stock in transit', 38), (' inventories ', 33), (' cranes - in transit ', 31), ('raw materials ', 30), (' raw materials ', 30), (' cranes ', 20)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = finished goods total , res_fuzz_match = [(' finished goods ', 100), (' finished goods at cost ', 88), (' goods in transit ', 64), (' provision for inventory obsolescence ', 41), (' stock in transit', 38), (' stores and other consumables at cost ', 36), (' parts and accessories (at cost) ', 35), (' inventories ', 33), (' cranes - in transit ', 31), (' spare parts ', 30), (' work in progress ', 23), ('raw materials ', 20), (' raw materials ', 20), (' cranes ', 20)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [102462647.0, -6819731.0, 95642916.0, 54818369.0, -8034944.0, 46783425.0], 'label': ['Finished goods At cost', 'Finished goods Provision for obsolescence', 'Finished goods Total', 'Finished goods At cost', 'Finished goods Provision for obsolescence', 'Finished goods Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-11 14:44:03+0530 - sLogger - DEBUG - list_target_keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables']
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-11 14:44:03+0530 - sLogger - DEBUG - list_target_keywords = ['prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance']
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-11 14:44:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:03+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [(' other current assets ', 81), (' other current financial assets ', 65), ('other assets ', 58), (' other financial assets ', 50), (' trade and other receivables', 34), (' prepayments ', 21)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('other assets ', 40), (' other current assets ', 26), (' other financial assets ', 26), (' prepayments ', 20), (' other current financial assets ', 19), (' trade and other receivables', 15)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables', 26), (' prepayments ', 13)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' prepayments ', 100), (' trade and other receivables', 21), (' other current financial assets ', 18), (' other current assets ', 16), (' other financial assets ', 16), ('other assets ', 12)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [(' trade and other receivables', 63), (' other financial assets ', 34), (' other current financial assets ', 33), (' other current assets ', 29), (' prepayments ', 27), ('other assets ', 22)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = total current a ssets , res_fuzz_match = [(' other current assets ', 54), (' other current financial assets ', 49), ('other assets ', 48), (' other financial assets ', 38), (' trade and other receivables', 35), (' prepayments ', 25)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 4], 'score': 100, 'value': 129342670.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Prepayments'], 'note_numbers': [nan, '11', nan], 'line_item_value': [0.0, 129139610.0, 203060.0]}
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:03+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [(' other current assets ', 81), (' other current financial assets ', 65), ('other assets ', 58), (' other financial assets ', 50), (' trade and other receivables', 34), (' prepayments ', 21)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('other assets ', 40), (' other current assets ', 26), (' other financial assets ', 26), (' prepayments ', 20), (' other current financial assets ', 19), (' trade and other receivables', 15)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables', 26), (' prepayments ', 13)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' prepayments ', 100), (' trade and other receivables', 21), (' other current financial assets ', 18), (' other current assets ', 16), (' other financial assets ', 16), ('other assets ', 12)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [(' trade and other receivables', 63), (' other financial assets ', 34), (' other current financial assets ', 33), (' other current assets ', 29), (' prepayments ', 27), ('other assets ', 22)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = total current a ssets , res_fuzz_match = [(' other current assets ', 54), (' other current financial assets ', 49), ('other assets ', 48), (' other financial assets ', 38), (' trade and other receivables', 35), (' prepayments ', 25)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 4], 'score': 100, 'value': 79170779.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Prepayments'], 'note_numbers': [nan, '11', nan], 'line_item_value': [0.0, 78644553.0, 526226.0]}
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:03+0530 - sLogger - DEBUG - keywords = ['prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none trade debtors , res_fuzz_match = [(' prepaid ', 43), (' prepaid ', 43), (' other prepayments ', 42), (' prepaid expenditure ', 41), (' other receivables and prepayments ', 41), ('prepaid expense ', 36), (' prepayments ', 33), (' in advance ', 33), (' charges paid in advance', 29)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none provision for impairment of receivables , res_fuzz_match = [(' prepaid expenditure ', 44), ('prepaid expense ', 43), (' prepaid ', 43), (' prepaid ', 43), (' other prepayments ', 42), (' charges paid in advance', 41), (' other receivables and prepayments ', 39), (' prepayments ', 33), (' in advance ', 17)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' other prepayments ', 30), (' other receivables and prepayments ', 30), (' prepaid ', 29), (' prepaid ', 29), (' prepaid expenditure ', 20), (' charges paid in advance', 20), (' prepayments ', 17), (' in advance ', 17), ('prepaid expense ', 10)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none receivable due from related party , res_fuzz_match = [(' other receivables and prepayments ', 61), (' other prepayments ', 50), (' prepaid ', 43), (' prepaid ', 43), (' prepaid expenditure ', 39), ('prepaid expense ', 36), (' prepayments ', 33), (' charges paid in advance', 29), (' in advance ', 17)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' other prepayments ', 30), (' other receivables and prepayments ', 30), (' prepaid ', 29), (' prepaid ', 29), (' prepaid expenditure ', 20), (' charges paid in advance', 20), (' prepayments ', 17), (' in advance ', 17), ('prepaid expense ', 10)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none trade debtors , res_fuzz_match = [(' prepaid ', 43), (' prepaid ', 43), (' other prepayments ', 42), (' prepaid expenditure ', 41), (' other receivables and prepayments ', 41), ('prepaid expense ', 36), (' prepayments ', 33), (' in advance ', 33), (' charges paid in advance', 29)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none provision for impairment of receivables , res_fuzz_match = [(' prepaid expenditure ', 44), ('prepaid expense ', 43), (' prepaid ', 43), (' prepaid ', 43), (' other prepayments ', 42), (' charges paid in advance', 41), (' other receivables and prepayments ', 39), (' prepayments ', 33), (' in advance ', 17)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' other prepayments ', 30), (' other receivables and prepayments ', 30), (' prepaid ', 29), (' prepaid ', 29), (' prepaid expenditure ', 20), (' charges paid in advance', 20), (' prepayments ', 17), (' in advance ', 17), ('prepaid expense ', 10)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none receivable due from related party , res_fuzz_match = [(' other receivables and prepayments ', 61), (' other prepayments ', 50), (' prepaid ', 43), (' prepaid ', 43), (' prepaid expenditure ', 39), ('prepaid expense ', 36), (' prepayments ', 33), (' charges paid in advance', 29), (' in advance ', 17)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' other prepayments ', 30), (' other receivables and prepayments ', 30), (' prepaid ', 29), (' prepaid ', 29), (' prepaid expenditure ', 20), (' charges paid in advance', 20), (' prepayments ', 17), (' in advance ', 17), ('prepaid expense ', 10)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-11 14:44:03+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables']
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-11 14:44:03+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-11 14:44:03+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:03+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets ', 81), (' other assets ', 58), (' financial assets ', 54), (' other financial assets ', 50), (' biological assets ', 48), (' trade and other receivables', 34), (' income tax receivable from related parties ', 30), (' deferred operating expenditure ', 29)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [(' other assets ', 40), ('other current assets ', 26), (' other financial assets ', 26), (' biological assets ', 25), (' financial assets ', 24), (' trade and other receivables', 15), (' income tax receivable from related parties ', 11), (' deferred operating expenditure ', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' other assets ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' other assets ', 40), ('other current assets ', 36), (' financial assets ', 36), (' other financial assets ', 36), (' deferred operating expenditure ', 33), (' biological assets ', 29), (' trade and other receivables', 26), (' income tax receivable from related parties ', 24)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure ', 22), (' financial assets ', 21), (' income tax receivable from related parties ', 21), (' trade and other receivables', 21), ('other current assets ', 16), (' other financial assets ', 16), (' other assets ', 12), (' biological assets ', 11)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [(' income tax receivable from related parties ', 65), (' trade and other receivables', 63), (' other financial assets ', 34), ('other current assets ', 29), (' financial assets ', 28), (' deferred operating expenditure ', 27), (' other assets ', 22), (' biological assets ', 14)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = total current a ssets , res_fuzz_match = [('other current assets ', 54), (' other assets ', 48), (' biological assets ', 47), (' financial assets ', 39), (' income tax receivable from related parties ', 39), (' other financial assets ', 38), (' trade and other receivables', 35), (' deferred operating expenditure ', 31)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': 100, 'value': 129139610.0, 'line_item_label': ['Current assets', 'Trade and other receivables'], 'note_numbers': [nan, '11'], 'line_item_value': [0.0, 129139610.0]}
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:03+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets ', 81), (' other assets ', 58), (' financial assets ', 54), (' other financial assets ', 50), (' biological assets ', 48), (' trade and other receivables', 34), (' income tax receivable from related parties ', 30), (' deferred operating expenditure ', 29)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [(' other assets ', 40), ('other current assets ', 26), (' other financial assets ', 26), (' biological assets ', 25), (' financial assets ', 24), (' trade and other receivables', 15), (' income tax receivable from related parties ', 11), (' deferred operating expenditure ', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' other assets ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' other assets ', 40), ('other current assets ', 36), (' financial assets ', 36), (' other financial assets ', 36), (' deferred operating expenditure ', 33), (' biological assets ', 29), (' trade and other receivables', 26), (' income tax receivable from related parties ', 24)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure ', 22), (' financial assets ', 21), (' income tax receivable from related parties ', 21), (' trade and other receivables', 21), ('other current assets ', 16), (' other financial assets ', 16), (' other assets ', 12), (' biological assets ', 11)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [(' income tax receivable from related parties ', 65), (' trade and other receivables', 63), (' other financial assets ', 34), ('other current assets ', 29), (' financial assets ', 28), (' deferred operating expenditure ', 27), (' other assets ', 22), (' biological assets ', 14)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = total current a ssets , res_fuzz_match = [('other current assets ', 54), (' other assets ', 48), (' biological assets ', 47), (' financial assets ', 39), (' income tax receivable from related parties ', 39), (' other financial assets ', 38), (' trade and other receivables', 35), (' deferred operating expenditure ', 31)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': 100, 'value': 78644553.0, 'line_item_label': ['Current assets', 'Trade and other receivables'], 'note_numbers': [nan, '11'], 'line_item_value': [0.0, 78644553.0]}
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:03+0530 - sLogger - DEBUG - keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none trade debtors , res_fuzz_match = [(' other debtors and prepayments', 59), (' other deposits receivable - related party', 47), (' foreign exchange forward contracts', 47), ('other assets', 45), (' rental bond', 45), (' accrued rebates', 45), (' deposits', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 41), (' electricity derivatives at fair value', 41), (' income tax receivable from related parties', 41), (' derivative contracts - fair value', 41), (' long service leave receivable', 41), (' other receivables - related party', 41), (' amount receivable from controlling entity', 41), (' forward exchange contracts', 41), (' other', 40), (' interest receivable', 40), (' bank guarantee', 38), (' accrued interest', 36), (' current investments', 36), (' related party disclosures', 35), (' related party receivable', 35), (' share of jv prepayments', 33), (' lng', 33)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none provision for impairment of receivables , res_fuzz_match = [(' related party receivable', 67), (' interest receivable', 60), (' deposits', 57), (' long service leave receivable', 52), (' other deposits receivable - related party', 48), (' derivative contracts - fair value', 46), (' other receivables - related party', 46), ('foreign exchange derivatives at fair value', 45), (' electricity derivatives at fair value', 45), (' amount receivable from controlling entity', 45), (' accrued rebates', 45), (' income tax receivable from related parties', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), (' other', 40), (' foreign exchange forward contracts', 39), ('other assets', 36), (' accrued interest', 36), (' current investments', 36), (' related party disclosures', 33), (' lng', 33), (' forward exchange contracts', 33), (' bank guarantee', 31), (' rental bond', 27)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' income tax receivable from related parties', 50), (' amount receivable from controlling entity', 50), (' forward exchange contracts', 50), (' deposits', 43), (' condensate', 43), (' rental bond', 42), ('other assets', 40), (' other', 40), (' derivative contracts - fair value', 40), (' other deposits receivable - related party', 40), (' current investments', 40), (' foreign exchange forward contracts', 40), (' other debtors and prepayments', 40), (' lng', 33), ('foreign exchange derivatives at fair value', 30), (' electricity derivatives at fair value', 30), (' accrued interest', 30), (' related party disclosures', 30), (' long service leave receivable', 30), (' other receivables - related party', 30), (' interest receivable', 30), (' bank guarantee', 30), (' related party receivable', 30), (' share of jv prepayments', 30), (' accrued rebates', 20)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none receivable due from related party , res_fuzz_match = [(' income tax receivable from related parties', 81), (' other deposits receivable - related party', 66), (' amount receivable from controlling entity', 63), (' other receivables - related party', 62), (' related party receivable', 61), (' other', 60), (' interest receivable', 60), (' accrued rebates', 55), (' related party disclosures', 52), (' electricity derivatives at fair value', 50), (' derivative contracts - fair value', 46), (' foreign exchange forward contracts', 44), (' long service leave receivable', 43), (' deposits', 43), (' condensate', 43), (' other debtors and prepayments', 43), ('foreign exchange derivatives at fair value', 42), (' share of jv prepayments', 42), (' bank guarantee', 38), (' current investments', 37), ('other assets', 36), (' accrued interest', 36), (' rental bond', 36), (' lng', 33), (' forward exchange contracts', 33)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' income tax receivable from related parties', 50), (' amount receivable from controlling entity', 50), (' forward exchange contracts', 50), (' deposits', 43), (' condensate', 43), (' rental bond', 42), ('other assets', 40), (' other', 40), (' derivative contracts - fair value', 40), (' other deposits receivable - related party', 40), (' current investments', 40), (' foreign exchange forward contracts', 40), (' other debtors and prepayments', 40), (' lng', 33), ('foreign exchange derivatives at fair value', 30), (' electricity derivatives at fair value', 30), (' accrued interest', 30), (' related party disclosures', 30), (' long service leave receivable', 30), (' other receivables - related party', 30), (' interest receivable', 30), (' bank guarantee', 30), (' related party receivable', 30), (' share of jv prepayments', 30), (' accrued rebates', 20)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none trade debtors , res_fuzz_match = [(' other debtors and prepayments', 59), (' other deposits receivable - related party', 47), (' foreign exchange forward contracts', 47), ('other assets', 45), (' rental bond', 45), (' accrued rebates', 45), (' deposits', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 41), (' electricity derivatives at fair value', 41), (' income tax receivable from related parties', 41), (' derivative contracts - fair value', 41), (' long service leave receivable', 41), (' other receivables - related party', 41), (' amount receivable from controlling entity', 41), (' forward exchange contracts', 41), (' other', 40), (' interest receivable', 40), (' bank guarantee', 38), (' accrued interest', 36), (' current investments', 36), (' related party disclosures', 35), (' related party receivable', 35), (' share of jv prepayments', 33), (' lng', 33)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none provision for impairment of receivables , res_fuzz_match = [(' related party receivable', 67), (' interest receivable', 60), (' deposits', 57), (' long service leave receivable', 52), (' other deposits receivable - related party', 48), (' derivative contracts - fair value', 46), (' other receivables - related party', 46), ('foreign exchange derivatives at fair value', 45), (' electricity derivatives at fair value', 45), (' amount receivable from controlling entity', 45), (' accrued rebates', 45), (' income tax receivable from related parties', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), (' other', 40), (' foreign exchange forward contracts', 39), ('other assets', 36), (' accrued interest', 36), (' current investments', 36), (' related party disclosures', 33), (' lng', 33), (' forward exchange contracts', 33), (' bank guarantee', 31), (' rental bond', 27)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' income tax receivable from related parties', 50), (' amount receivable from controlling entity', 50), (' forward exchange contracts', 50), (' deposits', 43), (' condensate', 43), (' rental bond', 42), ('other assets', 40), (' other', 40), (' derivative contracts - fair value', 40), (' other deposits receivable - related party', 40), (' current investments', 40), (' foreign exchange forward contracts', 40), (' other debtors and prepayments', 40), (' lng', 33), ('foreign exchange derivatives at fair value', 30), (' electricity derivatives at fair value', 30), (' accrued interest', 30), (' related party disclosures', 30), (' long service leave receivable', 30), (' other receivables - related party', 30), (' interest receivable', 30), (' bank guarantee', 30), (' related party receivable', 30), (' share of jv prepayments', 30), (' accrued rebates', 20)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none receivable due from related party , res_fuzz_match = [(' income tax receivable from related parties', 81), (' other deposits receivable - related party', 66), (' amount receivable from controlling entity', 63), (' other receivables - related party', 62), (' related party receivable', 61), (' other', 60), (' interest receivable', 60), (' accrued rebates', 55), (' related party disclosures', 52), (' electricity derivatives at fair value', 50), (' derivative contracts - fair value', 46), (' foreign exchange forward contracts', 44), (' long service leave receivable', 43), (' deposits', 43), (' condensate', 43), (' other debtors and prepayments', 43), ('foreign exchange derivatives at fair value', 42), (' share of jv prepayments', 42), (' bank guarantee', 38), (' current investments', 37), ('other assets', 36), (' accrued interest', 36), (' rental bond', 36), (' lng', 33), (' forward exchange contracts', 33)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' income tax receivable from related parties', 50), (' amount receivable from controlling entity', 50), (' forward exchange contracts', 50), (' deposits', 43), (' condensate', 43), (' rental bond', 42), ('other assets', 40), (' other', 40), (' derivative contracts - fair value', 40), (' other deposits receivable - related party', 40), (' current investments', 40), (' foreign exchange forward contracts', 40), (' other debtors and prepayments', 40), (' lng', 33), ('foreign exchange derivatives at fair value', 30), (' electricity derivatives at fair value', 30), (' accrued interest', 30), (' related party disclosures', 30), (' long service leave receivable', 30), (' other receivables - related party', 30), (' interest receivable', 30), (' bank guarantee', 30), (' related party receivable', 30), (' share of jv prepayments', 30), (' accrued rebates', 20)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 8], 'score': [81, 81], 'value': [51036618.0, 97897313.0], 'label': ['None Receivable due from related party', 'None Receivable due from related party'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:03+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none trade debtors , res_fuzz_match = [(' ', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [(' ', 100)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none provision for impairment of receivables , res_fuzz_match = [(' ', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [(' ', 100)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' ', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [(' ', 100)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none receivable due from related party , res_fuzz_match = [(' ', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [(' ', 100)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' ', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [(' ', 100)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none trade debtors , res_fuzz_match = [(' ', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [(' ', 100)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none provision for impairment of receivables , res_fuzz_match = [(' ', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [(' ', 100)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' ', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [(' ', 100)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none receivable due from related party , res_fuzz_match = [(' ', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [(' ', 100)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' ', 0)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [(' ', 100)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [29259569.0, -1651634.0, 27607935.0, 51036618.0, 78644553.0, 32654310.0, -1412013.0, 31242297.0, 97897313.0, 129139610.0], 'label': ['$ $', '$ $', '$ $', '$ $', '$ $', '$ $', '$ $', '$ $', '$ $', '$ $'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_current_assets
2023-08-11 14:44:03+0530 - sLogger - ERROR - error occured: 2022
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-11 14:44:03+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment ']
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-11 14:44:03+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings']
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-11 14:44:03+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-08-11 14:44:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:03+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment ', 29), (' plant and equipment ', 29), (' Property ', 19)]
2023-08-11 14:44:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment ', 77), (' plant and equipment ', 77), (' Property ', 50)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment ', 37), (' plant and equipment ', 37), (' Property ', 30), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment ', 33), (' plant and equipment ', 33), (' Property ', 26)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment ', 27), (' plant and equipment ', 27), (' Property ', 26)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39), (' Property ', 32), ('plant and equipment ', 31), (' plant and equipment ', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 2131990.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['13'], 'line_item_value': [2131990.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment ', 29), (' plant and equipment ', 29), (' Property ', 19)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment ', 77), (' plant and equipment ', 77), (' Property ', 50)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment ', 37), (' plant and equipment ', 37), (' Property ', 30), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment ', 33), (' plant and equipment ', 33), (' Property ', 26)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment ', 27), (' plant and equipment ', 27), (' Property ', 26)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39), (' Property ', 32), ('plant and equipment ', 31), (' plant and equipment ', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 1844377.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['13'], 'line_item_value': [1844377.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), ('depreciatio', 27), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mining properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Capitalised pre stripping costs ', 30), (' Asset Retirement Obligation ', 29), (' Other assets ', 27), (' Construction in progress ', 22), (' Workshop tooling ', 15)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mining properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Capitalised pre stripping costs ', 30), (' Asset Retirement Obligation ', 29), (' Other assets ', 27), (' Construction in progress ', 22), (' Workshop tooling ', 15)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('depreciatio', 36), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mining properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Capitalised pre stripping costs ', 30), (' Asset Retirement Obligation ', 29), (' Other assets ', 27), (' Construction in progress ', 22), (' Workshop tooling ', 15)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19), ('depreciatio', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mining properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Capitalised pre stripping costs ', 30), (' Asset Retirement Obligation ', 29), (' Other assets ', 27), (' Construction in progress ', 22), (' Workshop tooling ', 15)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 1 april 2022 , res_fuzz_match = [('depreciatio', 73), (' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 50), (' land and improvement ', 48), (' Plant and equipment ', 47), ('accumulated depreciation ', 41), (' Asset Retirement Obligation ', 41), (' Capitalised pre stripping costs ', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Leasehold buildings', 34), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Assets under construction ', 30), (' Building & mine infrastructure ', 30), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mining properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Capitalised pre stripping costs ', 30), (' Asset Retirement Obligation ', 29), (' Other assets ', 27), (' Construction in progress ', 22), (' Workshop tooling ', 15)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation depreciation charge for the year , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation ', 60), (' Other assets ', 55), (' Development properties ', 50), (' Capitalised pre stripping costs ', 46), (' Mining properties ', 46), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Plant and equipment ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' land and improvement ', 27), (' Leasehold buildings', 27)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mining properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Capitalised pre stripping costs ', 30), (' Asset Retirement Obligation ', 29), (' Other assets ', 27), (' Construction in progress ', 22), (' Workshop tooling ', 15)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation disposals , res_fuzz_match = [('depreciatio', 73), (' Capitalised pre stripping costs ', 57), (' Stripping WIP ', 56), ('accumulated depreciation ', 50), (' Pipeline Asset ', 46), (' under construction ', 44), (' Asset Retirement Obligation ', 43), (' Construction in progress ', 43), (' Assets under construction ', 43), (' land and improvement ', 43), (' Development properties ', 43), (' Marine ', 40), (' Facilities ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Building & mine infrastructure ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Workshop tooling ', 31), (' Freehold land and buildings ', 29), (' Plant and equipment ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mining properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Capitalised pre stripping costs ', 30), (' Asset Retirement Obligation ', 29), (' Other assets ', 27), (' Construction in progress ', 22), (' Workshop tooling ', 15)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 31 march 2023 , res_fuzz_match = [('depreciatio', 73), (' Marine ', 60), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Facilities ', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Construction in progress ', 28), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mining properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Capitalised pre stripping costs ', 30), (' Asset Retirement Obligation ', 29), (' Other assets ', 27), (' Construction in progress ', 22), (' Workshop tooling ', 15)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), ('accumulated depreciation ', 48), (' land and improvement ', 47), (' Mining properties ', 46), (' Capitalised pre stripping costs ', 44), (' Plant and equipment ', 40), (' under construction ', 40), (' Freehold land and buildings ', 39), (' Construction in progress ', 39), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 32), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mining properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Capitalised pre stripping costs ', 30), (' Asset Retirement Obligation ', 29), (' Other assets ', 27), (' Construction in progress ', 22), (' Workshop tooling ', 15)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at: 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' under construction ', 47), ('accumulated depreciation ', 41), (' Facilities ', 40), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), ('depreciatio', 36), (' Other assets ', 36), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Freehold land and buildings ', 28), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Development properties ', 19), (' Fishing vessels & equipment ', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mining properties ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 31), (' Capitalised pre stripping costs ', 30), (' Asset Retirement Obligation ', 29), (' Other assets ', 27), (' Construction in progress ', 22), (' Workshop tooling ', 15)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), ('depreciatio', 27), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Development properties ', 45), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Plant and equipment ', 40), (' Marine ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), ('accumulated depreciation ', 34), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 31), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), (' Mine infrastructure ', 25), (' under construction ', 20), (' Facilities ', 20), (' Other assets ', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Development properties ', 45), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Plant and equipment ', 40), (' Marine ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), ('accumulated depreciation ', 34), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 31), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), (' Mine infrastructure ', 25), (' under construction ', 20), (' Facilities ', 20), (' Other assets ', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('depreciatio', 36), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Development properties ', 45), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Plant and equipment ', 40), (' Marine ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), ('accumulated depreciation ', 34), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 31), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), (' Mine infrastructure ', 25), (' under construction ', 20), (' Facilities ', 20), (' Other assets ', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19), ('depreciatio', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Development properties ', 45), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Plant and equipment ', 40), (' Marine ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), ('accumulated depreciation ', 34), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 31), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), (' Mine infrastructure ', 25), (' under construction ', 20), (' Facilities ', 20), (' Other assets ', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 1 april 2022 , res_fuzz_match = [('depreciatio', 73), (' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 50), (' land and improvement ', 48), (' Plant and equipment ', 47), ('accumulated depreciation ', 41), (' Asset Retirement Obligation ', 41), (' Capitalised pre stripping costs ', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Leasehold buildings', 34), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Assets under construction ', 30), (' Building & mine infrastructure ', 30), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Development properties ', 45), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Plant and equipment ', 40), (' Marine ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), ('accumulated depreciation ', 34), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 31), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), (' Mine infrastructure ', 25), (' under construction ', 20), (' Facilities ', 20), (' Other assets ', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation depreciation charge for the year , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation ', 60), (' Other assets ', 55), (' Development properties ', 50), (' Capitalised pre stripping costs ', 46), (' Mining properties ', 46), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Plant and equipment ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' land and improvement ', 27), (' Leasehold buildings', 27)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Development properties ', 45), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Plant and equipment ', 40), (' Marine ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), ('accumulated depreciation ', 34), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 31), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), (' Mine infrastructure ', 25), (' under construction ', 20), (' Facilities ', 20), (' Other assets ', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation disposals , res_fuzz_match = [('depreciatio', 73), (' Capitalised pre stripping costs ', 57), (' Stripping WIP ', 56), ('accumulated depreciation ', 50), (' Pipeline Asset ', 46), (' under construction ', 44), (' Asset Retirement Obligation ', 43), (' Construction in progress ', 43), (' Assets under construction ', 43), (' land and improvement ', 43), (' Development properties ', 43), (' Marine ', 40), (' Facilities ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Building & mine infrastructure ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Workshop tooling ', 31), (' Freehold land and buildings ', 29), (' Plant and equipment ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Development properties ', 45), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Plant and equipment ', 40), (' Marine ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), ('accumulated depreciation ', 34), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 31), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), (' Mine infrastructure ', 25), (' under construction ', 20), (' Facilities ', 20), (' Other assets ', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 31 march 2023 , res_fuzz_match = [('depreciatio', 73), (' Marine ', 60), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Facilities ', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Construction in progress ', 28), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Development properties ', 45), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Plant and equipment ', 40), (' Marine ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), ('accumulated depreciation ', 34), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 31), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), (' Mine infrastructure ', 25), (' under construction ', 20), (' Facilities ', 20), (' Other assets ', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), ('accumulated depreciation ', 48), (' land and improvement ', 47), (' Mining properties ', 46), (' Capitalised pre stripping costs ', 44), (' Plant and equipment ', 40), (' under construction ', 40), (' Freehold land and buildings ', 39), (' Construction in progress ', 39), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 32), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Development properties ', 45), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Plant and equipment ', 40), (' Marine ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), ('accumulated depreciation ', 34), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 31), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), (' Mine infrastructure ', 25), (' under construction ', 20), (' Facilities ', 20), (' Other assets ', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at: 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' under construction ', 47), ('accumulated depreciation ', 41), (' Facilities ', 40), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), ('depreciatio', 36), (' Other assets ', 36), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Freehold land and buildings ', 28), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Development properties ', 19), (' Fishing vessels & equipment ', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Development properties ', 45), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Plant and equipment ', 40), (' Marine ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('depreciatio', 36), ('accumulated depreciation ', 34), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 31), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), (' Mine infrastructure ', 25), (' under construction ', 20), (' Facilities ', 20), (' Other assets ', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), ('depreciatio', 27), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('depreciatio', 36), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19), ('depreciatio', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 1 april 2022 , res_fuzz_match = [('depreciatio', 73), (' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 50), (' land and improvement ', 48), (' Plant and equipment ', 47), ('accumulated depreciation ', 41), (' Asset Retirement Obligation ', 41), (' Capitalised pre stripping costs ', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Leasehold buildings', 34), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Assets under construction ', 30), (' Building & mine infrastructure ', 30), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation depreciation charge for the year , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation ', 60), (' Other assets ', 55), (' Development properties ', 50), (' Capitalised pre stripping costs ', 46), (' Mining properties ', 46), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Plant and equipment ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' land and improvement ', 27), (' Leasehold buildings', 27)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation disposals , res_fuzz_match = [('depreciatio', 73), (' Capitalised pre stripping costs ', 57), (' Stripping WIP ', 56), ('accumulated depreciation ', 50), (' Pipeline Asset ', 46), (' under construction ', 44), (' Asset Retirement Obligation ', 43), (' Construction in progress ', 43), (' Assets under construction ', 43), (' land and improvement ', 43), (' Development properties ', 43), (' Marine ', 40), (' Facilities ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Building & mine infrastructure ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Workshop tooling ', 31), (' Freehold land and buildings ', 29), (' Plant and equipment ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 31 march 2023 , res_fuzz_match = [('depreciatio', 73), (' Marine ', 60), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Facilities ', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Construction in progress ', 28), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), ('accumulated depreciation ', 48), (' land and improvement ', 47), (' Mining properties ', 46), (' Capitalised pre stripping costs ', 44), (' Plant and equipment ', 40), (' under construction ', 40), (' Freehold land and buildings ', 39), (' Construction in progress ', 39), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 32), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at: 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' under construction ', 47), ('accumulated depreciation ', 41), (' Facilities ', 40), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), ('depreciatio', 36), (' Other assets ', 36), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Freehold land and buildings ', 28), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Development properties ', 19), (' Fishing vessels & equipment ', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('depreciatio', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 38), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at: 31 march 2023 , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 31), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 38), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at: 31 march 2023 , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 31), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 38), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at: 31 march 2023 , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 31), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 10, 11, 12, 13, 20, 21, 22, 23], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [1261590.0, 293882.0, -328861.0, 1226611.0, 2817900.0, 211814.0, 0.0, 3029714.0, 4079490.0, 505696.0, -328861.0, 4256325.0], 'label': ['Cost Balance at 1 April 2022', 'Cost Additions', 'Cost Disposals', 'Cost Balance at 31 March 2023', 'Cost Balance at 1 April 2022', 'Cost Additions', 'Cost Disposals', 'Cost Balance at 31 March 2023', 'Cost Balance at 1 April 2022', 'Cost Additions', 'Cost Disposals', 'Cost Balance at 31 March 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 2131990.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['13'], 'line_item_value': [2131990.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 1844377.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['13'], 'line_item_value': [1844377.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['construction in progress ', ' work in progress ', ' capital works in progress ', ' WIP']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('Work in progress ', 38), (' property plant equipment ', 38), (' plant property equipment ', 31), (' plant and equipment ', 31), (' investment property', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), (' property plant equipment ', 80), (' plant property equipment ', 60), (' investment property', 47), ('Work in progress ', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' plant and equipment ', 50), (' plant property equipment ', 42), (' property plant equipment ', 42), (' investment property', 42), ('Work in progress ', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' property plant equipment ', 40), (' investment property', 34), (' plant property equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment property', 34), (' property plant equipment ', 33), ('Work in progress ', 31), (' plant property equipment ', 27), (' plant and equipment ', 27)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' plant property equipment ', 45), (' property plant equipment ', 45), ('Work in progress ', 36), (' plant and equipment ', 36), (' investment property', 36)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 2131990.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['13'], 'line_item_value': [2131990.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('Work in progress ', 38), (' property plant equipment ', 38), (' plant property equipment ', 31), (' plant and equipment ', 31), (' investment property', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), (' property plant equipment ', 80), (' plant property equipment ', 60), (' investment property', 47), ('Work in progress ', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' plant and equipment ', 50), (' plant property equipment ', 42), (' property plant equipment ', 42), (' investment property', 42), ('Work in progress ', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' property plant equipment ', 40), (' investment property', 34), (' plant property equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment property', 34), (' property plant equipment ', 33), ('Work in progress ', 31), (' plant property equipment ', 27), (' plant and equipment ', 27)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' plant property equipment ', 45), (' property plant equipment ', 45), ('Work in progress ', 36), (' plant and equipment ', 36), (' investment property', 36)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 1844377.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['13'], 'line_item_value': [1844377.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['construction in progress ', ' work in progress ', ' capital works in progress ', ' WIP'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress ', 35), (' WIP', 33), (' work in progress ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 26), (' work in progress ', 23), ('construction in progress ', 22)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress ', 40), (' WIP', 33), (' work in progress ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 26), (' work in progress ', 23), ('construction in progress ', 22)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 26), (' work in progress ', 23), ('construction in progress ', 22)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress ', 29), (' work in progress ', 15), (' WIP', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 26), (' work in progress ', 23), ('construction in progress ', 22)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 26), (' work in progress ', 23), ('construction in progress ', 22)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation depreciation charge for the year , res_fuzz_match = [(' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38), (' WIP', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 26), (' work in progress ', 23), ('construction in progress ', 22)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation disposals , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 43), (' work in progress ', 38), (' capital works in progress ', 36)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 26), (' work in progress ', 23), ('construction in progress ', 22)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 31 march 2023 , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 28), (' capital works in progress ', 27), (' work in progress ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 26), (' work in progress ', 23), ('construction in progress ', 22)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' capital works in progress ', 44), ('construction in progress ', 39), (' WIP', 33), (' work in progress ', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 26), (' work in progress ', 23), ('construction in progress ', 22)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at: 31 march 2023 , res_fuzz_match = [(' capital works in progress ', 39), ('construction in progress ', 33), (' WIP', 33), (' work in progress ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 26), (' work in progress ', 23), ('construction in progress ', 22)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress ', 35), (' WIP', 33), (' work in progress ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 42), (' capital works in progress ', 38), ('construction in progress ', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress ', 40), (' WIP', 33), (' work in progress ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 42), (' capital works in progress ', 38), ('construction in progress ', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 42), (' capital works in progress ', 38), ('construction in progress ', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress ', 29), (' work in progress ', 15), (' WIP', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 42), (' capital works in progress ', 38), ('construction in progress ', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 42), (' capital works in progress ', 38), ('construction in progress ', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation depreciation charge for the year , res_fuzz_match = [(' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38), (' WIP', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 42), (' capital works in progress ', 38), ('construction in progress ', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation disposals , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 43), (' work in progress ', 38), (' capital works in progress ', 36)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 42), (' capital works in progress ', 38), ('construction in progress ', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 31 march 2023 , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 28), (' capital works in progress ', 27), (' work in progress ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 42), (' capital works in progress ', 38), ('construction in progress ', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' capital works in progress ', 44), ('construction in progress ', 39), (' WIP', 33), (' work in progress ', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 42), (' capital works in progress ', 38), ('construction in progress ', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at: 31 march 2023 , res_fuzz_match = [(' capital works in progress ', 39), ('construction in progress ', 33), (' WIP', 33), (' work in progress ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 42), (' capital works in progress ', 38), ('construction in progress ', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress ', 35), (' WIP', 33), (' work in progress ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress ', 40), (' WIP', 33), (' work in progress ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress ', 29), (' work in progress ', 15), (' WIP', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation depreciation charge for the year , res_fuzz_match = [(' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38), (' WIP', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation disposals , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 43), (' work in progress ', 38), (' capital works in progress ', 36)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 31 march 2023 , res_fuzz_match = [(' WIP', 33), ('construction in progress ', 28), (' capital works in progress ', 27), (' work in progress ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' capital works in progress ', 44), ('construction in progress ', 39), (' WIP', 33), (' work in progress ', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at: 31 march 2023 , res_fuzz_match = [(' capital works in progress ', 39), ('construction in progress ', 33), (' WIP', 33), (' work in progress ', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress ', 40), (' work in progress ', 20), (' WIP', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('tangible assets', 58)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 80, 'value': 229379.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['14'], 'line_item_value': [229379.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('tangible assets', 58)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 80, 'value': 201071.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['14'], 'line_item_value': [201071.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 23), ('goodwill ', 14)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 38), ('goodwill ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' intangible asset', 100), (' goodwill on consolidation ', 25), ('goodwill ', 14)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' intangible asset', 70), (' goodwill on consolidation ', 20), ('goodwill ', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' intangible asset', 58), ('goodwill ', 29), (' goodwill on consolidation ', 27)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' intangible asset', 64), (' goodwill on consolidation ', 27), ('goodwill ', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 229379.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['14'], 'line_item_value': [229379.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 23), ('goodwill ', 14)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 38), ('goodwill ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' intangible asset', 100), (' goodwill on consolidation ', 25), ('goodwill ', 14)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' intangible asset', 70), (' goodwill on consolidation ', 20), ('goodwill ', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' intangible asset', 58), ('goodwill ', 29), (' goodwill on consolidation ', 27)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' intangible asset', 64), (' goodwill on consolidation ', 27), ('goodwill ', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 201071.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['14'], 'line_item_value': [201071.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' goodwill on consolidation', 40), ('goodwill ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('goodwill ', 43), (' goodwill on consolidation', 36)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = amortisation balance at 1 april 2022 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = amortisation amortisation charge for the year , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = amortisation disposals , res_fuzz_match = [(' goodwill on consolidation', 36), ('goodwill ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = amortisation balance at 31 march 2023 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [(' goodwill on consolidation', 25), ('goodwill ', 14)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['Other intangibles ', ' development and software ', ' software ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible assets under development ', 62), ('intangible assets ', 58), (' intangible under development ', 38), ('property plant equipment', 38), (' plant property equipment', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('property plant equipment', 80), (' plant property equipment', 60), ('intangible assets ', 50), (' intangible under development ', 49), (' intangible assets under development ', 42)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible assets ', 100), (' intangible assets under development ', 100), (' intangible under development ', 67), (' plant property equipment', 42), ('property plant equipment', 42)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets ', 70), ('property plant equipment', 40), (' intangible under development ', 33), (' intangible assets under development ', 33), (' plant property equipment', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 53), ('property plant equipment', 33), (' intangible under development ', 27), (' plant property equipment', 27)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('intangible assets ', 64), (' intangible assets under development ', 64), (' plant property equipment', 45), ('property plant equipment', 45), (' intangible under development ', 36)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 2361369.0, 'line_item_label': ['Property, plant and equipment', 'Intangible assets'], 'note_numbers': ['13', '14'], 'line_item_value': [2131990.0, 229379.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible assets under development ', 62), ('intangible assets ', 58), (' intangible under development ', 38), ('property plant equipment', 38), (' plant property equipment', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('property plant equipment', 80), (' plant property equipment', 60), ('intangible assets ', 50), (' intangible under development ', 49), (' intangible assets under development ', 42)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible assets ', 100), (' intangible assets under development ', 100), (' intangible under development ', 67), (' plant property equipment', 42), ('property plant equipment', 42)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets ', 70), ('property plant equipment', 40), (' intangible under development ', 33), (' intangible assets under development ', 33), (' plant property equipment', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 53), ('property plant equipment', 33), (' intangible under development ', 27), (' plant property equipment', 27)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('intangible assets ', 64), (' intangible assets under development ', 64), (' plant property equipment', 45), ('property plant equipment', 45), (' intangible under development ', 36)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 2045448.0, 'line_item_label': ['Property, plant and equipment', 'Intangible assets'], 'note_numbers': ['13', '14'], 'line_item_value': [1844377.0, 201071.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['Other intangibles ', ' development and software ', ' software ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' development and software ', 53), (' mining rights ', 50), (' computer software ', 36), ('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' development and software ', 53), (' mining rights ', 50), (' computer software ', 36), ('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' development and software ', 53), (' mining rights ', 50), (' computer software ', 36), ('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' development and software ', 53), (' mining rights ', 50), (' computer software ', 36), ('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 1 april 2022 , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' software ', 29), (' computer software ', 29), (' consumer contracts ', 27)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' development and software ', 53), (' mining rights ', 50), (' computer software ', 36), ('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation depreciation charge for the year , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 42), (' mining rights ', 40), (' computer software ', 36), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' development and software ', 53), (' mining rights ', 50), (' computer software ', 36), ('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation disposals , res_fuzz_match = [(' development and software ', 50), (' water licenses', 42), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), (' consumer contracts ', 14)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' development and software ', 53), (' mining rights ', 50), (' computer software ', 36), ('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 31 march 2023 , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' development and software ', 53), (' mining rights ', 50), (' computer software ', 36), ('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' development and software ', 36), (' water licenses', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' development and software ', 53), (' mining rights ', 50), (' computer software ', 36), ('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at: 31 march 2023 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 35), (' water licenses', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' development and software ', 53), (' mining rights ', 50), (' computer software ', 36), ('Other intangibles ', 33), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' development and software ', 38), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25), (' consumer contracts ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' development and software ', 38), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25), (' consumer contracts ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' development and software ', 38), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25), (' consumer contracts ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' development and software ', 38), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25), (' consumer contracts ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 1 april 2022 , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' software ', 29), (' computer software ', 29), (' consumer contracts ', 27)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' development and software ', 38), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25), (' consumer contracts ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation depreciation charge for the year , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 42), (' mining rights ', 40), (' computer software ', 36), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' development and software ', 38), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25), (' consumer contracts ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation disposals , res_fuzz_match = [(' development and software ', 50), (' water licenses', 42), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), (' consumer contracts ', 14)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' development and software ', 38), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25), (' consumer contracts ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 31 march 2023 , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' development and software ', 38), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25), (' consumer contracts ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' development and software ', 36), (' water licenses', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' development and software ', 38), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25), (' consumer contracts ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at: 31 march 2023 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 35), (' water licenses', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' development and software ', 38), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25), (' consumer contracts ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 1 april 2022 , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' software ', 29), (' computer software ', 29), (' consumer contracts ', 27)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation depreciation charge for the year , res_fuzz_match = [('Other intangibles ', 50), (' development and software ', 42), (' mining rights ', 40), (' computer software ', 36), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation disposals , res_fuzz_match = [(' development and software ', 50), (' water licenses', 42), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), (' consumer contracts ', 14)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 31 march 2023 , res_fuzz_match = [(' development and software ', 47), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' development and software ', 36), (' water licenses', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at: 31 march 2023 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 35), (' water licenses', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['Other intangibles ', ' development and software ', ' software ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = amortisation balance at 1 april 2022 , res_fuzz_match = [('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = amortisation amortisation charge for the year , res_fuzz_match = [('Other intangibles ', 50), (' software ', 43), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 37), (' computer software ', 36), (' water licenses', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = amortisation disposals , res_fuzz_match = [(' mining rights ', 40), (' development and software ', 36), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' software ', 29), (' consumer contracts ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = amortisation balance at 31 march 2023 , res_fuzz_match = [('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' consumer contracts ', 33), (' water licenses', 33), (' software ', 29), (' computer software ', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' development and software ', 36), (' water licenses', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 35), (' water licenses', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('donations', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('donations', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' investments accounted for using the equity method', 55), ('joint ventures and associates', 45), (' investment in joint venture', 45), (' investment in associate', 45), ('derivative financial instruments', 36), ('investment', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' investments accounted for using the equity method', 55), ('joint ventures and associates', 45), (' investment in joint venture', 45), (' investment in associate', 45), ('derivative financial instruments', 36), ('investment', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('deferred tax assets', 62), ('deferred charges', 36), ('deferred tax', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 7815047.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['15'], 'line_item_value': [7815047.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('deferred tax assets', 62), ('deferred charges', 36), ('deferred tax', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 6903193.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['15'], 'line_item_value': [6903193.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none trade and other receivables , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none inventories , res_fuzz_match = [('deferred tax assets', 29), (' deferred tax balances', 21)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none leases , res_fuzz_match = [('deferred tax assets', 44), (' deferred tax balances', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none trade and other payables , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none employee benefits , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none other items , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none tax asset tsl (liabilities) , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 44)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none trade and other receivables , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = recognition in profit or loss $ , res_fuzz_match = [('deferred tax assets', 34), (' deferred tax balances', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none inventories , res_fuzz_match = [('deferred tax assets', 29), (' deferred tax balances', 21)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = recognition in profit or loss $ , res_fuzz_match = [('deferred tax assets', 34), (' deferred tax balances', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none leases , res_fuzz_match = [('deferred tax assets', 44), (' deferred tax balances', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = recognition in profit or loss $ , res_fuzz_match = [('deferred tax assets', 34), (' deferred tax balances', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none trade and other payables , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = recognition in profit or loss $ , res_fuzz_match = [('deferred tax assets', 34), (' deferred tax balances', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none employee benefits , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = recognition in profit or loss $ , res_fuzz_match = [('deferred tax assets', 34), (' deferred tax balances', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = recognition in profit or loss $ , res_fuzz_match = [('deferred tax assets', 34), (' deferred tax balances', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none other items , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = recognition in profit or loss $ , res_fuzz_match = [('deferred tax assets', 34), (' deferred tax balances', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none tax asset tsl (liabilities) , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 44)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = recognition in profit or loss $ , res_fuzz_match = [('deferred tax assets', 34), (' deferred tax balances', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none trade and other receivables , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = net balance 31 march $ , res_fuzz_match = [(' deferred tax balances', 58), ('deferred tax assets', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none inventories , res_fuzz_match = [('deferred tax assets', 29), (' deferred tax balances', 21)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = net balance 31 march $ , res_fuzz_match = [(' deferred tax balances', 58), ('deferred tax assets', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none leases , res_fuzz_match = [('deferred tax assets', 44), (' deferred tax balances', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = net balance 31 march $ , res_fuzz_match = [(' deferred tax balances', 58), ('deferred tax assets', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none trade and other payables , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = net balance 31 march $ , res_fuzz_match = [(' deferred tax balances', 58), ('deferred tax assets', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none employee benefits , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = net balance 31 march $ , res_fuzz_match = [(' deferred tax balances', 58), ('deferred tax assets', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = net balance 31 march $ , res_fuzz_match = [(' deferred tax balances', 58), ('deferred tax assets', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none other items , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = net balance 31 march $ , res_fuzz_match = [(' deferred tax balances', 58), ('deferred tax assets', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none tax asset tsl (liabilities) , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 44)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = net balance 31 march $ , res_fuzz_match = [(' deferred tax balances', 58), ('deferred tax assets', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' other assets', 100), (' other non-current assets', 73), (' other non-current assets', 73), (' leased assets', 67), (' financial assets', 50), (' exploration and evaluation expenditure', 32), (' loan receivables', 27), (' leases', 27), ('non-current', 22)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 5], 'score': 100, 'value': 383780.0, 'line_item_label': ['Non-current assets', 'Intangible assets', 'Other assets'], 'note_numbers': [nan, '14', '16'], 'line_item_value': [0.0, 229379.0, 154401.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' other assets', 100), (' other non-current assets', 73), (' other non-current assets', 73), (' leased assets', 67), (' financial assets', 50), (' exploration and evaluation expenditure', 32), (' loan receivables', 27), (' leases', 27), ('non-current', 22)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 5], 'score': 100, 'value': 336468.0, 'line_item_label': ['Non-current assets', 'Intangible assets', 'Other assets'], 'note_numbers': [nan, '14', '16'], 'line_item_value': [0.0, 201071.0, 135397.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' total properties', 50), ('finance receivables', 48), (' allowance for expected credit losses', 41), (' exploration and evaluation expenditure', 41), (' warehouse and office equipment', 41), (' electricity derivatives at fair value', 35), (' defined benefit plans', 35), (' motor vehicles', 33), (' right-of-use-assets', 13)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' allowance for expected credit losses', 60), (' electricity derivatives at fair value', 50), (' warehouse and office equipment', 50), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 30), (' defined benefit plans', 30), (' total properties', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' allowance for expected credit losses', 45), (' electricity derivatives at fair value', 45), (' total properties', 45), (' warehouse and office equipment', 45), (' right-of-use-assets', 36), (' motor vehicles', 36), ('finance receivables', 27), (' defined benefit plans', 27), (' exploration and evaluation expenditure', 27)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' warehouse and office equipment', 41), (' electricity derivatives at fair value', 35), (' exploration and evaluation expenditure', 35), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 13)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = amortisation balance at 1 april 2022 , res_fuzz_match = [('finance receivables', 48), (' exploration and evaluation expenditure', 45), (' total properties', 43), (' motor vehicles', 42), (' allowance for expected credit losses', 40), (' warehouse and office equipment', 40), (' defined benefit plans', 39), (' electricity derivatives at fair value', 35), (' right-of-use-assets', 27)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = amortisation amortisation charge for the year , res_fuzz_match = [(' total properties', 43), (' motor vehicles', 42), (' allowance for expected credit losses', 39), (' warehouse and office equipment', 38), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), ('finance receivables', 31), (' defined benefit plans', 28)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = amortisation disposals , res_fuzz_match = [(' allowance for expected credit losses', 43), (' warehouse and office equipment', 43), (' motor vehicles', 42), (' total properties', 38), (' right-of-use-assets', 36), (' electricity derivatives at fair value', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = amortisation balance at 31 march 2023 , res_fuzz_match = [('finance receivables', 48), (' motor vehicles', 42), (' warehouse and office equipment', 40), (' total properties', 36), (' allowance for expected credit losses', 35), (' exploration and evaluation expenditure', 35), (' defined benefit plans', 33), (' electricity derivatives at fair value', 30), (' right-of-use-assets', 27)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' motor vehicles', 52), (' electricity derivatives at fair value', 50), (' total properties', 43), ('finance receivables', 40), (' allowance for expected credit losses', 39), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 39), (' warehouse and office equipment', 39), (' right-of-use-assets', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 44), (' motor vehicles', 43), ('finance receivables', 40), (' warehouse and office equipment', 39), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), (' total properties', 29), (' allowance for expected credit losses', 28)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [878898.0, 82039.0, -30588.0, 930349.0, 649519.0, 108758.0, -28999.0, 729278.0, 229379.0, 201071.0], 'label': ['Total $', 'Total $', 'Total $', 'Total $', 'Total $', 'Total $', 'Total $', 'Total $', 'Total $', 'Total $'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none security deposits , res_fuzz_match = [(' exploration and evaluation expenditure', 50), ('finance receivables', 46), (' allowance for expected credit losses', 44), (' electricity derivatives at fair value', 44), (' defined benefit plans', 33), (' warehouse and office equipment', 33), (' motor vehicles', 33), (' total properties', 29), (' right-of-use-assets', 27)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none security deposits , res_fuzz_match = [(' exploration and evaluation expenditure', 50), ('finance receivables', 46), (' allowance for expected credit losses', 44), (' electricity derivatives at fair value', 44), (' defined benefit plans', 33), (' warehouse and office equipment', 33), (' motor vehicles', 33), (' total properties', 29), (' right-of-use-assets', 27)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft ']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft '] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' interest bearing liabilites ', 61), (' loans and borrowings ', 34), (' cash and cash equivalents ', 29), (' cash overdraft ', 29), ('  leases ', 22), ('short term debt ', 21), (' short-term debt ', 21), (' shortterm debt ', 21), (' bank overdraft ', 21), (' borrowings ', 20), (' shortterm borrowings ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' interest bearing liabilites ', 59), (' lease liabilities ', 55), (' bank overdraft ', 33), (' loans and borrowings ', 32), (' short-term debt ', 28), (' shortterm debt ', 28), (' cash and cash equivalents ', 28), ('short term debt ', 27), ('  leases ', 23), (' cash overdraft ', 22), (' shortterm borrowings ', 21), (' borrowings ', 14)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' cash overdraft ', 32), (' loans and borrowings ', 31), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [(' short-term debt ', 40), (' shortterm debt ', 40), ('short term debt ', 38), (' loans and borrowings ', 31), (' shortterm borrowings ', 30), (' interest bearing liabilites ', 30), (' lease liabilities ', 27), (' borrowings ', 24), (' cash and cash equivalents ', 19), (' bank overdraft ', 16), (' cash overdraft ', 16), ('  leases ', 13)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' interest bearing liabilites ', 37), (' loans and borrowings ', 32), (' cash and cash equivalents ', 32), (' lease liabilities ', 30), (' bank overdraft ', 27), (' cash overdraft ', 27), (' short-term debt ', 20), (' shortterm debt ', 20), ('  leases ', 20), ('short term debt ', 19), (' shortterm borrowings ', 19), (' borrowings ', 9)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 1126184.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': [nan], 'line_item_value': [1126184.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft '] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' interest bearing liabilites ', 61), (' loans and borrowings ', 34), (' cash and cash equivalents ', 29), (' cash overdraft ', 29), ('  leases ', 22), ('short term debt ', 21), (' short-term debt ', 21), (' shortterm debt ', 21), (' bank overdraft ', 21), (' borrowings ', 20), (' shortterm borrowings ', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' interest bearing liabilites ', 59), (' lease liabilities ', 55), (' bank overdraft ', 33), (' loans and borrowings ', 32), (' short-term debt ', 28), (' shortterm debt ', 28), (' cash and cash equivalents ', 28), ('short term debt ', 27), ('  leases ', 23), (' cash overdraft ', 22), (' shortterm borrowings ', 21), (' borrowings ', 14)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' cash overdraft ', 32), (' loans and borrowings ', 31), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [(' short-term debt ', 40), (' shortterm debt ', 40), ('short term debt ', 38), (' loans and borrowings ', 31), (' shortterm borrowings ', 30), (' interest bearing liabilites ', 30), (' lease liabilities ', 27), (' borrowings ', 24), (' cash and cash equivalents ', 19), (' bank overdraft ', 16), (' cash overdraft ', 16), ('  leases ', 13)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' interest bearing liabilites ', 37), (' loans and borrowings ', 32), (' cash and cash equivalents ', 32), (' lease liabilities ', 30), (' bank overdraft ', 27), (' cash overdraft ', 27), (' short-term debt ', 20), (' shortterm debt ', 20), ('  leases ', 20), ('short term debt ', 19), (' shortterm borrowings ', 19), (' borrowings ', 9)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 1252188.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': [nan], 'line_item_value': [1252188.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', '  accounts payable - trade ', ' Related party payables ', ' trade payables - related parties']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('trade and other payables', 36), ('other trade payables', 35), ('trade payable', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [('trade and other payables', 24), ('other trade payables', 21), ('trade payable', 17)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('other trade payables', 65), ('trade payable', 64), ('trade and other payables', 63)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 111939973.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['17'], 'line_item_value': [111939973.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('trade and other payables', 36), ('other trade payables', 35), ('trade payable', 29)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [('trade and other payables', 24), ('other trade payables', 21), ('trade payable', 17)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('other trade payables', 65), ('trade payable', 64), ('trade and other payables', 63)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 88893430.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['17'], 'line_item_value': [88893430.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', '  accounts payable - trade ', ' Related party payables ', ' trade payables - related parties'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [(' trade payables ', 100), (' other trade payables ', 82), (' trade payables - other parties ', 71), (' trade payables - related parties', 71), (' trade and other payables ', 65), (' amounts payable to controlling entity ', 59), ('  accounts payable - trade ', 59), (' Related party payables ', 59), ('trade creditors ', 46), (' payables to related parties ', 36)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none accruals and other payables , res_fuzz_match = [(' trade and other payables ', 86), (' trade payables ', 75), (' other trade payables ', 67), (' Related party payables ', 61), (' trade payables - other parties ', 58), ('  accounts payable - trade ', 50), (' trade payables - related parties', 46), (' payables to related parties ', 44), ('trade creditors ', 43), (' amounts payable to controlling entity ', 39)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none goods and services tax , res_fuzz_match = [(' trade and other payables ', 45), ('trade creditors ', 43), (' other trade payables ', 39), (' Related party payables ', 36), (' trade payables ', 33), (' trade payables - other parties ', 33), (' amounts payable to controlling entity ', 33), ('  accounts payable - trade ', 32), (' trade payables - related parties', 30), (' payables to related parties ', 28)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' amounts payable to controlling entity ', 50), (' other trade payables ', 50), ('trade creditors ', 40), (' trade and other payables ', 40), (' trade payables ', 40), (' trade payables - other parties ', 40), ('  accounts payable - trade ', 40), (' payables to related parties ', 30), (' Related party payables ', 30), (' trade payables - related parties', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [(' trade payables ', 100), (' other trade payables ', 82), (' trade payables - other parties ', 71), (' trade payables - related parties', 71), (' trade and other payables ', 65), (' amounts payable to controlling entity ', 59), ('  accounts payable - trade ', 59), (' Related party payables ', 59), ('trade creditors ', 46), (' payables to related parties ', 36)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none accruals and other payables , res_fuzz_match = [(' trade and other payables ', 86), (' trade payables ', 75), (' other trade payables ', 67), (' Related party payables ', 61), (' trade payables - other parties ', 58), ('  accounts payable - trade ', 50), (' trade payables - related parties', 46), (' payables to related parties ', 44), ('trade creditors ', 43), (' amounts payable to controlling entity ', 39)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none goods and services tax , res_fuzz_match = [(' trade and other payables ', 45), ('trade creditors ', 43), (' other trade payables ', 39), (' Related party payables ', 36), (' trade payables ', 33), (' trade payables - other parties ', 33), (' amounts payable to controlling entity ', 33), ('  accounts payable - trade ', 32), (' trade payables - related parties', 30), (' payables to related parties ', 28)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' amounts payable to controlling entity ', 50), (' other trade payables ', 50), ('trade creditors ', 40), (' trade and other payables ', 40), (' trade payables ', 40), (' trade payables - other parties ', 40), ('  accounts payable - trade ', 40), (' payables to related parties ', 30), (' Related party payables ', 30), (' trade payables - related parties', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 4, 5], 'score': [100, 86, 100, 86], 'value': [49997418.0, 36957838.0, 77003710.0, 31721573.0], 'label': ['None Trade payables', 'None Accruals and other payables', 'None Trade payables', 'None Accruals and other payables'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses ', ' interest accrued']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('trade and other payables', 36)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('trade and other payables', 14)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [('trade and other payables', 24)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('trade and other payables', 63)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 111939973.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['17'], 'line_item_value': [111939973.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('trade and other payables', 36)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('trade and other payables', 14)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [('trade and other payables', 24)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('trade and other payables', 63)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 88893430.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['17'], 'line_item_value': [88893430.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['accrued expenses ', ' interest accrued'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [(' interest accrued', 43), ('accrued expenses ', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none accruals and other payables , res_fuzz_match = [('accrued expenses ', 58), (' interest accrued', 57)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none goods and services tax , res_fuzz_match = [(' interest accrued', 36), ('accrued expenses ', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' interest accrued', 40), ('accrued expenses ', 10)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [(' interest accrued', 43), ('accrued expenses ', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none accruals and other payables , res_fuzz_match = [('accrued expenses ', 58), (' interest accrued', 57)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none goods and services tax , res_fuzz_match = [(' interest accrued', 36), ('accrued expenses ', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' interest accrued', 40), ('accrued expenses ', 10)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities ', 71), (' income tax payable ', 43), (' tax ', 33), (' provision', 17)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('current tax liabilities ', 56), (' income tax payable ', 38), (' tax ', 33), (' provision', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' tax ', 33), (' provision', 17)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [(' income tax payable ', 45), (' provision', 33), ('current tax liabilities ', 18), (' tax ', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' income tax payable ', 100), (' tax ', 100), ('current tax liabilities ', 56), (' provision', 17)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 6], 'score': 100, 'value': 3541792.0, 'line_item_label': ['Provision', 'Income tax payable'], 'note_numbers': ['19', nan], 'line_item_value': [2972019.0, 569773.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities ', 71), (' income tax payable ', 43), (' tax ', 33), (' provision', 17)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('current tax liabilities ', 56), (' income tax payable ', 38), (' tax ', 33), (' provision', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' tax ', 33), (' provision', 17)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [(' income tax payable ', 45), (' provision', 33), ('current tax liabilities ', 18), (' tax ', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' income tax payable ', 100), (' tax ', 100), ('current tax liabilities ', 56), (' provision', 17)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 6], 'score': 100, 'value': 3300642.0, 'line_item_label': ['Provision', 'Income tax payable'], 'note_numbers': ['19', nan], 'line_item_value': [3300642.0, 0.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax ', 50), (' tax receivable/payable', 40)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax ', 50), (' tax receivable/payable', 40)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax ', 50), (' tax receivable/payable', 40)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none warranties , res_fuzz_match = [('income tax (refundable)/payable ', 38), (' provision for income tax ', 31), (' tax receivable/payable', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none $ , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax ', 50), (' tax receivable/payable', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax ', 35), (' tax receivable/payable', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none provisions made during the year , res_fuzz_match = [(' provision for income tax ', 50), (' tax receivable/payable', 47), ('income tax (refundable)/payable ', 41)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none provisions used during the year , res_fuzz_match = [(' provision for income tax ', 50), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = provisions reversed during the year balance at 31 march 2023 , res_fuzz_match = [(' provision for income tax ', 55), (' tax receivable/payable', 47), ('income tax (refundable)/payable ', 35)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax ', 50), (' tax receivable/payable', 40)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax ', 50), (' tax receivable/payable', 40)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax ', 50), (' tax receivable/payable', 40)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none warranties , res_fuzz_match = [('income tax (refundable)/payable ', 38), (' provision for income tax ', 31), (' tax receivable/payable', 31)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none $ , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax ', 50), (' tax receivable/payable', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax ', 35), (' tax receivable/payable', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none provisions made during the year , res_fuzz_match = [(' provision for income tax ', 50), (' tax receivable/payable', 47), ('income tax (refundable)/payable ', 41)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none provisions used during the year , res_fuzz_match = [(' provision for income tax ', 50), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = provisions reversed during the year balance at 31 march 2023 , res_fuzz_match = [(' provision for income tax ', 55), (' tax receivable/payable', 47), ('income tax (refundable)/payable ', 35)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' employee benefits', 81), (' financial liabilities', 50), (' foreign exchange contract liability', 49), ('other current liabilities', 48), (' other current liabilities', 48), (' other financial liabilities', 43), (' trade and other payables', 36), (' customer deposits', 33), (' deferred revenue', 29), ('provisions', 21)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [(' deferred revenue', 61), (' financial liabilities', 32), (' other financial liabilities', 32), (' employee benefits', 31), ('other current liabilities', 26), (' other current liabilities', 26), ('provisions', 24), (' trade and other payables', 24), (' customer deposits', 24), (' foreign exchange contract liability', 24)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' trade and other payables', 63), (' other financial liabilities', 50), (' financial liabilities', 47), (' customer deposits', 40), ('other current liabilities', 39), (' other current liabilities', 39), (' foreign exchange contract liability', 30), (' employee benefits', 26), ('provisions', 9), (' deferred revenue', 7)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3], 'score': 100, 'value': 118199061.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Employee benefit liabilities', 'Provision'], 'note_numbers': [nan, '17', '18', '19'], 'line_item_value': [0.0, 111939973.0, 3287069.0, 2972019.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' employee benefits', 81), (' financial liabilities', 50), (' foreign exchange contract liability', 49), ('other current liabilities', 48), (' other current liabilities', 48), (' other financial liabilities', 43), (' trade and other payables', 36), (' customer deposits', 33), (' deferred revenue', 29), ('provisions', 21)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [(' deferred revenue', 61), (' financial liabilities', 32), (' other financial liabilities', 32), (' employee benefits', 31), ('other current liabilities', 26), (' other current liabilities', 26), ('provisions', 24), (' trade and other payables', 24), (' customer deposits', 24), (' foreign exchange contract liability', 24)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' trade and other payables', 63), (' other financial liabilities', 50), (' financial liabilities', 47), (' customer deposits', 40), ('other current liabilities', 39), (' other current liabilities', 39), (' foreign exchange contract liability', 30), (' employee benefits', 26), ('provisions', 9), (' deferred revenue', 7)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3], 'score': 100, 'value': 94970892.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Employee benefit liabilities', 'Provision'], 'note_numbers': [nan, '17', '18', '19'], 'line_item_value': [0.0, 88893430.0, 2776820.0, 3300642.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [(' gst payables', 70), (' share of joint venture payables', 65), (' derivative contracts - at fair value', 53), (' loan payable to relayed party under tax funding agreement', 53), (' contract liabilites - current', 53), ('other creditors and accruals', 47), (' other related parties', 47), (' loans from related party', 47), (' gst payable and accruals', 47), (' employee benefits - payroll', 47), (' gst liabilities', 42), (' secured long-term bank loans', 41), (' current - liability for annual and long service leave', 41), (' abandonment and decommissioning costs', 41), (' total current employee benefits', 41), (' rebates', 40), (' other', 40), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 35), (' forward exchange contracts', 35), (' gst', 33), (' make good provisions', 31), (' restructuring', 30), (' employee benefits - current', 29), (' provisions - current', 29), (' provision for associate funding', 29), (' warranty', 25), (' ultimate parent entity', 24)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none accruals and other payables , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' share of joint venture payables', 57), (' current - liability for annual and long service leave', 55), (' gst payable and accruals', 50), (' other related parties', 47), ('other creditors and accruals', 46), (' forward exchange contracts', 46), (' loan payable to relayed party under tax funding agreement', 45), (' other creditors', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' employee benefits - payroll', 41), (' gst liabilities', 40), (' rebates', 40), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' contract liabilites - current', 36), (' abandonment and decommissioning costs', 36), (' total current employee benefits', 34), (' gst', 33), (' provision for associate funding', 32), (' arising from service contracts', 32), (' make good provisions', 31), (' restructuring', 30), (' employee benefits - current', 26)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none goods and services tax , res_fuzz_match = [(' current - liability for annual and long service leave', 58), (' make good provisions', 56), (' abandonment and decommissioning costs', 50), (' arising from service contracts', 50), (' loan payable to relayed party under tax funding agreement', 46), (' loans from related party', 43), ('other creditors and accruals', 42), (' restructuring', 40), (' other', 40), (' forward exchange contracts', 39), (' share of joint venture payables', 38), (' ultimate parent entity', 37), (' employee benefits - payroll', 37), (' gst payable and accruals', 36), (' provisions - current', 36), (' provision for associate funding', 36), (' other related parties', 35), (' employee benefits - current', 35), (' derivative contracts - at fair value', 34), (' secured long-term bank loans', 33), (' gst', 33), (' total current employee benefits', 33), (' gst payables', 30), (' gst liabilities', 30), (' other creditors', 29), (' other creditors', 29), (' contract liabilites - current', 29), (' other creditors', 29), (' warranty', 25), (' rebates', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [(' gst payables', 70), (' share of joint venture payables', 65), (' derivative contracts - at fair value', 53), (' loan payable to relayed party under tax funding agreement', 53), (' contract liabilites - current', 53), ('other creditors and accruals', 47), (' other related parties', 47), (' loans from related party', 47), (' gst payable and accruals', 47), (' employee benefits - payroll', 47), (' gst liabilities', 42), (' secured long-term bank loans', 41), (' current - liability for annual and long service leave', 41), (' abandonment and decommissioning costs', 41), (' total current employee benefits', 41), (' rebates', 40), (' other', 40), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 35), (' forward exchange contracts', 35), (' gst', 33), (' make good provisions', 31), (' restructuring', 30), (' employee benefits - current', 29), (' provisions - current', 29), (' provision for associate funding', 29), (' warranty', 25), (' ultimate parent entity', 24)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none accruals and other payables , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' share of joint venture payables', 57), (' current - liability for annual and long service leave', 55), (' gst payable and accruals', 50), (' other related parties', 47), ('other creditors and accruals', 46), (' forward exchange contracts', 46), (' loan payable to relayed party under tax funding agreement', 45), (' other creditors', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' employee benefits - payroll', 41), (' gst liabilities', 40), (' rebates', 40), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' contract liabilites - current', 36), (' abandonment and decommissioning costs', 36), (' total current employee benefits', 34), (' gst', 33), (' provision for associate funding', 32), (' arising from service contracts', 32), (' make good provisions', 31), (' restructuring', 30), (' employee benefits - current', 26)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none goods and services tax , res_fuzz_match = [(' current - liability for annual and long service leave', 58), (' make good provisions', 56), (' abandonment and decommissioning costs', 50), (' arising from service contracts', 50), (' loan payable to relayed party under tax funding agreement', 46), (' loans from related party', 43), ('other creditors and accruals', 42), (' restructuring', 40), (' other', 40), (' forward exchange contracts', 39), (' share of joint venture payables', 38), (' ultimate parent entity', 37), (' employee benefits - payroll', 37), (' gst payable and accruals', 36), (' provisions - current', 36), (' provision for associate funding', 36), (' other related parties', 35), (' employee benefits - current', 35), (' derivative contracts - at fair value', 34), (' secured long-term bank loans', 33), (' gst', 33), (' total current employee benefits', 33), (' gst payables', 30), (' gst liabilities', 30), (' other creditors', 29), (' other creditors', 29), (' contract liabilites - current', 29), (' other creditors', 29), (' warranty', 25), (' rebates', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': [100, 100], 'value': [36957838.0, 31721573.0], 'label': ['None Accruals and other payables', 'None Accruals and other payables'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = current employee benefits , res_fuzz_match = [(' total current employee benefits', 100), (' employee benefits - payroll', 81), (' employee benefits - current', 79), (' rebates', 60), (' current - liability for annual and long service leave', 52), (' warranty', 50), (' ultimate parent entity', 49), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' secured long-term bank loans', 44), (' provisions - current', 43), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), (' other related parties', 35), (' loan payable to relayed party under tax funding agreement', 35), (' contract liabilites - current', 35), (' forward exchange contracts', 35), (' loans from related party', 33), (' gst', 33), ('other creditors and accruals', 31), (' abandonment and decommissioning costs', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits , res_fuzz_match = [(' total current employee benefits', 87), (' employee benefits - payroll', 81), (' employee benefits - current', 79), (' ultimate parent entity', 47), (' other creditors', 43), (' secured long-term bank loans', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' gst payables', 40), (' rebates', 40), (' other', 40), (' current - liability for annual and long service leave', 39), (' loans from related party', 38), (' other related parties', 35), (' loan payable to relayed party under tax funding agreement', 35), (' contract liabilites - current', 35), (' share of joint venture payables', 35), (' abandonment and decommissioning costs', 35), (' forward exchange contracts', 35), (' gst', 33), ('other creditors and accruals', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' provision for associate funding', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25), (' warranty', 25), (' gst payable and accruals', 23), (' restructuring', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = current employee benefits , res_fuzz_match = [(' total current employee benefits', 100), (' employee benefits - payroll', 81), (' employee benefits - current', 79), (' rebates', 60), (' current - liability for annual and long service leave', 52), (' warranty', 50), (' ultimate parent entity', 49), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' secured long-term bank loans', 44), (' provisions - current', 43), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), (' other related parties', 35), (' loan payable to relayed party under tax funding agreement', 35), (' contract liabilites - current', 35), (' forward exchange contracts', 35), (' loans from related party', 33), (' gst', 33), ('other creditors and accruals', 31), (' abandonment and decommissioning costs', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits , res_fuzz_match = [(' total current employee benefits', 87), (' employee benefits - payroll', 81), (' employee benefits - current', 79), (' ultimate parent entity', 47), (' other creditors', 43), (' secured long-term bank loans', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' gst payables', 40), (' rebates', 40), (' other', 40), (' current - liability for annual and long service leave', 39), (' loans from related party', 38), (' other related parties', 35), (' loan payable to relayed party under tax funding agreement', 35), (' contract liabilites - current', 35), (' share of joint venture payables', 35), (' abandonment and decommissioning costs', 35), (' forward exchange contracts', 35), (' gst', 33), ('other creditors and accruals', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' provision for associate funding', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25), (' warranty', 25), (' gst payable and accruals', 23), (' restructuring', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3], 'score': [100, 87, 100, 87], 'value': [2776820.0, 361290.0, 3287069.0, 363551.0], 'label': ['Current Employee benefits', 'Non-current Employee benefits', 'Current Employee benefits', 'Non-current Employee benefits'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none warranties , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' employee benefits - current', 54), (' provisions - current', 48), (' ultimate parent entity', 46), (' other related parties', 46), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' loans from related party', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' abandonment and decommissioning costs', 46), (' forward exchange contracts', 46), (' total current employee benefits', 46), (' arising from service contracts', 40), (' other', 40), ('other creditors and accruals', 38), (' other creditors', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' share of joint venture payables', 38), (' employee benefits - payroll', 38), (' other creditors', 38), (' gst', 33), (' provision for associate funding', 31), (' make good provisions', 31), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none $ , res_fuzz_match = [(' abandonment and decommissioning costs', 75), (' ultimate parent entity', 50), (' other related parties', 50), (' other creditors', 50), (' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' other creditors', 50), (' employee benefits - current', 50), (' current - liability for annual and long service leave', 50), (' contract liabilites - current', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' arising from service contracts', 50), (' forward exchange contracts', 50), (' other creditors', 50), (' other', 50), (' total current employee benefits', 50), ('other creditors and accruals', 25), (' loans from related party', 25), (' gst payable and accruals', 25), (' provisions - current', 25), (' provision for associate funding', 25), (' make good provisions', 25), (' rebates', 25), (' warranty', 25), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0), (' restructuring', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 53), (' secured long-term bank loans', 53), (' loans from related party', 48), ('other creditors and accruals', 47), (' derivative contracts - at fair value', 47), (' loan payable to relayed party under tax funding agreement', 47), (' gst payable and accruals', 47), (' current - liability for annual and long service leave', 47), (' contract liabilites - current', 47), (' employee benefits - payroll', 47), (' abandonment and decommissioning costs', 47), (' employee benefits - current', 41), (' make good provisions', 40), (' gst liabilities', 40), (' other', 40), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' share of joint venture payables', 35), (' total current employee benefits', 35), (' gst payables', 30), (' ultimate parent entity', 29), (' provision for associate funding', 29), (' arising from service contracts', 29), (' forward exchange contracts', 29), (' provisions - current', 21), (' restructuring', 20), (' gst', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none provisions made during the year , res_fuzz_match = [(' other', 60), (' provisions - current', 57), (' make good provisions', 50), (' other related parties', 47), (' loan payable to relayed party under tax funding agreement', 47), (' loans from related party', 45), (' provision for associate funding', 45), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' arising from service contracts', 40), (' rebates', 40), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' abandonment and decommissioning costs', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' gst payable and accruals', 36), (' employee benefits - payroll', 36), (' total current employee benefits', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' restructuring', 30), (' warranty', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none provisions used during the year , res_fuzz_match = [(' provisions - current', 64), (' other', 60), (' other related parties', 50), (' make good provisions', 50), (' loan payable to relayed party under tax funding agreement', 48), (' provision for associate funding', 45), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' share of joint venture payables', 40), (' gst payables', 40), (' arising from service contracts', 40), (' rebates', 40), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' current - liability for annual and long service leave', 38), (' ultimate parent entity', 37), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' derivative contracts - at fair value', 34), (' gst', 33), (' gst payable and accruals', 32), (' abandonment and decommissioning costs', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 29), (' warranty', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = provisions reversed during the year balance at 31 march 2023 , res_fuzz_match = [(' provisions - current', 64), (' rebates', 60), (' other', 60), (' secured long-term bank loans', 54), (' gst payable and accruals', 51), (' gst payables', 50), (' provision for associate funding', 50), (' restructuring', 50), (' other related parties', 47), ('other creditors and accruals', 46), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' employee benefits - payroll', 41), (' loan payable to relayed party under tax funding agreement', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' forward exchange contracts', 38), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' contract liabilites - current', 33), (' gst', 33), (' abandonment and decommissioning costs', 31), (' make good provisions', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none warranties , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' employee benefits - current', 54), (' provisions - current', 48), (' ultimate parent entity', 46), (' other related parties', 46), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' loans from related party', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' abandonment and decommissioning costs', 46), (' forward exchange contracts', 46), (' total current employee benefits', 46), (' arising from service contracts', 40), (' other', 40), ('other creditors and accruals', 38), (' other creditors', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' share of joint venture payables', 38), (' employee benefits - payroll', 38), (' other creditors', 38), (' gst', 33), (' provision for associate funding', 31), (' make good provisions', 31), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none $ , res_fuzz_match = [(' abandonment and decommissioning costs', 75), (' ultimate parent entity', 50), (' other related parties', 50), (' other creditors', 50), (' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' other creditors', 50), (' employee benefits - current', 50), (' current - liability for annual and long service leave', 50), (' contract liabilites - current', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' arising from service contracts', 50), (' forward exchange contracts', 50), (' other creditors', 50), (' other', 50), (' total current employee benefits', 50), ('other creditors and accruals', 25), (' loans from related party', 25), (' gst payable and accruals', 25), (' provisions - current', 25), (' provision for associate funding', 25), (' make good provisions', 25), (' rebates', 25), (' warranty', 25), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0), (' restructuring', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 53), (' secured long-term bank loans', 53), (' loans from related party', 48), ('other creditors and accruals', 47), (' derivative contracts - at fair value', 47), (' loan payable to relayed party under tax funding agreement', 47), (' gst payable and accruals', 47), (' current - liability for annual and long service leave', 47), (' contract liabilites - current', 47), (' employee benefits - payroll', 47), (' abandonment and decommissioning costs', 47), (' employee benefits - current', 41), (' make good provisions', 40), (' gst liabilities', 40), (' other', 40), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' share of joint venture payables', 35), (' total current employee benefits', 35), (' gst payables', 30), (' ultimate parent entity', 29), (' provision for associate funding', 29), (' arising from service contracts', 29), (' forward exchange contracts', 29), (' provisions - current', 21), (' restructuring', 20), (' gst', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none provisions made during the year , res_fuzz_match = [(' other', 60), (' provisions - current', 57), (' make good provisions', 50), (' other related parties', 47), (' loan payable to relayed party under tax funding agreement', 47), (' loans from related party', 45), (' provision for associate funding', 45), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' arising from service contracts', 40), (' rebates', 40), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' abandonment and decommissioning costs', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' gst payable and accruals', 36), (' employee benefits - payroll', 36), (' total current employee benefits', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' restructuring', 30), (' warranty', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = none provisions used during the year , res_fuzz_match = [(' provisions - current', 64), (' other', 60), (' other related parties', 50), (' make good provisions', 50), (' loan payable to relayed party under tax funding agreement', 48), (' provision for associate funding', 45), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' share of joint venture payables', 40), (' gst payables', 40), (' arising from service contracts', 40), (' rebates', 40), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' current - liability for annual and long service leave', 38), (' ultimate parent entity', 37), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' derivative contracts - at fair value', 34), (' gst', 33), (' gst payable and accruals', 32), (' abandonment and decommissioning costs', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 29), (' warranty', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = provisions reversed during the year balance at 31 march 2023 , res_fuzz_match = [(' provisions - current', 64), (' rebates', 60), (' other', 60), (' secured long-term bank loans', 54), (' gst payable and accruals', 51), (' gst payables', 50), (' provision for associate funding', 50), (' restructuring', 50), (' other related parties', 47), ('other creditors and accruals', 46), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' employee benefits - payroll', 41), (' loan payable to relayed party under tax funding agreement', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' forward exchange contracts', 38), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' contract liabilites - current', 33), (' gst', 33), (' abandonment and decommissioning costs', 31), (' make good provisions', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 12], 'score': [100, 100], 'value': [0.0, 0.0], 'label': ['None Warranties', 'None Warranties'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('long term debt', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('long term debt', 46)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('long term debt', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('long term debt', 46)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' later than 1 year ', ' not later than 5 years']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' lease liability', 64), ('interest bearing loans and borrowings ', 36), (' loans and borrowings', 36), (' borrowings ', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' lease liabilities ', 73), (' lease liability', 73), ('interest bearing loans and borrowings ', 41), (' loans and borrowings', 33), (' borrowings ', 17)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' lease liability', 100), ('interest bearing loans and borrowings ', 45), (' loans and borrowings', 45), (' borrowings ', 17)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [(' lease liabilities ', 73), (' lease liability', 73), ('interest bearing loans and borrowings ', 42), (' loans and borrowings', 33), (' borrowings ', 17)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 3049958.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': [nan], 'line_item_value': [3049958.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' lease liability', 64), ('interest bearing loans and borrowings ', 36), (' loans and borrowings', 36), (' borrowings ', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' lease liabilities ', 73), (' lease liability', 73), ('interest bearing loans and borrowings ', 41), (' loans and borrowings', 33), (' borrowings ', 17)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' lease liability', 100), ('interest bearing loans and borrowings ', 45), (' loans and borrowings', 45), (' borrowings ', 17)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [(' lease liabilities ', 73), (' lease liability', 73), ('interest bearing loans and borrowings ', 42), (' loans and borrowings', 33), (' borrowings ', 17)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 2580788.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': [nan], 'line_item_value': [2580788.0]}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 35), ('(bond)', 15)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 34), ('(bond)', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 35), ('(bond)', 15)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 34), ('(bond)', 25)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes ', ' deferred tax liabilities']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities ', ' total deferred tax (assets) / liabilities']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' deferred tax liabilities', 57), ('deferred taxes ', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' deferred tax liabilities', 62), ('deferred taxes ', 44)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' deferred tax liabilities', 73), ('deferred taxes ', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [(' deferred tax liabilities', 67), ('deferred taxes ', 44)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' deferred tax liabilities', 57), ('deferred taxes ', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' deferred tax liabilities', 62), ('deferred taxes ', 44)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' deferred tax liabilities', 73), ('deferred taxes ', 33)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [(' deferred tax liabilities', 67), ('deferred taxes ', 44)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:04+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits']
2023-08-11 14:44:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-11 14:44:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities ', 82), ('other long term liabilities ', 61), (' other financial liabilities ', 53), (' financial liabilities ', 43), (' provision for associate funding ', 33), (' trade and other payables ', 28), (' employee benefits ', 28), (' deferred revenue', 23), (' provisions ', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' employee benefits ', 81), (' financial liabilities ', 50), (' other financial liabilities ', 43), (' trade and other payables ', 36), ('other long term liabilities ', 32), (' other non-current liabilities ', 29), (' deferred revenue', 29), (' provision for associate funding ', 23), (' provisions ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities ', 64), (' other financial liabilities ', 52), (' other non-current liabilities ', 39), ('other long term liabilities ', 36), (' trade and other payables ', 30), (' provision for associate funding ', 24), (' employee benefits ', 23), (' deferred revenue', 17), (' provisions ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [(' other financial liabilities ', 75), (' other non-current liabilities ', 75), ('other long term liabilities ', 71), (' financial liabilities ', 46), (' trade and other payables ', 41), (' employee benefits ', 37), (' provision for associate funding ', 29), (' deferred revenue', 17), (' provisions ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': 81, 'value': 363551.0, 'line_item_label': ['Non-current liabilities', 'Employee benefit liabilities'], 'note_numbers': [nan, '18'], 'line_item_value': [0.0, 363551.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities ', 82), ('other long term liabilities ', 61), (' other financial liabilities ', 53), (' financial liabilities ', 43), (' provision for associate funding ', 33), (' trade and other payables ', 28), (' employee benefits ', 28), (' deferred revenue', 23), (' provisions ', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' employee benefits ', 81), (' financial liabilities ', 50), (' other financial liabilities ', 43), (' trade and other payables ', 36), ('other long term liabilities ', 32), (' other non-current liabilities ', 29), (' deferred revenue', 29), (' provision for associate funding ', 23), (' provisions ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities ', 64), (' other financial liabilities ', 52), (' other non-current liabilities ', 39), ('other long term liabilities ', 36), (' trade and other payables ', 30), (' provision for associate funding ', 24), (' employee benefits ', 23), (' deferred revenue', 17), (' provisions ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [(' other financial liabilities ', 75), (' other non-current liabilities ', 75), ('other long term liabilities ', 71), (' financial liabilities ', 46), (' trade and other payables ', 41), (' employee benefits ', 37), (' provision for associate funding ', 29), (' deferred revenue', 17), (' provisions ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': 81, 'value': 361290.0, 'line_item_label': ['Non-current liabilities', 'Employee benefit liabilities'], 'note_numbers': [nan, '18'], 'line_item_value': [0.0, 361290.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = current employee benefits , res_fuzz_match = [(' total non-current employee benefits', 87), (' employee benefits - payroll ', 81), (' employee benefits - non current ', 65), ('non-current trade and other payables ', 43), (' non-current - liability for long-service leave ', 43), (' electricity derivatives at fair value through oci ', 35), (' contract liabilites - non-current ', 35), (' trade payables - related parties ', 35), (' abandonment and decommissioning costs ', 30), (' provisions - non-current ', 29), (' provision for associate funding ', 27), (' derivative contracts - at fair value ', 26), (' make good provisions ', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits , res_fuzz_match = [(' total non-current employee benefits', 100), (' employee benefits - payroll ', 81), (' employee benefits - non current ', 65), ('non-current trade and other payables ', 52), (' non-current - liability for long-service leave ', 52), (' electricity derivatives at fair value through oci ', 35), (' contract liabilites - non-current ', 35), (' abandonment and decommissioning costs ', 35), (' trade payables - related parties ', 30), (' provisions - non-current ', 29), (' provision for associate funding ', 27), (' derivative contracts - at fair value ', 26), (' make good provisions ', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = current employee benefits , res_fuzz_match = [(' total non-current employee benefits', 87), (' employee benefits - payroll ', 81), (' employee benefits - non current ', 65), ('non-current trade and other payables ', 43), (' non-current - liability for long-service leave ', 43), (' electricity derivatives at fair value through oci ', 35), (' contract liabilites - non-current ', 35), (' trade payables - related parties ', 35), (' abandonment and decommissioning costs ', 30), (' provisions - non-current ', 29), (' provision for associate funding ', 27), (' derivative contracts - at fair value ', 26), (' make good provisions ', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits , res_fuzz_match = [(' total non-current employee benefits', 100), (' employee benefits - payroll ', 81), (' employee benefits - non current ', 65), ('non-current trade and other payables ', 52), (' non-current - liability for long-service leave ', 52), (' electricity derivatives at fair value through oci ', 35), (' contract liabilites - non-current ', 35), (' abandonment and decommissioning costs ', 35), (' trade payables - related parties ', 30), (' provisions - non-current ', 29), (' provision for associate funding ', 27), (' derivative contracts - at fair value ', 26), (' make good provisions ', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3], 'score': [87, 100, 87, 100], 'value': [2776820.0, 361290.0, 3287069.0, 363551.0], 'label': ['Current Employee benefits', 'Non-current Employee benefits', 'Current Employee benefits', 'Non-current Employee benefits'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [(' equity share capital ', 57), (' contributed equity ', 48), (' contributed equity', 48), (' perpetual equity instrument ', 38), (' issued capital ', 37), (' share capital ', 36), (' share capital ', 36), ('common stock ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital ', 100), (' share capital ', 67), (' share capital ', 67), (' equity share capital ', 57), (' contributed equity ', 38), (' contributed equity', 38), (' perpetual equity instrument ', 34), ('common stock ', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 4500000.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['20'], 'line_item_value': [4500000.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [(' equity share capital ', 57), (' contributed equity ', 48), (' contributed equity', 48), (' perpetual equity instrument ', 38), (' issued capital ', 37), (' share capital ', 36), (' share capital ', 36), ('common stock ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital ', 100), (' share capital ', 67), (' share capital ', 67), (' equity share capital ', 57), (' contributed equity ', 38), (' contributed equity', 38), (' perpetual equity instrument ', 34), ('common stock ', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 4500000.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['20'], 'line_item_value': [4500000.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = none 4,500,000 ordinary shares , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 79), (' ordinary shares fully paid ', 74), (' issued and paid-up share capital ', 53), (' Profits captialised on redemption of preference shares', 53), (' Fully paid Preference shares ', 47), (' retained profits ', 38), (' total issued capital ', 31), (' on issue, fully paid ', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = nobuaki suzuki $ director , res_fuzz_match = [(' on issue, fully paid ', 47), (' fully paid ordinary shares ', 39), (' issued and paid-up share capital ', 39), (' ordinary shares fully paid ', 39), (' total issued capital ', 38), ('ordinary shares ', 36), (' Fully paid Preference shares ', 36), (' Profits captialised on redemption of preference shares', 35), (' retained profits ', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = none 4,500,000 ordinary shares , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 79), (' ordinary shares fully paid ', 74), (' issued and paid-up share capital ', 53), (' Profits captialised on redemption of preference shares', 53), (' Fully paid Preference shares ', 47), (' retained profits ', 38), (' total issued capital ', 31), (' on issue, fully paid ', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [0.0, 4500000.0], 'label': ['None 4,500,000 Ordinary shares', 'None 4,500,000 Ordinary shares'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('Share premium', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('Share premium', 35)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('Share premium', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('Share premium', 35)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings ', ' general reserves ', ' accumulated losses ', ' retained earnings and dividends on equity instruments']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [(' retained earnings ', 50), ('other equity ', 48), (' retained profits', 33), (' accumulated losses ', 28), (' reserves surplus ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' retained profits', 43), (' accumulated losses ', 36), (' retained earnings ', 29), ('other equity ', 27), (' reserves surplus ', 26)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 78068181.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [78068181.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [(' retained earnings ', 50), ('other equity ', 48), (' retained profits', 33), (' accumulated losses ', 28), (' reserves surplus ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' retained profits', 43), (' accumulated losses ', 36), (' retained earnings ', 29), ('other equity ', 27), (' reserves surplus ', 26)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 92122223.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [92122223.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('minority interest ', 32), (' minority interest ', 32), (' noncontrolling interest ', 28), (' non-controlling interest', 28), (' non controlling interest ', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest ', 33), (' non controlling interest ', 33), (' minority interest ', 33), (' noncontrolling interest ', 21), (' non-controlling interest', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('minority interest ', 32), (' minority interest ', 32), (' noncontrolling interest ', 28), (' non-controlling interest', 28), (' non controlling interest ', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest ', 33), (' non controlling interest ', 33), (' minority interest ', 33), (' noncontrolling interest ', 21), (' non-controlling interest', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('shareholders equity(a)', 47)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('shareholders equity(a)', 47)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve ', ' cash flow hedge reserve ', ' reserve in joint venture ', ' other reserve ', ' total other reserves ', ' tax reserve ', ' other  components of equity']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [(' foreign currency translation reserve', 29), ('other reserves ', 14), (' reserves ', 9)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve', 16), ('other reserves ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' foreign currency translation reserve', 24), (' reserves ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve', 43), (' reserves ', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [(' foreign currency translation reserve', 29), ('other reserves ', 14), (' reserves ', 9)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve', 16), ('other reserves ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' foreign currency translation reserve', 24), (' reserves ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve', 43), (' reserves ', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', '']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' Exploration and evaluation assets', 46), (' investment property ', 36), (' oil and gas properties ', 31), ('plant property equipment ', 30), (' property plant equipment ', 30), (' plant and equipment ', 29), (' property ', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment ', 91), (' property plant equipment ', 91), (' plant and equipment ', 77), (' oil and gas properties ', 70), (' investment property ', 62), (' property ', 50), (' Exploration and evaluation assets', 48)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' Exploration and evaluation assets', 41), (' plant and equipment ', 37), (' investment property ', 30), (' property ', 30), (' oil and gas properties ', 26), ('plant property equipment ', 25), (' property plant equipment ', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' Exploration and evaluation assets', 49), (' investment property ', 40), ('plant property equipment ', 34), (' property plant equipment ', 34), (' plant and equipment ', 33), (' oil and gas properties ', 29), (' property ', 26)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' Exploration and evaluation assets', 38), (' investment property ', 33), ('plant property equipment ', 29), (' property plant equipment ', 29), (' plant and equipment ', 27), (' property ', 26), (' oil and gas properties ', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' Exploration and evaluation assets', 48), (' investment property ', 46), ('plant property equipment ', 39), (' property plant equipment ', 39), (' oil and gas properties ', 33), (' property ', 32), (' plant and equipment ', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 2131990.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['13'], 'line_item_value': [2131990.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' Exploration and evaluation assets', 46), (' investment property ', 36), (' oil and gas properties ', 31), ('plant property equipment ', 30), (' property plant equipment ', 30), (' plant and equipment ', 29), (' property ', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment ', 91), (' property plant equipment ', 91), (' plant and equipment ', 77), (' oil and gas properties ', 70), (' investment property ', 62), (' property ', 50), (' Exploration and evaluation assets', 48)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' Exploration and evaluation assets', 41), (' plant and equipment ', 37), (' investment property ', 30), (' property ', 30), (' oil and gas properties ', 26), ('plant property equipment ', 25), (' property plant equipment ', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' Exploration and evaluation assets', 49), (' investment property ', 40), ('plant property equipment ', 34), (' property plant equipment ', 34), (' plant and equipment ', 33), (' oil and gas properties ', 29), (' property ', 26)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' Exploration and evaluation assets', 38), (' investment property ', 33), ('plant property equipment ', 29), (' property plant equipment ', 29), (' plant and equipment ', 27), (' property ', 26), (' oil and gas properties ', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' Exploration and evaluation assets', 48), (' investment property ', 46), ('plant property equipment ', 39), (' property plant equipment ', 39), (' oil and gas properties ', 33), (' property ', 32), (' plant and equipment ', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 1844377.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['13'], 'line_item_value': [1844377.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', ''] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Capitalised pre stripping costs ', 30), (' Other assets in progress ', 30), (' Asset Retirement Obligation ', 29), ('cost ', 25), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Capitalised pre stripping costs ', 30), (' Other assets in progress ', 30), (' Asset Retirement Obligation ', 29), ('cost ', 25), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Capitalised pre stripping costs ', 30), (' Other assets in progress ', 30), (' Asset Retirement Obligation ', 29), ('cost ', 25), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Capitalised pre stripping costs ', 30), (' Other assets in progress ', 30), (' Asset Retirement Obligation ', 29), ('cost ', 25), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 50), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' investment property ', 40), (' Capitalised pre stripping costs ', 40), (' Buildings ', 40), (' Marine  Development properties ', 40), (' Mining properties ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 36), (' Leasehold buildings ', 34), (' Construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Assets under construction ', 30), (' Building & mine infrastructure ', 30), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Capitalised pre stripping costs ', 30), (' Other assets in progress ', 30), (' Asset Retirement Obligation ', 29), ('cost ', 25), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation depreciation charge for the year , res_fuzz_match = [('cost ', 50), (' Capitalised pre stripping costs ', 46), (' Mining properties ', 46), (' Marine  Development properties ', 45), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Plant and equipment ', 33), (' Construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' land and improvement ', 27), (' Leasehold buildings ', 27), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Capitalised pre stripping costs ', 30), (' Other assets in progress ', 30), (' Asset Retirement Obligation ', 29), ('cost ', 25), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 57), (' Stripping WIP ', 56), ('cost ', 50), (' Pipeline Asset ', 46), (' under construction ', 44), (' Asset Retirement Obligation ', 43), (' Assets under construction ', 43), (' Other assets in progress ', 43), (' land and improvement ', 43), (' Marine  Development properties ', 43), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mining properties ', 38), (' investment property ', 36), (' Building & mine infrastructure ', 36), (' Fishing vessels & equipment ', 36), (' Construction ', 33), (' Subsea ', 33), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Freehold land and buildings ', 29), (' Plant and equipment ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings ', 29), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Capitalised pre stripping costs ', 30), (' Other assets in progress ', 30), (' Asset Retirement Obligation ', 29), ('cost ', 25), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 31 march 2023 , res_fuzz_match = [(' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mining properties ', 38), (' Pipeline Asset ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Building & mine infrastructure ', 35), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Other assets in progress ', 31), (' Marine  Development properties ', 30), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Capitalised pre stripping costs ', 30), (' Other assets in progress ', 30), (' Asset Retirement Obligation ', 29), ('cost ', 25), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), ('cost ', 50), (' investment property ', 47), (' land and improvement ', 47), (' Mining properties ', 46), (' Construction ', 44), (' Capitalised pre stripping costs ', 44), (' Buildings ', 44), (' Marine  Development properties ', 44), (' Plant and equipment ', 40), (' under construction ', 40), (' Freehold land and buildings ', 39), (' Assets under construction ', 39), (' Other assets in progress ', 39), (' Building & mine infrastructure ', 39), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Capitalised pre stripping costs ', 30), (' Other assets in progress ', 30), (' Asset Retirement Obligation ', 29), ('cost ', 25), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at: 31 march 2023 , res_fuzz_match = [(' Construction ', 56), ('cost ', 50), (' land and improvement ', 47), (' under construction ', 47), (' Facilities ', 40), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), (' Marine  Development properties ', 39), (' investment property ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' Capitalised pre stripping costs ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Freehold land and buildings ', 28), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Fishing vessels & equipment ', 18), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Mine infrastructure ', 44), (' Building & mine infrastructure ', 43), (' Assets under construction ', 41), (' Freehold land and buildings ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Capitalised pre stripping costs ', 30), (' Other assets in progress ', 30), (' Asset Retirement Obligation ', 29), ('cost ', 25), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Marine  Development properties ', 44), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Mine infrastructure ', 25), (' Construction ', 22), (' under construction ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Marine  Development properties ', 44), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Mine infrastructure ', 25), (' Construction ', 22), (' under construction ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Marine  Development properties ', 44), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Mine infrastructure ', 25), (' Construction ', 22), (' under construction ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Marine  Development properties ', 44), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Mine infrastructure ', 25), (' Construction ', 22), (' under construction ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 50), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' investment property ', 40), (' Capitalised pre stripping costs ', 40), (' Buildings ', 40), (' Marine  Development properties ', 40), (' Mining properties ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 36), (' Leasehold buildings ', 34), (' Construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Assets under construction ', 30), (' Building & mine infrastructure ', 30), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Marine  Development properties ', 44), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Mine infrastructure ', 25), (' Construction ', 22), (' under construction ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation depreciation charge for the year , res_fuzz_match = [('cost ', 50), (' Capitalised pre stripping costs ', 46), (' Mining properties ', 46), (' Marine  Development properties ', 45), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Plant and equipment ', 33), (' Construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' land and improvement ', 27), (' Leasehold buildings ', 27), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Marine  Development properties ', 44), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Mine infrastructure ', 25), (' Construction ', 22), (' under construction ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 57), (' Stripping WIP ', 56), ('cost ', 50), (' Pipeline Asset ', 46), (' under construction ', 44), (' Asset Retirement Obligation ', 43), (' Assets under construction ', 43), (' Other assets in progress ', 43), (' land and improvement ', 43), (' Marine  Development properties ', 43), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mining properties ', 38), (' investment property ', 36), (' Building & mine infrastructure ', 36), (' Fishing vessels & equipment ', 36), (' Construction ', 33), (' Subsea ', 33), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Freehold land and buildings ', 29), (' Plant and equipment ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings ', 29), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Marine  Development properties ', 44), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Mine infrastructure ', 25), (' Construction ', 22), (' under construction ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 31 march 2023 , res_fuzz_match = [(' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mining properties ', 38), (' Pipeline Asset ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Building & mine infrastructure ', 35), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Other assets in progress ', 31), (' Marine  Development properties ', 30), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Marine  Development properties ', 44), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Mine infrastructure ', 25), (' Construction ', 22), (' under construction ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), ('cost ', 50), (' investment property ', 47), (' land and improvement ', 47), (' Mining properties ', 46), (' Construction ', 44), (' Capitalised pre stripping costs ', 44), (' Buildings ', 44), (' Marine  Development properties ', 44), (' Plant and equipment ', 40), (' under construction ', 40), (' Freehold land and buildings ', 39), (' Assets under construction ', 39), (' Other assets in progress ', 39), (' Building & mine infrastructure ', 39), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Marine  Development properties ', 44), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Mine infrastructure ', 25), (' Construction ', 22), (' under construction ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at: 31 march 2023 , res_fuzz_match = [(' Construction ', 56), ('cost ', 50), (' land and improvement ', 47), (' under construction ', 47), (' Facilities ', 40), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), (' Marine  Development properties ', 39), (' investment property ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' Capitalised pre stripping costs ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Freehold land and buildings ', 28), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Fishing vessels & equipment ', 18), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Marine  Development properties ', 44), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Mine infrastructure ', 25), (' Construction ', 22), (' under construction ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 50), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' investment property ', 40), (' Capitalised pre stripping costs ', 40), (' Buildings ', 40), (' Marine  Development properties ', 40), (' Mining properties ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 36), (' Leasehold buildings ', 34), (' Construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Assets under construction ', 30), (' Building & mine infrastructure ', 30), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation depreciation charge for the year , res_fuzz_match = [('cost ', 50), (' Capitalised pre stripping costs ', 46), (' Mining properties ', 46), (' Marine  Development properties ', 45), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Plant and equipment ', 33), (' Construction ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' land and improvement ', 27), (' Leasehold buildings ', 27), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 57), (' Stripping WIP ', 56), ('cost ', 50), (' Pipeline Asset ', 46), (' under construction ', 44), (' Asset Retirement Obligation ', 43), (' Assets under construction ', 43), (' Other assets in progress ', 43), (' land and improvement ', 43), (' Marine  Development properties ', 43), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mining properties ', 38), (' investment property ', 36), (' Building & mine infrastructure ', 36), (' Fishing vessels & equipment ', 36), (' Construction ', 33), (' Subsea ', 33), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Freehold land and buildings ', 29), (' Plant and equipment ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings ', 29), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 31 march 2023 , res_fuzz_match = [(' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mining properties ', 38), (' Pipeline Asset ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Building & mine infrastructure ', 35), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Other assets in progress ', 31), (' Marine  Development properties ', 30), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), ('cost ', 50), (' investment property ', 47), (' land and improvement ', 47), (' Mining properties ', 46), (' Construction ', 44), (' Capitalised pre stripping costs ', 44), (' Buildings ', 44), (' Marine  Development properties ', 44), (' Plant and equipment ', 40), (' under construction ', 40), (' Freehold land and buildings ', 39), (' Assets under construction ', 39), (' Other assets in progress ', 39), (' Building & mine infrastructure ', 39), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at: 31 march 2023 , res_fuzz_match = [(' Construction ', 56), ('cost ', 50), (' land and improvement ', 47), (' under construction ', 47), (' Facilities ', 40), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), (' Marine  Development properties ', 39), (' investment property ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' Capitalised pre stripping costs ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Freehold land and buildings ', 28), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Fishing vessels & equipment ', 18), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 10, 11, 12, 13, 20, 21, 22, 23], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [1261590.0, 293882.0, -328861.0, 1226611.0, 2817900.0, 211814.0, 0.0, 3029714.0, 4079490.0, 505696.0, -328861.0, 4256325.0], 'label': ['Cost Balance at 1 April 2022', 'Cost Additions', 'Cost Disposals', 'Cost Balance at 31 March 2023', 'Cost Balance at 1 April 2022', 'Cost Additions', 'Cost Disposals', 'Cost Balance at 31 March 2023', 'Cost Balance at 1 April 2022', 'Cost Additions', 'Cost Disposals', 'Cost Balance at 31 March 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 1 april 2022 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('accumulated depreciation', 41), ('net book value', 38)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation depreciation charge for the year , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 60), ('net value', 38), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation disposals , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 50), ('net value', 25), ('net book value', 23)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 31 march 2023 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 48), ('net book value', 38), ('depreciatio', 36)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at: 31 march 2023 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('depreciatio', 36), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = office equipment and furniture , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 1 april 2022 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('accumulated depreciation', 41), ('net book value', 38)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation depreciation charge for the year , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 60), ('net value', 38), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation disposals , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 50), ('net value', 25), ('net book value', 23)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 31 march 2023 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 48), ('net book value', 38), ('depreciatio', 36)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at: 31 march 2023 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('depreciatio', 36), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvement , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 1 april 2022 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('accumulated depreciation', 41), ('net book value', 38)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation depreciation charge for the year , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 60), ('net value', 38), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation disposals , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 50), ('net value', 25), ('net book value', 23)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = depreciation balance at 31 march 2023 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 48), ('net book value', 38), ('depreciatio', 36)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at: 31 march 2023 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('depreciatio', 36), ('net book value', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables ', 46), (' unbilled ', 40), (' government subsidies receivable ', 38), (' trade and other receivables', 38), (' trade receivables ', 35), (' receivable ', 33), (' billed ', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('account receivables ', 25), (' trade receivables ', 25), (' government subsidies receivable ', 25), (' receivable ', 25), (' trade and other receivables', 25), (' billed ', 0), (' unbilled ', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' receivable ', 36), ('account receivables ', 33), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' trade and other receivables', 33), (' billed ', 0), (' unbilled ', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [(' receivable ', 100), (' trade receivables ', 75), ('account receivables ', 71), (' trade and other receivables', 62), (' government subsidies receivable ', 56), (' billed ', 25), (' unbilled ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total current a ssets , res_fuzz_match = [('account receivables ', 50), (' trade receivables ', 42), (' unbilled ', 40), (' government subsidies receivable ', 39), (' trade and other receivables', 39), (' receivable ', 33), (' billed ', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5], 'score': 100, 'value': 129139610.0, 'line_item_label': ['Trade and other receivables', 'Income tax receivable'], 'note_numbers': ['11', nan], 'line_item_value': [129139610.0, 0.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables ', 46), (' unbilled ', 40), (' government subsidies receivable ', 38), (' trade and other receivables', 38), (' trade receivables ', 35), (' receivable ', 33), (' billed ', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('account receivables ', 25), (' trade receivables ', 25), (' government subsidies receivable ', 25), (' receivable ', 25), (' trade and other receivables', 25), (' billed ', 0), (' unbilled ', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' receivable ', 36), ('account receivables ', 33), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' trade and other receivables', 33), (' billed ', 0), (' unbilled ', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [(' receivable ', 100), (' trade receivables ', 75), ('account receivables ', 71), (' trade and other receivables', 62), (' government subsidies receivable ', 56), (' billed ', 25), (' unbilled ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total current a ssets , res_fuzz_match = [('account receivables ', 50), (' trade receivables ', 42), (' unbilled ', 40), (' government subsidies receivable ', 39), (' trade and other receivables', 39), (' receivable ', 33), (' billed ', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5], 'score': 100, 'value': 79599937.0, 'line_item_label': ['Trade and other receivables', 'Income tax receivable'], 'note_numbers': ['11', nan], 'line_item_value': [78644553.0, 955384.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = none trade debtors , res_fuzz_match = [(' trade debtors ', 100), (' net trade debtors ', 94), (' other debtors ', 75), (' trade debtors from contracts with customers', 65), ('trade receivables ', 58), (' share of joint venture receivables ', 41), (' allowance for expected credit loss ', 41), (' related party receivables ', 35), (' receivables from related parties ', 35), ('charges paid in advance ', 29), (' provision for impairment losses ', 29)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = none provision for impairment of receivables , res_fuzz_match = [(' provision for impairment losses ', 82), ('trade receivables ', 67), (' related party receivables ', 67), (' share of joint venture receivables ', 48), (' receivables from related parties ', 48), (' net trade debtors ', 44), (' allowance for expected credit loss ', 43), ('charges paid in advance ', 41), (' trade debtors from contracts with customers', 38), (' trade debtors ', 33), (' other debtors ', 33)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' net trade debtors ', 50), (' trade debtors from contracts with customers', 50), (' trade debtors ', 40), (' other debtors ', 40), (' share of joint venture receivables ', 40), (' related party receivables ', 30), (' provision for impairment losses ', 30), (' receivables from related parties ', 30), (' allowance for expected credit loss ', 30), ('trade receivables ', 20), ('charges paid in advance ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = none receivable due from related party , res_fuzz_match = [(' receivables from related parties ', 83), ('trade receivables ', 67), (' related party receivables ', 61), (' net trade debtors ', 56), (' trade debtors from contracts with customers', 50), (' trade debtors ', 42), (' other debtors ', 42), (' provision for impairment losses ', 41), (' share of joint venture receivables ', 40), (' allowance for expected credit loss ', 32), ('charges paid in advance ', 29)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' net trade debtors ', 50), (' trade debtors from contracts with customers', 50), (' trade debtors ', 40), (' other debtors ', 40), (' share of joint venture receivables ', 40), (' related party receivables ', 30), (' provision for impairment losses ', 30), (' receivables from related parties ', 30), (' allowance for expected credit loss ', 30), ('trade receivables ', 20), ('charges paid in advance ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = none trade debtors , res_fuzz_match = [(' trade debtors ', 100), (' net trade debtors ', 94), (' other debtors ', 75), (' trade debtors from contracts with customers', 65), ('trade receivables ', 58), (' share of joint venture receivables ', 41), (' allowance for expected credit loss ', 41), (' related party receivables ', 35), (' receivables from related parties ', 35), ('charges paid in advance ', 29), (' provision for impairment losses ', 29)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = none provision for impairment of receivables , res_fuzz_match = [(' provision for impairment losses ', 82), ('trade receivables ', 67), (' related party receivables ', 67), (' share of joint venture receivables ', 48), (' receivables from related parties ', 48), (' net trade debtors ', 44), (' allowance for expected credit loss ', 43), ('charges paid in advance ', 41), (' trade debtors from contracts with customers', 38), (' trade debtors ', 33), (' other debtors ', 33)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' net trade debtors ', 50), (' trade debtors from contracts with customers', 50), (' trade debtors ', 40), (' other debtors ', 40), (' share of joint venture receivables ', 40), (' related party receivables ', 30), (' provision for impairment losses ', 30), (' receivables from related parties ', 30), (' allowance for expected credit loss ', 30), ('trade receivables ', 20), ('charges paid in advance ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = none receivable due from related party , res_fuzz_match = [(' receivables from related parties ', 83), ('trade receivables ', 67), (' related party receivables ', 61), (' net trade debtors ', 56), (' trade debtors from contracts with customers', 50), (' trade debtors ', 42), (' other debtors ', 42), (' provision for impairment losses ', 41), (' share of joint venture receivables ', 40), (' allowance for expected credit loss ', 32), ('charges paid in advance ', 29)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' net trade debtors ', 50), (' trade debtors from contracts with customers', 50), (' trade debtors ', 40), (' other debtors ', 40), (' share of joint venture receivables ', 40), (' related party receivables ', 30), (' provision for impairment losses ', 30), (' receivables from related parties ', 30), (' allowance for expected credit loss ', 30), ('trade receivables ', 20), ('charges paid in advance ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_rows = $ , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 5, 6, 8], 'score': [100, 82, 83, 100, 82, 83], 'value': [29259569.0, -1651634.0, 51036618.0, 32654310.0, -1412013.0, 97897313.0], 'label': ['None Trade debtors', 'None Provision for impairment of receivables', 'None Receivable due from related party', 'None Trade debtors', 'None Provision for impairment of receivables', 'None Receivable due from related party'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods ', ' LNG ', ' Condensate ', ' Domgas ', ' Feed gas income ', ' Gas transportation income ', ' Sale of goods - Cars ', ' Sale of goods - Motorcycles ', ' Sale of goods - Marine ', ' Sale of goods - Spareparts ', ' Total Revenue ', ' Goods sold to customer from warehouse ', ' Goods sold to customer direct from supplier ', ' revenue from continuing activities ', ' revenue form contracts with customers ', ' hedge loss / gain ', ' contribution from joint venture']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' revenue from continuing activities', 54), ('revenue from operations ', 43), (' net sales ', 40), (' Sale of coal ', 38), (' revenue from contracts with customers ', 36), (' Sales revenue ', 35), (' sale of products ', 33), (' transmission and distribution business ', 30), (' from trading business ', 30), (' Revenue ', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities', 39), (' revenue from contracts with customers ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), ('revenue from operations ', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' from trading business ', 46), ('revenue from operations ', 44), (' Sale of coal ', 40), (' revenue from contracts with customers ', 37), (' revenue from continuing activities', 33), (' net sales ', 32), (' Sales revenue ', 27), (' sale of products ', 26), (' transmission and distribution business ', 21), (' Revenue ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('revenue from operations ', 42), (' net sales ', 40), (' revenue from continuing activities', 34), (' revenue from contracts with customers ', 33), (' from trading business ', 32), (' Sales revenue ', 30), (' sale of products ', 24), (' transmission and distribution business ', 24), (' Revenue ', 21), (' Sale of coal ', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('revenue from operations ', 40), (' Sales revenue ', 40), (' Revenue ', 40), (' sale of products ', 38), (' revenue from continuing activities', 31), (' transmission and distribution business ', 29), (' net sales ', 27), (' revenue from contracts with customers ', 26), (' Sale of coal ', 26), (' from trading business ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [('revenue from operations ', 47), (' revenue from continuing activities', 41), (' Sales revenue ', 40), (' Revenue ', 40), (' revenue from contracts with customers ', 35), (' sale of products ', 31), (' transmission and distribution business ', 29), (' net sales ', 27), (' Sale of coal ', 26), (' from trading business ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue ', 43), (' from trading business ', 37), (' sale of products ', 33), (' Revenue ', 33), (' net sales ', 30), ('revenue from operations ', 29), (' revenue from contracts with customers ', 27), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('revenue from operations ', 44), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' from trading business ', 31), (' revenue from continuing activities', 22), (' net sales ', 21), (' transmission and distribution business ', 21), (' Sale of coal ', 20), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' revenue from continuing activities', 38), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 30), (' from trading business ', 30), ('revenue from operations ', 21), (' net sales ', 20), (' Sale of coal ', 19), (' sale of products ', 17), (' Sales revenue ', 17), (' Revenue ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal ', 40), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' revenue from continuing activities', 33), (' net sales ', 32), (' from trading business ', 31), (' transmission and distribution business ', 26), ('revenue from operations ', 22), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal ', 42), (' revenue from contracts with customers ', 38), (' sale of products ', 37), (' net sales ', 35), (' revenue from continuing activities', 35), (' from trading business ', 33), ('revenue from operations ', 26), (' transmission and distribution business ', 23), (' Sales revenue ', 23), (' Revenue ', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' from trading business ', 45), (' sale of products ', 43), ('revenue from operations ', 38), (' transmission and distribution business ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 29), (' Sale of coal ', 24), (' revenue from continuing activities', 24), (' Sales revenue ', 22), (' Revenue ', 9)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' from trading business ', 45), (' Sales revenue ', 37), (' transmission and distribution business ', 32), (' Sale of coal ', 32), (' sale of products ', 29), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), (' Revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations ', 46), (' sale of products ', 39), (' from trading business ', 35), (' revenue from continuing activities', 32), (' revenue from contracts with customers ', 31), (' transmission and distribution business ', 30), (' Sales revenue ', 27), (' Revenue ', 24), (' net sales ', 22), (' Sale of coal ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' revenue from contracts with customers ', 41), (' from trading business ', 38), (' revenue from continuing activities', 38), ('revenue from operations ', 37), (' Sales revenue ', 36), (' sale of products ', 29), (' Revenue ', 29), (' transmission and distribution business ', 28), (' Sale of coal ', 26), (' net sales ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' from trading business ', 40), (' revenue from contracts with customers ', 39), (' sale of products ', 38), (' revenue from continuing activities', 37), (' Sales revenue ', 35), ('revenue from operations ', 31), (' transmission and distribution business ', 29), (' net sales ', 28), (' Sale of coal ', 27), (' Revenue ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 301558406.0, 'line_item_label': ['Revenue'], 'note_numbers': [4.0], 'line_item_value': [301558406.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' revenue from continuing activities', 54), ('revenue from operations ', 43), (' net sales ', 40), (' Sale of coal ', 38), (' revenue from contracts with customers ', 36), (' Sales revenue ', 35), (' sale of products ', 33), (' transmission and distribution business ', 30), (' from trading business ', 30), (' Revenue ', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities', 39), (' revenue from contracts with customers ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), ('revenue from operations ', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' from trading business ', 46), ('revenue from operations ', 44), (' Sale of coal ', 40), (' revenue from contracts with customers ', 37), (' revenue from continuing activities', 33), (' net sales ', 32), (' Sales revenue ', 27), (' sale of products ', 26), (' transmission and distribution business ', 21), (' Revenue ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('revenue from operations ', 42), (' net sales ', 40), (' revenue from continuing activities', 34), (' revenue from contracts with customers ', 33), (' from trading business ', 32), (' Sales revenue ', 30), (' sale of products ', 24), (' transmission and distribution business ', 24), (' Revenue ', 21), (' Sale of coal ', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('revenue from operations ', 40), (' Sales revenue ', 40), (' Revenue ', 40), (' sale of products ', 38), (' revenue from continuing activities', 31), (' transmission and distribution business ', 29), (' net sales ', 27), (' revenue from contracts with customers ', 26), (' Sale of coal ', 26), (' from trading business ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [('revenue from operations ', 47), (' revenue from continuing activities', 41), (' Sales revenue ', 40), (' Revenue ', 40), (' revenue from contracts with customers ', 35), (' sale of products ', 31), (' transmission and distribution business ', 29), (' net sales ', 27), (' Sale of coal ', 26), (' from trading business ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue ', 43), (' from trading business ', 37), (' sale of products ', 33), (' Revenue ', 33), (' net sales ', 30), ('revenue from operations ', 29), (' revenue from contracts with customers ', 27), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('revenue from operations ', 44), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' from trading business ', 31), (' revenue from continuing activities', 22), (' net sales ', 21), (' transmission and distribution business ', 21), (' Sale of coal ', 20), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' revenue from continuing activities', 38), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 30), (' from trading business ', 30), ('revenue from operations ', 21), (' net sales ', 20), (' Sale of coal ', 19), (' sale of products ', 17), (' Sales revenue ', 17), (' Revenue ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal ', 40), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' revenue from continuing activities', 33), (' net sales ', 32), (' from trading business ', 31), (' transmission and distribution business ', 26), ('revenue from operations ', 22), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal ', 42), (' revenue from contracts with customers ', 38), (' sale of products ', 37), (' net sales ', 35), (' revenue from continuing activities', 35), (' from trading business ', 33), ('revenue from operations ', 26), (' transmission and distribution business ', 23), (' Sales revenue ', 23), (' Revenue ', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' from trading business ', 45), (' sale of products ', 43), ('revenue from operations ', 38), (' transmission and distribution business ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 29), (' Sale of coal ', 24), (' revenue from continuing activities', 24), (' Sales revenue ', 22), (' Revenue ', 9)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' from trading business ', 45), (' Sales revenue ', 37), (' transmission and distribution business ', 32), (' Sale of coal ', 32), (' sale of products ', 29), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), (' Revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations ', 46), (' sale of products ', 39), (' from trading business ', 35), (' revenue from continuing activities', 32), (' revenue from contracts with customers ', 31), (' transmission and distribution business ', 30), (' Sales revenue ', 27), (' Revenue ', 24), (' net sales ', 22), (' Sale of coal ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' revenue from contracts with customers ', 41), (' from trading business ', 38), (' revenue from continuing activities', 38), ('revenue from operations ', 37), (' Sales revenue ', 36), (' sale of products ', 29), (' Revenue ', 29), (' transmission and distribution business ', 28), (' Sale of coal ', 26), (' net sales ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' from trading business ', 40), (' revenue from contracts with customers ', 39), (' sale of products ', 38), (' revenue from continuing activities', 37), (' Sales revenue ', 35), ('revenue from operations ', 31), (' transmission and distribution business ', 29), (' net sales ', 28), (' Sale of coal ', 27), (' Revenue ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 315145019.0, 'line_item_label': ['Revenue'], 'note_numbers': [4.0], 'line_item_value': [315145019.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-08-11 14:44:05+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales ', ' cost of goods']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' change in inventory', 44), (' Cost of product sold', 41), (' cost of coal sold', 38), (' Cost of goods and services sold', 38), (' cost of goods sold ', 38), ('expenditure', 36), ('total expenditure', 36), ('purchase of stock-in-trade', 32), ('total expenses', 25), ('expense', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory', 29), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory', 25), ('expense', 13), ('expenditure', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold ', 32), (' change in inventory', 31), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), (' cost of goods sold ', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), (' change in inventory', 22), ('purchase of stock-in-trade', 15)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('expense', 60), ('total expenses', 46), ('expenditure', 42), (' Personnel costs', 36), ('total expenditure', 33), (' Cost of product sold', 32), (' Cost of goods and services sold', 31), ('purchase of stock-in-trade', 30), (' Cost of inventory sold', 30), (' change in inventory', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 21), (' cost of goods sold ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [('expense', 60), ('total expenses', 46), (' Personnel costs', 43), ('expenditure', 42), (' cost of coal sold', 36), (' Cost of inventory sold', 36), ('cost of sales', 35), ('Cost of sales', 35), ('total expenditure', 33), (' Cost of product sold', 32), (' Cost of goods and services sold', 31), (' cost of goods sold ', 29), (' change in inventory', 28), ('purchase of stock-in-trade', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), (' change in inventory', 30), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold ', 23)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('total expenditure', 44), ('total expenses', 43), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 33), (' cost of coal sold', 32), (' Cost of goods and services sold', 28), ('expense', 24), (' cost of goods sold ', 24), (' change in inventory', 23), ('cost of sales', 20), ('Cost of sales', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' change in inventory', 44), (' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), (' cost of goods sold ', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), (' change in inventory', 38), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' change in inventory', 47), (' Cost of product sold', 44), (' cost of goods sold ', 41), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('total expenses', 22), ('total expenditure', 19), ('expenditure', 16), ('expense', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 29), (' cost of goods sold ', 27), (' change in inventory', 26), (' Cost of goods and services sold', 24), ('expense', 18)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold ', 27), (' Cost of product sold', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), (' cost of goods sold ', 24), (' change in inventory', 24), ('expense', 16)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), (' change in inventory', 43), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold ', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' change in inventory', 40), (' Cost of product sold', 38), ('purchase of stock-in-trade', 37), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' Personnel costs', 37), (' cost of goods sold ', 37), ('cost of sales', 36), ('Cost of sales', 36), ('expenditure', 27), ('expense', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': -248163172.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-248163172.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' change in inventory', 44), (' Cost of product sold', 41), (' cost of coal sold', 38), (' Cost of goods and services sold', 38), (' cost of goods sold ', 38), ('expenditure', 36), ('total expenditure', 36), ('purchase of stock-in-trade', 32), ('total expenses', 25), ('expense', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory', 29), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory', 25), ('expense', 13), ('expenditure', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold ', 32), (' change in inventory', 31), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), (' cost of goods sold ', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), (' change in inventory', 22), ('purchase of stock-in-trade', 15)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('expense', 60), ('total expenses', 46), ('expenditure', 42), (' Personnel costs', 36), ('total expenditure', 33), (' Cost of product sold', 32), (' Cost of goods and services sold', 31), ('purchase of stock-in-trade', 30), (' Cost of inventory sold', 30), (' change in inventory', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 21), (' cost of goods sold ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [('expense', 60), ('total expenses', 46), (' Personnel costs', 43), ('expenditure', 42), (' cost of coal sold', 36), (' Cost of inventory sold', 36), ('cost of sales', 35), ('Cost of sales', 35), ('total expenditure', 33), (' Cost of product sold', 32), (' Cost of goods and services sold', 31), (' cost of goods sold ', 29), (' change in inventory', 28), ('purchase of stock-in-trade', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), (' change in inventory', 30), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold ', 23)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('total expenditure', 44), ('total expenses', 43), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 33), (' cost of coal sold', 32), (' Cost of goods and services sold', 28), ('expense', 24), (' cost of goods sold ', 24), (' change in inventory', 23), ('cost of sales', 20), ('Cost of sales', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' change in inventory', 44), (' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), (' cost of goods sold ', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), (' change in inventory', 38), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' change in inventory', 47), (' Cost of product sold', 44), (' cost of goods sold ', 41), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('total expenses', 22), ('total expenditure', 19), ('expenditure', 16), ('expense', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 29), (' cost of goods sold ', 27), (' change in inventory', 26), (' Cost of goods and services sold', 24), ('expense', 18)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold ', 27), (' Cost of product sold', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), (' cost of goods sold ', 24), (' change in inventory', 24), ('expense', 16)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), (' change in inventory', 43), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold ', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' change in inventory', 40), (' Cost of product sold', 38), ('purchase of stock-in-trade', 37), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' Personnel costs', 37), (' cost of goods sold ', 37), ('cost of sales', 36), ('Cost of sales', 36), ('expenditure', 27), ('expense', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': -249071397.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-249071397.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-08-11 14:44:05+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['consum ', ' power ', ' machinery ', ' charges ', ' research ', ' analytical ', ' equipment ', ' exchange ', ' loss on ', ' donation ', ' csr ', ' social ', ' miscellaneous ', ' loss allowance ', ' Included in administrative expenses ', ' Depreciation property ', ' plant and equipment ', ' Depreciation right-of-use assets ', ' Administrative expenses ', ' Wages and salaries ', ' Compulsory superannuation contributions ', ' Payroll on-costs (excluding employee benefit provision) ', ' Staff welfare ', ' Contractors, subcontractors and employee related expenses ', ' Facilities Expense ', ' Rental equipment expenses ', ' Depreciation expense right-of-use asset ', ' Depreciation expense ', ' Amortisation expense ', ' Other expenses ', ' Research and development expenses ', ' employee benefits expenses ', ' depreciation and amortisation expenses ', ' Employee expenses ', ' Distribution Expenses ', ' Depreciation and Amortisation Expenses ', ' Other Expenses from Ordinary Activities ', '  ', ' Defined contribution plans ', ' Other employement costs']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses ', 46), (' property espense ', 44), (' Distribution expenses ', 43), (' other expenses ', 42), (' Other expenses ', 42), (' Other expenses ', 42), (' Depreciation expenses ', 38), (' Logistics and distribution ', 38), (' Administrative and other expenses ', 37), (' Advertising expenses ', 37), (' Depreciation and amortisation expenses ', 37), (' Administrative expenses ', 36), (' Selling & distribution expenses ', 36), (' Administration expenses ', 36), (' Occupancy ', 35), (' employee benefits expense ', 35), (' employee benefit espense ', 35), (' Occupancy expenses ', 33), (' Royalties ', 32), (' Sales and marketing ', 30), (' Administration ', 29), (' Lease expenses ', 26), (' Selling Expenses ', 26), (' Marketing expenses ', 24), ('expenses ', 22), (' depreciation ', 21), (' Management expenses ', 17), (' levies', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' levies', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other expenses ', 61), (' Other expenses ', 61), (' Other expenses ', 61), (' Administrative and other expenses ', 43), (' Administration ', 40), (' property espense ', 38), (' Amortisation expenses ', 32), (' Sales and marketing ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Lease expenses ', 27), (' Selling Expenses ', 27), (' Depreciation and amortisation expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Depreciation expenses ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Advertising expenses ', 23), (' depreciation ', 22), (' Distribution expenses ', 22), (' Royalties ', 22), (' Management expenses ', 17), (' levies', 13), ('expenses ', 12), (' Occupancy ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' employee benefits expense ', 100), (' employee benefit espense ', 95), (' Depreciation expenses ', 56), (' Administrative expenses ', 53), (' Administration expenses ', 53), (' Depreciation and amortisation expenses ', 50), (' Amortisation expenses ', 50), (' Advertising expenses ', 49), (' Distribution expenses ', 47), (' Administrative and other expenses ', 46), ('expenses ', 43), (' Selling & distribution expenses ', 42), (' property espense ', 38), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' other expenses ', 35), (' Occupancy expenses ', 35), (' Other expenses ', 35), (' Management expenses ', 35), (' Other expenses ', 35), (' Marketing expenses ', 34), (' Logistics and distribution ', 33), (' Sales and marketing ', 32), (' depreciation ', 21), (' Administration ', 19), (' Occupancy ', 15), (' levies', 15), (' Royalties ', 14)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' Depreciation expenses ', 100), (' Advertising expenses ', 76), (' Depreciation and amortisation expenses ', 70), (' depreciation ', 67), (' Distribution expenses ', 67), (' Amortisation expenses ', 64), ('expenses ', 60), (' Administrative expenses ', 60), (' Administration expenses ', 60), (' Selling & distribution expenses ', 57), (' employee benefits expense ', 56), (' employee benefit espense ', 50), (' Lease expenses ', 48), (' Selling Expenses ', 48), (' other expenses ', 46), (' Occupancy expenses ', 46), (' Other expenses ', 46), (' Management expenses ', 46), (' Other expenses ', 46), (' Administrative and other expenses ', 45), (' Marketing expenses ', 44), (' property espense ', 41), (' Administration ', 35), (' Sales and marketing ', 34), (' Logistics and distribution ', 29), (' levies', 22), (' Occupancy ', 21), (' Royalties ', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [(' Amortisation expenses ', 100), (' Advertising expenses ', 83), (' Administrative expenses ', 73), (' Administration expenses ', 73), (' Depreciation and amortisation expenses ', 70), (' Depreciation expenses ', 64), ('expenses ', 60), (' Distribution expenses ', 60), (' Administrative and other expenses ', 55), (' Selling & distribution expenses ', 51), (' employee benefits expense ', 50), (' Lease expenses ', 48), (' Selling Expenses ', 48), (' other expenses ', 46), (' Occupancy expenses ', 46), (' Other expenses ', 46), (' Management expenses ', 46), (' Other expenses ', 46), (' Marketing expenses ', 44), (' employee benefit espense ', 44), (' Administration ', 43), (' Sales and marketing ', 41), (' property espense ', 34), (' depreciation ', 29), (' Logistics and distribution ', 29), (' Royalties ', 29), (' Occupancy ', 21), (' levies', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' other expenses ', 100), (' Other expenses ', 100), (' Other expenses ', 100), (' Lease expenses ', 70), (' Selling Expenses ', 70), ('expenses ', 67), (' Occupancy expenses ', 67), (' property espense ', 67), (' Marketing expenses ', 64), (' Administrative and other expenses ', 63), (' Management expenses ', 58), (' Selling & distribution expenses ', 48), (' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' Administration ', 38), (' employee benefits expense ', 35), (' depreciation ', 32), (' Depreciation and amortisation expenses ', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' employee benefit espense ', 29), (' Royalties ', 21), (' Occupancy ', 12), (' levies', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' property espense ', 54), (' depreciation ', 44), (' other expenses ', 43), (' Other expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 42), (' Occupancy expenses ', 35), (' Royalties ', 33), (' Depreciation expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Logistics and distribution ', 32), (' Advertising expenses ', 31), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Selling Expenses ', 27), (' levies', 27), (' Management expenses ', 26), (' Occupancy ', 25), ('expenses ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Sales and marketing ', 23), (' Distribution expenses ', 22), (' Administrative expenses ', 22), (' Administration expenses ', 22), (' Administration ', 20), (' Selling & distribution expenses ', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses ', 37), (' Depreciation and amortisation expenses ', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Administration ', 29), (' other expenses ', 25), (' Occupancy expenses ', 25), (' Other expenses ', 25), (' Management expenses ', 25), (' Other expenses ', 25), (' Marketing expenses ', 24), (' Occupancy ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Depreciation expenses ', 23), (' Amortisation expenses ', 23), (' Advertising expenses ', 22), (' property espense ', 22), (' depreciation ', 21), (' Distribution expenses ', 21), (' Royalties ', 21), (' Selling & distribution expenses ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses ', 35), (' Royalties ', 33), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Occupancy ', 25), (' Depreciation expenses ', 24), (' Advertising expenses ', 23), (' Sales and marketing ', 23), (' property espense ', 23), (' depreciation ', 22), (' Administration ', 20), (' Selling Expenses ', 18), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' other expenses ', 17), (' Other expenses ', 17), (' Other expenses ', 17), (' levies', 13), ('expenses ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses ', 39), (' Depreciation and amortisation expenses ', 39), (' Marketing expenses ', 36), (' Amortisation expenses ', 34), (' Selling & distribution expenses ', 33), (' Sales and marketing ', 33), (' property espense ', 33), (' Distribution expenses ', 32), (' Management expenses ', 30), (' Logistics and distribution ', 29), (' Depreciation expenses ', 28), (' Advertising expenses ', 27), (' Royalties ', 27), (' Administrative expenses ', 26), (' Administration expenses ', 26), (' Administration ', 25), (' Lease expenses ', 23), (' Selling Expenses ', 23), (' other expenses ', 22), (' Occupancy expenses ', 22), (' Other expenses ', 22), (' Other expenses ', 22), (' employee benefits expense ', 22), (' employee benefit espense ', 22), (' Occupancy ', 20), (' depreciation ', 18), (' levies', 11), ('expenses ', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' employee benefits expense ', 42), (' Depreciation expenses ', 40), (' property espense ', 39), (' Depreciation and amortisation expenses ', 38), (' employee benefit espense ', 37), (' depreciation ', 35), (' Amortisation expenses ', 33), (' Logistics and distribution ', 33), (' Advertising expenses ', 32), (' Sales and marketing ', 32), (' Distribution expenses ', 31), (' Lease expenses ', 30), (' other expenses ', 29), (' Other expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Marketing expenses ', 28), (' Selling & distribution expenses ', 27), (' Royalties ', 26), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Administrative and other expenses ', 24), (' Selling Expenses ', 22), (' Occupancy expenses ', 21), (' levies', 20), (' Occupancy ', 19), ('expenses ', 18), (' Administration ', 16)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' other expenses ', 64), (' Other expenses ', 64), (' Management expenses ', 64), (' Other expenses ', 64), (' Marketing expenses ', 62), (' Lease expenses ', 59), (' Occupancy expenses ', 57), ('expenses ', 55), (' Selling Expenses ', 52), (' property espense ', 52), (' Administrative and other expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 39), (' Distribution expenses ', 38), (' Administrative expenses ', 38), (' Selling & distribution expenses ', 38), (' Administration expenses ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' Depreciation and amortisation expenses ', 29), (' Logistics and distribution ', 28), (' employee benefit espense ', 26), (' Administration ', 24), (' levies', 20), (' Royalties ', 17), (' Occupancy ', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Depreciation and amortisation expenses ', 40), (' other expenses ', 39), (' Other expenses ', 39), (' Other expenses ', 39), (' Depreciation expenses ', 36), (' Administrative and other expenses ', 36), (' Amortisation expenses ', 36), (' Selling & distribution expenses ', 35), (' property espense ', 35), (' Distribution expenses ', 34), (' employee benefits expense ', 34), (' employee benefit espense ', 34), (' Lease expenses ', 33), (' Marketing expenses ', 31), (' Logistics and distribution ', 31), (' Royalties ', 31), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Advertising expenses ', 29), (' Sales and marketing ', 29), (' Selling Expenses ', 27), (' Management expenses ', 26), (' depreciation ', 23), (' Administration ', 21), (' Occupancy expenses ', 19), (' Occupancy ', 17), ('expenses ', 16), (' levies', 9)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other expenses ', 59), (' Other expenses ', 59), (' Other expenses ', 59), (' Administrative and other expenses ', 50), (' property espense ', 43), (' Marketing expenses ', 40), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Occupancy expenses ', 35), (' Management expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Administration ', 32), ('expenses ', 29), (' Logistics and distribution ', 29), (' depreciation ', 28), (' Advertising expenses ', 27), (' Sales and marketing ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Royalties ', 21), (' Occupancy ', 15), (' levies', 15)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other expenses ', 43), (' Other expenses ', 43), (' Administrative and other expenses ', 43), (' Other expenses ', 43), (' property espense ', 36), (' Lease expenses ', 35), (' Management expenses ', 34), (' Marketing expenses ', 33), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' employee benefit espense ', 32), (' Occupancy expenses ', 30), (' Selling Expenses ', 30), (' Depreciation and amortisation expenses ', 30), (' Depreciation expenses ', 29), (' Selling & distribution expenses ', 29), (' Amortisation expenses ', 29), (' Logistics and distribution ', 29), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Distribution expenses ', 24), (' Advertising expenses ', 24), (' Administration ', 23), ('expenses ', 20), (' depreciation ', 19), (' Royalties ', 19), (' Occupancy ', 10), (' levies', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 7, 8], 'score': 100, 'value': -36664038.0, 'line_item_label': ['Employee benefit expenses', 'Depreciation expense', 'Amortisation expense', 'Other expenses'], 'note_numbers': [6.0, nan, nan, 7.0], 'line_item_value': [-13097500.0, -1657280.0, -144525.0, -21764733.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses ', 46), (' property espense ', 44), (' Distribution expenses ', 43), (' other expenses ', 42), (' Other expenses ', 42), (' Other expenses ', 42), (' Depreciation expenses ', 38), (' Logistics and distribution ', 38), (' Administrative and other expenses ', 37), (' Advertising expenses ', 37), (' Depreciation and amortisation expenses ', 37), (' Administrative expenses ', 36), (' Selling & distribution expenses ', 36), (' Administration expenses ', 36), (' Occupancy ', 35), (' employee benefits expense ', 35), (' employee benefit espense ', 35), (' Occupancy expenses ', 33), (' Royalties ', 32), (' Sales and marketing ', 30), (' Administration ', 29), (' Lease expenses ', 26), (' Selling Expenses ', 26), (' Marketing expenses ', 24), ('expenses ', 22), (' depreciation ', 21), (' Management expenses ', 17), (' levies', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' levies', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other expenses ', 61), (' Other expenses ', 61), (' Other expenses ', 61), (' Administrative and other expenses ', 43), (' Administration ', 40), (' property espense ', 38), (' Amortisation expenses ', 32), (' Sales and marketing ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Lease expenses ', 27), (' Selling Expenses ', 27), (' Depreciation and amortisation expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Depreciation expenses ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Advertising expenses ', 23), (' depreciation ', 22), (' Distribution expenses ', 22), (' Royalties ', 22), (' Management expenses ', 17), (' levies', 13), ('expenses ', 12), (' Occupancy ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' employee benefits expense ', 100), (' employee benefit espense ', 95), (' Depreciation expenses ', 56), (' Administrative expenses ', 53), (' Administration expenses ', 53), (' Depreciation and amortisation expenses ', 50), (' Amortisation expenses ', 50), (' Advertising expenses ', 49), (' Distribution expenses ', 47), (' Administrative and other expenses ', 46), ('expenses ', 43), (' Selling & distribution expenses ', 42), (' property espense ', 38), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' other expenses ', 35), (' Occupancy expenses ', 35), (' Other expenses ', 35), (' Management expenses ', 35), (' Other expenses ', 35), (' Marketing expenses ', 34), (' Logistics and distribution ', 33), (' Sales and marketing ', 32), (' depreciation ', 21), (' Administration ', 19), (' Occupancy ', 15), (' levies', 15), (' Royalties ', 14)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' Depreciation expenses ', 100), (' Advertising expenses ', 76), (' Depreciation and amortisation expenses ', 70), (' depreciation ', 67), (' Distribution expenses ', 67), (' Amortisation expenses ', 64), ('expenses ', 60), (' Administrative expenses ', 60), (' Administration expenses ', 60), (' Selling & distribution expenses ', 57), (' employee benefits expense ', 56), (' employee benefit espense ', 50), (' Lease expenses ', 48), (' Selling Expenses ', 48), (' other expenses ', 46), (' Occupancy expenses ', 46), (' Other expenses ', 46), (' Management expenses ', 46), (' Other expenses ', 46), (' Administrative and other expenses ', 45), (' Marketing expenses ', 44), (' property espense ', 41), (' Administration ', 35), (' Sales and marketing ', 34), (' Logistics and distribution ', 29), (' levies', 22), (' Occupancy ', 21), (' Royalties ', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [(' Amortisation expenses ', 100), (' Advertising expenses ', 83), (' Administrative expenses ', 73), (' Administration expenses ', 73), (' Depreciation and amortisation expenses ', 70), (' Depreciation expenses ', 64), ('expenses ', 60), (' Distribution expenses ', 60), (' Administrative and other expenses ', 55), (' Selling & distribution expenses ', 51), (' employee benefits expense ', 50), (' Lease expenses ', 48), (' Selling Expenses ', 48), (' other expenses ', 46), (' Occupancy expenses ', 46), (' Other expenses ', 46), (' Management expenses ', 46), (' Other expenses ', 46), (' Marketing expenses ', 44), (' employee benefit espense ', 44), (' Administration ', 43), (' Sales and marketing ', 41), (' property espense ', 34), (' depreciation ', 29), (' Logistics and distribution ', 29), (' Royalties ', 29), (' Occupancy ', 21), (' levies', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' other expenses ', 100), (' Other expenses ', 100), (' Other expenses ', 100), (' Lease expenses ', 70), (' Selling Expenses ', 70), ('expenses ', 67), (' Occupancy expenses ', 67), (' property espense ', 67), (' Marketing expenses ', 64), (' Administrative and other expenses ', 63), (' Management expenses ', 58), (' Selling & distribution expenses ', 48), (' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' Administration ', 38), (' employee benefits expense ', 35), (' depreciation ', 32), (' Depreciation and amortisation expenses ', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' employee benefit espense ', 29), (' Royalties ', 21), (' Occupancy ', 12), (' levies', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' property espense ', 54), (' depreciation ', 44), (' other expenses ', 43), (' Other expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 42), (' Occupancy expenses ', 35), (' Royalties ', 33), (' Depreciation expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Logistics and distribution ', 32), (' Advertising expenses ', 31), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Selling Expenses ', 27), (' levies', 27), (' Management expenses ', 26), (' Occupancy ', 25), ('expenses ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Sales and marketing ', 23), (' Distribution expenses ', 22), (' Administrative expenses ', 22), (' Administration expenses ', 22), (' Administration ', 20), (' Selling & distribution expenses ', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses ', 37), (' Depreciation and amortisation expenses ', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Administration ', 29), (' other expenses ', 25), (' Occupancy expenses ', 25), (' Other expenses ', 25), (' Management expenses ', 25), (' Other expenses ', 25), (' Marketing expenses ', 24), (' Occupancy ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Depreciation expenses ', 23), (' Amortisation expenses ', 23), (' Advertising expenses ', 22), (' property espense ', 22), (' depreciation ', 21), (' Distribution expenses ', 21), (' Royalties ', 21), (' Selling & distribution expenses ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses ', 35), (' Royalties ', 33), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Occupancy ', 25), (' Depreciation expenses ', 24), (' Advertising expenses ', 23), (' Sales and marketing ', 23), (' property espense ', 23), (' depreciation ', 22), (' Administration ', 20), (' Selling Expenses ', 18), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' other expenses ', 17), (' Other expenses ', 17), (' Other expenses ', 17), (' levies', 13), ('expenses ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses ', 39), (' Depreciation and amortisation expenses ', 39), (' Marketing expenses ', 36), (' Amortisation expenses ', 34), (' Selling & distribution expenses ', 33), (' Sales and marketing ', 33), (' property espense ', 33), (' Distribution expenses ', 32), (' Management expenses ', 30), (' Logistics and distribution ', 29), (' Depreciation expenses ', 28), (' Advertising expenses ', 27), (' Royalties ', 27), (' Administrative expenses ', 26), (' Administration expenses ', 26), (' Administration ', 25), (' Lease expenses ', 23), (' Selling Expenses ', 23), (' other expenses ', 22), (' Occupancy expenses ', 22), (' Other expenses ', 22), (' Other expenses ', 22), (' employee benefits expense ', 22), (' employee benefit espense ', 22), (' Occupancy ', 20), (' depreciation ', 18), (' levies', 11), ('expenses ', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' employee benefits expense ', 42), (' Depreciation expenses ', 40), (' property espense ', 39), (' Depreciation and amortisation expenses ', 38), (' employee benefit espense ', 37), (' depreciation ', 35), (' Amortisation expenses ', 33), (' Logistics and distribution ', 33), (' Advertising expenses ', 32), (' Sales and marketing ', 32), (' Distribution expenses ', 31), (' Lease expenses ', 30), (' other expenses ', 29), (' Other expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Marketing expenses ', 28), (' Selling & distribution expenses ', 27), (' Royalties ', 26), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Administrative and other expenses ', 24), (' Selling Expenses ', 22), (' Occupancy expenses ', 21), (' levies', 20), (' Occupancy ', 19), ('expenses ', 18), (' Administration ', 16)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' other expenses ', 64), (' Other expenses ', 64), (' Management expenses ', 64), (' Other expenses ', 64), (' Marketing expenses ', 62), (' Lease expenses ', 59), (' Occupancy expenses ', 57), ('expenses ', 55), (' Selling Expenses ', 52), (' property espense ', 52), (' Administrative and other expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 39), (' Distribution expenses ', 38), (' Administrative expenses ', 38), (' Selling & distribution expenses ', 38), (' Administration expenses ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' Depreciation and amortisation expenses ', 29), (' Logistics and distribution ', 28), (' employee benefit espense ', 26), (' Administration ', 24), (' levies', 20), (' Royalties ', 17), (' Occupancy ', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Depreciation and amortisation expenses ', 40), (' other expenses ', 39), (' Other expenses ', 39), (' Other expenses ', 39), (' Depreciation expenses ', 36), (' Administrative and other expenses ', 36), (' Amortisation expenses ', 36), (' Selling & distribution expenses ', 35), (' property espense ', 35), (' Distribution expenses ', 34), (' employee benefits expense ', 34), (' employee benefit espense ', 34), (' Lease expenses ', 33), (' Marketing expenses ', 31), (' Logistics and distribution ', 31), (' Royalties ', 31), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Advertising expenses ', 29), (' Sales and marketing ', 29), (' Selling Expenses ', 27), (' Management expenses ', 26), (' depreciation ', 23), (' Administration ', 21), (' Occupancy expenses ', 19), (' Occupancy ', 17), ('expenses ', 16), (' levies', 9)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other expenses ', 59), (' Other expenses ', 59), (' Other expenses ', 59), (' Administrative and other expenses ', 50), (' property espense ', 43), (' Marketing expenses ', 40), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Occupancy expenses ', 35), (' Management expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Administration ', 32), ('expenses ', 29), (' Logistics and distribution ', 29), (' depreciation ', 28), (' Advertising expenses ', 27), (' Sales and marketing ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Royalties ', 21), (' Occupancy ', 15), (' levies', 15)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other expenses ', 43), (' Other expenses ', 43), (' Administrative and other expenses ', 43), (' Other expenses ', 43), (' property espense ', 36), (' Lease expenses ', 35), (' Management expenses ', 34), (' Marketing expenses ', 33), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' employee benefit espense ', 32), (' Occupancy expenses ', 30), (' Selling Expenses ', 30), (' Depreciation and amortisation expenses ', 30), (' Depreciation expenses ', 29), (' Selling & distribution expenses ', 29), (' Amortisation expenses ', 29), (' Logistics and distribution ', 29), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Distribution expenses ', 24), (' Advertising expenses ', 24), (' Administration ', 23), ('expenses ', 20), (' depreciation ', 19), (' Royalties ', 19), (' Occupancy ', 10), (' levies', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 7, 8], 'score': 100, 'value': -47074583.0, 'line_item_label': ['Employee benefit expenses', 'Depreciation expense', 'Amortisation expense', 'Other expenses'], 'note_numbers': [6.0, nan, nan, 7.0], 'line_item_value': [-13641165.0, -1736272.0, -108758.0, -31588388.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-08-11 14:44:05+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses', ' Occupancy', ' Occupancy expenses']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses ', 36), (' Occupancy ', 35), (' Occupancy expenses', 33), ('Rent ', 25), (' Rental expenses ', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses', 44), (' Administration expenses ', 36), (' Rental expenses ', 32), (' Occupancy ', 18)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses ', 36), (' Administration expenses ', 32), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses ', 30), ('Rent ', 27), (' Occupancy expenses', 26), (' Rental expenses ', 25), (' Occupancy ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' Administration expenses ', 53), (' Occupancy expenses', 35), (' Rental expenses ', 34), ('Rent ', 23), (' Occupancy ', 15)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' Administration expenses ', 60), (' Occupancy expenses', 46), (' Rental expenses ', 44), ('Rent ', 33), (' Occupancy ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [(' Administration expenses ', 73), (' Occupancy expenses', 46), (' Rental expenses ', 44), ('Rent ', 33), (' Occupancy ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses ', 64), (' Administration expenses ', 43), ('Rent ', 38), (' Occupancy ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Rental expenses ', 42), (' Occupancy expenses', 35), ('Rent ', 27), (' Occupancy ', 25), (' Administration expenses ', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses ', 29), (' Occupancy expenses', 25), (' Rental expenses ', 24), (' Occupancy ', 24), ('Rent ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses ', 33), (' Administration expenses ', 30), (' Occupancy expenses', 26), (' Occupancy ', 25), ('Rent ', 13)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Rental expenses ', 29), (' Administration expenses ', 26), (' Occupancy expenses', 22), ('Rent ', 21), (' Occupancy ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses ', 34), (' Administration expenses ', 25), (' Occupancy expenses', 21), ('Rent ', 20), (' Occupancy ', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses ', 69), (' Occupancy expenses', 57), (' Administration expenses ', 38), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses ', 31), (' Administration expenses ', 29), (' Occupancy expenses', 19), ('Rent ', 17), (' Occupancy ', 17)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses ', 40), (' Occupancy expenses', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses ', 42), (' Occupancy expenses', 30), (' Administration expenses ', 27), ('Rent ', 21), (' Occupancy ', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses ', 36), (' Occupancy ', 35), (' Occupancy expenses', 33), ('Rent ', 25), (' Rental expenses ', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses', 44), (' Administration expenses ', 36), (' Rental expenses ', 32), (' Occupancy ', 18)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses ', 36), (' Administration expenses ', 32), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses ', 30), ('Rent ', 27), (' Occupancy expenses', 26), (' Rental expenses ', 25), (' Occupancy ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' Administration expenses ', 53), (' Occupancy expenses', 35), (' Rental expenses ', 34), ('Rent ', 23), (' Occupancy ', 15)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' Administration expenses ', 60), (' Occupancy expenses', 46), (' Rental expenses ', 44), ('Rent ', 33), (' Occupancy ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [(' Administration expenses ', 73), (' Occupancy expenses', 46), (' Rental expenses ', 44), ('Rent ', 33), (' Occupancy ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses ', 64), (' Administration expenses ', 43), ('Rent ', 38), (' Occupancy ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Rental expenses ', 42), (' Occupancy expenses', 35), ('Rent ', 27), (' Occupancy ', 25), (' Administration expenses ', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses ', 29), (' Occupancy expenses', 25), (' Rental expenses ', 24), (' Occupancy ', 24), ('Rent ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses ', 33), (' Administration expenses ', 30), (' Occupancy expenses', 26), (' Occupancy ', 25), ('Rent ', 13)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Rental expenses ', 29), (' Administration expenses ', 26), (' Occupancy expenses', 22), ('Rent ', 21), (' Occupancy ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses ', 34), (' Administration expenses ', 25), (' Occupancy expenses', 21), ('Rent ', 20), (' Occupancy ', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses ', 69), (' Occupancy expenses', 57), (' Administration expenses ', 38), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses ', 31), (' Administration expenses ', 29), (' Occupancy expenses', 19), ('Rent ', 17), (' Occupancy ', 17)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses ', 40), (' Occupancy expenses', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses ', 42), (' Occupancy expenses', 30), (' Administration expenses ', 27), ('Rent ', 21), (' Occupancy ', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['Other income ', ' Commission revenue ', ' Rent ', ' rental revenue']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 45), ('Other revenue', 33)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('Other revenue', 46), ('other operating', 33), (' Other income', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [('Other revenue', 46), ('other operating', 33), (' Other income', 32)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('other operating', 67), ('Other revenue', 43), (' Other income', 36)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('Other revenue', 30), ('other operating', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), (' Other income', 30), ('Other revenue', 29)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 824594.0, 'line_item_label': ['Other income'], 'note_numbers': [5.0], 'line_item_value': [824594.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 45), ('Other revenue', 33)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('Other revenue', 46), ('other operating', 33), (' Other income', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [('Other revenue', 46), ('other operating', 33), (' Other income', 32)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('other operating', 67), ('Other revenue', 43), (' Other income', 36)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('Other revenue', 30), ('other operating', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), (' Other income', 30), ('Other revenue', 29)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 718958.0, 'line_item_label': ['Other income'], 'note_numbers': [5.0], 'line_item_value': [718958.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-08-11 14:44:05+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), ('Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), (' Interest revenue', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), ('Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), ('Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), (' Finance income and finance costs', 24), ('Finance income and costs', 23), (' Net finance costs', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' Interest revenue', 48), ('Finance income and costs', 29), (' Net finance costs', 28), ('other income', 24), (' Finance income and finance costs', 24), ('finance income', 23)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [(' Interest revenue', 41), ('Finance income and costs', 34), (' Net finance costs', 34), ('other income', 32), (' Finance income and finance costs', 29), ('finance income', 23)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Net finance costs', 38), ('other income', 36), (' Interest revenue', 31), ('Finance income and costs', 25), (' Finance income and finance costs', 21), ('finance income', 17)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), ('Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs', 100), ('Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Net finance costs', 39), ('other income', 30), ('Finance income and costs', 27), (' Finance income and finance costs', 27), (' Interest revenue', 26), ('finance income', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), (' Net finance costs', 45), ('Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), ('Finance income and costs', 25), ('finance income', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), ('Finance income and costs', 42), ('finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Net finance costs', 44), ('other income', 43), ('Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), (' Interest revenue', 28)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 10, 11, 12], 'score': 100, 'value': -1422008.0, 'line_item_label': ['Other income', 'Finance income', 'Finance costs', 'Net finance costs'], 'note_numbers': [5.0, nan, nan, 8.0], 'line_item_value': [824594.0, 7754.0, -1131055.0, -1123301.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), ('Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), (' Interest revenue', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), ('Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), ('Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), (' Finance income and finance costs', 24), ('Finance income and costs', 23), (' Net finance costs', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' Interest revenue', 48), ('Finance income and costs', 29), (' Net finance costs', 28), ('other income', 24), (' Finance income and finance costs', 24), ('finance income', 23)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [(' Interest revenue', 41), ('Finance income and costs', 34), (' Net finance costs', 34), ('other income', 32), (' Finance income and finance costs', 29), ('finance income', 23)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Net finance costs', 38), ('other income', 36), (' Interest revenue', 31), ('Finance income and costs', 25), (' Finance income and finance costs', 21), ('finance income', 17)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), ('Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs', 100), ('Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Net finance costs', 39), ('other income', 30), ('Finance income and costs', 27), (' Finance income and finance costs', 27), (' Interest revenue', 26), ('finance income', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), (' Net finance costs', 45), ('Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), ('Finance income and costs', 25), ('finance income', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), ('Finance income and costs', 42), ('finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Net finance costs', 44), ('other income', 43), ('Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), (' Interest revenue', 28)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 10, 11, 12], 'score': 100, 'value': 1166538.0, 'line_item_label': ['Other income', 'Finance income', 'Finance costs', 'Net finance costs'], 'note_numbers': [5.0, nan, nan, 8.0], 'line_item_value': [718958.0, 1343657.0, -1119867.0, 223790.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-08-11 14:44:05+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['loan ', ' debt ', ' debenture ', ' cash credit ', ' borrowings ', ' bank facilities ', ' bonds ', ' interest ', ' Interest expenses ', ' Discount unwind on the provision for asset retirement obligation ', ' Other interest expense ', ' Interest on leases ', ' Interest on bank overdrafts and loans (other than those from related parties) ', ' Interest accrued on loans ', ' Interest accrued on lease liabilities ', ' Lease interest expense ', ' Interest expense on financial liabilities using the effective interest rate method - other ', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', ' Lease liabilities interest expense ', ' interest income']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost ', 43), (' interest expense', 37), (' finance expenses ', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense', 29), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' finance expenses ', 27), (' interest expense', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance expenses ', 32), (' interest expense', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), (' interest expense', 38), ('finance cost ', 27), (' finance expenses ', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' interest expense', 38), (' finance expenses ', 34), (' net finance costs ', 22), ('finance cost ', 18)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' interest expense', 48), (' finance expenses ', 44), (' net finance costs ', 28), ('finance cost ', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [(' finance expenses ', 44), (' interest expense', 41), (' net finance costs ', 34), ('finance cost ', 32)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' interest expense', 74), (' finance expenses ', 56), (' net finance costs ', 22), ('finance cost ', 17)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' finance expenses ', 42), (' net finance costs ', 38), (' interest expense', 38), ('finance cost ', 36)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost ', 52), (' finance expenses ', 48), (' interest expense', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance expenses ', 67), (' interest expense', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance expenses ', 57), (' interest expense', 40)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost ', 37), (' finance expenses ', 34), (' interest expense', 32)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses ', 69), (' interest expense', 65), (' net finance costs ', 45), ('finance cost ', 37)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost ', 33), (' interest expense', 29), (' finance expenses ', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' interest expense', 54), (' net finance costs ', 49), (' finance expenses ', 46), ('finance cost ', 42)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' interest expense', 40), (' finance expenses ', 38), ('finance cost ', 35)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [11, 12], 'score': 100, 'value': -2254356.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': [nan, 8.0], 'line_item_value': [-1131055.0, -1123301.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost ', 43), (' interest expense', 37), (' finance expenses ', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense', 29), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' finance expenses ', 27), (' interest expense', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance expenses ', 32), (' interest expense', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), (' interest expense', 38), ('finance cost ', 27), (' finance expenses ', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' interest expense', 38), (' finance expenses ', 34), (' net finance costs ', 22), ('finance cost ', 18)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' interest expense', 48), (' finance expenses ', 44), (' net finance costs ', 28), ('finance cost ', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [(' finance expenses ', 44), (' interest expense', 41), (' net finance costs ', 34), ('finance cost ', 32)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' interest expense', 74), (' finance expenses ', 56), (' net finance costs ', 22), ('finance cost ', 17)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' finance expenses ', 42), (' net finance costs ', 38), (' interest expense', 38), ('finance cost ', 36)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost ', 52), (' finance expenses ', 48), (' interest expense', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance expenses ', 67), (' interest expense', 31)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance expenses ', 57), (' interest expense', 40)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost ', 37), (' finance expenses ', 34), (' interest expense', 32)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses ', 69), (' interest expense', 65), (' net finance costs ', 45), ('finance cost ', 37)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost ', 33), (' interest expense', 29), (' finance expenses ', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' interest expense', 54), (' net finance costs ', 49), (' finance expenses ', 46), ('finance cost ', 42)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' interest expense', 40), (' finance expenses ', 38), ('finance cost ', 35)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [11, 12], 'score': 100, 'value': -896077.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': [nan, 8.0], 'line_item_value': [-1119867.0, 223790.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-08-11 14:44:05+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['Accretion expense ', ' Arising from inventory of cranes ', ' Arising from inventory of spare parts ', ' Asset impairment ', ' commission revenue ', ' dividend from other parties ', ' effective portion of changes in fair value of cash flow ', ' foreign exchange gain ', ' government grants ', ' Impairment loss ', ' insurance proceeds ', ' Interest on unwinding of discount in provisions ', ' Investment in joint venture ', ' japan recoveries ', ' Loss on loan refinancing ', ' Loss on sale of disposal of assets ', ' margin charge income ', ' net (loss)/profit on disposal of non-current assets ', ' net foreign exchange (loss)/gain ', ' net foreign exchange gain ', ' net foreign exchange gains/(losses) ', ' net gain / loss on disposal of property plant and equipment ', ' Net loss on disposal of property ', ' net of tax ', ' Net other foreign exchange (losses)/gains ', ' net ppe disposal (loss)/gain ', ' other ', ' other income ', ' other miscellaneous - net (loss)/gain ', ' paid by customers - at amortised cost ', ' plant and equipment ', ' Power purchase agreement realised gain ', ' Power purchase agreement unrelaised gain ', ' profit from discontinued operation ', ' Profit on sale of assets ', ' quota lease income ', ' Remuneration from services linked to newly acquired entities ', ' secondment income (tw recovery) ', ' Share of gain/(loss) of joint venture ', ' share of jv income ', ' Sub-lease rental income ', ' sundry income ', ' other revenue']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Profit from discontinued operation ', 62), (' net finance costs ', 52), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' other gains/losses ', 44), ('finance cost ', 43), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' other income and revenue ', 41), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 36), (' finance income and finance cost ', 35), (' interest gains and losses ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Finance income and finance costs ', 35), (' net of tax ', 32), (' net of tax ', 32), (' Impairement (expenses)/reversal ', 31), (' interest revenue ', 30), (' Impairment loss ', 26), (' finance expenses', 24), (' expenses ', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' other income ', 40), (' finance income and costs ', 40), (' Other income ', 40), (' Finance income and costs ', 40), (' net of tax ', 38), (' net of tax ', 38), (' other opertaing income ', 37), (' share of profit of equity accounted investees ', 36), (' other gains/losses ', 33), (' interest revenue ', 33), (' Loss on revaluation of inventories', 33), (' finance income and finance cost ', 32), (' other income and revenue ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and finance costs ', 32), (' Impairment loss ', 30), (' Impairement (expenses)/reversal ', 28), (' Profit from discontinued operation ', 28), (' finance expenses', 27), (' interest gains and losses ', 26), (' expenses ', 13)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses ', 52), (' Profit from discontinued operation ', 46), (' net finance costs ', 44), ('finance cost ', 43), (' other opertaing income ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 36), (' other income ', 35), (' Other income ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Impairment loss ', 35), (' finance expenses', 32), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), (' interest gains and losses ', 29), (' finance income and finance cost ', 25), (' Impairement (expenses)/reversal ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other income ', 100), (' Other income ', 100), (' other opertaing income ', 76), (' other gains/losses ', 69), (' other income and revenue ', 67), (' Profit from discontinued operation ', 42), (' Share of gain/(loss) of joint venture ', 41), (' net finance costs ', 38), (' interest revenue ', 38), (' Loss on revaluation of inventories', 38), (' interest gains and losses ', 36), (' Impairment loss ', 36), (' net of tax ', 33), (' net of tax ', 33), (' Impairement (expenses)/reversal ', 32), (' finance income and costs ', 31), (' Finance income and costs ', 31), (' share of profit of equity accounted investees ', 30), ('finance cost ', 27), (' finance income and finance cost ', 26), (' Finance income and finance costs ', 26), (' finance expenses', 25), (' expenses ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' expenses ', 43), (' interest revenue ', 43), (' Impairement (expenses)/reversal ', 43), (' other income and revenue ', 41), (' Share of gain/(loss) of joint venture ', 40), (' Loss on revaluation of inventories', 37), (' Impairment loss ', 36), (' share of profit of equity accounted investees ', 35), (' finance expenses', 34), (' net of tax ', 34), (' net of tax ', 34), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest gains and losses ', 32), (' other opertaing income ', 30), (' other income ', 24), (' finance income and finance cost ', 24), (' Other income ', 24), (' Finance income and finance costs ', 24), (' finance income and costs ', 23), (' Finance income and costs ', 23), (' net finance costs ', 22), ('finance cost ', 18)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' expenses ', 60), (' interest revenue ', 48), (' Impairement (expenses)/reversal ', 47), (' finance expenses', 44), (' other income and revenue ', 39), (' interest gains and losses ', 33), (' Impairment loss ', 32), (' finance income and costs ', 29), (' net of tax ', 29), (' Profit from discontinued operation ', 29), (' net of tax ', 29), (' Finance income and costs ', 29), (' Loss on revaluation of inventories', 29), (' net finance costs ', 28), (' other opertaing income ', 25), ('finance cost ', 24), (' other income ', 24), (' finance income and finance cost ', 24), (' share of profit of equity accounted investees ', 24), (' Other income ', 24), (' Share of gain/(loss) of joint venture ', 24), (' Finance income and finance costs ', 24), (' other gains/losses ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [(' expenses ', 60), (' finance expenses', 44), (' other income and revenue ', 44), (' interest revenue ', 41), (' other opertaing income ', 38), (' Share of gain/(loss) of joint venture ', 38), (' Impairement (expenses)/reversal ', 35), (' net finance costs ', 34), (' other gains/losses ', 34), (' finance income and costs ', 34), (' Finance income and costs ', 34), (' Loss on revaluation of inventories', 34), (' share of profit of equity accounted investees ', 33), (' interest gains and losses ', 33), ('finance cost ', 32), (' other income ', 32), (' Other income ', 32), (' Impairment loss ', 32), (' finance income and finance cost ', 29), (' net of tax ', 29), (' Finance income and finance costs ', 29), (' Profit from discontinued operation ', 29), (' net of tax ', 29)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' expenses ', 67), (' other income ', 61), (' Other income ', 61), (' other gains/losses ', 59), (' finance expenses', 56), (' Impairement (expenses)/reversal ', 56), (' other opertaing income ', 53), (' other income and revenue ', 41), (' interest revenue ', 37), (' Share of gain/(loss) of joint venture ', 35), (' share of profit of equity accounted investees ', 34), (' net of tax ', 32), (' net of tax ', 32), (' Loss on revaluation of inventories', 30), (' interest gains and losses ', 29), (' Impairment loss ', 26), (' Profit from discontinued operation ', 26), (' finance income and costs ', 24), (' Finance income and costs ', 24), (' net finance costs ', 22), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20), ('finance cost ', 17)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Profit from discontinued operation ', 58), (' other opertaing income ', 48), (' finance expenses', 42), (' share of profit of equity accounted investees ', 39), (' net finance costs ', 38), ('finance cost ', 36), (' other income ', 36), (' Other income ', 36), (' Impairment loss ', 36), (' net of tax ', 33), (' net of tax ', 33), (' Impairement (expenses)/reversal ', 32), (' other gains/losses ', 31), (' interest revenue ', 31), (' other income and revenue ', 30), (' finance income and costs ', 25), (' Finance income and costs ', 25), (' Loss on revaluation of inventories', 25), (' expenses ', 24), (' interest gains and losses ', 24), (' finance income and finance cost ', 21), (' Share of gain/(loss) of joint venture ', 21), (' Finance income and finance costs ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' finance income and costs ', 73), (' Finance income and costs ', 73), (' finance income and finance cost ', 60), (' Finance income and finance costs ', 60), (' net finance costs ', 59), ('finance cost ', 52), (' finance expenses', 48), (' other income and revenue ', 47), (' other income ', 43), (' Other income ', 43), (' interest gains and losses ', 41), (' Impairment loss ', 35), (' other opertaing income ', 33), (' Profit from discontinued operation ', 31), (' other gains/losses ', 30), (' interest revenue ', 30), (' Share of gain/(loss) of joint venture ', 30), (' Loss on revaluation of inventories', 30), (' share of profit of equity accounted investees ', 26), (' Impairement (expenses)/reversal ', 25), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance income and costs ', 69), (' Finance income and costs ', 69), (' finance expenses', 67), (' finance income and finance cost ', 56), (' Finance income and finance costs ', 56), (' share of profit of equity accounted investees ', 35), (' net of tax ', 33), (' net of tax ', 33), (' Profit from discontinued operation ', 32), (' interest revenue ', 31), (' other income and revenue ', 30), (' other opertaing income ', 28), (' other income ', 27), (' Other income ', 27), (' Share of gain/(loss) of joint venture ', 26), (' Impairement (expenses)/reversal ', 26), (' Loss on revaluation of inventories', 25), (' interest gains and losses ', 24), (' other gains/losses ', 23), (' Impairment loss ', 18), (' expenses ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance income and costs ', 72), (' Finance income and costs ', 72), (' finance income and finance cost ', 60), (' Finance income and finance costs ', 60), (' finance expenses', 57), (' other income ', 38), (' interest gains and losses ', 38), (' Other income ', 38), (' Profit from discontinued operation ', 38), (' other opertaing income ', 36), (' share of profit of equity accounted investees ', 36), (' Impairement (expenses)/reversal ', 34), (' Share of gain/(loss) of joint venture ', 33), (' other income and revenue ', 32), (' Loss on revaluation of inventories', 28), (' other gains/losses ', 27), (' interest revenue ', 27), (' net of tax ', 27), (' net of tax ', 27), (' Impairment loss ', 23), (' expenses ', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net of tax ', 52), (' net of tax ', 52), (' Profit from discontinued operation ', 47), (' other opertaing income ', 41), (' net finance costs ', 39), (' share of profit of equity accounted investees ', 39), (' Loss on revaluation of inventories', 38), ('finance cost ', 37), (' finance expenses', 34), (' other income ', 30), (' Other income ', 30), (' Impairement (expenses)/reversal ', 28), (' finance income and finance cost ', 27), (' finance income and costs ', 27), (' Share of gain/(loss) of joint venture ', 27), (' Finance income and finance costs ', 27), (' Finance income and costs ', 27), (' other gains/losses ', 26), (' interest revenue ', 26), (' other income and revenue ', 26), (' Impairment loss ', 22), (' interest gains and losses ', 21), (' expenses ', 18)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' Impairement (expenses)/reversal ', 56), (' expenses ', 55), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' other income and revenue ', 47), (' net finance costs ', 45), (' finance income and costs ', 43), (' net of tax ', 43), (' net of tax ', 43), (' Finance income and costs ', 43), ('finance cost ', 37), (' finance income and finance cost ', 36), (' Finance income and finance costs ', 36), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest revenue ', 32), (' interest gains and losses ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Loss on revaluation of inventories', 32), (' share of profit of equity accounted investees ', 27), (' Impairment loss ', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' other opertaing income ', 54), (' other income ', 47), (' Other income ', 47), (' share of profit of equity accounted investees ', 44), (' Share of gain/(loss) of joint venture ', 43), (' Profit from discontinued operation ', 43), (' other gains/losses ', 41), (' other income and revenue ', 39), (' Impairement (expenses)/reversal ', 36), (' net finance costs ', 35), (' Loss on revaluation of inventories', 35), ('finance cost ', 33), (' net of tax ', 31), (' net of tax ', 31), (' interest revenue ', 29), (' interest gains and losses ', 29), (' finance income and finance cost ', 26), (' Finance income and finance costs ', 26), (' finance expenses', 25), (' finance income and costs ', 25), (' Finance income and costs ', 25), (' Impairment loss ', 20), (' expenses ', 16)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other income ', 67), (' Other income ', 67), (' other income and revenue ', 59), (' other opertaing income ', 55), (' net finance costs ', 49), (' other gains/losses ', 49), (' Impairement (expenses)/reversal ', 48), (' finance expenses', 46), (' Profit from discontinued operation ', 45), ('finance cost ', 42), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' share of profit of equity accounted investees ', 39), (' finance income and finance cost ', 36), (' interest gains and losses ', 36), (' Share of gain/(loss) of joint venture ', 36), (' Finance income and finance costs ', 36), (' Impairment loss ', 30), (' expenses ', 29), (' Loss on revaluation of inventories', 28), (' interest revenue ', 27), (' net of tax ', 21), (' net of tax ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other income and revenue ', 46), (' other opertaing income ', 45), (' net finance costs ', 44), (' other income ', 43), (' share of profit of equity accounted investees ', 43), (' Other income ', 43), (' Profit from discontinued operation ', 42), (' Impairement (expenses)/reversal ', 40), (' finance income and costs ', 39), (' Finance income and costs ', 39), (' finance expenses', 38), (' Share of gain/(loss) of joint venture ', 38), (' other gains/losses ', 36), (' Loss on revaluation of inventories', 36), ('finance cost ', 35), (' finance income and finance cost ', 35), (' Finance income and finance costs ', 35), (' interest gains and losses ', 32), (' interest revenue ', 28), (' net of tax ', 24), (' net of tax ', 24), (' Impairment loss ', 22), (' expenses ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 11, 12], 'score': 100, 'value': -1429762.0, 'line_item_label': ['Other income', 'Finance costs', 'Net finance costs'], 'note_numbers': [5.0, nan, 8.0], 'line_item_value': [824594.0, -1131055.0, -1123301.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Profit from discontinued operation ', 62), (' net finance costs ', 52), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' other gains/losses ', 44), ('finance cost ', 43), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' other income and revenue ', 41), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 36), (' finance income and finance cost ', 35), (' interest gains and losses ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Finance income and finance costs ', 35), (' net of tax ', 32), (' net of tax ', 32), (' Impairement (expenses)/reversal ', 31), (' interest revenue ', 30), (' Impairment loss ', 26), (' finance expenses', 24), (' expenses ', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' other income ', 40), (' finance income and costs ', 40), (' Other income ', 40), (' Finance income and costs ', 40), (' net of tax ', 38), (' net of tax ', 38), (' other opertaing income ', 37), (' share of profit of equity accounted investees ', 36), (' other gains/losses ', 33), (' interest revenue ', 33), (' Loss on revaluation of inventories', 33), (' finance income and finance cost ', 32), (' other income and revenue ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and finance costs ', 32), (' Impairment loss ', 30), (' Impairement (expenses)/reversal ', 28), (' Profit from discontinued operation ', 28), (' finance expenses', 27), (' interest gains and losses ', 26), (' expenses ', 13)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses ', 52), (' Profit from discontinued operation ', 46), (' net finance costs ', 44), ('finance cost ', 43), (' other opertaing income ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 36), (' other income ', 35), (' Other income ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Impairment loss ', 35), (' finance expenses', 32), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), (' interest gains and losses ', 29), (' finance income and finance cost ', 25), (' Impairement (expenses)/reversal ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other income ', 100), (' Other income ', 100), (' other opertaing income ', 76), (' other gains/losses ', 69), (' other income and revenue ', 67), (' Profit from discontinued operation ', 42), (' Share of gain/(loss) of joint venture ', 41), (' net finance costs ', 38), (' interest revenue ', 38), (' Loss on revaluation of inventories', 38), (' interest gains and losses ', 36), (' Impairment loss ', 36), (' net of tax ', 33), (' net of tax ', 33), (' Impairement (expenses)/reversal ', 32), (' finance income and costs ', 31), (' Finance income and costs ', 31), (' share of profit of equity accounted investees ', 30), ('finance cost ', 27), (' finance income and finance cost ', 26), (' Finance income and finance costs ', 26), (' finance expenses', 25), (' expenses ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' expenses ', 43), (' interest revenue ', 43), (' Impairement (expenses)/reversal ', 43), (' other income and revenue ', 41), (' Share of gain/(loss) of joint venture ', 40), (' Loss on revaluation of inventories', 37), (' Impairment loss ', 36), (' share of profit of equity accounted investees ', 35), (' finance expenses', 34), (' net of tax ', 34), (' net of tax ', 34), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest gains and losses ', 32), (' other opertaing income ', 30), (' other income ', 24), (' finance income and finance cost ', 24), (' Other income ', 24), (' Finance income and finance costs ', 24), (' finance income and costs ', 23), (' Finance income and costs ', 23), (' net finance costs ', 22), ('finance cost ', 18)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' expenses ', 60), (' interest revenue ', 48), (' Impairement (expenses)/reversal ', 47), (' finance expenses', 44), (' other income and revenue ', 39), (' interest gains and losses ', 33), (' Impairment loss ', 32), (' finance income and costs ', 29), (' net of tax ', 29), (' Profit from discontinued operation ', 29), (' net of tax ', 29), (' Finance income and costs ', 29), (' Loss on revaluation of inventories', 29), (' net finance costs ', 28), (' other opertaing income ', 25), ('finance cost ', 24), (' other income ', 24), (' finance income and finance cost ', 24), (' share of profit of equity accounted investees ', 24), (' Other income ', 24), (' Share of gain/(loss) of joint venture ', 24), (' Finance income and finance costs ', 24), (' other gains/losses ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [(' expenses ', 60), (' finance expenses', 44), (' other income and revenue ', 44), (' interest revenue ', 41), (' other opertaing income ', 38), (' Share of gain/(loss) of joint venture ', 38), (' Impairement (expenses)/reversal ', 35), (' net finance costs ', 34), (' other gains/losses ', 34), (' finance income and costs ', 34), (' Finance income and costs ', 34), (' Loss on revaluation of inventories', 34), (' share of profit of equity accounted investees ', 33), (' interest gains and losses ', 33), ('finance cost ', 32), (' other income ', 32), (' Other income ', 32), (' Impairment loss ', 32), (' finance income and finance cost ', 29), (' net of tax ', 29), (' Finance income and finance costs ', 29), (' Profit from discontinued operation ', 29), (' net of tax ', 29)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' expenses ', 67), (' other income ', 61), (' Other income ', 61), (' other gains/losses ', 59), (' finance expenses', 56), (' Impairement (expenses)/reversal ', 56), (' other opertaing income ', 53), (' other income and revenue ', 41), (' interest revenue ', 37), (' Share of gain/(loss) of joint venture ', 35), (' share of profit of equity accounted investees ', 34), (' net of tax ', 32), (' net of tax ', 32), (' Loss on revaluation of inventories', 30), (' interest gains and losses ', 29), (' Impairment loss ', 26), (' Profit from discontinued operation ', 26), (' finance income and costs ', 24), (' Finance income and costs ', 24), (' net finance costs ', 22), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20), ('finance cost ', 17)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Profit from discontinued operation ', 58), (' other opertaing income ', 48), (' finance expenses', 42), (' share of profit of equity accounted investees ', 39), (' net finance costs ', 38), ('finance cost ', 36), (' other income ', 36), (' Other income ', 36), (' Impairment loss ', 36), (' net of tax ', 33), (' net of tax ', 33), (' Impairement (expenses)/reversal ', 32), (' other gains/losses ', 31), (' interest revenue ', 31), (' other income and revenue ', 30), (' finance income and costs ', 25), (' Finance income and costs ', 25), (' Loss on revaluation of inventories', 25), (' expenses ', 24), (' interest gains and losses ', 24), (' finance income and finance cost ', 21), (' Share of gain/(loss) of joint venture ', 21), (' Finance income and finance costs ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' finance income and costs ', 73), (' Finance income and costs ', 73), (' finance income and finance cost ', 60), (' Finance income and finance costs ', 60), (' net finance costs ', 59), ('finance cost ', 52), (' finance expenses', 48), (' other income and revenue ', 47), (' other income ', 43), (' Other income ', 43), (' interest gains and losses ', 41), (' Impairment loss ', 35), (' other opertaing income ', 33), (' Profit from discontinued operation ', 31), (' other gains/losses ', 30), (' interest revenue ', 30), (' Share of gain/(loss) of joint venture ', 30), (' Loss on revaluation of inventories', 30), (' share of profit of equity accounted investees ', 26), (' Impairement (expenses)/reversal ', 25), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance income and costs ', 69), (' Finance income and costs ', 69), (' finance expenses', 67), (' finance income and finance cost ', 56), (' Finance income and finance costs ', 56), (' share of profit of equity accounted investees ', 35), (' net of tax ', 33), (' net of tax ', 33), (' Profit from discontinued operation ', 32), (' interest revenue ', 31), (' other income and revenue ', 30), (' other opertaing income ', 28), (' other income ', 27), (' Other income ', 27), (' Share of gain/(loss) of joint venture ', 26), (' Impairement (expenses)/reversal ', 26), (' Loss on revaluation of inventories', 25), (' interest gains and losses ', 24), (' other gains/losses ', 23), (' Impairment loss ', 18), (' expenses ', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance income and costs ', 72), (' Finance income and costs ', 72), (' finance income and finance cost ', 60), (' Finance income and finance costs ', 60), (' finance expenses', 57), (' other income ', 38), (' interest gains and losses ', 38), (' Other income ', 38), (' Profit from discontinued operation ', 38), (' other opertaing income ', 36), (' share of profit of equity accounted investees ', 36), (' Impairement (expenses)/reversal ', 34), (' Share of gain/(loss) of joint venture ', 33), (' other income and revenue ', 32), (' Loss on revaluation of inventories', 28), (' other gains/losses ', 27), (' interest revenue ', 27), (' net of tax ', 27), (' net of tax ', 27), (' Impairment loss ', 23), (' expenses ', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net of tax ', 52), (' net of tax ', 52), (' Profit from discontinued operation ', 47), (' other opertaing income ', 41), (' net finance costs ', 39), (' share of profit of equity accounted investees ', 39), (' Loss on revaluation of inventories', 38), ('finance cost ', 37), (' finance expenses', 34), (' other income ', 30), (' Other income ', 30), (' Impairement (expenses)/reversal ', 28), (' finance income and finance cost ', 27), (' finance income and costs ', 27), (' Share of gain/(loss) of joint venture ', 27), (' Finance income and finance costs ', 27), (' Finance income and costs ', 27), (' other gains/losses ', 26), (' interest revenue ', 26), (' other income and revenue ', 26), (' Impairment loss ', 22), (' interest gains and losses ', 21), (' expenses ', 18)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' Impairement (expenses)/reversal ', 56), (' expenses ', 55), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' other income and revenue ', 47), (' net finance costs ', 45), (' finance income and costs ', 43), (' net of tax ', 43), (' net of tax ', 43), (' Finance income and costs ', 43), ('finance cost ', 37), (' finance income and finance cost ', 36), (' Finance income and finance costs ', 36), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest revenue ', 32), (' interest gains and losses ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Loss on revaluation of inventories', 32), (' share of profit of equity accounted investees ', 27), (' Impairment loss ', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' other opertaing income ', 54), (' other income ', 47), (' Other income ', 47), (' share of profit of equity accounted investees ', 44), (' Share of gain/(loss) of joint venture ', 43), (' Profit from discontinued operation ', 43), (' other gains/losses ', 41), (' other income and revenue ', 39), (' Impairement (expenses)/reversal ', 36), (' net finance costs ', 35), (' Loss on revaluation of inventories', 35), ('finance cost ', 33), (' net of tax ', 31), (' net of tax ', 31), (' interest revenue ', 29), (' interest gains and losses ', 29), (' finance income and finance cost ', 26), (' Finance income and finance costs ', 26), (' finance expenses', 25), (' finance income and costs ', 25), (' Finance income and costs ', 25), (' Impairment loss ', 20), (' expenses ', 16)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other income ', 67), (' Other income ', 67), (' other income and revenue ', 59), (' other opertaing income ', 55), (' net finance costs ', 49), (' other gains/losses ', 49), (' Impairement (expenses)/reversal ', 48), (' finance expenses', 46), (' Profit from discontinued operation ', 45), ('finance cost ', 42), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' share of profit of equity accounted investees ', 39), (' finance income and finance cost ', 36), (' interest gains and losses ', 36), (' Share of gain/(loss) of joint venture ', 36), (' Finance income and finance costs ', 36), (' Impairment loss ', 30), (' expenses ', 29), (' Loss on revaluation of inventories', 28), (' interest revenue ', 27), (' net of tax ', 21), (' net of tax ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other income and revenue ', 46), (' other opertaing income ', 45), (' net finance costs ', 44), (' other income ', 43), (' share of profit of equity accounted investees ', 43), (' Other income ', 43), (' Profit from discontinued operation ', 42), (' Impairement (expenses)/reversal ', 40), (' finance income and costs ', 39), (' Finance income and costs ', 39), (' finance expenses', 38), (' Share of gain/(loss) of joint venture ', 38), (' other gains/losses ', 36), (' Loss on revaluation of inventories', 36), ('finance cost ', 35), (' finance income and finance cost ', 35), (' Finance income and finance costs ', 35), (' interest gains and losses ', 32), (' interest revenue ', 28), (' net of tax ', 24), (' net of tax ', 24), (' Impairment loss ', 22), (' expenses ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 11, 12], 'score': 100, 'value': -177119.0, 'line_item_label': ['Other income', 'Finance costs', 'Net finance costs'], 'note_numbers': [5.0, nan, 8.0], 'line_item_value': [718958.0, -1119867.0, 223790.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-08-11 14:44:05+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('NULL', 15)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('NULL', 15)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), (' income tax expense', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('deferred tax', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' tax (expense)/benefit', 62), (' income tax benefit/(expense)', 53), ('deferred tax', 43), ('prior year ', 42), (' income tax expense', 40), ('earlier year', 38), ('amount transferred to retained earnings', 34), ('provision for taxation previous year', 33), ('current tax', 32), (' income tax benefit', 32), ('minimum alternate tax credit entitlement', 30), (' income tax', 26)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [(' tax (expense)/benefit', 50), ('amount transferred to retained earnings', 44), (' income tax benefit/(expense)', 42), (' income tax expense', 40), ('earlier year', 38), ('provision for taxation previous year', 33), ('prior year ', 33), ('current tax', 32), ('deferred tax', 26), ('minimum alternate tax credit entitlement', 26), (' income tax', 26), (' income tax benefit', 26)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('provision for taxation previous year', 45), ('deferred tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('earlier year', 35), (' income tax', 30), (' income tax benefit', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('current tax', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 44), ('amount transferred to retained earnings', 43), (' income tax', 42), (' income tax benefit/(expense)', 36), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('deferred tax', 25), ('prior year ', 24), ('earlier year', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), ('provision for taxation previous year', 53), (' tax (expense)/benefit', 53), ('current tax', 52), (' income tax benefit/(expense)', 50), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 36)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), ('provision for taxation previous year', 47), (' income tax benefit', 46), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('amount transferred to retained earnings', 39), ('earlier year', 38), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('current tax', 35), (' tax (expense)/benefit', 34), ('deferred tax', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': -5285030.0, 'line_item_label': ['Income tax expense'], 'note_numbers': [9.0], 'line_item_value': [-5285030.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), (' income tax expense', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('deferred tax', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' tax (expense)/benefit', 62), (' income tax benefit/(expense)', 53), ('deferred tax', 43), ('prior year ', 42), (' income tax expense', 40), ('earlier year', 38), ('amount transferred to retained earnings', 34), ('provision for taxation previous year', 33), ('current tax', 32), (' income tax benefit', 32), ('minimum alternate tax credit entitlement', 30), (' income tax', 26)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [(' tax (expense)/benefit', 50), ('amount transferred to retained earnings', 44), (' income tax benefit/(expense)', 42), (' income tax expense', 40), ('earlier year', 38), ('provision for taxation previous year', 33), ('prior year ', 33), ('current tax', 32), ('deferred tax', 26), ('minimum alternate tax credit entitlement', 26), (' income tax', 26), (' income tax benefit', 26)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('provision for taxation previous year', 45), ('deferred tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('earlier year', 35), (' income tax', 30), (' income tax benefit', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('current tax', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 44), ('amount transferred to retained earnings', 43), (' income tax', 42), (' income tax benefit/(expense)', 36), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('deferred tax', 25), ('prior year ', 24), ('earlier year', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), ('provision for taxation previous year', 53), (' tax (expense)/benefit', 53), ('current tax', 52), (' income tax benefit/(expense)', 50), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 36)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), ('provision for taxation previous year', 47), (' income tax benefit', 46), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('amount transferred to retained earnings', 39), ('earlier year', 38), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('current tax', 35), (' tax (expense)/benefit', 34), ('deferred tax', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': -5887745.0, 'line_item_label': ['Income tax expense'], 'note_numbers': [9.0], 'line_item_value': [-5887745.0]}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-08-11 14:44:05+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [('share of', 32), ('share in', 32)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [('share of', 32), ('share in', 32)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 37), (' prior period ', 33), ('exceptional ', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional ', 27), (' Actuarial gains / (losses) on retirement benefit obligation', 26), (' prior period ', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 29), ('exceptional ', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 41), (' prior period ', 29), ('exceptional ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('exceptional ', 40), (' prior period ', 38), (' Actuarial gains / (losses) on retirement benefit obligation', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [(' prior period ', 31), (' Actuarial gains / (losses) on retirement benefit obligation', 31), ('exceptional ', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional ', 44), (' prior period ', 42), (' Actuarial gains / (losses) on retirement benefit obligation', 33)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' prior period ', 61), ('exceptional ', 35), (' Actuarial gains / (losses) on retirement benefit obligation', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24), ('exceptional ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 29), (' prior period ', 26), ('exceptional ', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 38), ('exceptional ', 29), (' prior period ', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 34), ('exceptional ', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional ', 36), (' prior period ', 36), (' Actuarial gains / (losses) on retirement benefit obligation', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' prior period ', 39), (' Actuarial gains / (losses) on retirement benefit obligation', 32), ('exceptional ', 16)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' prior period ', 41), (' Actuarial gains / (losses) on retirement benefit obligation', 41), ('exceptional ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 42), (' prior period ', 34), ('exceptional ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 37), (' prior period ', 33), ('exceptional ', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional ', 27), (' Actuarial gains / (losses) on retirement benefit obligation', 26), (' prior period ', 19)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 29), ('exceptional ', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 41), (' prior period ', 29), ('exceptional ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('exceptional ', 40), (' prior period ', 38), (' Actuarial gains / (losses) on retirement benefit obligation', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [(' prior period ', 31), (' Actuarial gains / (losses) on retirement benefit obligation', 31), ('exceptional ', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional ', 44), (' prior period ', 42), (' Actuarial gains / (losses) on retirement benefit obligation', 33)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' prior period ', 61), ('exceptional ', 35), (' Actuarial gains / (losses) on retirement benefit obligation', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24), ('exceptional ', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 29), (' prior period ', 26), ('exceptional ', 24)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 38), ('exceptional ', 29), (' prior period ', 22)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 34), ('exceptional ', 27)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional ', 36), (' prior period ', 36), (' Actuarial gains / (losses) on retirement benefit obligation', 30)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' prior period ', 39), (' Actuarial gains / (losses) on retirement benefit obligation', 32), ('exceptional ', 16)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' prior period ', 41), (' Actuarial gains / (losses) on retirement benefit obligation', 41), ('exceptional ', 21)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 42), (' prior period ', 34), ('exceptional ', 20)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:44:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-11 14:44:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('NULL', 15)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:44:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('NULL', 15)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = amortisation expense , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:44:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:44:43+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-08-11 14:44:43+0530 - sLogger - DEBUG - {'fileid': '099df001-e23d-427e-8177-ca17d963ab03', 'filename': 'SCAP H FY23_signed.pdf.pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/SCAP H FY23_signed.pdf.pdf', 'status': 'Processing'}
2023-08-11 14:44:43+0530 - sLogger - DEBUG - save file completed
2023-08-11 14:44:43+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-08-11 14:44:43+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-08-11 14:44:43+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-08-11 14:44:43+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-08-11 14:44:43+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-08-11 14:44:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:44:43+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:44:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:44:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:44:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:44:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:44:47+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:44:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:44:47+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:44:51+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:44:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:44:51+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:44:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:44:51+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:44:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:44:51+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:44:58+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:44:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:44:58+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:44:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:44:58+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:44:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:44:58+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:45:05+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:45:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:45:05+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:45:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:45:05+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:45:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:45:05+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:45:11+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:45:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:45:11+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:45:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:45:11+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:45:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:45:11+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:45:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:45:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:45:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:45:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:45:16+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:45:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:45:16+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:45:21+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:45:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:45:21+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:45:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:45:21+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:45:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:45:21+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:45:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:45:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:45:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:45:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:45:26+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:45:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:45:26+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:45:32+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:45:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:45:32+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:45:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:45:32+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:45:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:45:32+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:45:40+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:45:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:45:40+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:45:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:45:40+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:45:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:45:40+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:45:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:45:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:45:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:45:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:45:47+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:45:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:45:47+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:45:56+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:45:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:45:56+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:45:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:45:56+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:45:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:45:56+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:46:04+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:46:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:46:04+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:46:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:46:04+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:46:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:46:04+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:46:13+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:46:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:46:13+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:46:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:46:13+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:46:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:46:13+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:46:22+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:46:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:46:22+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:46:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:46:22+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:46:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:46:22+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:46:31+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:46:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:46:31+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:46:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:46:31+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:46:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:46:31+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:46:40+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:46:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:46:40+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:46:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:46:40+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:46:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:46:40+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:46:48+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:46:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:46:48+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:46:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:46:48+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:46:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:46:48+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:46:58+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:46:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:46:58+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:46:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:46:58+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:46:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:46:58+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:47:08+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:47:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:47:08+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:47:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:47:08+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:47:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:47:08+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:47:18+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:47:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:47:18+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:47:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:47:18+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:47:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:47:18+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:47:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:47:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:47:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:47:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:47:27+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:47:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:47:27+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:47:33+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:47:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:47:33+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:47:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:47:33+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:47:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:47:33+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:47:38+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:47:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:47:38+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:47:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:47:38+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:47:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:47:38+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:47:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:47:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:47:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:47:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:47:43+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:47:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:47:43+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:47:48+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:47:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:47:48+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:47:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:47:48+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:47:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:47:48+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:47:54+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:47:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:47:54+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:47:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:47:54+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:47:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:47:54+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:47:59+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:47:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:47:59+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:47:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:47:59+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:47:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:47:59+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:48:04+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:48:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:48:04+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:48:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:48:04+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:48:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:48:04+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:48:10+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:48:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:48:10+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:48:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:48:10+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:48:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:48:10+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:48:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:48:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:48:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:48:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:48:16+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:48:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:48:16+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:48:21+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:48:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:48:21+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:48:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:48:21+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:48:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:48:21+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:48:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:48:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:48:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:48:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:48:26+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:48:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:48:26+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:48:33+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:48:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:48:33+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:48:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:48:33+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:48:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:48:33+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:48:39+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:48:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:48:39+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:48:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:48:39+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:48:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:48:39+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:48:44+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:48:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:48:44+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:48:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:48:44+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:48:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:48:44+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:48:51+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:48:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:48:51+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:48:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:48:51+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:48:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:48:51+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:48:57+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:48:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:48:57+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:48:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:48:57+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:48:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:48:57+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:49:02+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:49:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:49:02+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:49:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:49:02+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:49:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:49:02+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:49:06+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:49:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:49:06+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:49:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:49:06+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:49:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:49:06+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:49:12+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:49:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:49:12+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:49:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:49:12+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:49:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:49:12+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:49:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:49:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:49:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:49:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:49:19+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:49:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-11 14:49:19+0530 - sLogger - DEBUG - filetype: pdf
2023-08-11 14:49:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-11 14:49:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-11 14:49:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-11 14:49:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-11 14:49:27+0530 - sLogger - DEBUG - function: predict completed.
2023-08-11 14:49:27+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-08-11 14:49:27+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [5, 38], 'predicted_cpl_pages': [6, 23, 24, 25, 37], 'predicted_ccf_pages': [8], 'filtered_cbs_pages': [38], 'filtered_cpl_pages': [37], 'filtered_ccf_pages': [], 'month': 'march', 'status': 'Page Classification Completed'}
2023-08-11 14:49:27+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-08-11 14:49:27+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-08-11 14:49:27+0530 - sLogger - DEBUG - process file completed
2023-08-11 14:49:27+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-08-11 14:49:27+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-08-11 14:49:27+0530 - sLogger - DEBUG - TE process file started
2023-08-11 14:50:09+0530 - sLogger - DEBUG - TE Proces file completed
2023-08-11 14:50:09+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-11 14:50:09+0530 - sLogger - DEBUG - process_main_pages started
2023-08-11 14:50:09+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-11 14:50:09+0530 - sLogger - DEBUG - start_refactoring started
2023-08-11 14:50:09+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-11 14:50:09+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-11 14:50:09+0530 - sLogger - DEBUG - start_refactoring started
2023-08-11 14:50:09+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-11 14:58:13+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-11 14:58:13+0530 - sLogger - DEBUG - process_main_pages started
2023-08-11 14:58:13+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-11 14:58:13+0530 - sLogger - DEBUG - start_refactoring started
2023-08-11 14:58:13+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-11 14:58:13+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-11 14:58:13+0530 - sLogger - DEBUG - start_refactoring started
2023-08-11 14:58:13+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-11 14:58:13+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-11 14:58:13+0530 - sLogger - DEBUG - start_refactoring started
2023-08-11 14:58:13+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-11 14:58:13+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-11 14:58:13+0530 - sLogger - DEBUG - start_refactoring started
2023-08-11 14:58:13+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-11 14:58:13+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL
2023-08-11 14:58:13+0530 - sLogger - ERROR - error occured: 'headers'
2023-08-11 14:58:13+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL notes_number_processing
2023-08-11 14:58:13+0530 - sLogger - ERROR - error occured: local variable 'cpl_header' referenced before assignment
2023-08-11 14:58:13+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-11 14:58:13+0530 - sLogger - DEBUG - set_section_details started
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('currentassets', 59), ('current assets', 56), ('noncurrent assets', 56), ('noncurrentassets', 50), ('equity', 36), ('equityliabilities', 31), ('currentliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('noncurrentliabilities', 24), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentassets | score 90
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentliabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equityandliabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equityandliabilities', 38), ('equity liabilities', 35), ('equityliabilities', 34), ('noncurrentassets', 33), ('assets', 31), ('currentassets', 30), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrentliabilities', 24), ('noncurrent liabilities', 23), ('liabilities', 22), ('currentliabilities', 20)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentassets | score 37
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentliabilities | score 35
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equityandliabilities | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Trade and other receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentassets | score 41
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentliabilities | score 45
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equityandliabilities | score 43
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentassets | score 42
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentliabilities | score 41
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equityandliabilities | score 40
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Current tax assets | [('current assets', 87), ('noncurrent assets', 67), ('current liabilities', 58), ('currentassets', 55), ('currentliabilities', 54), ('noncurrentassets', 50), ('noncurrentliabilities', 48), ('assets', 45), ('noncurrent liabilities', 39), ('equity and liabilities', 35), ('equity liabilities', 33), ('equityandliabilities', 29), ('equity', 26), ('equityliabilities', 24), ('liabilities', 9)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD current assets | score 95
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD currentassets | score 84
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD current liabilities | score 59
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD currentliabilities | score 56
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD noncurrent assets | score 80
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD noncurrentassets | score 76
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD noncurrent liabilities | score 55
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD non current assets | score 84
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD non current liabilities | score 56
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD noncurrentliabilities | score 51
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD noncurrentassets | score 76
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD noncurrentliabilities | score 51
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD equity and liabilities | score 40
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD equityandliabilities | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Prepayments | [('currentassets', 33), ('current liabilities', 30), ('noncurrentassets', 29), ('equityliabilities', 29), ('currentliabilities', 27), ('equityandliabilities', 24), ('noncurrentliabilities', 22), ('current assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equity and liabilities', 17), ('noncurrent assets', 11), ('noncurrent liabilities', 10)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current assets | score 48
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD currentassets | score 50
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current liabilities | score 33
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD currentliabilities | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent assets | score 50
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentassets | score 44
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent liabilities | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current assets | score 50
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current liabilities | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentassets | score 44
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity and liabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equityandliabilities | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Other assets | [('noncurrent assets', 67), ('assets', 62), ('current assets', 58), ('currentassets', 43), ('noncurrentassets', 38), ('noncurrent liabilities', 32), ('equity and liabilities', 29), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('equityliabilities', 21), ('currentliabilities', 20), ('equityandliabilities', 18), ('noncurrentliabilities', 17), ('liabilities', 12)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current assets | score 64
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD currentassets | score 56
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current liabilities | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD currentliabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent assets | score 64
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentassets | score 57
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current assets | score 86
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current liabilities | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentassets | score 57
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity and liabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equityandliabilities | score 25
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('currentliabilities', 57), ('currentassets', 52), ('noncurrentliabilities', 52), ('noncurrentassets', 47), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equityandliabilities', 33), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentassets | score 83
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentliabilities | score 53
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equityandliabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('equityandliabilities', 40), ('current assets', 38), ('equityliabilities', 38), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('currentassets', 28), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentassets | score 39
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentliabilities | score 35
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equityandliabilities | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentassets | score 53
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentliabilities | score 29
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equityandliabilities | score 27
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equityandliabilities', 43), ('currentassets', 42), ('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 38), ('noncurrentassets', 37), ('equity', 33), ('noncurrent liabilities', 31), ('equityliabilities', 30), ('currentliabilities', 29), ('noncurrentliabilities', 25), ('liabilities', 22)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current assets | score 58
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentassets | score 53
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current liabilities | score 42
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentliabilities | score 40
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent assets | score 59
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current assets | score 57
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current liabilities | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity and liabilities | score 46
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equityandliabilities | score 49
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('equityandliabilities', 23), ('noncurrent liabilities', 21), ('equity', 19), ('currentliabilities', 17), ('equityliabilities', 17), ('noncurrentliabilities', 15), ('liabilities', 10)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentassets | score 62
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentliabilities | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equityandliabilities | score 31
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrentliabilities', 58), ('noncurrent liabilities', 55), ('noncurrentassets', 53), ('currentliabilities', 43), ('assets', 42), ('current liabilities', 42), ('currentassets', 39), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentassets | score 83
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentliabilities | score 49
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equityandliabilities | score 28
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentassets | score 56
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentliabilities | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equityandliabilities | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Liabilities | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equityandliabilities', 35), ('equity', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11), ('currentassets', 11), ('noncurrentassets', 10)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current assets | score 24
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentassets | score 25
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current liabilities | score 90
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentliabilities | score 90
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent assets | score 24
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent liabilities | score 90
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current assets | score 24
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current liabilities | score 90
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity and liabilities | score 90
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equityandliabilities | score 90
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentassets | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentliabilities | score 43
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equityandliabilities | score 41
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Loans and borrowings | [('equity and liabilities', 44), ('noncurrentliabilities', 37), ('current assets', 36), ('noncurrent assets', 36), ('current liabilities', 34), ('noncurrent liabilities', 34), ('noncurrentassets', 33), ('equityandliabilities', 31), ('liabilities', 29), ('currentliabilities', 25), ('currentassets', 22), ('equity liabilities', 21), ('assets', 10), ('equityliabilities', 9), ('equity', 0)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD current assets | score 28
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD currentassets | score 28
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD current liabilities | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD currentliabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrent assets | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrentassets | score 37
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrent liabilities | score 33
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD non current assets | score 40
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD non current liabilities | score 37
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrentliabilities | score 37
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrentassets | score 37
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrentliabilities | score 37
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD equity and liabilities | score 41
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD equity | score 15
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD equityandliabilities | score 33
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Employee benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('equityliabilities', 35), ('current liabilities', 34), ('currentliabilities', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('assets', 20)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentassets | score 33
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 33
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentliabilities | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equityandliabilities | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Current tax liabilities | [('current liabilities', 88), ('currentliabilities', 67), ('currentassets', 60), ('noncurrentliabilities', 60), ('equity liabilities', 58), ('noncurrentassets', 55), ('equity and liabilities', 51), ('liabilities', 50), ('current assets', 45), ('noncurrent liabilities', 44), ('equityliabilities', 31), ('equityandliabilities', 28), ('noncurrent assets', 26), ('equity', 25), ('assets', 17)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current assets | score 86
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD currentassets | score 56
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current liabilities | score 95
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD currentliabilities | score 88
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent assets | score 55
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentassets | score 51
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent liabilities | score 84
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current assets | score 56
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current liabilities | score 86
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentliabilities | score 82
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentassets | score 51
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentliabilities | score 82
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity and liabilities | score 71
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equityandliabilities | score 65
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentassets | score 56
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentliabilities | score 84
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equityandliabilities | score 62
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Employee benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('equityliabilities', 35), ('current liabilities', 34), ('currentliabilities', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('assets', 20)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentassets | score 33
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 33
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentliabilities | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equityandliabilities | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentassets | score 56
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentliabilities | score 85
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equityandliabilities | score 58
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentassets | score 27
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentliabilities | score 69
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equityandliabilities | score 70
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('currentassets', 48), ('noncurrentassets', 42), ('currentliabilities', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('noncurrentliabilities', 29), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equityliabilities', 24), ('liabilities', 13)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentassets | score 70
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentliabilities | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equityandliabilities | score 33
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentassets | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentliabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equityandliabilities | score 90
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('currentliabilities', 50), ('current liabilities', 48), ('currentassets', 43), ('noncurrentliabilities', 43), ('current assets', 42), ('assets', 38), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('equityliabilities', 32), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentassets | score 40
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentliabilities | score 40
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equityandliabilities | score 43
2023-08-11 14:58:13+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentassets | score 32
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentliabilities | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-08-11 14:58:13+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equityandliabilities | score 57
2023-08-11 14:58:13+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-11 14:58:13+0530 - sLogger - DEBUG - set_section_details started
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from operating activities | operating cash flow before working capital changes
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash receipts from customers | adiustments for movements in working capital
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash paid to suppliers and employees | changes in operating assets and liabilities
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash (used in)/ from operations | operating cash flow before working capital changes
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Borrowing costs paid | operating profit before working capital changes
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid on lease liabilities | adjustments for increase decrease in operating liabilities
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax refund received/(paid) | operating profit before working capital changes
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash (used in)/from operating activities | adjustments for increase decrease in operating assets
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from investing activities | operating cash flow before working capital changes
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Acquisition of property, plant and equipment | changes in operating assets and liabilities
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Acquisition of intangibles | changes in working capital
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in investing activities | adjustments for increase decrease in operating liabilities
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from financing activities | operating cash flow before working capital changes
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividends paid | changes in assets liabilities
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from new borrowings | operating profit before working capital changes
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of borrowings | operating profit before working capital changes
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of lease liabilities | changes in operating assets and liabilities
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash from/(used in) financing activities | operating cash flow before working capital changes
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at beginning of year | changes in operating assets and liabilities
2023-08-11 14:58:13+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at end of year | changes in operating assets and liabilities
2023-08-11 14:58:14+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand ', ' cash at bank ', ' cash at bank and on hand ', ' short term deposits ', ' cash at banks earns interest at floating rates based on daily bank deposit rates ', ' cash and cash equivalents ', ' cash on hand and at bank ', ' bank balances ', '  cash and bank balances ', ' cash asset']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [('cash asset', 59), ('cash and short term deposits', 41), ('Cash and short term deposits', 41), ('bank balances other than above', 36), ('cash and cash equivalents', 32), ('cash and bank balances', 32), ('bank balances other than cash and cash equivalents', 30), ('other bank balances', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('cash asset', 67), ('other bank balances', 50), ('cash and short term deposits', 47), ('Cash and short term deposits', 47), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other bank balances', 44), ('cash and short term deposits', 43), ('Cash and short term deposits', 43), ('bank balances other than cash and cash equivalents', 41), ('cash and cash equivalents', 40), ('bank balances other than above', 39), ('cash and bank balances', 36), ('cash asset', 24)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('cash asset', 56), ('cash and short term deposits', 33), ('Cash and short term deposits', 33), ('cash and cash equivalents', 28), ('bank balances other than cash and cash equivalents', 24), ('bank balances other than above', 19), ('other bank balances', 19), ('cash and bank balances', 17)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('cash asset', 64), ('cash and cash equivalents', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('cash and bank balances', 31), ('cash and short term deposits', 31), ('Cash and short term deposits', 31), ('other bank balances', 28)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('cash asset', 56), ('cash and short term deposits', 38), ('Cash and short term deposits', 38), ('bank balances other than cash and cash equivalents', 34), ('cash and cash equivalents', 33), ('bank balances other than above', 33), ('other bank balances', 25), ('cash and bank balances', 23)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 6516369.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['8'], 'line_item_value': [6516369.0]}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [('cash asset', 59), ('cash and short term deposits', 41), ('Cash and short term deposits', 41), ('bank balances other than above', 36), ('cash and cash equivalents', 32), ('cash and bank balances', 32), ('bank balances other than cash and cash equivalents', 30), ('other bank balances', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('cash asset', 67), ('other bank balances', 50), ('cash and short term deposits', 47), ('Cash and short term deposits', 47), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other bank balances', 44), ('cash and short term deposits', 43), ('Cash and short term deposits', 43), ('bank balances other than cash and cash equivalents', 41), ('cash and cash equivalents', 40), ('bank balances other than above', 39), ('cash and bank balances', 36), ('cash asset', 24)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('cash asset', 56), ('cash and short term deposits', 33), ('Cash and short term deposits', 33), ('cash and cash equivalents', 28), ('bank balances other than cash and cash equivalents', 24), ('bank balances other than above', 19), ('other bank balances', 19), ('cash and bank balances', 17)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('cash asset', 64), ('cash and cash equivalents', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('cash and bank balances', 31), ('cash and short term deposits', 31), ('Cash and short term deposits', 31), ('other bank balances', 28)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('cash asset', 56), ('cash and short term deposits', 38), ('Cash and short term deposits', 38), ('bank balances other than cash and cash equivalents', 34), ('cash and cash equivalents', 33), ('bank balances other than above', 33), ('other bank balances', 25), ('cash and bank balances', 23)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 13194828.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['8'], 'line_item_value': [13194828.0]}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['cash on hand ', ' cash at bank ', ' cash at bank and on hand ', ' short term deposits ', ' cash at banks earns interest at floating rates based on daily bank deposit rates ', ' cash and cash equivalents ', ' cash on hand and at bank ', ' bank balances ', '  cash and bank balances ', ' cash asset'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none cash on hand , res_fuzz_match = [('cash on hand ', 100), (' cash at bank ', 78), (' cash on hand and at bank ', 64), (' cash asset', 63), (' cash at bank and on hand ', 57), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 50), (' cash and cash equivalents ', 50), ('  cash and bank balances ', 43), (' bank balances ', 36), (' short term deposits ', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand ', 0), (' cash at bank ', 0), (' cash at bank and on hand ', 0), (' short term deposits ', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 0), (' cash and cash equivalents ', 0), (' cash on hand and at bank ', 0), (' bank balances ', 0), ('  cash and bank balances ', 0), (' cash asset', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none bank balances , res_fuzz_match = [(' bank balances ', 100), ('  cash and bank balances ', 81), (' cash at bank and on hand ', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 50), (' cash on hand and at bank ', 50), (' cash at bank ', 44), (' cash and cash equivalents ', 38), ('cash on hand ', 33), (' cash asset', 30), (' short term deposits ', 19)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand ', 0), (' cash at bank ', 0), (' cash at bank and on hand ', 0), (' short term deposits ', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 0), (' cash and cash equivalents ', 0), (' cash on hand and at bank ', 0), (' bank balances ', 0), ('  cash and bank balances ', 0), (' cash asset', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none cash and cash equivalents in the statement of cash flows , res_fuzz_match = [(' cash and cash equivalents ', 100), ('cash on hand ', 89), (' cash at bank ', 78), (' cash on hand and at bank ', 61), ('  cash and bank balances ', 60), (' cash asset', 60), (' cash at bank and on hand ', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 46), (' short term deposits ', 39), (' bank balances ', 36)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand ', 0), (' cash at bank ', 0), (' cash at bank and on hand ', 0), (' short term deposits ', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 0), (' cash and cash equivalents ', 0), (' cash on hand and at bank ', 0), (' bank balances ', 0), ('  cash and bank balances ', 0), (' cash asset', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none cash on hand , res_fuzz_match = [('cash on hand ', 100), (' cash at bank ', 78), (' cash on hand and at bank ', 64), (' cash asset', 63), (' cash at bank and on hand ', 57), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 50), (' cash and cash equivalents ', 50), ('  cash and bank balances ', 43), (' bank balances ', 36), (' short term deposits ', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand ', 0), (' cash at bank ', 0), (' cash at bank and on hand ', 0), (' short term deposits ', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 0), (' cash and cash equivalents ', 0), (' cash on hand and at bank ', 0), (' bank balances ', 0), ('  cash and bank balances ', 0), (' cash asset', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none bank balances , res_fuzz_match = [(' bank balances ', 100), ('  cash and bank balances ', 81), (' cash at bank and on hand ', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 50), (' cash on hand and at bank ', 50), (' cash at bank ', 44), (' cash and cash equivalents ', 38), ('cash on hand ', 33), (' cash asset', 30), (' short term deposits ', 19)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand ', 0), (' cash at bank ', 0), (' cash at bank and on hand ', 0), (' short term deposits ', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 0), (' cash and cash equivalents ', 0), (' cash on hand and at bank ', 0), (' bank balances ', 0), ('  cash and bank balances ', 0), (' cash asset', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none cash and cash equivalents in the statement of cash flows , res_fuzz_match = [(' cash and cash equivalents ', 100), ('cash on hand ', 89), (' cash at bank ', 78), (' cash on hand and at bank ', 61), ('  cash and bank balances ', 60), (' cash asset', 60), (' cash at bank and on hand ', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 46), (' short term deposits ', 39), (' bank balances ', 36)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand ', 0), (' cash at bank ', 0), (' cash at bank and on hand ', 0), (' short term deposits ', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 0), (' cash and cash equivalents ', 0), (' cash on hand and at bank ', 0), (' bank balances ', 0), ('  cash and bank balances ', 0), (' cash asset', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [1588.0, 13193240.0, 13194828.0, 1588.0, 6514781.0, 6516369.0], 'label': ['None Cash on hand', 'None Bank balances', 'None Cash and cash equivalents in the statement of cash flows', 'None Cash on hand', 'None Bank balances', 'None Cash and cash equivalents in the statement of cash flows'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' parts and accessories (at cost) ', ' stock in transit']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 22)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('inventories', 22)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 82492987.0, 'line_item_label': ['Inventories'], 'note_numbers': ['10'], 'line_item_value': [82492987.0]}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 22)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('inventories', 33)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('inventories', 22)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 111489925.0, 'line_item_label': ['Inventories'], 'note_numbers': ['10'], 'line_item_value': [111489925.0]}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' parts and accessories (at cost) ', ' stock in transit'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none at cost , res_fuzz_match = [(' finished goods at cost ', 67), (' stores and other consumables at cost ', 67), (' parts and accessories (at cost) ', 67), (' provision for inventory obsolescence ', 44), (' cranes - in transit ', 44), (' cranes ', 40), (' finished goods ', 33), (' work in progress ', 33), (' goods in transit ', 33), (' inventories ', 33), (' spare parts ', 33), (' stock in transit', 33), ('raw materials ', 22), (' raw materials ', 22)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none provision for obsolescence , res_fuzz_match = [(' provision for inventory obsolescence ', 58), (' work in progress ', 46), (' finished goods ', 45), (' finished goods at cost ', 44), (' inventories ', 44), (' stores and other consumables at cost ', 42), (' cranes - in transit ', 38), (' parts and accessories (at cost) ', 35), (' goods in transit ', 33), (' stock in transit', 31), ('raw materials ', 30), (' raw materials ', 30), (' spare parts ', 30), (' cranes ', 20)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' stores and other consumables at cost ', 50), (' cranes - in transit ', 50), (' inventories ', 44), (' finished goods at cost ', 40), (' goods in transit ', 40), (' provision for inventory obsolescence ', 40), (' cranes ', 40), (' parts and accessories (at cost) ', 40), (' stock in transit', 40), (' finished goods ', 32), (' work in progress ', 30), (' spare parts ', 30), ('raw materials ', 21), (' raw materials ', 21)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none at cost , res_fuzz_match = [(' finished goods at cost ', 67), (' stores and other consumables at cost ', 67), (' parts and accessories (at cost) ', 67), (' provision for inventory obsolescence ', 44), (' cranes - in transit ', 44), (' cranes ', 40), (' finished goods ', 33), (' work in progress ', 33), (' goods in transit ', 33), (' inventories ', 33), (' spare parts ', 33), (' stock in transit', 33), ('raw materials ', 22), (' raw materials ', 22)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none provision for obsolescence , res_fuzz_match = [(' provision for inventory obsolescence ', 58), (' work in progress ', 46), (' finished goods ', 45), (' finished goods at cost ', 44), (' inventories ', 44), (' stores and other consumables at cost ', 42), (' cranes - in transit ', 38), (' parts and accessories (at cost) ', 35), (' goods in transit ', 33), (' stock in transit', 31), ('raw materials ', 30), (' raw materials ', 30), (' spare parts ', 30), (' cranes ', 20)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' stores and other consumables at cost ', 50), (' cranes - in transit ', 50), (' inventories ', 44), (' finished goods at cost ', 40), (' goods in transit ', 40), (' provision for inventory obsolescence ', 40), (' cranes ', 40), (' parts and accessories (at cost) ', 40), (' stock in transit', 40), (' finished goods ', 32), (' work in progress ', 30), (' spare parts ', 30), ('raw materials ', 21), (' raw materials ', 21)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none demonstrator units at net realisable value , res_fuzz_match = [(' inventories ', 56), (' goods in transit ', 50), (' cranes - in transit ', 46), (' stock in transit', 46), (' stores and other consumables at cost ', 41), (' provision for inventory obsolescence ', 41), ('raw materials ', 40), (' raw materials ', 40), (' cranes ', 40), (' spare parts ', 40), (' finished goods at cost ', 38), (' parts and accessories (at cost) ', 35), (' work in progress ', 31), (' finished goods ', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none stock in transit at cost , res_fuzz_match = [(' stock in transit', 100), (' goods in transit ', 75), (' cranes - in transit ', 69), (' cranes ', 60), (' stores and other consumables at cost ', 52), (' parts and accessories (at cost) ', 48), (' finished goods at cost ', 44), (' inventories ', 44), (' provision for inventory obsolescence ', 43), ('raw materials ', 40), (' raw materials ', 40), (' work in progress ', 38), (' finished goods ', 36), (' spare parts ', 30)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' stores and other consumables at cost ', 50), (' cranes - in transit ', 50), (' inventories ', 44), (' finished goods at cost ', 40), (' goods in transit ', 40), (' provision for inventory obsolescence ', 40), (' cranes ', 40), (' parts and accessories (at cost) ', 40), (' stock in transit', 40), (' finished goods ', 32), (' work in progress ', 30), (' spare parts ', 30), ('raw materials ', 21), (' raw materials ', 21)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none at cost , res_fuzz_match = [(' finished goods at cost ', 67), (' stores and other consumables at cost ', 67), (' parts and accessories (at cost) ', 67), (' provision for inventory obsolescence ', 44), (' cranes - in transit ', 44), (' cranes ', 40), (' finished goods ', 33), (' work in progress ', 33), (' goods in transit ', 33), (' inventories ', 33), (' spare parts ', 33), (' stock in transit', 33), ('raw materials ', 22), (' raw materials ', 22)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none provision for obsolescence , res_fuzz_match = [(' provision for inventory obsolescence ', 58), (' work in progress ', 46), (' finished goods ', 45), (' finished goods at cost ', 44), (' inventories ', 44), (' stores and other consumables at cost ', 42), (' cranes - in transit ', 38), (' parts and accessories (at cost) ', 35), (' goods in transit ', 33), (' stock in transit', 31), ('raw materials ', 30), (' raw materials ', 30), (' spare parts ', 30), (' cranes ', 20)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' stores and other consumables at cost ', 50), (' cranes - in transit ', 50), (' inventories ', 44), (' finished goods at cost ', 40), (' goods in transit ', 40), (' provision for inventory obsolescence ', 40), (' cranes ', 40), (' parts and accessories (at cost) ', 40), (' stock in transit', 40), (' finished goods ', 32), (' work in progress ', 30), (' spare parts ', 30), ('raw materials ', 21), (' raw materials ', 21)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none at cost , res_fuzz_match = [(' finished goods at cost ', 67), (' stores and other consumables at cost ', 67), (' parts and accessories (at cost) ', 67), (' provision for inventory obsolescence ', 44), (' cranes - in transit ', 44), (' cranes ', 40), (' finished goods ', 33), (' work in progress ', 33), (' goods in transit ', 33), (' inventories ', 33), (' spare parts ', 33), (' stock in transit', 33), ('raw materials ', 22), (' raw materials ', 22)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none provision for obsolescence , res_fuzz_match = [(' provision for inventory obsolescence ', 58), (' work in progress ', 46), (' finished goods ', 45), (' finished goods at cost ', 44), (' inventories ', 44), (' stores and other consumables at cost ', 42), (' cranes - in transit ', 38), (' parts and accessories (at cost) ', 35), (' goods in transit ', 33), (' stock in transit', 31), ('raw materials ', 30), (' raw materials ', 30), (' spare parts ', 30), (' cranes ', 20)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' stores and other consumables at cost ', 50), (' cranes - in transit ', 50), (' inventories ', 44), (' finished goods at cost ', 40), (' goods in transit ', 40), (' provision for inventory obsolescence ', 40), (' cranes ', 40), (' parts and accessories (at cost) ', 40), (' stock in transit', 40), (' finished goods ', 32), (' work in progress ', 30), (' spare parts ', 30), ('raw materials ', 21), (' raw materials ', 21)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none demonstrator units at net realisable value , res_fuzz_match = [(' inventories ', 56), (' goods in transit ', 50), (' cranes - in transit ', 46), (' stock in transit', 46), (' stores and other consumables at cost ', 41), (' provision for inventory obsolescence ', 41), ('raw materials ', 40), (' raw materials ', 40), (' cranes ', 40), (' spare parts ', 40), (' finished goods at cost ', 38), (' parts and accessories (at cost) ', 35), (' work in progress ', 31), (' finished goods ', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none stock in transit at cost , res_fuzz_match = [(' stock in transit', 100), (' goods in transit ', 75), (' cranes - in transit ', 69), (' cranes ', 60), (' stores and other consumables at cost ', 52), (' parts and accessories (at cost) ', 48), (' finished goods at cost ', 44), (' inventories ', 44), (' provision for inventory obsolescence ', 43), ('raw materials ', 40), (' raw materials ', 40), (' work in progress ', 38), (' finished goods ', 36), (' spare parts ', 30)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' stores and other consumables at cost ', 50), (' cranes - in transit ', 50), (' inventories ', 44), (' finished goods at cost ', 40), (' goods in transit ', 40), (' provision for inventory obsolescence ', 40), (' cranes ', 40), (' parts and accessories (at cost) ', 40), (' stock in transit', 40), (' finished goods ', 32), (' work in progress ', 30), (' spare parts ', 30), ('raw materials ', 21), (' raw materials ', 21)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 16], 'score': [100, 100], 'value': [42775001.0, 29565592.0], 'label': ['None Stock in transit at cost', 'None Stock in transit at cost'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 42), (' other financial assets ', 42), (' other current financial assets ', 31), (' trade and other receivables', 22), (' prepayments ', 18)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), ('other assets ', 31), (' other current assets ', 30), (' other financial assets ', 30), (' other current financial assets ', 29), (' prepayments ', 15)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables', 26), (' prepayments ', 13)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [(' other current assets ', 83), (' other current financial assets ', 68), ('other assets ', 50), (' other financial assets ', 50), (' trade and other receivables', 41), (' prepayments ', 26)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' prepayments ', 100), (' trade and other receivables', 21), (' other current financial assets ', 18), (' other current assets ', 16), (' other financial assets ', 16), ('other assets ', 12)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets ', 100), (' other current assets ', 73), (' other financial assets ', 73), (' other current financial assets ', 58), (' trade and other receivables', 42), (' prepayments ', 12)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' trade and other receivables', 43), (' other current assets ', 42), (' other financial assets ', 42), ('other assets ', 40), (' other current financial assets ', 39), (' prepayments ', 20)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('other assets ', 54), (' other current assets ', 53), (' other financial assets ', 47), (' other current financial assets ', 43), (' trade and other receivables', 32), (' prepayments ', 10)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' other financial assets ', 65), ('other assets ', 61), (' other current assets ', 52), (' other current financial assets ', 51), (' trade and other receivables', 35), (' prepayments ', 22)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 53), (' other financial assets ', 53), (' other current financial assets ', 48), (' trade and other receivables', 43), (' prepayments ', 19)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4, 5, 6], 'score': 100, 'value': 96762611.0, 'line_item_label': ['Trade and other receivables', 'Current tax assets', 'Prepayments', 'Other assets'], 'note_numbers': ['9', nan, nan, '11'], 'line_item_value': [92742998.0, 3491032.0, 499814.0, 28767.0]}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 42), (' other financial assets ', 42), (' other current financial assets ', 31), (' trade and other receivables', 22), (' prepayments ', 18)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), ('other assets ', 31), (' other current assets ', 30), (' other financial assets ', 30), (' other current financial assets ', 29), (' prepayments ', 15)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables', 26), (' prepayments ', 13)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [(' other current assets ', 83), (' other current financial assets ', 68), ('other assets ', 50), (' other financial assets ', 50), (' trade and other receivables', 41), (' prepayments ', 26)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' prepayments ', 100), (' trade and other receivables', 21), (' other current financial assets ', 18), (' other current assets ', 16), (' other financial assets ', 16), ('other assets ', 12)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets ', 100), (' other current assets ', 73), (' other financial assets ', 73), (' other current financial assets ', 58), (' trade and other receivables', 42), (' prepayments ', 12)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' trade and other receivables', 43), (' other current assets ', 42), (' other financial assets ', 42), ('other assets ', 40), (' other current financial assets ', 39), (' prepayments ', 20)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('other assets ', 54), (' other current assets ', 53), (' other financial assets ', 47), (' other current financial assets ', 43), (' trade and other receivables', 32), (' prepayments ', 10)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' other financial assets ', 65), ('other assets ', 61), (' other current assets ', 52), (' other current financial assets ', 51), (' trade and other receivables', 35), (' prepayments ', 22)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 53), (' other financial assets ', 53), (' other current financial assets ', 48), (' trade and other receivables', 43), (' prepayments ', 19)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4, 5, 6], 'score': 100, 'value': 121878392.0, 'line_item_label': ['Trade and other receivables', 'Current tax assets', 'Prepayments', 'Other assets'], 'note_numbers': ['9', nan, nan, '11'], 'line_item_value': [121289307.0, 0.0, 559696.0, 29389.0]}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party 20 , res_fuzz_match = [(' other prepayments ', 50), (' other receivables and prepayments ', 48), (' prepaid ', 43), (' prepaid ', 43), ('prepaid expense ', 36), (' charges paid in advance', 35), (' prepaid expenditure ', 33), (' prepayments ', 33), (' in advance ', 33)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current other receivables nan , res_fuzz_match = [(' other receivables and prepayments ', 77), (' other prepayments ', 67), (' in advance ', 50), (' prepaid ', 43), (' prepaid ', 43), (' charges paid in advance', 41), ('prepaid expense ', 36), (' prepaid expenditure ', 33), (' prepayments ', 33)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' in advance ', 50), (' charges paid in advance', 41), ('prepaid expense ', 36), (' other receivables and prepayments ', 35), (' prepayments ', 33), (' other prepayments ', 33), (' prepaid expenditure ', 29), (' prepaid ', 29), (' prepaid ', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party 20 , res_fuzz_match = [(' other prepayments ', 50), (' other receivables and prepayments ', 48), (' prepaid ', 43), (' prepaid ', 43), ('prepaid expense ', 36), (' charges paid in advance', 35), (' prepaid expenditure ', 33), (' prepayments ', 33), (' in advance ', 33)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current other receivables nan , res_fuzz_match = [(' other receivables and prepayments ', 77), (' other prepayments ', 67), (' in advance ', 50), (' prepaid ', 43), (' prepaid ', 43), (' charges paid in advance', 41), ('prepaid expense ', 36), (' prepaid expenditure ', 33), (' prepayments ', 33)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' in advance ', 50), (' charges paid in advance', 41), ('prepaid expense ', 36), (' other receivables and prepayments ', 35), (' prepayments ', 33), (' other prepayments ', 33), (' prepaid expenditure ', 29), (' prepaid ', 29), (' prepaid ', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [(' other prepayments ', 42), (' prepayments ', 33), ('prepaid expense ', 31), (' prepaid expenditure ', 31), (' other receivables and prepayments ', 31), (' prepaid ', 29), (' prepaid ', 29), (' charges paid in advance', 23), (' in advance ', 17)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepayments ', 33), (' other prepayments ', 33), (' charges paid in advance', 31), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 23), (' prepaid expenditure ', 23), (' in advance ', 17)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [(' other prepayments ', 42), (' prepayments ', 33), ('prepaid expense ', 31), (' prepaid expenditure ', 31), (' other receivables and prepayments ', 31), (' prepaid ', 29), (' prepaid ', 29), (' charges paid in advance', 23), (' in advance ', 17)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepayments ', 33), (' other prepayments ', 33), (' charges paid in advance', 31), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 23), (' prepaid expenditure ', 23), (' in advance ', 17)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' other assets ', 62), (' biological assets ', 59), (' financial assets ', 56), ('other current assets ', 42), (' other financial assets ', 42), (' trade and other receivables', 22), (' income tax receivable from related parties ', 16), (' deferred operating expenditure ', 15)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets ', 36), (' financial assets ', 35), (' income tax receivable from related parties ', 33), (' other assets ', 31), ('other current assets ', 30), (' other financial assets ', 30), (' deferred operating expenditure ', 19)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' other assets ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' other assets ', 40), ('other current assets ', 36), (' financial assets ', 36), (' other financial assets ', 36), (' deferred operating expenditure ', 33), (' biological assets ', 29), (' trade and other receivables', 26), (' income tax receivable from related parties ', 24)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [('other current assets ', 83), (' financial assets ', 53), (' other assets ', 50), (' other financial assets ', 50), (' income tax receivable from related parties ', 44), (' biological assets ', 41), (' trade and other receivables', 41), (' deferred operating expenditure ', 32)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure ', 22), (' financial assets ', 21), (' income tax receivable from related parties ', 21), (' trade and other receivables', 21), ('other current assets ', 16), (' other financial assets ', 16), (' other assets ', 12), (' biological assets ', 11)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' other assets ', 100), ('other current assets ', 73), (' other financial assets ', 73), (' biological assets ', 61), (' financial assets ', 50), (' trade and other receivables', 42), (' deferred operating expenditure ', 38), (' income tax receivable from related parties ', 23)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' deferred operating expenditure ', 49), (' trade and other receivables', 43), ('other current assets ', 42), (' other financial assets ', 42), (' other assets ', 40), (' income tax receivable from related parties ', 39), (' financial assets ', 32), (' biological assets ', 28)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' biological assets ', 59), (' other assets ', 54), ('other current assets ', 53), (' financial assets ', 50), (' other financial assets ', 47), (' trade and other receivables', 32), (' deferred operating expenditure ', 28), (' income tax receivable from related parties ', 25)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets ', 80), (' biological assets ', 67), (' other financial assets ', 65), (' other assets ', 61), ('other current assets ', 52), (' trade and other receivables', 35), (' income tax receivable from related parties ', 27), (' deferred operating expenditure ', 24)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' other assets ', 62), (' financial assets ', 57), ('other current assets ', 53), (' other financial assets ', 53), (' biological assets ', 44), (' trade and other receivables', 43), (' income tax receivable from related parties ', 42), (' deferred operating expenditure ', 39)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4, 6, 9], 'score': 80, 'value': 96516496.0, 'line_item_label': ['Trade and other receivables', 'Current tax assets', 'Other assets', 'Intangible assets'], 'note_numbers': ['9', nan, '11', '14'], 'line_item_value': [92742998.0, 3491032.0, 28767.0, 253699.0]}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' other assets ', 62), (' biological assets ', 59), (' financial assets ', 56), ('other current assets ', 42), (' other financial assets ', 42), (' trade and other receivables', 22), (' income tax receivable from related parties ', 16), (' deferred operating expenditure ', 15)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets ', 36), (' financial assets ', 35), (' income tax receivable from related parties ', 33), (' other assets ', 31), ('other current assets ', 30), (' other financial assets ', 30), (' deferred operating expenditure ', 19)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' other assets ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' other assets ', 40), ('other current assets ', 36), (' financial assets ', 36), (' other financial assets ', 36), (' deferred operating expenditure ', 33), (' biological assets ', 29), (' trade and other receivables', 26), (' income tax receivable from related parties ', 24)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [('other current assets ', 83), (' financial assets ', 53), (' other assets ', 50), (' other financial assets ', 50), (' income tax receivable from related parties ', 44), (' biological assets ', 41), (' trade and other receivables', 41), (' deferred operating expenditure ', 32)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure ', 22), (' financial assets ', 21), (' income tax receivable from related parties ', 21), (' trade and other receivables', 21), ('other current assets ', 16), (' other financial assets ', 16), (' other assets ', 12), (' biological assets ', 11)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' other assets ', 100), ('other current assets ', 73), (' other financial assets ', 73), (' biological assets ', 61), (' financial assets ', 50), (' trade and other receivables', 42), (' deferred operating expenditure ', 38), (' income tax receivable from related parties ', 23)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' deferred operating expenditure ', 49), (' trade and other receivables', 43), ('other current assets ', 42), (' other financial assets ', 42), (' other assets ', 40), (' income tax receivable from related parties ', 39), (' financial assets ', 32), (' biological assets ', 28)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' biological assets ', 59), (' other assets ', 54), ('other current assets ', 53), (' financial assets ', 50), (' other financial assets ', 47), (' trade and other receivables', 32), (' deferred operating expenditure ', 28), (' income tax receivable from related parties ', 25)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets ', 80), (' biological assets ', 67), (' other financial assets ', 65), (' other assets ', 61), ('other current assets ', 52), (' trade and other receivables', 35), (' income tax receivable from related parties ', 27), (' deferred operating expenditure ', 24)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' other assets ', 62), (' financial assets ', 57), ('other current assets ', 53), (' other financial assets ', 53), (' biological assets ', 44), (' trade and other receivables', 43), (' income tax receivable from related parties ', 42), (' deferred operating expenditure ', 39)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4, 6, 9], 'score': 80, 'value': 121398016.0, 'line_item_label': ['Trade and other receivables', 'Current tax assets', 'Other assets', 'Intangible assets'], 'note_numbers': ['9', nan, '11', '14'], 'line_item_value': [121289307.0, 0.0, 29389.0, 79320.0]}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party 20 , res_fuzz_match = [(' current investments', 71), (' income tax receivable from related parties', 67), (' other receivables - related party', 67), (' rental bond', 64), (' amount receivable from controlling entity', 63), (' related party receivable', 61), (' other deposits receivable - related party', 59), (' accrued rebates', 55), (' related party disclosures', 52), (' other debtors and prepayments', 48), ('foreign exchange derivatives at fair value', 45), (' foreign exchange forward contracts', 44), (' accrued interest', 43), (' long service leave receivable', 43), (' deposits', 43), (' condensate', 43), (' derivative contracts - fair value', 42), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' interest receivable', 41), (' other', 40), (' bank guarantee', 38), (' forward exchange contracts', 38), ('other assets', 36), (' lng', 33)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current other receivables nan , res_fuzz_match = [(' other', 100), (' interest receivable', 73), (' other receivables - related party', 70), (' related party receivable', 67), ('other assets', 64), (' current investments', 64), (' rental bond', 55), (' other deposits receivable - related party', 54), (' income tax receivable from related parties', 50), (' amount receivable from controlling entity', 50), (' long service leave receivable', 48), ('foreign exchange derivatives at fair value', 46), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' electricity derivatives at fair value', 42), (' share of jv prepayments', 42), (' derivative contracts - fair value', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' related party disclosures', 33), (' lng', 33), (' bank guarantee', 31)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' lng', 67), (' rental bond', 64), (' current investments', 64), (' accrued rebates', 45), (' condensate', 43), (' electricity derivatives at fair value', 41), (' derivative contracts - fair value', 41), (' amount receivable from controlling entity', 41), (' foreign exchange forward contracts', 41), (' forward exchange contracts', 41), (' other debtors and prepayments', 41), (' other', 40), (' bank guarantee', 38), ('other assets', 36), (' accrued interest', 36), ('foreign exchange derivatives at fair value', 35), (' income tax receivable from related parties', 35), (' other receivables - related party', 35), (' other deposits receivable - related party', 35), (' related party receivable', 35), (' share of jv prepayments', 33), (' deposits', 29), (' interest receivable', 27), (' related party disclosures', 24), (' long service leave receivable', 24)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party 20 , res_fuzz_match = [(' current investments', 71), (' income tax receivable from related parties', 67), (' other receivables - related party', 67), (' rental bond', 64), (' amount receivable from controlling entity', 63), (' related party receivable', 61), (' other deposits receivable - related party', 59), (' accrued rebates', 55), (' related party disclosures', 52), (' other debtors and prepayments', 48), ('foreign exchange derivatives at fair value', 45), (' foreign exchange forward contracts', 44), (' accrued interest', 43), (' long service leave receivable', 43), (' deposits', 43), (' condensate', 43), (' derivative contracts - fair value', 42), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' interest receivable', 41), (' other', 40), (' bank guarantee', 38), (' forward exchange contracts', 38), ('other assets', 36), (' lng', 33)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current other receivables nan , res_fuzz_match = [(' other', 100), (' interest receivable', 73), (' other receivables - related party', 70), (' related party receivable', 67), ('other assets', 64), (' current investments', 64), (' rental bond', 55), (' other deposits receivable - related party', 54), (' income tax receivable from related parties', 50), (' amount receivable from controlling entity', 50), (' long service leave receivable', 48), ('foreign exchange derivatives at fair value', 46), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' electricity derivatives at fair value', 42), (' share of jv prepayments', 42), (' derivative contracts - fair value', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' related party disclosures', 33), (' lng', 33), (' bank guarantee', 31)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' lng', 67), (' rental bond', 64), (' current investments', 64), (' accrued rebates', 45), (' condensate', 43), (' electricity derivatives at fair value', 41), (' derivative contracts - fair value', 41), (' amount receivable from controlling entity', 41), (' foreign exchange forward contracts', 41), (' forward exchange contracts', 41), (' other debtors and prepayments', 41), (' other', 40), (' bank guarantee', 38), ('other assets', 36), (' accrued interest', 36), ('foreign exchange derivatives at fair value', 35), (' income tax receivable from related parties', 35), (' other receivables - related party', 35), (' other deposits receivable - related party', 35), (' related party receivable', 35), (' share of jv prepayments', 33), (' deposits', 29), (' interest receivable', 27), (' related party disclosures', 24), (' long service leave receivable', 24)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4], 'score': [100, 100], 'value': [35876.0, 2347.0], 'label': ['Current Other receivables nan', 'Current Other receivables nan'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party 20 , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current other receivables nan , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party 20 , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current other receivables nan , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [563747.0, 35876.0, 121289307.0, 1804449.0, 2347.0, 92742998.0], 'label': ['', '', '', '', '', ''], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [(' other', 100), (' current investments', 69), (' rental bond', 57), (' accrued interest', 48), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' related party receivable', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), ('other assets', 45), (' accrued rebates', 45), (' deposits', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' interest receivable', 38), (' bank guarantee', 38), (' other debtors and prepayments', 38), (' share of jv prepayments', 33), (' lng', 33), (' long service leave receivable', 31)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' current investments', 62), (' rental bond', 57), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), (' accrued rebates', 45), (' condensate', 43), (' accrued interest', 40), (' other', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' other debtors and prepayments', 38), (' share of jv prepayments', 33), (' lng', 33), (' related party disclosures', 31), (' interest receivable', 31), (' bank guarantee', 31), (' deposits', 29), ('other assets', 27), (' long service leave receivable', 23), (' related party receivable', 23)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [(' other', 100), (' current investments', 69), (' rental bond', 57), (' accrued interest', 48), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' related party receivable', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), ('other assets', 45), (' accrued rebates', 45), (' deposits', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' interest receivable', 38), (' bank guarantee', 38), (' other debtors and prepayments', 38), (' share of jv prepayments', 33), (' lng', 33), (' long service leave receivable', 31)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' current investments', 62), (' rental bond', 57), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), (' accrued rebates', 45), (' condensate', 43), (' accrued interest', 40), (' other', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' other debtors and prepayments', 38), (' share of jv prepayments', 33), (' lng', 33), (' related party disclosures', 31), (' interest receivable', 31), (' bank guarantee', 31), (' deposits', 29), ('other assets', 27), (' long service leave receivable', 23), (' related party receivable', 23)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': [100, 100], 'value': [1513.0, 1513.0], 'label': ['Current Other', 'Current Other'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3], 'score': [100, 100, 100, 100], 'value': [1513.0, 29389.0, 1513.0, 28767.0], 'label': ['', '', '', ''], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns']}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = software at cost , res_fuzz_match = [(' foreign exchange forward contracts', 67), ('other assets', 55), (' related party disclosures', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' forward exchange contracts', 50), (' deposits', 46), (' condensate', 43), (' income tax receivable from related parties', 42), (' derivative contracts - fair value', 42), (' other receivables - related party', 42), (' related party receivable', 42), (' other', 40), (' rental bond', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' interest receivable', 33), (' share of jv prepayments', 33), (' current investments', 33), (' bank guarantee', 26), (' long service leave receivable', 25), (' other debtors and prepayments', 25), (' lng', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = software accumulated amortisation , res_fuzz_match = [(' accrued rebates', 55), (' accrued interest', 50), ('other assets', 45), (' other deposits receivable - related party', 44), (' other receivables - related party', 43), (' current investments', 43), (' forward exchange contracts', 43), (' share of jv prepayments', 42), (' other', 40), (' income tax receivable from related parties', 40), (' related party receivable', 39), (' foreign exchange forward contracts', 39), (' related party disclosures', 38), (' derivative contracts - fair value', 35), (' amount receivable from controlling entity', 35), (' lng', 33), (' bank guarantee', 31), (' other debtors and prepayments', 31), ('foreign exchange derivatives at fair value', 30), (' long service leave receivable', 30), (' deposits', 29), (' condensate', 29), (' electricity derivatives at fair value', 27), (' interest receivable', 27), (' rental bond', 27)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = software net carrying amount , res_fuzz_match = [('other assets', 55), (' related party disclosures', 51), (' forward exchange contracts', 51), (' interest receivable', 47), (' amount receivable from controlling entity', 46), (' bank guarantee', 46), (' electricity derivatives at fair value', 45), (' accrued rebates', 45), (' related party receivable', 44), (' accrued interest', 43), (' other receivables - related party', 43), (' current investments', 43), (' other debtors and prepayments', 43), ('foreign exchange derivatives at fair value', 42), (' derivative contracts - fair value', 42), (' other deposits receivable - related party', 42), (' share of jv prepayments', 42), (' foreign exchange forward contracts', 42), (' other', 40), (' income tax receivable from related parties', 38), (' rental bond', 36), (' lng', 33), (' long service leave receivable', 30), (' deposits', 29), (' condensate', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = reconciliation of carrying amount in aud , res_fuzz_match = [(' related party disclosures', 48), (' derivative contracts - fair value', 46), (' other deposits receivable - related party', 46), (' foreign exchange forward contracts', 46), (' electricity derivatives at fair value', 45), (' rental bond', 45), (' accrued rebates', 45), (' related party receivable', 44), (' deposits', 43), (' current investments', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 42), (' income tax receivable from related parties', 42), (' amount receivable from controlling entity', 42), (' forward exchange contracts', 42), (' other receivables - related party', 38), (' bank guarantee', 38), ('other assets', 36), (' accrued interest', 36), (' long service leave receivable', 35), (' other debtors and prepayments', 35), (' share of jv prepayments', 33), (' lng', 33), (' interest receivable', 27), (' other', 20)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [(' lng', 67), (' derivative contracts - fair value', 53), (' other receivables - related party', 48), (' income tax receivable from related parties', 47), (' other deposits receivable - related party', 47), (' bank guarantee', 46), (' condensate', 43), (' related party disclosures', 41), (' long service leave receivable', 41), (' other debtors and prepayments', 41), (' other', 40), ('other assets', 36), (' rental bond', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 35), (' electricity derivatives at fair value', 35), (' amount receivable from controlling entity', 35), (' related party receivable', 35), (' foreign exchange forward contracts', 35), (' interest receivable', 33), (' share of jv prepayments', 33), (' accrued interest', 29), (' deposits', 29), (' current investments', 29), (' forward exchange contracts', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' other deposits receivable - related party', 50), (' foreign exchange forward contracts', 50), (' forward exchange contracts', 50), (' deposits', 43), (' condensate', 43), ('other assets', 40), ('foreign exchange derivatives at fair value', 40), (' accrued interest', 40), (' other', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' other receivables - related party', 40), (' amount receivable from controlling entity', 40), (' interest receivable', 40), (' related party receivable', 40), (' current investments', 40), (' accrued rebates', 40), (' other debtors and prepayments', 40), (' long service leave receivable', 30), (' bank guarantee', 30), (' rental bond', 30), (' share of jv prepayments', 20), (' lng', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' related party disclosures', 64), (' deposits', 62), ('other assets', 45), (' electricity derivatives at fair value', 45), (' other deposits receivable - related party', 45), (' condensate', 43), (' other', 40), ('foreign exchange derivatives at fair value', 36), (' accrued interest', 36), (' income tax receivable from related parties', 36), (' derivative contracts - fair value', 36), (' amount receivable from controlling entity', 36), (' interest receivable', 36), (' current investments', 36), (' other debtors and prepayments', 36), (' long service leave receivable', 27), (' other receivables - related party', 27), (' rental bond', 27), (' related party receivable', 27), (' foreign exchange forward contracts', 27), (' forward exchange contracts', 27), (' share of jv prepayments', 18), (' accrued rebates', 18), (' bank guarantee', 9), (' lng', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [(' lng', 67), (' derivative contracts - fair value', 47), (' bank guarantee', 46), (' condensate', 43), (' income tax receivable from related parties', 42), (' other receivables - related party', 42), (' other deposits receivable - related party', 42), (' long service leave receivable', 41), (' other', 40), ('other assets', 36), (' rental bond', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 35), (' electricity derivatives at fair value', 35), (' related party disclosures', 35), (' amount receivable from controlling entity', 35), (' related party receivable', 35), (' foreign exchange forward contracts', 35), (' forward exchange contracts', 35), (' other debtors and prepayments', 35), (' interest receivable', 33), (' share of jv prepayments', 33), (' accrued interest', 29), (' current investments', 29), (' deposits', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 1 april 2021 , res_fuzz_match = [(' accrued rebates', 55), (' accrued interest', 50), (' bank guarantee', 46), (' rental bond', 45), (' related party receivable', 44), (' related party disclosures', 43), (' long service leave receivable', 43), (' current investments', 43), (' other receivables - related party', 42), (' electricity derivatives at fair value', 41), (' other debtors and prepayments', 41), (' other', 40), (' income tax receivable from related parties', 40), (' other deposits receivable - related party', 40), (' derivative contracts - fair value', 38), ('other assets', 36), (' amount receivable from controlling entity', 36), (' interest receivable', 33), (' share of jv prepayments', 33), (' lng', 33), ('foreign exchange derivatives at fair value', 32), (' foreign exchange forward contracts', 32), (' deposits', 29), (' condensate', 29), (' forward exchange contracts', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation amortisation , res_fuzz_match = [(' accrued rebates', 55), (' accrued interest', 50), (' related party receivable', 50), ('other assets', 45), (' related party disclosures', 45), (' income tax receivable from related parties', 43), (' amount receivable from controlling entity', 43), (' current investments', 43), (' other', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' long service leave receivable', 38), (' bank guarantee', 38), (' foreign exchange forward contracts', 35), (' electricity derivatives at fair value', 33), (' interest receivable', 33), (' share of jv prepayments', 33), (' lng', 33), ('foreign exchange derivatives at fair value', 30), (' derivative contracts - fair value', 30), (' forward exchange contracts', 30), (' deposits', 29), (' condensate', 29), (' rental bond', 27), (' other debtors and prepayments', 26)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation disposals , res_fuzz_match = [(' related party disclosures', 62), (' deposits', 57), (' accrued rebates', 55), (' accrued interest', 50), (' related party receivable', 44), (' current investments', 43), (' other', 40), (' bank guarantee', 38), ('other assets', 36), (' income tax receivable from related parties', 36), (' amount receivable from controlling entity', 36), (' rental bond', 36), (' share of jv prepayments', 33), (' lng', 33), (' other receivables - related party', 32), (' other deposits receivable - related party', 32), (' electricity derivatives at fair value', 29), (' condensate', 29), ('foreign exchange derivatives at fair value', 27), (' derivative contracts - fair value', 27), (' interest receivable', 27), (' foreign exchange forward contracts', 27), (' forward exchange contracts', 27), (' other debtors and prepayments', 27), (' long service leave receivable', 23)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 31 march 2022 , res_fuzz_match = [(' accrued rebates', 55), (' accrued interest', 50), (' bank guarantee', 46), (' rental bond', 45), (' related party receivable', 44), (' related party disclosures', 43), (' long service leave receivable', 43), (' current investments', 43), (' other', 40), (' other receivables - related party', 38), ('other assets', 36), (' electricity derivatives at fair value', 36), (' income tax receivable from related parties', 36), (' other deposits receivable - related party', 36), (' foreign exchange forward contracts', 36), (' other debtors and prepayments', 36), (' derivative contracts - fair value', 33), (' interest receivable', 33), (' share of jv prepayments', 33), (' lng', 33), (' forward exchange contracts', 33), ('foreign exchange derivatives at fair value', 32), (' amount receivable from controlling entity', 32), (' deposits', 29), (' condensate', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = carrying amounts at 31 march 2021 , res_fuzz_match = [(' derivative contracts - fair value', 50), (' accrued rebates', 45), (' electricity derivatives at fair value', 44), (' other receivables - related party', 44), (' other deposits receivable - related party', 44), (' amount receivable from controlling entity', 44), (' foreign exchange forward contracts', 44), (' forward exchange contracts', 44), (' current investments', 43), (' interest receivable', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' related party disclosures', 39), (' income tax receivable from related parties', 39), (' long service leave receivable', 39), (' related party receivable', 39), (' other debtors and prepayments', 39), (' bank guarantee', 38), ('other assets', 36), (' accrued interest', 36), (' rental bond', 36), (' share of jv prepayments', 33), (' lng', 33), (' deposits', 29), (' condensate', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 , res_fuzz_match = [(' derivative contracts - fair value', 52), (' related party receivable', 50), (' income tax receivable from related parties', 48), (' foreign exchange forward contracts', 48), ('other assets', 45), (' accrued rebates', 45), (' other receivables - related party', 43), (' current investments', 43), (' forward exchange contracts', 43), (' other', 40), (' interest receivable', 40), (' electricity derivatives at fair value', 39), ('foreign exchange derivatives at fair value', 38), (' related party disclosures', 38), (' other deposits receivable - related party', 38), (' amount receivable from controlling entity', 38), (' bank guarantee', 38), (' accrued interest', 36), (' rental bond', 36), (' long service leave receivable', 33), (' share of jv prepayments', 33), (' lng', 33), (' other debtors and prepayments', 33), (' deposits', 29), (' condensate', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = software at cost , res_fuzz_match = [(' foreign exchange forward contracts', 67), ('other assets', 55), (' related party disclosures', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' forward exchange contracts', 50), (' deposits', 46), (' condensate', 43), (' income tax receivable from related parties', 42), (' derivative contracts - fair value', 42), (' other receivables - related party', 42), (' related party receivable', 42), (' other', 40), (' rental bond', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' interest receivable', 33), (' share of jv prepayments', 33), (' current investments', 33), (' bank guarantee', 26), (' long service leave receivable', 25), (' other debtors and prepayments', 25), (' lng', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = software accumulated amortisation , res_fuzz_match = [(' accrued rebates', 55), (' accrued interest', 50), ('other assets', 45), (' other deposits receivable - related party', 44), (' other receivables - related party', 43), (' current investments', 43), (' forward exchange contracts', 43), (' share of jv prepayments', 42), (' other', 40), (' income tax receivable from related parties', 40), (' related party receivable', 39), (' foreign exchange forward contracts', 39), (' related party disclosures', 38), (' derivative contracts - fair value', 35), (' amount receivable from controlling entity', 35), (' lng', 33), (' bank guarantee', 31), (' other debtors and prepayments', 31), ('foreign exchange derivatives at fair value', 30), (' long service leave receivable', 30), (' deposits', 29), (' condensate', 29), (' electricity derivatives at fair value', 27), (' interest receivable', 27), (' rental bond', 27)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = software net carrying amount , res_fuzz_match = [('other assets', 55), (' related party disclosures', 51), (' forward exchange contracts', 51), (' interest receivable', 47), (' amount receivable from controlling entity', 46), (' bank guarantee', 46), (' electricity derivatives at fair value', 45), (' accrued rebates', 45), (' related party receivable', 44), (' accrued interest', 43), (' other receivables - related party', 43), (' current investments', 43), (' other debtors and prepayments', 43), ('foreign exchange derivatives at fair value', 42), (' derivative contracts - fair value', 42), (' other deposits receivable - related party', 42), (' share of jv prepayments', 42), (' foreign exchange forward contracts', 42), (' other', 40), (' income tax receivable from related parties', 38), (' rental bond', 36), (' lng', 33), (' long service leave receivable', 30), (' deposits', 29), (' condensate', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = reconciliation of carrying amount in aud , res_fuzz_match = [(' related party disclosures', 48), (' derivative contracts - fair value', 46), (' other deposits receivable - related party', 46), (' foreign exchange forward contracts', 46), (' electricity derivatives at fair value', 45), (' rental bond', 45), (' accrued rebates', 45), (' related party receivable', 44), (' deposits', 43), (' current investments', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 42), (' income tax receivable from related parties', 42), (' amount receivable from controlling entity', 42), (' forward exchange contracts', 42), (' other receivables - related party', 38), (' bank guarantee', 38), ('other assets', 36), (' accrued interest', 36), (' long service leave receivable', 35), (' other debtors and prepayments', 35), (' share of jv prepayments', 33), (' lng', 33), (' interest receivable', 27), (' other', 20)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [(' lng', 67), (' derivative contracts - fair value', 53), (' other receivables - related party', 48), (' income tax receivable from related parties', 47), (' other deposits receivable - related party', 47), (' bank guarantee', 46), (' condensate', 43), (' related party disclosures', 41), (' long service leave receivable', 41), (' other debtors and prepayments', 41), (' other', 40), ('other assets', 36), (' rental bond', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 35), (' electricity derivatives at fair value', 35), (' amount receivable from controlling entity', 35), (' related party receivable', 35), (' foreign exchange forward contracts', 35), (' interest receivable', 33), (' share of jv prepayments', 33), (' accrued interest', 29), (' deposits', 29), (' current investments', 29), (' forward exchange contracts', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' other deposits receivable - related party', 50), (' foreign exchange forward contracts', 50), (' forward exchange contracts', 50), (' deposits', 43), (' condensate', 43), ('other assets', 40), ('foreign exchange derivatives at fair value', 40), (' accrued interest', 40), (' other', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' other receivables - related party', 40), (' amount receivable from controlling entity', 40), (' interest receivable', 40), (' related party receivable', 40), (' current investments', 40), (' accrued rebates', 40), (' other debtors and prepayments', 40), (' long service leave receivable', 30), (' bank guarantee', 30), (' rental bond', 30), (' share of jv prepayments', 20), (' lng', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' related party disclosures', 64), (' deposits', 62), ('other assets', 45), (' electricity derivatives at fair value', 45), (' other deposits receivable - related party', 45), (' condensate', 43), (' other', 40), ('foreign exchange derivatives at fair value', 36), (' accrued interest', 36), (' income tax receivable from related parties', 36), (' derivative contracts - fair value', 36), (' amount receivable from controlling entity', 36), (' interest receivable', 36), (' current investments', 36), (' other debtors and prepayments', 36), (' long service leave receivable', 27), (' other receivables - related party', 27), (' rental bond', 27), (' related party receivable', 27), (' foreign exchange forward contracts', 27), (' forward exchange contracts', 27), (' share of jv prepayments', 18), (' accrued rebates', 18), (' bank guarantee', 9), (' lng', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [(' lng', 67), (' derivative contracts - fair value', 47), (' bank guarantee', 46), (' condensate', 43), (' income tax receivable from related parties', 42), (' other receivables - related party', 42), (' other deposits receivable - related party', 42), (' long service leave receivable', 41), (' other', 40), ('other assets', 36), (' rental bond', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 35), (' electricity derivatives at fair value', 35), (' related party disclosures', 35), (' amount receivable from controlling entity', 35), (' related party receivable', 35), (' foreign exchange forward contracts', 35), (' forward exchange contracts', 35), (' other debtors and prepayments', 35), (' interest receivable', 33), (' share of jv prepayments', 33), (' accrued interest', 29), (' current investments', 29), (' deposits', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 1 april 2021 , res_fuzz_match = [(' accrued rebates', 55), (' accrued interest', 50), (' bank guarantee', 46), (' rental bond', 45), (' related party receivable', 44), (' related party disclosures', 43), (' long service leave receivable', 43), (' current investments', 43), (' other receivables - related party', 42), (' electricity derivatives at fair value', 41), (' other debtors and prepayments', 41), (' other', 40), (' income tax receivable from related parties', 40), (' other deposits receivable - related party', 40), (' derivative contracts - fair value', 38), ('other assets', 36), (' amount receivable from controlling entity', 36), (' interest receivable', 33), (' share of jv prepayments', 33), (' lng', 33), ('foreign exchange derivatives at fair value', 32), (' foreign exchange forward contracts', 32), (' deposits', 29), (' condensate', 29), (' forward exchange contracts', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation amortisation , res_fuzz_match = [(' accrued rebates', 55), (' accrued interest', 50), (' related party receivable', 50), ('other assets', 45), (' related party disclosures', 45), (' income tax receivable from related parties', 43), (' amount receivable from controlling entity', 43), (' current investments', 43), (' other', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' long service leave receivable', 38), (' bank guarantee', 38), (' foreign exchange forward contracts', 35), (' electricity derivatives at fair value', 33), (' interest receivable', 33), (' share of jv prepayments', 33), (' lng', 33), ('foreign exchange derivatives at fair value', 30), (' derivative contracts - fair value', 30), (' forward exchange contracts', 30), (' deposits', 29), (' condensate', 29), (' rental bond', 27), (' other debtors and prepayments', 26)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation disposals , res_fuzz_match = [(' related party disclosures', 62), (' deposits', 57), (' accrued rebates', 55), (' accrued interest', 50), (' related party receivable', 44), (' current investments', 43), (' other', 40), (' bank guarantee', 38), ('other assets', 36), (' income tax receivable from related parties', 36), (' amount receivable from controlling entity', 36), (' rental bond', 36), (' share of jv prepayments', 33), (' lng', 33), (' other receivables - related party', 32), (' other deposits receivable - related party', 32), (' electricity derivatives at fair value', 29), (' condensate', 29), ('foreign exchange derivatives at fair value', 27), (' derivative contracts - fair value', 27), (' interest receivable', 27), (' foreign exchange forward contracts', 27), (' forward exchange contracts', 27), (' other debtors and prepayments', 27), (' long service leave receivable', 23)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 31 march 2022 , res_fuzz_match = [(' accrued rebates', 55), (' accrued interest', 50), (' bank guarantee', 46), (' rental bond', 45), (' related party receivable', 44), (' related party disclosures', 43), (' long service leave receivable', 43), (' current investments', 43), (' other', 40), (' other receivables - related party', 38), ('other assets', 36), (' electricity derivatives at fair value', 36), (' income tax receivable from related parties', 36), (' other deposits receivable - related party', 36), (' foreign exchange forward contracts', 36), (' other debtors and prepayments', 36), (' derivative contracts - fair value', 33), (' interest receivable', 33), (' share of jv prepayments', 33), (' lng', 33), (' forward exchange contracts', 33), ('foreign exchange derivatives at fair value', 32), (' amount receivable from controlling entity', 32), (' deposits', 29), (' condensate', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = carrying amounts at 31 march 2021 , res_fuzz_match = [(' derivative contracts - fair value', 50), (' accrued rebates', 45), (' electricity derivatives at fair value', 44), (' other receivables - related party', 44), (' other deposits receivable - related party', 44), (' amount receivable from controlling entity', 44), (' foreign exchange forward contracts', 44), (' forward exchange contracts', 44), (' current investments', 43), (' interest receivable', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' related party disclosures', 39), (' income tax receivable from related parties', 39), (' long service leave receivable', 39), (' related party receivable', 39), (' other debtors and prepayments', 39), (' bank guarantee', 38), ('other assets', 36), (' accrued interest', 36), (' rental bond', 36), (' share of jv prepayments', 33), (' lng', 33), (' deposits', 29), (' condensate', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 , res_fuzz_match = [(' derivative contracts - fair value', 52), (' related party receivable', 50), (' income tax receivable from related parties', 48), (' foreign exchange forward contracts', 48), ('other assets', 45), (' accrued rebates', 45), (' other receivables - related party', 43), (' current investments', 43), (' forward exchange contracts', 43), (' other', 40), (' interest receivable', 40), (' electricity derivatives at fair value', 39), ('foreign exchange derivatives at fair value', 38), (' related party disclosures', 38), (' other deposits receivable - related party', 38), (' amount receivable from controlling entity', 38), (' bank guarantee', 38), (' accrued interest', 36), (' rental bond', 36), (' long service leave receivable', 33), (' share of jv prepayments', 33), (' lng', 33), (' other debtors and prepayments', 33), (' deposits', 29), (' condensate', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = software at cost , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = software accumulated amortisation , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = software net carrying amount , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = reconciliation of carrying amount in aud , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 1 april 2021 , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation amortisation , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation disposals , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 31 march 2022 , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = carrying amounts at 31 march 2021 , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = software at cost , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = software accumulated amortisation , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = software net carrying amount , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = reconciliation of carrying amount in aud , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 1 april 2021 , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation amortisation , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation disposals , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 31 march 2022 , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = carrying amounts at 31 march 2021 , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 , res_fuzz_match = [(' ', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [128219.0, -48899.0, 79320.0, 0.0, 2328438.0, 33305.0, -2233524.0, 128219.0, 2074739.0, 78559.0, -2104399.0, 48899.0, 253699.0, 79320.0, 2328438.0, -2074739.0, 253699.0, 0.0, 2328438.0, 33305.0, -2233524.0, 128219.0, 2074739.0, 78559.0, -2104399.0, 48899.0, 253699.0, 79320.0], 'label': ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment ']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['construction in progress ', ' work in progress ', ' capital works in progress ', ' WIP']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['Other intangibles ', ' development and software ', ' software ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft ']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft '] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' lease liabilities ', 71), (' interest bearing liabilites ', 43), ('  leases ', 40), (' loans and borrowings ', 29), (' cash and cash equivalents ', 22), (' borrowings ', 17), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' bank overdraft ', 10), (' cash overdraft ', 10), (' shortterm borrowings ', 9)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' cash overdraft ', 32), (' loans and borrowings ', 31), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [(' loans and borrowings ', 100), (' borrowings ', 57), (' shortterm borrowings ', 52), (' bank overdraft ', 48), (' cash overdraft ', 41), (' short-term debt ', 34), (' shortterm debt ', 34), ('short term debt ', 33), (' cash and cash equivalents ', 33), (' interest bearing liabilites ', 32), (' lease liabilities ', 31), ('  leases ', 21)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites ', 38), (' short-term debt ', 34), (' shortterm debt ', 34), (' bank overdraft ', 34), ('short term debt ', 33), (' loans and borrowings ', 27), (' shortterm borrowings ', 26), (' lease liabilities ', 23), (' cash and cash equivalents ', 22), ('  leases ', 21), (' cash overdraft ', 21), (' borrowings ', 19)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [(' interest bearing liabilites ', 60), (' lease liabilities ', 55), (' cash overdraft ', 31), ('short term debt ', 30), (' loans and borrowings ', 30), (' cash and cash equivalents ', 26), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), (' shortterm borrowings ', 24), ('  leases ', 18), (' borrowings ', 17)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' cash overdraft ', 32), (' loans and borrowings ', 31), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites ', 38), (' short-term debt ', 34), (' shortterm debt ', 34), (' bank overdraft ', 34), ('short term debt ', 33), (' loans and borrowings ', 27), (' shortterm borrowings ', 26), (' lease liabilities ', 23), (' cash and cash equivalents ', 22), ('  leases ', 21), (' cash overdraft ', 21), (' borrowings ', 19)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 7], 'score': 100, 'value': 82451057.0, 'line_item_label': ['Lease liabilities', 'Loans and borrowings', 'Lease liabilities'], 'note_numbers': ['13', '16', '13'], 'line_item_value': [136160.0, 82170817.0, 144080.0]}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft '] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' lease liabilities ', 71), (' interest bearing liabilites ', 43), ('  leases ', 40), (' loans and borrowings ', 29), (' cash and cash equivalents ', 22), (' borrowings ', 17), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' bank overdraft ', 10), (' cash overdraft ', 10), (' shortterm borrowings ', 9)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' cash overdraft ', 32), (' loans and borrowings ', 31), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [(' loans and borrowings ', 100), (' borrowings ', 57), (' shortterm borrowings ', 52), (' bank overdraft ', 48), (' cash overdraft ', 41), (' short-term debt ', 34), (' shortterm debt ', 34), ('short term debt ', 33), (' cash and cash equivalents ', 33), (' interest bearing liabilites ', 32), (' lease liabilities ', 31), ('  leases ', 21)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites ', 38), (' short-term debt ', 34), (' shortterm debt ', 34), (' bank overdraft ', 34), ('short term debt ', 33), (' loans and borrowings ', 27), (' shortterm borrowings ', 26), (' lease liabilities ', 23), (' cash and cash equivalents ', 22), ('  leases ', 21), (' cash overdraft ', 21), (' borrowings ', 19)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [(' interest bearing liabilites ', 60), (' lease liabilities ', 55), (' cash overdraft ', 31), ('short term debt ', 30), (' loans and borrowings ', 30), (' cash and cash equivalents ', 26), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), (' shortterm borrowings ', 24), ('  leases ', 18), (' borrowings ', 17)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' cash overdraft ', 32), (' loans and borrowings ', 31), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites ', 38), (' short-term debt ', 34), (' shortterm debt ', 34), (' bank overdraft ', 34), ('short term debt ', 33), (' loans and borrowings ', 27), (' shortterm borrowings ', 26), (' lease liabilities ', 23), (' cash and cash equivalents ', 22), ('  leases ', 21), (' cash overdraft ', 21), (' borrowings ', 19)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 7], 'score': 100, 'value': 126919644.0, 'line_item_label': ['Lease liabilities', 'Loans and borrowings', 'Lease liabilities'], 'note_numbers': ['13', '16', '13'], 'line_item_value': [600799.0, 111234712.0, 15084133.0]}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none related party loan aud 0.444% 2022 70006039 , res_fuzz_match = [(' loans from related party ', 67), (' not later than one year ', 57), (' leases ', 50), (' not later than 1 year ', 49), (' secured long-term bank loans ', 48), (' lease liabilities ', 45), (' bank overdraft ', 43), (' balance at the end of period ', 43), (' lease liabilities - current ', 42), (' cash overdraft', 36), (' utilised bank borrowings ', 33), ('bank borrowings ', 27)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = carrying amount carrying amount , res_fuzz_match = [(' secured long-term bank loans ', 46), (' loans from related party ', 43), (' cash overdraft', 43), (' not later than 1 year ', 42), (' lease liabilities - current ', 42), (' utilised bank borrowings ', 39), (' not later than one year ', 39), ('bank borrowings ', 36), (' bank overdraft ', 36), (' balance at the end of period ', 33), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none unsecured bank loan aud 0.750% 2022 43733593 , res_fuzz_match = [(' secured long-term bank loans ', 62), ('bank borrowings ', 55), (' not later than one year ', 52), (' bank overdraft ', 52), (' utilised bank borrowings ', 50), (' not later than 1 year ', 47), (' loans from related party ', 38), (' lease liabilities - current ', 37), (' lease liabilities ', 36), (' balance at the end of period ', 33), (' cash overdraft', 29), (' leases ', 25)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = carrying amount carrying amount , res_fuzz_match = [(' secured long-term bank loans ', 46), (' loans from related party ', 43), (' cash overdraft', 43), (' not later than 1 year ', 42), (' lease liabilities - current ', 42), (' utilised bank borrowings ', 39), (' not later than one year ', 39), ('bank borrowings ', 36), (' bank overdraft ', 36), (' balance at the end of period ', 33), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none nan nan nan nan 113739632 , res_fuzz_match = [(' not later than one year ', 50), (' not later than 1 year ', 47), (' secured long-term bank loans ', 45), (' loans from related party ', 40), (' lease liabilities ', 36), (' lease liabilities - current ', 32), (' balance at the end of period ', 31), (' bank overdraft ', 29), ('bank borrowings ', 27), (' leases ', 25), (' utilised bank borrowings ', 22), (' cash overdraft', 21)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = carrying amount carrying amount , res_fuzz_match = [(' secured long-term bank loans ', 46), (' loans from related party ', 43), (' cash overdraft', 43), (' not later than 1 year ', 42), (' lease liabilities - current ', 42), (' utilised bank borrowings ', 39), (' not later than one year ', 39), ('bank borrowings ', 36), (' bank overdraft ', 36), (' balance at the end of period ', 33), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none related party loan aud 0.444% 2022 70006039 , res_fuzz_match = [(' loans from related party ', 67), (' not later than one year ', 57), (' leases ', 50), (' not later than 1 year ', 49), (' secured long-term bank loans ', 48), (' lease liabilities ', 45), (' bank overdraft ', 43), (' balance at the end of period ', 43), (' lease liabilities - current ', 42), (' cash overdraft', 36), (' utilised bank borrowings ', 33), ('bank borrowings ', 27)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = carrying amount face value , res_fuzz_match = [(' secured long-term bank loans ', 45), (' cash overdraft', 43), (' not later than 1 year ', 42), (' not later than one year ', 41), ('bank borrowings ', 36), (' lease liabilities ', 36), (' bank overdraft ', 36), (' loans from related party ', 34), (' balance at the end of period ', 33), (' lease liabilities - current ', 32), (' utilised bank borrowings ', 28), (' leases ', 25)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none unsecured bank loan aud 0.750% 2022 43733593 , res_fuzz_match = [(' secured long-term bank loans ', 62), ('bank borrowings ', 55), (' not later than one year ', 52), (' bank overdraft ', 52), (' utilised bank borrowings ', 50), (' not later than 1 year ', 47), (' loans from related party ', 38), (' lease liabilities - current ', 37), (' lease liabilities ', 36), (' balance at the end of period ', 33), (' cash overdraft', 29), (' leases ', 25)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = carrying amount face value , res_fuzz_match = [(' secured long-term bank loans ', 45), (' cash overdraft', 43), (' not later than 1 year ', 42), (' not later than one year ', 41), ('bank borrowings ', 36), (' lease liabilities ', 36), (' bank overdraft ', 36), (' loans from related party ', 34), (' balance at the end of period ', 33), (' lease liabilities - current ', 32), (' utilised bank borrowings ', 28), (' leases ', 25)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none nan nan nan nan 113739632 , res_fuzz_match = [(' not later than one year ', 50), (' not later than 1 year ', 47), (' secured long-term bank loans ', 45), (' loans from related party ', 40), (' lease liabilities ', 36), (' lease liabilities - current ', 32), (' balance at the end of period ', 31), (' bank overdraft ', 29), ('bank borrowings ', 27), (' leases ', 25), (' utilised bank borrowings ', 22), (' cash overdraft', 21)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = carrying amount face value , res_fuzz_match = [(' secured long-term bank loans ', 45), (' cash overdraft', 43), (' not later than 1 year ', 42), (' not later than one year ', 41), ('bank borrowings ', 36), (' lease liabilities ', 36), (' bank overdraft ', 36), (' loans from related party ', 34), (' balance at the end of period ', 33), (' lease liabilities - current ', 32), (' utilised bank borrowings ', 28), (' leases ', 25)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none related party loan aud 0.444% 2022 70006039 , res_fuzz_match = [(' loans from related party ', 67), (' not later than one year ', 57), (' leases ', 50), (' not later than 1 year ', 49), (' secured long-term bank loans ', 48), (' lease liabilities ', 45), (' bank overdraft ', 43), (' balance at the end of period ', 43), (' lease liabilities - current ', 42), (' cash overdraft', 36), (' utilised bank borrowings ', 33), ('bank borrowings ', 27)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = carrying amount carrying amount , res_fuzz_match = [(' secured long-term bank loans ', 46), (' loans from related party ', 43), (' cash overdraft', 43), (' not later than 1 year ', 42), (' lease liabilities - current ', 42), (' utilised bank borrowings ', 39), (' not later than one year ', 39), ('bank borrowings ', 36), (' bank overdraft ', 36), (' balance at the end of period ', 33), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none unsecured bank loan aud 0.750% 2022 43733593 , res_fuzz_match = [(' secured long-term bank loans ', 62), ('bank borrowings ', 55), (' not later than one year ', 52), (' bank overdraft ', 52), (' utilised bank borrowings ', 50), (' not later than 1 year ', 47), (' loans from related party ', 38), (' lease liabilities - current ', 37), (' lease liabilities ', 36), (' balance at the end of period ', 33), (' cash overdraft', 29), (' leases ', 25)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = carrying amount carrying amount , res_fuzz_match = [(' secured long-term bank loans ', 46), (' loans from related party ', 43), (' cash overdraft', 43), (' not later than 1 year ', 42), (' lease liabilities - current ', 42), (' utilised bank borrowings ', 39), (' not later than one year ', 39), ('bank borrowings ', 36), (' bank overdraft ', 36), (' balance at the end of period ', 33), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = none nan nan nan nan 113739632 , res_fuzz_match = [(' not later than one year ', 50), (' not later than 1 year ', 47), (' secured long-term bank loans ', 45), (' loans from related party ', 40), (' lease liabilities ', 36), (' lease liabilities - current ', 32), (' balance at the end of period ', 31), (' bank overdraft ', 29), ('bank borrowings ', 27), (' leases ', 25), (' utilised bank borrowings ', 22), (' cash overdraft', 21)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = carrying amount carrying amount , res_fuzz_match = [(' secured long-term bank loans ', 46), (' loans from related party ', 43), (' cash overdraft', 43), (' not later than 1 year ', 42), (' lease liabilities - current ', 42), (' utilised bank borrowings ', 39), (' not later than one year ', 39), ('bank borrowings ', 36), (' bank overdraft ', 36), (' balance at the end of period ', 33), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:58:15+0530 - sLogger - DEBUG - keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current related party loan 20 , res_fuzz_match = [(' loans from related party ', 62), (' lease liabilities ', 55), (' secured long-term bank loans ', 54), (' not later than 1 year ', 53), (' leases ', 50), (' not later than one year ', 48), (' balance at the end of period ', 43), (' lease liabilities - current ', 37), (' bank overdraft ', 36), (' cash overdraft', 36), (' utilised bank borrowings ', 33), ('bank borrowings ', 27)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current unsecured bank loan nan , res_fuzz_match = [(' secured long-term bank loans ', 67), (' not later than one year ', 57), ('bank borrowings ', 55), (' not later than 1 year ', 53), (' utilised bank borrowings ', 50), (' leases ', 50), (' bank overdraft ', 50), (' lease liabilities - current ', 37), (' lease liabilities ', 36), (' loans from related party ', 33), (' balance at the end of period ', 33), (' cash overdraft', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' secured long-term bank loans ', 53), (' leases ', 50), (' not later than one year ', 47), (' not later than 1 year ', 41), (' lease liabilities - current ', 41), (' lease liabilities ', 36), (' utilised bank borrowings ', 35), (' loans from related party ', 35), (' bank overdraft ', 30), (' balance at the end of period ', 29), (' cash overdraft', 29), ('bank borrowings ', 27)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current related party loan 20 , res_fuzz_match = [(' loans from related party ', 62), (' lease liabilities ', 55), (' secured long-term bank loans ', 54), (' not later than 1 year ', 53), (' leases ', 50), (' not later than one year ', 48), (' balance at the end of period ', 43), (' lease liabilities - current ', 37), (' bank overdraft ', 36), (' cash overdraft', 36), (' utilised bank borrowings ', 33), ('bank borrowings ', 27)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current unsecured bank loan nan , res_fuzz_match = [(' secured long-term bank loans ', 67), (' not later than one year ', 57), ('bank borrowings ', 55), (' not later than 1 year ', 53), (' utilised bank borrowings ', 50), (' leases ', 50), (' bank overdraft ', 50), (' lease liabilities - current ', 37), (' lease liabilities ', 36), (' loans from related party ', 33), (' balance at the end of period ', 33), (' cash overdraft', 29)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' secured long-term bank loans ', 53), (' leases ', 50), (' not later than one year ', 47), (' not later than 1 year ', 41), (' lease liabilities - current ', 41), (' lease liabilities ', 36), (' utilised bank borrowings ', 35), (' loans from related party ', 35), (' bank overdraft ', 30), (' balance at the end of period ', 29), (' cash overdraft', 29), ('bank borrowings ', 27)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-11 14:58:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:58:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:15+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-11 14:58:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', '  accounts payable - trade ', ' Related party payables ', ' trade payables - related parties']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('trade and other payables', 49), ('trade payable', 30), ('other trade payables', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 55677648.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [55677648.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('trade and other payables', 49), ('trade payable', 30), ('other trade payables', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 66271138.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [66271138.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', '  accounts payable - trade ', ' Related party payables ', ' trade payables - related parties'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current trade and other payables nan , res_fuzz_match = [(' trade and other payables ', 100), (' trade payables ', 75), (' trade payables - other parties ', 67), (' other trade payables ', 67), (' Related party payables ', 61), ('  accounts payable - trade ', 60), ('trade creditors ', 57), (' trade payables - related parties', 54), (' amounts payable to controlling entity ', 46), (' payables to related parties ', 44)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current contract liabilities nan , res_fuzz_match = [(' trade payables ', 58), ('  accounts payable - trade ', 51), (' trade and other payables ', 50), (' other trade payables ', 50), (' amounts payable to controlling entity ', 44), (' Related party payables ', 44), ('trade creditors ', 43), (' trade payables - other parties ', 39), (' payables to related parties ', 39), (' trade payables - related parties', 38)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party 20 , res_fuzz_match = [(' payables to related parties ', 67), (' trade payables - related parties', 67), (' Related party payables ', 63), (' trade payables - other parties ', 54), ('trade creditors ', 50), (' other trade payables ', 50), (' amounts payable to controlling entity ', 46), (' trade and other payables ', 45), ('  accounts payable - trade ', 45), (' trade payables ', 42)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current other creditors and accruals nan , res_fuzz_match = [('trade creditors ', 79), (' other trade payables ', 56), (' trade payables ', 50), (' trade payables - other parties ', 46), (' trade and other payables ', 45), (' trade payables - related parties', 42), ('  accounts payable - trade ', 40), (' amounts payable to controlling entity ', 39), (' payables to related parties ', 39), (' Related party payables ', 39)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [('  accounts payable - trade ', 53), (' trade and other payables ', 47), (' amounts payable to controlling entity ', 47), (' trade payables ', 42), (' Related party payables ', 41), (' trade payables - related parties', 41), ('trade creditors ', 36), (' trade payables - other parties ', 35), (' other trade payables ', 35), (' payables to related parties ', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current trade and other payables nan , res_fuzz_match = [(' trade and other payables ', 100), (' trade payables ', 75), (' trade payables - other parties ', 67), (' other trade payables ', 67), (' Related party payables ', 61), ('  accounts payable - trade ', 60), ('trade creditors ', 57), (' trade payables - related parties', 54), (' amounts payable to controlling entity ', 46), (' payables to related parties ', 44)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current contract liabilities nan , res_fuzz_match = [(' trade payables ', 58), ('  accounts payable - trade ', 51), (' trade and other payables ', 50), (' other trade payables ', 50), (' amounts payable to controlling entity ', 44), (' Related party payables ', 44), ('trade creditors ', 43), (' trade payables - other parties ', 39), (' payables to related parties ', 39), (' trade payables - related parties', 38)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party 20 , res_fuzz_match = [(' payables to related parties ', 67), (' trade payables - related parties', 67), (' Related party payables ', 63), (' trade payables - other parties ', 54), ('trade creditors ', 50), (' other trade payables ', 50), (' amounts payable to controlling entity ', 46), (' trade and other payables ', 45), ('  accounts payable - trade ', 45), (' trade payables ', 42)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current other creditors and accruals nan , res_fuzz_match = [('trade creditors ', 79), (' other trade payables ', 56), (' trade payables ', 50), (' trade payables - other parties ', 46), (' trade and other payables ', 45), (' trade payables - related parties', 42), ('  accounts payable - trade ', 40), (' amounts payable to controlling entity ', 39), (' payables to related parties ', 39), (' Related party payables ', 39)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [('  accounts payable - trade ', 53), (' trade and other payables ', 47), (' amounts payable to controlling entity ', 47), (' trade payables ', 42), (' Related party payables ', 41), (' trade payables - related parties', 41), ('trade creditors ', 36), (' trade payables - other parties ', 35), (' other trade payables ', 35), (' payables to related parties ', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 5], 'score': [100, 100], 'value': [8166254.0, 6067584.0], 'label': ['Current Trade and other payables nan', 'Current Trade and other payables nan'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses ', ' interest accrued']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('trade and other payables', 49)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 55677648.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [55677648.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('trade and other payables', 49)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 66271138.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [66271138.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['accrued expenses ', ' interest accrued'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current trade and other payables nan , res_fuzz_match = [(' interest accrued', 43), ('accrued expenses ', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current contract liabilities nan , res_fuzz_match = [(' interest accrued', 43), ('accrued expenses ', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party 20 , res_fuzz_match = [(' interest accrued', 50), ('accrued expenses ', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current other creditors and accruals nan , res_fuzz_match = [(' interest accrued', 64), ('accrued expenses ', 58)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' interest accrued', 36), ('accrued expenses ', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current trade and other payables nan , res_fuzz_match = [(' interest accrued', 43), ('accrued expenses ', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current contract liabilities nan , res_fuzz_match = [(' interest accrued', 43), ('accrued expenses ', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party 20 , res_fuzz_match = [(' interest accrued', 50), ('accrued expenses ', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current other creditors and accruals nan , res_fuzz_match = [(' interest accrued', 64), ('accrued expenses ', 58)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' interest accrued', 36), ('accrued expenses ', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' income tax payable ', 50), (' tax ', 33), (' provision', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' tax ', 33), (' provision', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('current tax liabilities ', 33), (' income tax payable ', 33), (' tax ', 33), (' provision', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' tax ', 33), (' provision', 33), ('current tax liabilities ', 27), (' income tax payable ', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' tax ', 100), (' income tax payable ', 56), (' provision', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' tax ', 33), (' provision', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' tax ', 33), (' provision', 33), ('current tax liabilities ', 27), (' income tax payable ', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4, 6, 8], 'score': 100, 'value': 20558234.0, 'line_item_label': ['Liabilities', 'Provisions', 'Current tax liabilities', 'Provisions'], 'note_numbers': [nan, '17', nan, '17'], 'line_item_value': [0.0, 20558234.0, 0.0, 0.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' income tax payable ', 50), (' tax ', 33), (' provision', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' tax ', 33), (' provision', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('current tax liabilities ', 33), (' income tax payable ', 33), (' tax ', 33), (' provision', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' tax ', 33), (' provision', 33), ('current tax liabilities ', 27), (' income tax payable ', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' tax ', 100), (' income tax payable ', 56), (' provision', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' tax ', 33), (' provision', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' tax ', 33), (' provision', 33), ('current tax liabilities ', 27), (' income tax payable ', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4, 6, 8], 'score': 100, 'value': 29230893.0, 'line_item_label': ['Liabilities', 'Provisions', 'Current tax liabilities', 'Provisions'], 'note_numbers': [nan, '17', nan, '17'], 'line_item_value': [0.0, 28301337.0, 409556.0, 520000.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current warranty nan nan , res_fuzz_match = [(' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35), (' provision for income tax ', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current dealers nan nan , res_fuzz_match = [(' tax receivable/payable', 41), ('income tax (refundable)/payable ', 37), (' provision for income tax ', 36)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current total nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 38), (' provision for income tax ', 35), (' tax receivable/payable', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = non-current make good nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax ', 36), (' tax receivable/payable', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = non-current total nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax ', 35), (' tax receivable/payable', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: inaud warranty dealers , res_fuzz_match = [(' provision for income tax ', 55), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 39)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 1 april 2021 6327762 14230472 , res_fuzz_match = [(' provision for income tax ', 56), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 36)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions made during the year 4176555 47386577 , res_fuzz_match = [(' provision for income tax ', 55), (' tax receivable/payable', 47), ('income tax (refundable)/payable ', 39)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions used during the year (1,170,637) nan , res_fuzz_match = [(' provision for income tax ', 50), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: payments (2,084,957) (40,564,435) , res_fuzz_match = [(' tax receivable/payable', 47), (' provision for income tax ', 45), ('income tax (refundable)/payable ', 39)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 31 march 2022 7248723 21052614 , res_fuzz_match = [(' provision for income tax ', 56), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current warranty nan nan , res_fuzz_match = [(' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35), (' provision for income tax ', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current dealers nan nan , res_fuzz_match = [(' tax receivable/payable', 41), ('income tax (refundable)/payable ', 37), (' provision for income tax ', 36)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current total nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 38), (' provision for income tax ', 35), (' tax receivable/payable', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = non-current make good nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax ', 36), (' tax receivable/payable', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = non-current total nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax ', 35), (' tax receivable/payable', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: inaud warranty dealers , res_fuzz_match = [(' provision for income tax ', 55), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 39)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 1 april 2021 6327762 14230472 , res_fuzz_match = [(' provision for income tax ', 56), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 36)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions made during the year 4176555 47386577 , res_fuzz_match = [(' provision for income tax ', 55), (' tax receivable/payable', 47), ('income tax (refundable)/payable ', 39)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions used during the year (1,170,637) nan , res_fuzz_match = [(' provision for income tax ', 50), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: payments (2,084,957) (40,564,435) , res_fuzz_match = [(' tax receivable/payable', 47), (' provision for income tax ', 45), ('income tax (refundable)/payable ', 39)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 31 march 2022 7248723 21052614 , res_fuzz_match = [(' provision for income tax ', 56), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [(' trade and other payables', 49), (' foreign exchange contract liability', 35), (' financial liabilities', 34), (' other financial liabilities', 34), (' deferred revenue', 30), ('other current liabilities', 29), (' other current liabilities', 29), (' employee benefits', 27), (' customer deposits', 21), ('provisions', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4, 5, 6, 8, 9], 'score': 100, 'value': 78927392.0, 'line_item_label': ['Trade and other payables', 'Provisions', 'Employee benefits', 'Current tax liabilities', 'Provisions', 'Employee benefits'], 'note_numbers': ['15', '17', '18', nan, '17', '18'], 'line_item_value': [55677648.0, 20558234.0, 1961402.0, 0.0, 0.0, 730108.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [(' trade and other payables', 49), (' foreign exchange contract liability', 35), (' financial liabilities', 34), (' other financial liabilities', 34), (' deferred revenue', 30), ('other current liabilities', 29), (' other current liabilities', 29), (' employee benefits', 27), (' customer deposits', 21), ('provisions', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4, 5, 6, 8, 9], 'score': 100, 'value': 98754244.0, 'line_item_label': ['Trade and other payables', 'Provisions', 'Employee benefits', 'Current tax liabilities', 'Provisions', 'Employee benefits'], 'note_numbers': ['15', '17', '18', nan, '17', '18'], 'line_item_value': [66271138.0, 28301337.0, 2213375.0, 409556.0, 520000.0, 1038838.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current trade and other payables nan , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' rebates', 60), (' current - liability for annual and long service leave', 56), (' share of joint venture payables', 56), (' other related parties', 53), (' gst payable and accruals', 50), (' restructuring', 50), (' warranty', 50), (' ultimate parent entity', 47), ('other creditors and accruals', 46), (' secured long-term bank loans', 46), (' forward exchange contracts', 46), (' total current employee benefits', 45), (' loans from related party', 43), (' provisions - current', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst liabilities', 40), (' make good provisions', 38), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 36), (' other creditors', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' gst', 33), (' provision for associate funding', 32)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current contract liabilities nan , res_fuzz_match = [(' gst liabilities', 80), (' contract liabilites - current', 77), (' derivative contracts - at fair value', 64), (' current - liability for annual and long service leave', 63), (' rebates', 60), (' restructuring', 60), (' other', 60), (' forward exchange contracts', 54), (' ultimate parent entity', 53), (' secured long-term bank loans', 50), (' gst payables', 50), (' warranty', 50), (' share of joint venture payables', 48), (' arising from service contracts', 48), (' total current employee benefits', 48), (' other related parties', 47), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' gst payable and accruals', 42), (' loan payable to relayed party under tax funding agreement', 41), ('other creditors and accruals', 39), (' provision for associate funding', 36), (' gst', 33), (' employee benefits - payroll', 32), (' make good provisions', 31), (' employee benefits - current', 30), (' abandonment and decommissioning costs', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party 20 , res_fuzz_match = [(' other related parties', 82), (' loans from related party', 71), (' rebates', 60), (' other creditors', 50), (' other creditors', 50), (' current - liability for annual and long service leave', 50), (' other creditors', 50), (' warranty', 50), (' ultimate parent entity', 49), (' share of joint venture payables', 48), (' total current employee benefits', 48), (' employee benefits - payroll', 47), (' derivative contracts - at fair value', 46), (' secured long-term bank loans', 46), (' forward exchange contracts', 46), (' contract liabilites - current', 44), (' loan payable to relayed party under tax funding agreement', 43), (' employee benefits - current', 43), (' provisions - current', 43), ('other creditors and accruals', 42), (' gst payables', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' make good provisions', 39), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' abandonment and decommissioning costs', 35), (' gst', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current other creditors and accruals nan , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' other related parties', 65), (' rebates', 60), (' gst payable and accruals', 59), (' current - liability for annual and long service leave', 53), (' derivative contracts - at fair value', 50), (' restructuring', 50), (' warranty', 50), (' share of joint venture payables', 48), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' loans from related party', 43), (' provisions - current', 43), (' forward exchange contracts', 42), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - payroll', 41), (' provision for associate funding', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' arising from service contracts', 40), (' employee benefits - current', 39), (' make good provisions', 38), (' total current employee benefits', 38), (' abandonment and decommissioning costs', 37), (' gst', 33), (' gst liabilities', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' current - liability for annual and long service leave', 65), (' rebates', 60), (' total current employee benefits', 59), (' secured long-term bank loans', 53), (' warranty', 50), ('other creditors and accruals', 47), (' loan payable to relayed party under tax funding agreement', 47), (' ultimate parent entity', 45), (' provisions - current', 43), (' derivative contracts - at fair value', 41), (' employee benefits - current', 41), (' contract liabilites - current', 41), (' share of joint venture payables', 41), (' forward exchange contracts', 41), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' other related parties', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' loans from related party', 35), (' gst payable and accruals', 35), (' gst', 33), (' provision for associate funding', 29), (' arising from service contracts', 29), (' make good provisions', 25), (' abandonment and decommissioning costs', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current trade and other payables nan , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' rebates', 60), (' current - liability for annual and long service leave', 56), (' share of joint venture payables', 56), (' other related parties', 53), (' gst payable and accruals', 50), (' restructuring', 50), (' warranty', 50), (' ultimate parent entity', 47), ('other creditors and accruals', 46), (' secured long-term bank loans', 46), (' forward exchange contracts', 46), (' total current employee benefits', 45), (' loans from related party', 43), (' provisions - current', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst liabilities', 40), (' make good provisions', 38), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 36), (' other creditors', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' gst', 33), (' provision for associate funding', 32)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current contract liabilities nan , res_fuzz_match = [(' gst liabilities', 80), (' contract liabilites - current', 77), (' derivative contracts - at fair value', 64), (' current - liability for annual and long service leave', 63), (' rebates', 60), (' restructuring', 60), (' other', 60), (' forward exchange contracts', 54), (' ultimate parent entity', 53), (' secured long-term bank loans', 50), (' gst payables', 50), (' warranty', 50), (' share of joint venture payables', 48), (' arising from service contracts', 48), (' total current employee benefits', 48), (' other related parties', 47), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' gst payable and accruals', 42), (' loan payable to relayed party under tax funding agreement', 41), ('other creditors and accruals', 39), (' provision for associate funding', 36), (' gst', 33), (' employee benefits - payroll', 32), (' make good provisions', 31), (' employee benefits - current', 30), (' abandonment and decommissioning costs', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party 20 , res_fuzz_match = [(' other related parties', 82), (' loans from related party', 71), (' rebates', 60), (' other creditors', 50), (' other creditors', 50), (' current - liability for annual and long service leave', 50), (' other creditors', 50), (' warranty', 50), (' ultimate parent entity', 49), (' share of joint venture payables', 48), (' total current employee benefits', 48), (' employee benefits - payroll', 47), (' derivative contracts - at fair value', 46), (' secured long-term bank loans', 46), (' forward exchange contracts', 46), (' contract liabilites - current', 44), (' loan payable to relayed party under tax funding agreement', 43), (' employee benefits - current', 43), (' provisions - current', 43), ('other creditors and accruals', 42), (' gst payables', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' make good provisions', 39), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' abandonment and decommissioning costs', 35), (' gst', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current other creditors and accruals nan , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' other related parties', 65), (' rebates', 60), (' gst payable and accruals', 59), (' current - liability for annual and long service leave', 53), (' derivative contracts - at fair value', 50), (' restructuring', 50), (' warranty', 50), (' share of joint venture payables', 48), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' loans from related party', 43), (' provisions - current', 43), (' forward exchange contracts', 42), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - payroll', 41), (' provision for associate funding', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' arising from service contracts', 40), (' employee benefits - current', 39), (' make good provisions', 38), (' total current employee benefits', 38), (' abandonment and decommissioning costs', 37), (' gst', 33), (' gst liabilities', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' current - liability for annual and long service leave', 65), (' rebates', 60), (' total current employee benefits', 59), (' secured long-term bank loans', 53), (' warranty', 50), ('other creditors and accruals', 47), (' loan payable to relayed party under tax funding agreement', 47), (' ultimate parent entity', 45), (' provisions - current', 43), (' derivative contracts - at fair value', 41), (' employee benefits - current', 41), (' contract liabilites - current', 41), (' share of joint venture payables', 41), (' forward exchange contracts', 41), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' other related parties', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' loans from related party', 35), (' gst payable and accruals', 35), (' gst', 33), (' provision for associate funding', 29), (' arising from service contracts', 29), (' make good provisions', 25), (' abandonment and decommissioning costs', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 5, 6, 7, 8], 'score': [100, 80, 82, 100, 100, 80, 82, 100], 'value': [8166254.0, 785740.0, 44920374.0, 12398770.0, 6067584.0, 471416.0, 37688849.0, 11449799.0], 'label': ['Current Trade and other payables nan', 'Current Contract liabilities nan', 'Current Amounts due to related party 20', 'Current Other creditors and accruals nan', 'Current Trade and other payables nan', 'Current Contract liabilities nan', 'Current Amounts due to related party 20', 'Current Other creditors and accruals nan'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current warranty nan nan , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 62), (' rebates', 60), (' other related parties', 53), (' secured long-term bank loans', 50), (' restructuring', 50), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 46), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' provisions - current', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' total current employee benefits', 43), (' contract liabilites - current', 42), (' gst payable and accruals', 41), (' gst payables', 40), (' other', 40), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' employee benefits - current', 35), (' arising from service contracts', 33), (' gst', 33), (' provision for associate funding', 32), (' gst liabilities', 30), (' employee benefits - payroll', 27), (' abandonment and decommissioning costs', 25), (' make good provisions', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current dealers nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 68), (' rebates', 60), (' secured long-term bank loans', 59), (' total current employee benefits', 59), (' loan payable to relayed party under tax funding agreement', 50), (' warranty', 50), ('other creditors and accruals', 47), (' share of joint venture payables', 45), (' provisions - current', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' gst payable and accruals', 41), (' forward exchange contracts', 41), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' derivative contracts - at fair value', 36), (' loans from related party', 35), (' provision for associate funding', 33), (' gst', 33), (' employee benefits - current', 32), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), (' arising from service contracts', 32), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' make good provisions', 25), (' abandonment and decommissioning costs', 23)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current total nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 67), (' rebates', 60), (' secured long-term bank loans', 52), (' total current employee benefits', 52), (' warranty', 50), ('other creditors and accruals', 48), (' derivative contracts - at fair value', 43), (' loan payable to relayed party under tax funding agreement', 43), (' gst payable and accruals', 43), (' provisions - current', 43), (' share of joint venture payables', 43), (' ultimate parent entity', 42), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' other related parties', 35), (' loans from related party', 35), (' employee benefits - current', 33), (' contract liabilites - current', 33), (' provision for associate funding', 33), (' gst', 33), (' employee benefits - payroll', 29), (' arising from service contracts', 29), (' make good provisions', 25), (' abandonment and decommissioning costs', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = non-current make good nan nan , res_fuzz_match = [(' make good provisions', 62), (' current - liability for annual and long service leave', 52), (' secured long-term bank loans', 48), (' forward exchange contracts', 42), ('other creditors and accruals', 40), (' rebates', 40), (' other', 40), (' total current employee benefits', 40), (' warranty', 38), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' other creditors', 36), (' other creditors', 36), (' employee benefits - current', 35), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' share of joint venture payables', 33), (' arising from service contracts', 33), (' gst', 33), (' ultimate parent entity', 32), (' gst payable and accruals', 32), (' contract liabilites - current', 32), (' abandonment and decommissioning costs', 32), (' provision for associate funding', 32), (' gst payables', 30), (' gst liabilities', 30), (' other related parties', 29), (' provisions - current', 29), (' employee benefits - payroll', 27), (' restructuring', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = non-current total nan nan , res_fuzz_match = [(' secured long-term bank loans', 52), (' current - liability for annual and long service leave', 52), ('other creditors and accruals', 48), (' derivative contracts - at fair value', 43), (' loan payable to relayed party under tax funding agreement', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' other', 40), (' loans from related party', 38), (' gst payable and accruals', 38), (' share of joint venture payables', 38), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' other related parties', 35), (' employee benefits - current', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' provision for associate funding', 33), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' provisions - current', 29), (' arising from service contracts', 29), (' employee benefits - payroll', 24), (' make good provisions', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: inaud warranty dealers , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' provisions - current', 57), (' make good provisions', 56), (' provision for associate funding', 50), (' other related parties', 47), ('other creditors and accruals', 46), (' gst payable and accruals', 45), (' contract liabilites - current', 44), (' loans from related party', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' current - liability for annual and long service leave', 41), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), (' total current employee benefits', 39), (' secured long-term bank loans', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' gst', 33), (' forward exchange contracts', 33), (' abandonment and decommissioning costs', 31), (' restructuring', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 1 april 2021 6327762 14230472 , res_fuzz_match = [(' provisions - current', 57), (' make good provisions', 56), (' loans from related party', 52), (' gst payable and accruals', 51), (' provision for associate funding', 49), (' other related parties', 47), (' employee benefits - payroll', 45), ('other creditors and accruals', 44), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' total current employee benefits', 40), (' loan payable to relayed party under tax funding agreement', 39), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' warranty', 38), (' contract liabilites - current', 37), (' share of joint venture payables', 37), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 36), (' other creditors', 36), (' gst', 33), (' ultimate parent entity', 32), (' abandonment and decommissioning costs', 31), (' restructuring', 30), (' forward exchange contracts', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions made during the year 4176555 47386577 , res_fuzz_match = [(' other', 60), (' provisions - current', 57), (' make good provisions', 56), (' provision for associate funding', 55), (' other related parties', 47), (' loan payable to relayed party under tax funding agreement', 44), (' arising from service contracts', 44), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' rebates', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' gst payable and accruals', 36), (' contract liabilites - current', 36), (' abandonment and decommissioning costs', 35), (' total current employee benefits', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' restructuring', 30), (' warranty', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions used during the year (1,170,637) nan , res_fuzz_match = [(' other', 60), (' provision for associate funding', 59), (' provisions - current', 57), (' make good provisions', 56), (' secured long-term bank loans', 50), (' warranty', 50), (' arising from service contracts', 48), (' other related parties', 47), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' rebates', 40), (' restructuring', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' gst liabilities', 30), (' forward exchange contracts', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: payments (2,084,957) (40,564,435) , res_fuzz_match = [(' provisions - current', 71), (' make good provisions', 56), (' gst payables', 50), (' employee benefits - current', 48), (' other related parties', 47), (' employee benefits - payroll', 45), (' share of joint venture payables', 44), (' total current employee benefits', 44), (' ultimate parent entity', 42), (' provision for associate funding', 41), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 39), (' arising from service contracts', 39), (' loans from related party', 38), (' warranty', 38), (' other creditors', 36), (' secured long-term bank loans', 36), (' other creditors', 36), (' abandonment and decommissioning costs', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' current - liability for annual and long service leave', 35), (' contract liabilites - current', 35), (' gst', 33), (' derivative contracts - at fair value', 31), (' gst liabilities', 30), (' forward exchange contracts', 30), (' restructuring', 30), (' gst payable and accruals', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 31 march 2022 7248723 21052614 , res_fuzz_match = [(' provisions - current', 57), (' make good provisions', 56), (' provision for associate funding', 49), (' loans from related party', 48), (' other related parties', 47), (' gst payable and accruals', 47), (' employee benefits - payroll', 45), ('other creditors and accruals', 42), (' secured long-term bank loans', 42), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' derivative contracts - at fair value', 38), (' warranty', 38), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' other creditors', 36), (' share of joint venture payables', 36), (' arising from service contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' contract liabilites - current', 33), (' gst', 33), (' ultimate parent entity', 32), (' abandonment and decommissioning costs', 31), (' restructuring', 30), (' forward exchange contracts', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current warranty nan nan , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 62), (' rebates', 60), (' other related parties', 53), (' secured long-term bank loans', 50), (' restructuring', 50), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 46), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' provisions - current', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' total current employee benefits', 43), (' contract liabilites - current', 42), (' gst payable and accruals', 41), (' gst payables', 40), (' other', 40), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' employee benefits - current', 35), (' arising from service contracts', 33), (' gst', 33), (' provision for associate funding', 32), (' gst liabilities', 30), (' employee benefits - payroll', 27), (' abandonment and decommissioning costs', 25), (' make good provisions', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current dealers nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 68), (' rebates', 60), (' secured long-term bank loans', 59), (' total current employee benefits', 59), (' loan payable to relayed party under tax funding agreement', 50), (' warranty', 50), ('other creditors and accruals', 47), (' share of joint venture payables', 45), (' provisions - current', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' gst payable and accruals', 41), (' forward exchange contracts', 41), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' derivative contracts - at fair value', 36), (' loans from related party', 35), (' provision for associate funding', 33), (' gst', 33), (' employee benefits - current', 32), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), (' arising from service contracts', 32), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' make good provisions', 25), (' abandonment and decommissioning costs', 23)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current total nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 67), (' rebates', 60), (' secured long-term bank loans', 52), (' total current employee benefits', 52), (' warranty', 50), ('other creditors and accruals', 48), (' derivative contracts - at fair value', 43), (' loan payable to relayed party under tax funding agreement', 43), (' gst payable and accruals', 43), (' provisions - current', 43), (' share of joint venture payables', 43), (' ultimate parent entity', 42), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' other related parties', 35), (' loans from related party', 35), (' employee benefits - current', 33), (' contract liabilites - current', 33), (' provision for associate funding', 33), (' gst', 33), (' employee benefits - payroll', 29), (' arising from service contracts', 29), (' make good provisions', 25), (' abandonment and decommissioning costs', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = non-current make good nan nan , res_fuzz_match = [(' make good provisions', 62), (' current - liability for annual and long service leave', 52), (' secured long-term bank loans', 48), (' forward exchange contracts', 42), ('other creditors and accruals', 40), (' rebates', 40), (' other', 40), (' total current employee benefits', 40), (' warranty', 38), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' other creditors', 36), (' other creditors', 36), (' employee benefits - current', 35), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' share of joint venture payables', 33), (' arising from service contracts', 33), (' gst', 33), (' ultimate parent entity', 32), (' gst payable and accruals', 32), (' contract liabilites - current', 32), (' abandonment and decommissioning costs', 32), (' provision for associate funding', 32), (' gst payables', 30), (' gst liabilities', 30), (' other related parties', 29), (' provisions - current', 29), (' employee benefits - payroll', 27), (' restructuring', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = non-current total nan nan , res_fuzz_match = [(' secured long-term bank loans', 52), (' current - liability for annual and long service leave', 52), ('other creditors and accruals', 48), (' derivative contracts - at fair value', 43), (' loan payable to relayed party under tax funding agreement', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' other', 40), (' loans from related party', 38), (' gst payable and accruals', 38), (' share of joint venture payables', 38), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' other related parties', 35), (' employee benefits - current', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' provision for associate funding', 33), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' provisions - current', 29), (' arising from service contracts', 29), (' employee benefits - payroll', 24), (' make good provisions', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: inaud warranty dealers , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' provisions - current', 57), (' make good provisions', 56), (' provision for associate funding', 50), (' other related parties', 47), ('other creditors and accruals', 46), (' gst payable and accruals', 45), (' contract liabilites - current', 44), (' loans from related party', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' current - liability for annual and long service leave', 41), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), (' total current employee benefits', 39), (' secured long-term bank loans', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' gst', 33), (' forward exchange contracts', 33), (' abandonment and decommissioning costs', 31), (' restructuring', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 1 april 2021 6327762 14230472 , res_fuzz_match = [(' provisions - current', 57), (' make good provisions', 56), (' loans from related party', 52), (' gst payable and accruals', 51), (' provision for associate funding', 49), (' other related parties', 47), (' employee benefits - payroll', 45), ('other creditors and accruals', 44), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' total current employee benefits', 40), (' loan payable to relayed party under tax funding agreement', 39), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' warranty', 38), (' contract liabilites - current', 37), (' share of joint venture payables', 37), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 36), (' other creditors', 36), (' gst', 33), (' ultimate parent entity', 32), (' abandonment and decommissioning costs', 31), (' restructuring', 30), (' forward exchange contracts', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions made during the year 4176555 47386577 , res_fuzz_match = [(' other', 60), (' provisions - current', 57), (' make good provisions', 56), (' provision for associate funding', 55), (' other related parties', 47), (' loan payable to relayed party under tax funding agreement', 44), (' arising from service contracts', 44), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' rebates', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' gst payable and accruals', 36), (' contract liabilites - current', 36), (' abandonment and decommissioning costs', 35), (' total current employee benefits', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' restructuring', 30), (' warranty', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions used during the year (1,170,637) nan , res_fuzz_match = [(' other', 60), (' provision for associate funding', 59), (' provisions - current', 57), (' make good provisions', 56), (' secured long-term bank loans', 50), (' warranty', 50), (' arising from service contracts', 48), (' other related parties', 47), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' rebates', 40), (' restructuring', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' gst liabilities', 30), (' forward exchange contracts', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: payments (2,084,957) (40,564,435) , res_fuzz_match = [(' provisions - current', 71), (' make good provisions', 56), (' gst payables', 50), (' employee benefits - current', 48), (' other related parties', 47), (' employee benefits - payroll', 45), (' share of joint venture payables', 44), (' total current employee benefits', 44), (' ultimate parent entity', 42), (' provision for associate funding', 41), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 39), (' arising from service contracts', 39), (' loans from related party', 38), (' warranty', 38), (' other creditors', 36), (' secured long-term bank loans', 36), (' other creditors', 36), (' abandonment and decommissioning costs', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' current - liability for annual and long service leave', 35), (' contract liabilites - current', 35), (' gst', 33), (' derivative contracts - at fair value', 31), (' gst liabilities', 30), (' forward exchange contracts', 30), (' restructuring', 30), (' gst payable and accruals', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 31 march 2022 7248723 21052614 , res_fuzz_match = [(' provisions - current', 57), (' make good provisions', 56), (' provision for associate funding', 49), (' loans from related party', 48), (' other related parties', 47), (' gst payable and accruals', 47), (' employee benefits - payroll', 45), ('other creditors and accruals', 42), (' secured long-term bank loans', 42), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' derivative contracts - at fair value', 38), (' warranty', 38), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' other creditors', 36), (' share of joint venture payables', 36), (' arising from service contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' contract liabilites - current', 33), (' gst', 33), (' ultimate parent entity', 32), (' abandonment and decommissioning costs', 31), (' restructuring', 30), (' forward exchange contracts', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 5, 11, 16], 'score': [100, 100, 100, 100], 'value': [7248723.0, 0.0, 6327762.0, 0.0], 'label': ['Current Warranty nan nan', 'Movement in provisions: InAUD Warranty Dealers', 'Current Warranty nan nan', 'Movement in provisions: InAUD Warranty Dealers'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current liability for annual leave , res_fuzz_match = [(' current - liability for annual and long service leave', 90), (' gst liabilities', 80), (' warranty', 62), (' rebates', 60), (' contract liabilites - current', 52), (' gst payable and accruals', 50), (' gst payables', 50), ('other creditors and accruals', 46), (' secured long-term bank loans', 46), (' total current employee benefits', 45), (' loans from related party', 43), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' provision for associate funding', 41), (' loan payable to relayed party under tax funding agreement', 40), (' share of joint venture payables', 40), (' other', 40), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 36), (' other creditors', 36), (' gst', 33), (' forward exchange contracts', 33), (' employee benefits - payroll', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - current', 30), (' restructuring', 30), (' make good provisions', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current liability for long service leave , res_fuzz_match = [(' gst liabilities', 80), (' current - liability for annual and long service leave', 69), (' gst', 67), (' warranty', 62), (' arising from service contracts', 60), (' rebates', 60), (' contract liabilites - current', 52), (' gst payables', 50), (' secured long-term bank loans', 49), (' loans from related party', 48), (' total current employee benefits', 48), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' provision for associate funding', 41), (' share of joint venture payables', 40), (' other', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' loan payable to relayed party under tax funding agreement', 34), (' restructuring', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current other employee benefits , res_fuzz_match = [(' other', 100), (' employee benefits - payroll', 81), (' employee benefits - current', 79), (' total current employee benefits', 79), (' rebates', 60), (' other creditors', 57), (' other creditors', 57), (' other creditors', 57), (' other related parties', 53), (' restructuring', 50), (' warranty', 50), (' current - liability for annual and long service leave', 48), (' secured long-term bank loans', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 43), (' provisions - current', 43), (' gst payables', 40), ('other creditors and accruals', 38), (' loan payable to relayed party under tax funding agreement', 38), (' make good provisions', 38), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' loans from related party', 33), (' gst', 33), (' forward exchange contracts', 33), (' arising from service contracts', 32), (' gst liabilities', 30), (' derivative contracts - at fair value', 29), (' gst payable and accruals', 27), (' abandonment and decommissioning costs', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' current - liability for annual and long service leave', 69), (' total current employee benefits', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' gst payables', 42), (' gst liabilities', 42), (' restructuring', 40), (' other', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = non-current liability for long service leave , res_fuzz_match = [(' gst liabilities', 70), (' current - liability for annual and long service leave', 69), (' gst', 67), (' arising from service contracts', 60), (' contract liabilites - current', 52), (' loans from related party', 48), (' secured long-term bank loans', 46), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 43), (' other related parties', 41), (' provision for associate funding', 41), (' total current employee benefits', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' rebates', 40), (' other', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst payable and accruals', 32), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' secured long-term bank loans', 46), (' employee benefits - current', 46), (' current - liability for annual and long service leave', 46), (' provisions - current', 46), (' share of joint venture payables', 46), (' total current employee benefits', 46), (' rebates', 40), (' other', 40), ('other creditors and accruals', 38), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other related parties', 31), (' employee benefits - payroll', 31), (' provision for associate funding', 31), (' gst liabilities', 30), (' restructuring', 30), (' make good provisions', 23)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current liability for annual leave , res_fuzz_match = [(' current - liability for annual and long service leave', 90), (' gst liabilities', 80), (' warranty', 62), (' rebates', 60), (' contract liabilites - current', 52), (' gst payable and accruals', 50), (' gst payables', 50), ('other creditors and accruals', 46), (' secured long-term bank loans', 46), (' total current employee benefits', 45), (' loans from related party', 43), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' provision for associate funding', 41), (' loan payable to relayed party under tax funding agreement', 40), (' share of joint venture payables', 40), (' other', 40), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 36), (' other creditors', 36), (' gst', 33), (' forward exchange contracts', 33), (' employee benefits - payroll', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - current', 30), (' restructuring', 30), (' make good provisions', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current liability for long service leave , res_fuzz_match = [(' gst liabilities', 80), (' current - liability for annual and long service leave', 69), (' gst', 67), (' warranty', 62), (' arising from service contracts', 60), (' rebates', 60), (' contract liabilites - current', 52), (' gst payables', 50), (' secured long-term bank loans', 49), (' loans from related party', 48), (' total current employee benefits', 48), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' provision for associate funding', 41), (' share of joint venture payables', 40), (' other', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' loan payable to relayed party under tax funding agreement', 34), (' restructuring', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current other employee benefits , res_fuzz_match = [(' other', 100), (' employee benefits - payroll', 81), (' employee benefits - current', 79), (' total current employee benefits', 79), (' rebates', 60), (' other creditors', 57), (' other creditors', 57), (' other creditors', 57), (' other related parties', 53), (' restructuring', 50), (' warranty', 50), (' current - liability for annual and long service leave', 48), (' secured long-term bank loans', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 43), (' provisions - current', 43), (' gst payables', 40), ('other creditors and accruals', 38), (' loan payable to relayed party under tax funding agreement', 38), (' make good provisions', 38), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' loans from related party', 33), (' gst', 33), (' forward exchange contracts', 33), (' arising from service contracts', 32), (' gst liabilities', 30), (' derivative contracts - at fair value', 29), (' gst payable and accruals', 27), (' abandonment and decommissioning costs', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' current - liability for annual and long service leave', 69), (' total current employee benefits', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' gst payables', 42), (' gst liabilities', 42), (' restructuring', 40), (' other', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = non-current liability for long service leave , res_fuzz_match = [(' gst liabilities', 70), (' current - liability for annual and long service leave', 69), (' gst', 67), (' arising from service contracts', 60), (' contract liabilites - current', 52), (' loans from related party', 48), (' secured long-term bank loans', 46), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 43), (' other related parties', 41), (' provision for associate funding', 41), (' total current employee benefits', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' rebates', 40), (' other', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst payable and accruals', 32), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' secured long-term bank loans', 46), (' employee benefits - current', 46), (' current - liability for annual and long service leave', 46), (' provisions - current', 46), (' share of joint venture payables', 46), (' total current employee benefits', 46), (' rebates', 40), (' other', 40), ('other creditors and accruals', 38), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other related parties', 31), (' employee benefits - payroll', 31), (' provision for associate funding', 31), (' gst liabilities', 30), (' restructuring', 30), (' make good provisions', 23)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 6, 7, 8], 'score': [90, 80, 100, 90, 80, 100], 'value': [1386692.0, 576678.0, 250005.0, 1189057.0, 772345.0, 0.0], 'label': ['Current Liability for annual leave', 'Current Liability for long service leave', 'Current Other employee benefits', 'Current Liability for annual leave', 'Current Liability for long service leave', 'Current Other employee benefits'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' later than 1 year ', ' not later than 5 years']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings ', 44), (' lease liabilities ', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings ', 44), (' lease liabilities ', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes ', ' deferred tax liabilities']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities ', ' total deferred tax (assets) / liabilities']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes ', 33), (' deferred tax liabilities', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes ', 33), (' deferred tax liabilities', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits ', 33), ('other long term liabilities ', 32), (' provision for associate funding ', 32), (' deferred revenue', 29), (' other non-current liabilities ', 28), (' trade and other payables ', 26), (' other financial liabilities ', 21), (' financial liabilities ', 17), (' provisions ', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits ', 33), ('other long term liabilities ', 32), (' provision for associate funding ', 32), (' deferred revenue', 29), (' other non-current liabilities ', 28), (' trade and other payables ', 26), (' other financial liabilities ', 21), (' financial liabilities ', 17), (' provisions ', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings ', ' general reserves ', ' accumulated losses ', ' retained earnings and dividends on equity instruments']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 29913675.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [29913675.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 41223680.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [41223680.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve ', ' cash flow hedge reserve ', ' reserve in joint venture ', ' other reserve ', ' total other reserves ', ' tax reserve ', ' other  components of equity']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve', 16), ('other reserves ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve', 43), (' reserves ', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve', 16), ('other reserves ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve', 43), (' reserves ', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', '']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' trade receivables ', 40), (' government subsidies receivable ', 40), (' trade and other receivables', 40), ('account receivables ', 20), (' receivable ', 20), (' billed ', 0), (' unbilled ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' unbilled ', 60), (' trade and other receivables', 54), ('account receivables ', 50), (' trade receivables ', 50), (' receivable ', 50), (' billed ', 50), (' government subsidies receivable ', 34)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [(' unbilled ', 40), ('account receivables ', 36), (' government subsidies receivable ', 35), (' trade and other receivables', 35), (' trade receivables ', 33), (' receivable ', 33), (' billed ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' receivable ', 36), ('account receivables ', 33), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' trade and other receivables', 33), (' billed ', 0), (' unbilled ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' trade and other receivables', 64), (' government subsidies receivable ', 55), ('account receivables ', 36), (' trade receivables ', 36), (' receivable ', 33), (' billed ', 0), (' unbilled ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' trade receivables ', 50), (' trade and other receivables', 44), ('account receivables ', 43), (' government subsidies receivable ', 43), (' unbilled ', 40), (' receivable ', 33), (' billed ', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' government subsidies receivable ', 33), (' receivable ', 33), ('account receivables ', 30), (' trade and other receivables', 27), (' trade receivables ', 26), (' billed ', 25), (' unbilled ', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' trade receivables ', 35), ('account receivables ', 33), (' government subsidies receivable ', 33), (' trade and other receivables', 33), (' unbilled ', 20), (' receivable ', 17), (' billed ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' trade and other receivables', 40), (' trade receivables ', 35), (' government subsidies receivable ', 33), (' receivable ', 33), ('account receivables ', 22), (' billed ', 0), (' unbilled ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 92742998.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['9'], 'line_item_value': [92742998.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' trade receivables ', 40), (' government subsidies receivable ', 40), (' trade and other receivables', 40), ('account receivables ', 20), (' receivable ', 20), (' billed ', 0), (' unbilled ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' unbilled ', 60), (' trade and other receivables', 54), ('account receivables ', 50), (' trade receivables ', 50), (' receivable ', 50), (' billed ', 50), (' government subsidies receivable ', 34)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [(' unbilled ', 40), ('account receivables ', 36), (' government subsidies receivable ', 35), (' trade and other receivables', 35), (' trade receivables ', 33), (' receivable ', 33), (' billed ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' receivable ', 36), ('account receivables ', 33), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' trade and other receivables', 33), (' billed ', 0), (' unbilled ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' trade and other receivables', 64), (' government subsidies receivable ', 55), ('account receivables ', 36), (' trade receivables ', 36), (' receivable ', 33), (' billed ', 0), (' unbilled ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' trade receivables ', 50), (' trade and other receivables', 44), ('account receivables ', 43), (' government subsidies receivable ', 43), (' unbilled ', 40), (' receivable ', 33), (' billed ', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' government subsidies receivable ', 33), (' receivable ', 33), ('account receivables ', 30), (' trade and other receivables', 27), (' trade receivables ', 26), (' billed ', 25), (' unbilled ', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' trade receivables ', 35), ('account receivables ', 33), (' government subsidies receivable ', 33), (' trade and other receivables', 33), (' unbilled ', 20), (' receivable ', 17), (' billed ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' trade and other receivables', 40), (' trade receivables ', 35), (' government subsidies receivable ', 33), (' receivable ', 33), ('account receivables ', 22), (' billed ', 0), (' unbilled ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 121289307.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['9'], 'line_item_value': [121289307.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers'] , match_type = partial , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party 20 , res_fuzz_match = [(' receivables from related parties ', 78), (' related party receivables ', 61), (' trade debtors ', 50), (' other debtors ', 50), (' net trade debtors ', 50), (' share of joint venture receivables ', 48), (' trade debtors from contracts with customers', 46), ('trade receivables ', 42), (' allowance for expected credit loss ', 39), (' provision for impairment losses ', 36), ('charges paid in advance ', 35)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current other receivables nan , res_fuzz_match = [('trade receivables ', 75), (' related party receivables ', 67), (' other debtors ', 58), (' share of joint venture receivables ', 58), (' net trade debtors ', 44), ('charges paid in advance ', 41), (' receivables from related parties ', 41), (' allowance for expected credit loss ', 38), (' trade debtors from contracts with customers', 38), (' trade debtors ', 33), (' provision for impairment losses ', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' trade debtors ', 42), (' share of joint venture receivables ', 41), (' net trade debtors ', 41), ('charges paid in advance ', 41), (' trade debtors from contracts with customers', 41), (' related party receivables ', 35), (' receivables from related parties ', 35), (' allowance for expected credit loss ', 35), (' other debtors ', 33), (' provision for impairment losses ', 29), ('trade receivables ', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party 20 , res_fuzz_match = [(' receivables from related parties ', 78), (' related party receivables ', 61), (' trade debtors ', 50), (' other debtors ', 50), (' net trade debtors ', 50), (' share of joint venture receivables ', 48), (' trade debtors from contracts with customers', 46), ('trade receivables ', 42), (' allowance for expected credit loss ', 39), (' provision for impairment losses ', 36), ('charges paid in advance ', 35)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current other receivables nan , res_fuzz_match = [('trade receivables ', 75), (' related party receivables ', 67), (' other debtors ', 58), (' share of joint venture receivables ', 58), (' net trade debtors ', 44), ('charges paid in advance ', 41), (' receivables from related parties ', 41), (' allowance for expected credit loss ', 38), (' trade debtors from contracts with customers', 38), (' trade debtors ', 33), (' provision for impairment losses ', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' trade debtors ', 42), (' share of joint venture receivables ', 41), (' net trade debtors ', 41), ('charges paid in advance ', 41), (' trade debtors from contracts with customers', 41), (' related party receivables ', 35), (' receivables from related parties ', 35), (' allowance for expected credit loss ', 35), (' other debtors ', 33), (' provision for impairment losses ', 29), ('trade receivables ', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods ', ' LNG ', ' Condensate ', ' Domgas ', ' Feed gas income ', ' Gas transportation income ', ' Sale of goods - Cars ', ' Sale of goods - Motorcycles ', ' Sale of goods - Marine ', ' Sale of goods - Spareparts ', ' Total Revenue ', ' Goods sold to customer from warehouse ', ' Goods sold to customer direct from supplier ', ' revenue from continuing activities ', ' revenue form contracts with customers ', ' hedge loss / gain ', ' contribution from joint venture']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities', 39), (' revenue from contracts with customers ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), ('revenue from operations ', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue ', 44), (' Sales revenue ', 35), ('revenue from operations ', 29), (' sale of products ', 25), (' revenue from contracts with customers ', 23), (' from trading business ', 22), (' revenue from continuing activities', 22), (' net sales ', 20), (' transmission and distribution business ', 20), (' Sale of coal ', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Sales revenue ', 50), (' net sales ', 38), (' from trading business ', 36), ('revenue from operations ', 34), (' sale of products ', 32), (' Revenue ', 32), (' revenue from contracts with customers ', 31), (' Sale of coal ', 27), (' revenue from continuing activities', 26), (' transmission and distribution business ', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities', 44), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('revenue from operations ', 50), (' revenue from contracts with customers ', 33), (' from trading business ', 32), (' sale of products ', 29), (' transmission and distribution business ', 27), (' Sale of coal ', 24), (' revenue from continuing activities', 24), (' net sales ', 17), (' Sales revenue ', 15), (' Revenue ', 9)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' revenue from continuing activities', 38), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 30), (' from trading business ', 30), ('revenue from operations ', 21), (' net sales ', 20), (' Sale of coal ', 19), (' sale of products ', 17), (' Sales revenue ', 17), (' Revenue ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal ', 40), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' revenue from continuing activities', 33), (' net sales ', 32), (' from trading business ', 31), (' transmission and distribution business ', 26), ('revenue from operations ', 22), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal ', 42), (' revenue from contracts with customers ', 38), (' sale of products ', 37), (' net sales ', 35), (' revenue from continuing activities', 35), (' from trading business ', 33), ('revenue from operations ', 26), (' transmission and distribution business ', 23), (' Sales revenue ', 23), (' Revenue ', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('revenue from operations ', 42), (' revenue from contracts with customers ', 41), (' from trading business ', 38), (' transmission and distribution business ', 36), (' sale of products ', 31), (' Sale of coal ', 28), (' revenue from continuing activities', 27), (' Sales revenue ', 26), (' net sales ', 23), (' Revenue ', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [(' from trading business ', 39), (' net sales ', 35), (' revenue from contracts with customers ', 31), (' revenue from continuing activities', 31), (' transmission and distribution business ', 30), ('revenue from operations ', 29), (' Sales revenue ', 27), (' Sale of coal ', 23), (' sale of products ', 21), (' Revenue ', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('revenue from operations ', 45), (' revenue from contracts with customers ', 36), (' from trading business ', 36), (' transmission and distribution business ', 35), (' sale of products ', 33), (' revenue from continuing activities', 33), (' Sale of coal ', 24), (' Sales revenue ', 23), (' Revenue ', 20), (' net sales ', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' revenue from contracts with customers ', 41), (' from trading business ', 38), (' revenue from continuing activities', 38), ('revenue from operations ', 37), (' Sales revenue ', 36), (' sale of products ', 29), (' Revenue ', 29), (' transmission and distribution business ', 28), (' Sale of coal ', 26), (' net sales ', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [(' revenue from contracts with customers ', 43), (' revenue from continuing activities', 35), ('revenue from operations ', 34), (' from trading business ', 34), (' sale of products ', 33), (' Sales revenue ', 33), (' net sales ', 27), (' Sale of coal ', 27), (' transmission and distribution business ', 25), (' Revenue ', 16)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 435163948.0, 'line_item_label': ['Revenue'], 'note_numbers': ['4'], 'line_item_value': [435163948.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities', 39), (' revenue from contracts with customers ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), ('revenue from operations ', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue ', 44), (' Sales revenue ', 35), ('revenue from operations ', 29), (' sale of products ', 25), (' revenue from contracts with customers ', 23), (' from trading business ', 22), (' revenue from continuing activities', 22), (' net sales ', 20), (' transmission and distribution business ', 20), (' Sale of coal ', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Sales revenue ', 50), (' net sales ', 38), (' from trading business ', 36), ('revenue from operations ', 34), (' sale of products ', 32), (' Revenue ', 32), (' revenue from contracts with customers ', 31), (' Sale of coal ', 27), (' revenue from continuing activities', 26), (' transmission and distribution business ', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities', 44), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('revenue from operations ', 50), (' revenue from contracts with customers ', 33), (' from trading business ', 32), (' sale of products ', 29), (' transmission and distribution business ', 27), (' Sale of coal ', 24), (' revenue from continuing activities', 24), (' net sales ', 17), (' Sales revenue ', 15), (' Revenue ', 9)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' revenue from continuing activities', 38), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 30), (' from trading business ', 30), ('revenue from operations ', 21), (' net sales ', 20), (' Sale of coal ', 19), (' sale of products ', 17), (' Sales revenue ', 17), (' Revenue ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal ', 40), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' revenue from continuing activities', 33), (' net sales ', 32), (' from trading business ', 31), (' transmission and distribution business ', 26), ('revenue from operations ', 22), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal ', 42), (' revenue from contracts with customers ', 38), (' sale of products ', 37), (' net sales ', 35), (' revenue from continuing activities', 35), (' from trading business ', 33), ('revenue from operations ', 26), (' transmission and distribution business ', 23), (' Sales revenue ', 23), (' Revenue ', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('revenue from operations ', 42), (' revenue from contracts with customers ', 41), (' from trading business ', 38), (' transmission and distribution business ', 36), (' sale of products ', 31), (' Sale of coal ', 28), (' revenue from continuing activities', 27), (' Sales revenue ', 26), (' net sales ', 23), (' Revenue ', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [(' from trading business ', 39), (' net sales ', 35), (' revenue from contracts with customers ', 31), (' revenue from continuing activities', 31), (' transmission and distribution business ', 30), ('revenue from operations ', 29), (' Sales revenue ', 27), (' Sale of coal ', 23), (' sale of products ', 21), (' Revenue ', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('revenue from operations ', 45), (' revenue from contracts with customers ', 36), (' from trading business ', 36), (' transmission and distribution business ', 35), (' sale of products ', 33), (' revenue from continuing activities', 33), (' Sale of coal ', 24), (' Sales revenue ', 23), (' Revenue ', 20), (' net sales ', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' revenue from contracts with customers ', 41), (' from trading business ', 38), (' revenue from continuing activities', 38), ('revenue from operations ', 37), (' Sales revenue ', 36), (' sale of products ', 29), (' Revenue ', 29), (' transmission and distribution business ', 28), (' Sale of coal ', 26), (' net sales ', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [(' revenue from contracts with customers ', 43), (' revenue from continuing activities', 35), ('revenue from operations ', 34), (' from trading business ', 34), (' sale of products ', 33), (' Sales revenue ', 33), (' net sales ', 27), (' Sale of coal ', 27), (' transmission and distribution business ', 25), (' Revenue ', 16)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 530127762.0, 'line_item_label': ['Revenue'], 'note_numbers': ['4'], 'line_item_value': [530127762.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-08-11 14:58:16+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales ', ' cost of goods']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory', 29), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory', 25), ('expense', 13), ('expenditure', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 50), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of product sold', 28), (' Cost of goods and services sold', 27), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold ', 23), (' change in inventory', 22), ('cost of sales', 19), ('Cost of sales', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('cost of sales', 36), ('Cost of sales', 36), ('purchase of stock-in-trade', 31), (' Personnel costs', 30), (' change in inventory', 29), (' Cost of product sold', 27), (' Cost of inventory sold', 25), (' Cost of goods and services sold', 21), (' cost of coal sold', 15), (' cost of goods sold ', 15)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' Personnel costs', 47), (' Cost of product sold', 42), (' Cost of inventory sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), ('total expenditure', 38), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' change in inventory', 26), ('expense', 18)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' change in inventory', 44), (' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), (' cost of goods sold ', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), (' change in inventory', 38), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' change in inventory', 47), (' Cost of product sold', 44), (' cost of goods sold ', 41), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('total expenses', 22), ('total expenditure', 19), ('expenditure', 16), ('expense', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' Cost of product sold', 41), ('total expenses', 36), ('purchase of stock-in-trade', 35), (' Cost of goods and services sold', 35), (' Cost of inventory sold', 35), (' cost of coal sold', 34), (' Personnel costs', 34), ('total expenditure', 33), ('cost of sales', 33), ('Cost of sales', 33), (' cost of goods sold ', 29), (' change in inventory', 29), ('expenditure', 22), ('expense', 18)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [('total expenses', 53), ('total expenditure', 43), ('expenditure', 39), ('expense', 38), (' Personnel costs', 35), ('purchase of stock-in-trade', 31), (' Cost of goods and services sold', 31), (' Cost of inventory sold', 31), (' change in inventory', 29), (' cost of coal sold', 25), ('cost of sales', 23), ('Cost of sales', 23), (' Cost of product sold', 23), (' cost of goods sold ', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 37), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of coal sold', 32), ('total expenditure', 30), ('cost of sales', 30), ('Cost of sales', 30), ('total expenses', 28), (' Cost of inventory sold', 28), (' cost of goods sold ', 26), ('expenditure', 24), (' change in inventory', 21), ('expense', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), (' change in inventory', 43), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold ', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [('total expenses', 44), ('total expenditure', 41), (' Cost of inventory sold', 39), (' change in inventory', 38), (' cost of coal sold', 35), (' Cost of goods and services sold', 35), (' Personnel costs', 35), (' cost of goods sold ', 35), (' Cost of product sold', 33), ('purchase of stock-in-trade', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 26), ('expense', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -408854724.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-408854724.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory', 29), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory', 25), ('expense', 13), ('expenditure', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 50), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of product sold', 28), (' Cost of goods and services sold', 27), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold ', 23), (' change in inventory', 22), ('cost of sales', 19), ('Cost of sales', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('cost of sales', 36), ('Cost of sales', 36), ('purchase of stock-in-trade', 31), (' Personnel costs', 30), (' change in inventory', 29), (' Cost of product sold', 27), (' Cost of inventory sold', 25), (' Cost of goods and services sold', 21), (' cost of coal sold', 15), (' cost of goods sold ', 15)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' Personnel costs', 47), (' Cost of product sold', 42), (' Cost of inventory sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), ('total expenditure', 38), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' change in inventory', 26), ('expense', 18)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' change in inventory', 44), (' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), (' cost of goods sold ', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), (' change in inventory', 38), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' change in inventory', 47), (' Cost of product sold', 44), (' cost of goods sold ', 41), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('total expenses', 22), ('total expenditure', 19), ('expenditure', 16), ('expense', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' Cost of product sold', 41), ('total expenses', 36), ('purchase of stock-in-trade', 35), (' Cost of goods and services sold', 35), (' Cost of inventory sold', 35), (' cost of coal sold', 34), (' Personnel costs', 34), ('total expenditure', 33), ('cost of sales', 33), ('Cost of sales', 33), (' cost of goods sold ', 29), (' change in inventory', 29), ('expenditure', 22), ('expense', 18)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [('total expenses', 53), ('total expenditure', 43), ('expenditure', 39), ('expense', 38), (' Personnel costs', 35), ('purchase of stock-in-trade', 31), (' Cost of goods and services sold', 31), (' Cost of inventory sold', 31), (' change in inventory', 29), (' cost of coal sold', 25), ('cost of sales', 23), ('Cost of sales', 23), (' Cost of product sold', 23), (' cost of goods sold ', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 37), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of coal sold', 32), ('total expenditure', 30), ('cost of sales', 30), ('Cost of sales', 30), ('total expenses', 28), (' Cost of inventory sold', 28), (' cost of goods sold ', 26), ('expenditure', 24), (' change in inventory', 21), ('expense', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), (' change in inventory', 43), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold ', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [('total expenses', 44), ('total expenditure', 41), (' Cost of inventory sold', 39), (' change in inventory', 38), (' cost of coal sold', 35), (' Cost of goods and services sold', 35), (' Personnel costs', 35), (' cost of goods sold ', 35), (' Cost of product sold', 33), ('purchase of stock-in-trade', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 26), ('expense', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -482165742.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-482165742.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-08-11 14:58:16+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['consum ', ' power ', ' machinery ', ' charges ', ' research ', ' analytical ', ' equipment ', ' exchange ', ' loss on ', ' donation ', ' csr ', ' social ', ' miscellaneous ', ' loss allowance ', ' Included in administrative expenses ', ' Depreciation property ', ' plant and equipment ', ' Depreciation right-of-use assets ', ' Administrative expenses ', ' Wages and salaries ', ' Compulsory superannuation contributions ', ' Payroll on-costs (excluding employee benefit provision) ', ' Staff welfare ', ' Contractors, subcontractors and employee related expenses ', ' Facilities Expense ', ' Rental equipment expenses ', ' Depreciation expense right-of-use asset ', ' Depreciation expense ', ' Amortisation expense ', ' Other expenses ', ' Research and development expenses ', ' employee benefits expenses ', ' depreciation and amortisation expenses ', ' Employee expenses ', ' Distribution Expenses ', ' Depreciation and Amortisation Expenses ', ' Other Expenses from Ordinary Activities ', '  ', ' Defined contribution plans ', ' Other employement costs']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' levies', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses ', 100), ('expenses ', 67), (' other expenses ', 67), (' Other expenses ', 67), (' Other expenses ', 67), (' Lease expenses ', 61), (' Selling Expenses ', 61), (' Occupancy ', 59), (' property espense ', 59), (' Management expenses ', 58), (' Marketing expenses ', 56), (' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' depreciation ', 42), (' Selling & distribution expenses ', 42), (' Administrative and other expenses ', 42), (' employee benefits expense ', 35), (' Depreciation and amortisation expenses ', 32), (' employee benefit espense ', 29), (' Logistics and distribution ', 25), (' Administration ', 19), (' Sales and marketing ', 15), (' levies', 12), (' Royalties ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Marketing expenses ', 100), (' Management expenses ', 72), (' Lease expenses ', 67), (' Selling Expenses ', 67), (' other expenses ', 64), (' Other expenses ', 64), (' Other expenses ', 64), (' property espense ', 64), ('expenses ', 63), (' Sales and marketing ', 57), (' Occupancy expenses ', 56), (' Selling & distribution expenses ', 47), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), (' Advertising expenses ', 43), (' Distribution expenses ', 41), (' Administrative expenses ', 41), (' Administrative and other expenses ', 41), (' Administration expenses ', 41), (' depreciation ', 40), (' employee benefits expense ', 34), (' Depreciation and amortisation expenses ', 31), (' employee benefit espense ', 29), (' Administration ', 27), (' Logistics and distribution ', 24), (' Royalties ', 20), (' levies', 12), (' Occupancy ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' employee benefit espense ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 36), (' Other expenses ', 36), (' Other expenses ', 36), (' depreciation ', 35), (' Marketing expenses ', 34), (' Administrative and other expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Logistics and distribution ', 33), (' levies', 30), (' Occupancy expenses ', 29), (' Depreciation expenses ', 27), (' Selling & distribution expenses ', 27), (' Advertising expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Royalties ', 26), (' Distribution expenses ', 25), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Lease expenses ', 22), (' Selling Expenses ', 22), (' Management expenses ', 21), (' Occupancy ', 19), (' Sales and marketing ', 19), ('expenses ', 18), (' Administration ', 16)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses ', 37), (' Depreciation and amortisation expenses ', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Administration ', 29), (' other expenses ', 25), (' Occupancy expenses ', 25), (' Other expenses ', 25), (' Management expenses ', 25), (' Other expenses ', 25), (' Marketing expenses ', 24), (' Occupancy ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Depreciation expenses ', 23), (' Amortisation expenses ', 23), (' Advertising expenses ', 22), (' property espense ', 22), (' depreciation ', 21), (' Distribution expenses ', 21), (' Royalties ', 21), (' Selling & distribution expenses ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses ', 35), (' Royalties ', 33), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Occupancy ', 25), (' Depreciation expenses ', 24), (' Advertising expenses ', 23), (' Sales and marketing ', 23), (' property espense ', 23), (' depreciation ', 22), (' Administration ', 20), (' Selling Expenses ', 18), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' other expenses ', 17), (' Other expenses ', 17), (' Other expenses ', 17), (' levies', 13), ('expenses ', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses ', 39), (' Depreciation and amortisation expenses ', 39), (' Marketing expenses ', 36), (' Amortisation expenses ', 34), (' Selling & distribution expenses ', 33), (' Sales and marketing ', 33), (' property espense ', 33), (' Distribution expenses ', 32), (' Management expenses ', 30), (' Logistics and distribution ', 29), (' Depreciation expenses ', 28), (' Advertising expenses ', 27), (' Royalties ', 27), (' Administrative expenses ', 26), (' Administration expenses ', 26), (' Administration ', 25), (' Lease expenses ', 23), (' Selling Expenses ', 23), (' other expenses ', 22), (' Occupancy expenses ', 22), (' Other expenses ', 22), (' Other expenses ', 22), (' employee benefits expense ', 22), (' employee benefit espense ', 22), (' Occupancy ', 20), (' depreciation ', 18), (' levies', 11), ('expenses ', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' Depreciation and amortisation expenses ', 38), (' property espense ', 38), (' employee benefits expense ', 37), (' employee benefit espense ', 37), (' Logistics and distribution ', 34), (' Distribution expenses ', 33), (' other expenses ', 31), (' Other expenses ', 31), (' Other expenses ', 31), (' Marketing expenses ', 30), (' Administrative and other expenses ', 30), (' Depreciation expenses ', 29), (' Selling & distribution expenses ', 29), (' Advertising expenses ', 29), (' Amortisation expenses ', 29), (' Sales and marketing ', 29), (' Administrative expenses ', 28), (' Administration expenses ', 28), (' Occupancy expenses ', 26), (' Lease expenses ', 26), (' Management expenses ', 26), (' depreciation ', 24), (' Royalties ', 24), (' Administration ', 22), (' Selling Expenses ', 21), (' Occupancy ', 19), ('expenses ', 18), (' levies', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [(' employee benefits expense ', 58), (' employee benefit espense ', 58), (' Depreciation expenses ', 50), (' Administrative and other expenses ', 50), (' Administrative expenses ', 48), (' Administration expenses ', 48), (' other expenses ', 47), (' Other expenses ', 47), (' Selling & distribution expenses ', 47), (' Management expenses ', 47), (' Other expenses ', 47), (' Marketing expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Lease expenses ', 43), (' Selling Expenses ', 43), (' Occupancy expenses ', 42), (' Amortisation expenses ', 40), (' property espense ', 39), ('expenses ', 38), (' Depreciation and amortisation expenses ', 38), (' Logistics and distribution ', 30), (' Sales and marketing ', 29), (' depreciation ', 24), (' Administration ', 23), (' levies', 13), (' Royalties ', 12), (' Occupancy ', 6)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' property espense ', 41), (' Depreciation and amortisation expenses ', 40), (' other expenses ', 39), (' Other expenses ', 39), (' Other expenses ', 39), (' Selling & distribution expenses ', 36), (' Administrative and other expenses ', 36), (' Distribution expenses ', 35), (' Depreciation expenses ', 32), (' Amortisation expenses ', 32), (' Logistics and distribution ', 32), (' employee benefits expense ', 30), (' employee benefit espense ', 30), (' Lease expenses ', 29), (' Marketing expenses ', 27), (' Advertising expenses ', 26), (' Sales and marketing ', 26), (' Royalties ', 26), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Selling Expenses ', 23), (' Management expenses ', 22), (' depreciation ', 19), (' Administration ', 18), (' Occupancy expenses ', 17), (' Occupancy ', 14), (' levies', 14), ('expenses ', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other expenses ', 59), (' Other expenses ', 59), (' Other expenses ', 59), (' Administrative and other expenses ', 50), (' property espense ', 43), (' Marketing expenses ', 40), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Occupancy expenses ', 35), (' Management expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Administration ', 32), ('expenses ', 29), (' Logistics and distribution ', 29), (' depreciation ', 28), (' Advertising expenses ', 27), (' Sales and marketing ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Royalties ', 21), (' Occupancy ', 15), (' levies', 15)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [(' Administrative and other expenses ', 52), (' Selling & distribution expenses ', 41), (' other expenses ', 40), (' Other expenses ', 40), (' Other expenses ', 40), (' Depreciation expenses ', 39), (' Amortisation expenses ', 39), (' Depreciation and amortisation expenses ', 38), (' Administrative expenses ', 37), (' Lease expenses ', 37), (' Administration expenses ', 37), (' employee benefits expense ', 37), (' Distribution expenses ', 34), (' Advertising expenses ', 34), (' property espense ', 34), (' employee benefit espense ', 34), (' Selling Expenses ', 33), (' Management expenses ', 33), (' Marketing expenses ', 32), (' Sales and marketing ', 31), (' Occupancy expenses ', 29), (' Logistics and distribution ', 25), ('expenses ', 24), (' Administration ', 23), (' depreciation ', 16), (' Royalties ', 16), (' Occupancy ', 12), (' levies', 9)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4, 5], 'score': 100, 'value': -26864228.0, 'line_item_label': ['Occupancy expenses', 'Marketing expenses', 'Administrative expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-1435468.0, -6479612.0, -18949148.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' levies', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses ', 100), ('expenses ', 67), (' other expenses ', 67), (' Other expenses ', 67), (' Other expenses ', 67), (' Lease expenses ', 61), (' Selling Expenses ', 61), (' Occupancy ', 59), (' property espense ', 59), (' Management expenses ', 58), (' Marketing expenses ', 56), (' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' depreciation ', 42), (' Selling & distribution expenses ', 42), (' Administrative and other expenses ', 42), (' employee benefits expense ', 35), (' Depreciation and amortisation expenses ', 32), (' employee benefit espense ', 29), (' Logistics and distribution ', 25), (' Administration ', 19), (' Sales and marketing ', 15), (' levies', 12), (' Royalties ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Marketing expenses ', 100), (' Management expenses ', 72), (' Lease expenses ', 67), (' Selling Expenses ', 67), (' other expenses ', 64), (' Other expenses ', 64), (' Other expenses ', 64), (' property espense ', 64), ('expenses ', 63), (' Sales and marketing ', 57), (' Occupancy expenses ', 56), (' Selling & distribution expenses ', 47), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), (' Advertising expenses ', 43), (' Distribution expenses ', 41), (' Administrative expenses ', 41), (' Administrative and other expenses ', 41), (' Administration expenses ', 41), (' depreciation ', 40), (' employee benefits expense ', 34), (' Depreciation and amortisation expenses ', 31), (' employee benefit espense ', 29), (' Administration ', 27), (' Logistics and distribution ', 24), (' Royalties ', 20), (' levies', 12), (' Occupancy ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' employee benefit espense ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 36), (' Other expenses ', 36), (' Other expenses ', 36), (' depreciation ', 35), (' Marketing expenses ', 34), (' Administrative and other expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Logistics and distribution ', 33), (' levies', 30), (' Occupancy expenses ', 29), (' Depreciation expenses ', 27), (' Selling & distribution expenses ', 27), (' Advertising expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Royalties ', 26), (' Distribution expenses ', 25), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Lease expenses ', 22), (' Selling Expenses ', 22), (' Management expenses ', 21), (' Occupancy ', 19), (' Sales and marketing ', 19), ('expenses ', 18), (' Administration ', 16)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses ', 37), (' Depreciation and amortisation expenses ', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Administration ', 29), (' other expenses ', 25), (' Occupancy expenses ', 25), (' Other expenses ', 25), (' Management expenses ', 25), (' Other expenses ', 25), (' Marketing expenses ', 24), (' Occupancy ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Depreciation expenses ', 23), (' Amortisation expenses ', 23), (' Advertising expenses ', 22), (' property espense ', 22), (' depreciation ', 21), (' Distribution expenses ', 21), (' Royalties ', 21), (' Selling & distribution expenses ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses ', 35), (' Royalties ', 33), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Occupancy ', 25), (' Depreciation expenses ', 24), (' Advertising expenses ', 23), (' Sales and marketing ', 23), (' property espense ', 23), (' depreciation ', 22), (' Administration ', 20), (' Selling Expenses ', 18), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' other expenses ', 17), (' Other expenses ', 17), (' Other expenses ', 17), (' levies', 13), ('expenses ', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses ', 39), (' Depreciation and amortisation expenses ', 39), (' Marketing expenses ', 36), (' Amortisation expenses ', 34), (' Selling & distribution expenses ', 33), (' Sales and marketing ', 33), (' property espense ', 33), (' Distribution expenses ', 32), (' Management expenses ', 30), (' Logistics and distribution ', 29), (' Depreciation expenses ', 28), (' Advertising expenses ', 27), (' Royalties ', 27), (' Administrative expenses ', 26), (' Administration expenses ', 26), (' Administration ', 25), (' Lease expenses ', 23), (' Selling Expenses ', 23), (' other expenses ', 22), (' Occupancy expenses ', 22), (' Other expenses ', 22), (' Other expenses ', 22), (' employee benefits expense ', 22), (' employee benefit espense ', 22), (' Occupancy ', 20), (' depreciation ', 18), (' levies', 11), ('expenses ', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' Depreciation and amortisation expenses ', 38), (' property espense ', 38), (' employee benefits expense ', 37), (' employee benefit espense ', 37), (' Logistics and distribution ', 34), (' Distribution expenses ', 33), (' other expenses ', 31), (' Other expenses ', 31), (' Other expenses ', 31), (' Marketing expenses ', 30), (' Administrative and other expenses ', 30), (' Depreciation expenses ', 29), (' Selling & distribution expenses ', 29), (' Advertising expenses ', 29), (' Amortisation expenses ', 29), (' Sales and marketing ', 29), (' Administrative expenses ', 28), (' Administration expenses ', 28), (' Occupancy expenses ', 26), (' Lease expenses ', 26), (' Management expenses ', 26), (' depreciation ', 24), (' Royalties ', 24), (' Administration ', 22), (' Selling Expenses ', 21), (' Occupancy ', 19), ('expenses ', 18), (' levies', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [(' employee benefits expense ', 58), (' employee benefit espense ', 58), (' Depreciation expenses ', 50), (' Administrative and other expenses ', 50), (' Administrative expenses ', 48), (' Administration expenses ', 48), (' other expenses ', 47), (' Other expenses ', 47), (' Selling & distribution expenses ', 47), (' Management expenses ', 47), (' Other expenses ', 47), (' Marketing expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Lease expenses ', 43), (' Selling Expenses ', 43), (' Occupancy expenses ', 42), (' Amortisation expenses ', 40), (' property espense ', 39), ('expenses ', 38), (' Depreciation and amortisation expenses ', 38), (' Logistics and distribution ', 30), (' Sales and marketing ', 29), (' depreciation ', 24), (' Administration ', 23), (' levies', 13), (' Royalties ', 12), (' Occupancy ', 6)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' property espense ', 41), (' Depreciation and amortisation expenses ', 40), (' other expenses ', 39), (' Other expenses ', 39), (' Other expenses ', 39), (' Selling & distribution expenses ', 36), (' Administrative and other expenses ', 36), (' Distribution expenses ', 35), (' Depreciation expenses ', 32), (' Amortisation expenses ', 32), (' Logistics and distribution ', 32), (' employee benefits expense ', 30), (' employee benefit espense ', 30), (' Lease expenses ', 29), (' Marketing expenses ', 27), (' Advertising expenses ', 26), (' Sales and marketing ', 26), (' Royalties ', 26), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Selling Expenses ', 23), (' Management expenses ', 22), (' depreciation ', 19), (' Administration ', 18), (' Occupancy expenses ', 17), (' Occupancy ', 14), (' levies', 14), ('expenses ', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other expenses ', 59), (' Other expenses ', 59), (' Other expenses ', 59), (' Administrative and other expenses ', 50), (' property espense ', 43), (' Marketing expenses ', 40), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Occupancy expenses ', 35), (' Management expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Administration ', 32), ('expenses ', 29), (' Logistics and distribution ', 29), (' depreciation ', 28), (' Advertising expenses ', 27), (' Sales and marketing ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Royalties ', 21), (' Occupancy ', 15), (' levies', 15)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [(' Administrative and other expenses ', 52), (' Selling & distribution expenses ', 41), (' other expenses ', 40), (' Other expenses ', 40), (' Other expenses ', 40), (' Depreciation expenses ', 39), (' Amortisation expenses ', 39), (' Depreciation and amortisation expenses ', 38), (' Administrative expenses ', 37), (' Lease expenses ', 37), (' Administration expenses ', 37), (' employee benefits expense ', 37), (' Distribution expenses ', 34), (' Advertising expenses ', 34), (' property espense ', 34), (' employee benefit espense ', 34), (' Selling Expenses ', 33), (' Management expenses ', 33), (' Marketing expenses ', 32), (' Sales and marketing ', 31), (' Occupancy expenses ', 29), (' Logistics and distribution ', 25), ('expenses ', 24), (' Administration ', 23), (' depreciation ', 16), (' Royalties ', 16), (' Occupancy ', 12), (' levies', 9)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4, 5], 'score': 100, 'value': -29921885.0, 'line_item_label': ['Occupancy expenses', 'Marketing expenses', 'Administrative expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-1381012.0, -10129088.0, -18411785.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-08-11 14:58:16+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses', ' Occupancy', ' Occupancy expenses']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses', 44), (' Administration expenses ', 36), (' Rental expenses ', 32), (' Occupancy ', 18)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses ', 36), (' Administration expenses ', 32), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), (' Occupancy ', 59), (' Rental expenses ', 56), (' Administration expenses ', 43), ('Rent ', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Rental expenses ', 77), (' Occupancy expenses', 56), (' Administration expenses ', 41), ('Rent ', 35), (' Occupancy ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Occupancy expenses', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' Rental expenses ', 34), (' Occupancy expenses', 29), (' Administration expenses ', 25), ('Rent ', 20), (' Occupancy ', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses ', 29), (' Occupancy expenses', 25), (' Rental expenses ', 24), (' Occupancy ', 24), ('Rent ', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses ', 33), (' Administration expenses ', 30), (' Occupancy expenses', 26), (' Occupancy ', 25), ('Rent ', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Rental expenses ', 29), (' Administration expenses ', 26), (' Occupancy expenses', 22), ('Rent ', 21), (' Occupancy ', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' Rental expenses ', 35), (' Administration expenses ', 28), (' Occupancy expenses', 26), ('Rent ', 19), (' Occupancy ', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [(' Rental expenses ', 51), (' Administration expenses ', 48), (' Occupancy expenses', 42), ('Rent ', 20), (' Occupancy ', 6)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Rental expenses ', 27), (' Administration expenses ', 25), (' Occupancy expenses', 17), ('Rent ', 14), (' Occupancy ', 14)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses ', 40), (' Occupancy expenses', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [(' Rental expenses ', 39), (' Administration expenses ', 37), (' Occupancy expenses', 29), ('Rent ', 17), (' Occupancy ', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 5], 'score': 100, 'value': -20384616.0, 'line_item_label': ['Occupancy expenses', 'Administrative expenses'], 'note_numbers': [nan, nan], 'line_item_value': [-1435468.0, -18949148.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses', 44), (' Administration expenses ', 36), (' Rental expenses ', 32), (' Occupancy ', 18)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses ', 36), (' Administration expenses ', 32), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), (' Occupancy ', 59), (' Rental expenses ', 56), (' Administration expenses ', 43), ('Rent ', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Rental expenses ', 77), (' Occupancy expenses', 56), (' Administration expenses ', 41), ('Rent ', 35), (' Occupancy ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Occupancy expenses', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' Rental expenses ', 34), (' Occupancy expenses', 29), (' Administration expenses ', 25), ('Rent ', 20), (' Occupancy ', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses ', 29), (' Occupancy expenses', 25), (' Rental expenses ', 24), (' Occupancy ', 24), ('Rent ', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses ', 33), (' Administration expenses ', 30), (' Occupancy expenses', 26), (' Occupancy ', 25), ('Rent ', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Rental expenses ', 29), (' Administration expenses ', 26), (' Occupancy expenses', 22), ('Rent ', 21), (' Occupancy ', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' Rental expenses ', 35), (' Administration expenses ', 28), (' Occupancy expenses', 26), ('Rent ', 19), (' Occupancy ', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [(' Rental expenses ', 51), (' Administration expenses ', 48), (' Occupancy expenses', 42), ('Rent ', 20), (' Occupancy ', 6)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Rental expenses ', 27), (' Administration expenses ', 25), (' Occupancy expenses', 17), ('Rent ', 14), (' Occupancy ', 14)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses ', 40), (' Occupancy expenses', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [(' Rental expenses ', 39), (' Administration expenses ', 37), (' Occupancy expenses', 29), ('Rent ', 17), (' Occupancy ', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 5], 'score': 100, 'value': -19792797.0, 'line_item_label': ['Occupancy expenses', 'Administrative expenses'], 'note_numbers': [nan, nan], 'line_item_value': [-1381012.0, -18411785.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-08-11 14:58:16+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['Other income ', ' Commission revenue ', ' Rent ', ' rental revenue']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue', 33), (' Other income', 26)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('other operating', 35), ('Other revenue', 32), (' Other income', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('other operating', 54), (' Other income', 37), ('Other revenue', 36)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('Other revenue', 30), ('other operating', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' Other income', 42), ('other operating', 27), ('Other revenue', 21)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [(' Other income', 38), ('other operating', 28), ('Other revenue', 26)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other operating', 47), (' Other income', 40), ('Other revenue', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [('other operating', 38), (' Other income', 37), ('Other revenue', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue', 33), (' Other income', 26)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('other operating', 35), ('Other revenue', 32), (' Other income', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('other operating', 54), (' Other income', 37), ('Other revenue', 36)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('Other revenue', 30), ('other operating', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' Other income', 42), ('other operating', 27), ('Other revenue', 21)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [(' Other income', 38), ('other operating', 28), ('Other revenue', 26)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other operating', 47), (' Other income', 40), ('Other revenue', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [('other operating', 38), (' Other income', 37), ('Other revenue', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), ('Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 37), ('Finance income and costs', 30), ('other income', 26), ('finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Interest revenue', 43), (' Net finance costs', 36), ('other income', 25), ('finance income', 24), ('Finance income and costs', 24), (' Finance income and finance costs', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Interest revenue', 52), ('Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), (' Net finance costs', 26)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' Net finance costs', 39), ('other income', 37), ('Finance income and costs', 27), (' Finance income and finance costs', 27), (' Interest revenue', 26), ('finance income', 14)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), ('Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs', 100), ('Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('other income', 42), (' Net finance costs', 38), ('finance income', 36), ('Finance income and costs', 33), (' Finance income and finance costs', 33), (' Interest revenue', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [('finance income', 47), ('Finance income and costs', 43), (' Finance income and finance costs', 41), ('other income', 38), (' Interest revenue', 34), (' Net finance costs', 34)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other income', 40), (' Net finance costs', 36), ('Finance income and costs', 31), (' Interest revenue', 31), (' Finance income and finance costs', 31), ('finance income', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), ('Finance income and costs', 42), ('finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [(' Net finance costs', 41), ('other income', 37), ('Finance income and costs', 34), (' Finance income and finance costs', 34), (' Interest revenue', 28), ('finance income', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 8, 9], 'score': 100, 'value': -1210418.0, 'line_item_label': ['Finance income', 'Finance costs', 'Net finance costs'], 'note_numbers': [nan, nan, '6'], 'line_item_value': [3944.0, -609153.0, -605209.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), ('Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 37), ('Finance income and costs', 30), ('other income', 26), ('finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Interest revenue', 43), (' Net finance costs', 36), ('other income', 25), ('finance income', 24), ('Finance income and costs', 24), (' Finance income and finance costs', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Interest revenue', 52), ('Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), (' Net finance costs', 26)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' Net finance costs', 39), ('other income', 37), ('Finance income and costs', 27), (' Finance income and finance costs', 27), (' Interest revenue', 26), ('finance income', 14)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), ('Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs', 100), ('Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('other income', 42), (' Net finance costs', 38), ('finance income', 36), ('Finance income and costs', 33), (' Finance income and finance costs', 33), (' Interest revenue', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [('finance income', 47), ('Finance income and costs', 43), (' Finance income and finance costs', 41), ('other income', 38), (' Interest revenue', 34), (' Net finance costs', 34)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other income', 40), (' Net finance costs', 36), ('Finance income and costs', 31), (' Interest revenue', 31), (' Finance income and finance costs', 31), ('finance income', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), ('Finance income and costs', 42), ('finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [(' Net finance costs', 41), ('other income', 37), ('Finance income and costs', 34), (' Finance income and finance costs', 34), (' Interest revenue', 28), ('finance income', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 8, 9], 'score': 100, 'value': -2333058.0, 'line_item_label': ['Finance income', 'Finance costs', 'Net finance costs'], 'note_numbers': [nan, nan, '6'], 'line_item_value': [48.0, -1166577.0, -1166529.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-08-11 14:58:16+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['loan ', ' debt ', ' debenture ', ' cash credit ', ' borrowings ', ' bank facilities ', ' bonds ', ' interest ', ' Interest expenses ', ' Discount unwind on the provision for asset retirement obligation ', ' Other interest expense ', ' Interest on leases ', ' Interest on bank overdrafts and loans (other than those from related parties) ', ' Interest accrued on loans ', ' Interest accrued on lease liabilities ', ' Lease interest expense ', ' Interest expense on financial liabilities using the effective interest rate method - other ', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', ' Lease liabilities interest expense ', ' interest income']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense', 29), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' finance expenses ', 27), (' interest expense', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance expenses ', 32), (' interest expense', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses ', 64), (' interest expense', 52), ('finance cost ', 26), (' net finance costs ', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' interest expense', 71), (' finance expenses ', 62), (' net finance costs ', 36), ('finance cost ', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' finance expenses ', 41), (' interest expense', 39), ('finance cost ', 30), (' net finance costs ', 26)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' net finance costs ', 39), ('finance cost ', 37), (' finance expenses ', 34), (' interest expense', 32)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost ', 52), (' finance expenses ', 48), (' interest expense', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance expenses ', 67), (' interest expense', 31)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance expenses ', 57), (' interest expense', 40)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost ', 37), (' finance expenses ', 35), (' interest expense', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [(' finance expenses ', 51), (' interest expense', 49), (' net finance costs ', 34), ('finance cost ', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost ', 34), (' interest expense', 31), (' finance expenses ', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' interest expense', 54), (' net finance costs ', 49), (' finance expenses ', 46), ('finance cost ', 42)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [(' net finance costs ', 41), (' interest expense', 38), (' finance expenses ', 32), ('finance cost ', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9], 'score': 100, 'value': -1214362.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': [nan, '6'], 'line_item_value': [-609153.0, -605209.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense', 29), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' finance expenses ', 27), (' interest expense', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance expenses ', 32), (' interest expense', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses ', 64), (' interest expense', 52), ('finance cost ', 26), (' net finance costs ', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' interest expense', 71), (' finance expenses ', 62), (' net finance costs ', 36), ('finance cost ', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' finance expenses ', 41), (' interest expense', 39), ('finance cost ', 30), (' net finance costs ', 26)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' net finance costs ', 39), ('finance cost ', 37), (' finance expenses ', 34), (' interest expense', 32)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost ', 52), (' finance expenses ', 48), (' interest expense', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance expenses ', 67), (' interest expense', 31)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance expenses ', 57), (' interest expense', 40)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost ', 37), (' finance expenses ', 35), (' interest expense', 33)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [(' finance expenses ', 51), (' interest expense', 49), (' net finance costs ', 34), ('finance cost ', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost ', 34), (' interest expense', 31), (' finance expenses ', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' interest expense', 54), (' net finance costs ', 49), (' finance expenses ', 46), ('finance cost ', 42)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [(' net finance costs ', 41), (' interest expense', 38), (' finance expenses ', 32), ('finance cost ', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9], 'score': 100, 'value': -2333106.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': [nan, '6'], 'line_item_value': [-1166577.0, -1166529.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-08-11 14:58:16+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['Accretion expense ', ' Arising from inventory of cranes ', ' Arising from inventory of spare parts ', ' Asset impairment ', ' commission revenue ', ' dividend from other parties ', ' effective portion of changes in fair value of cash flow ', ' foreign exchange gain ', ' government grants ', ' Impairment loss ', ' insurance proceeds ', ' Interest on unwinding of discount in provisions ', ' Investment in joint venture ', ' japan recoveries ', ' Loss on loan refinancing ', ' Loss on sale of disposal of assets ', ' margin charge income ', ' net (loss)/profit on disposal of non-current assets ', ' net foreign exchange (loss)/gain ', ' net foreign exchange gain ', ' net foreign exchange gains/(losses) ', ' net gain / loss on disposal of property plant and equipment ', ' Net loss on disposal of property ', ' net of tax ', ' Net other foreign exchange (losses)/gains ', ' net ppe disposal (loss)/gain ', ' other ', ' other income ', ' other miscellaneous - net (loss)/gain ', ' paid by customers - at amortised cost ', ' plant and equipment ', ' Power purchase agreement realised gain ', ' Power purchase agreement unrelaised gain ', ' profit from discontinued operation ', ' Profit on sale of assets ', ' quota lease income ', ' Remuneration from services linked to newly acquired entities ', ' secondment income (tw recovery) ', ' Share of gain/(loss) of joint venture ', ' share of jv income ', ' Sub-lease rental income ', ' sundry income ', ' other revenue']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' other income ', 40), (' finance income and costs ', 40), (' Other income ', 40), (' Finance income and costs ', 40), (' net of tax ', 38), (' net of tax ', 38), (' other opertaing income ', 37), (' share of profit of equity accounted investees ', 36), (' other gains/losses ', 33), (' interest revenue ', 33), (' Loss on revaluation of inventories', 33), (' finance income and finance cost ', 32), (' other income and revenue ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and finance costs ', 32), (' Impairment loss ', 30), (' Impairement (expenses)/reversal ', 28), (' Profit from discontinued operation ', 28), (' finance expenses', 27), (' interest gains and losses ', 26), (' expenses ', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses ', 52), (' Profit from discontinued operation ', 46), (' net finance costs ', 44), ('finance cost ', 43), (' other opertaing income ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 36), (' other income ', 35), (' Other income ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Impairment loss ', 35), (' finance expenses', 32), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), (' interest gains and losses ', 29), (' finance income and finance cost ', 25), (' Impairement (expenses)/reversal ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' expenses ', 67), (' finance expenses', 64), (' Impairement (expenses)/reversal ', 50), (' interest revenue ', 37), (' other gains/losses ', 30), (' finance income and costs ', 30), (' Finance income and costs ', 30), (' Loss on revaluation of inventories', 30), (' interest gains and losses ', 29), (' other opertaing income ', 27), ('finance cost ', 26), (' other income ', 26), (' Other income ', 26), (' Impairment loss ', 26), (' finance income and finance cost ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net finance costs ', 22), (' share of profit of equity accounted investees ', 21), (' net of tax ', 21), (' Profit from discontinued operation ', 21), (' net of tax ', 21), (' Share of gain/(loss) of joint venture ', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Impairement (expenses)/reversal ', 67), (' expenses ', 63), (' finance expenses', 62), (' interest revenue ', 43), (' net finance costs ', 36), (' Loss on revaluation of inventories', 35), (' interest gains and losses ', 34), (' Share of gain/(loss) of joint venture ', 34), (' net of tax ', 30), (' net of tax ', 30), (' other gains/losses ', 29), (' share of profit of equity accounted investees ', 29), (' other income and revenue ', 29), (' other opertaing income ', 26), ('finance cost ', 25), (' other income ', 25), (' Other income ', 25), (' Impairment loss ', 25), (' Profit from discontinued operation ', 25), (' finance income and costs ', 24), (' Finance income and costs ', 24), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' expenses ', 55), (' other income and revenue ', 53), (' interest revenue ', 52), (' interest gains and losses ', 47), (' finance expenses', 41), (' Share of gain/(loss) of joint venture ', 41), (' other gains/losses ', 39), (' Impairement (expenses)/reversal ', 39), (' Impairment loss ', 37), (' Profit from discontinued operation ', 37), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 32), (' finance income and costs ', 32), (' Finance income and finance costs ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories', 32), (' share of profit of equity accounted investees ', 31), ('finance cost ', 30), (' other income ', 30), (' Other income ', 30), (' other opertaing income ', 29), (' net finance costs ', 26)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' Profit from discontinued operation ', 60), (' other opertaing income ', 53), (' other gains/losses ', 52), (' net finance costs ', 39), (' share of profit of equity accounted investees ', 39), ('finance cost ', 37), (' other income ', 37), (' other income and revenue ', 37), (' Other income ', 37), (' Share of gain/(loss) of joint venture ', 36), (' finance expenses', 34), (' Impairement (expenses)/reversal ', 33), (' Loss on revaluation of inventories', 32), (' Impairment loss ', 30), (' finance income and finance cost ', 27), (' finance income and costs ', 27), (' Finance income and finance costs ', 27), (' Finance income and costs ', 27), (' interest revenue ', 26), (' interest gains and losses ', 26), (' net of tax ', 26), (' net of tax ', 26), (' expenses ', 18)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' finance income and costs ', 73), (' Finance income and costs ', 73), (' finance income and finance cost ', 60), (' Finance income and finance costs ', 60), (' net finance costs ', 59), ('finance cost ', 52), (' finance expenses', 48), (' other income and revenue ', 47), (' other income ', 43), (' Other income ', 43), (' interest gains and losses ', 41), (' Impairment loss ', 35), (' other opertaing income ', 33), (' Profit from discontinued operation ', 31), (' other gains/losses ', 30), (' interest revenue ', 30), (' Share of gain/(loss) of joint venture ', 30), (' Loss on revaluation of inventories', 30), (' share of profit of equity accounted investees ', 26), (' Impairement (expenses)/reversal ', 25), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance income and costs ', 69), (' Finance income and costs ', 69), (' finance expenses', 67), (' finance income and finance cost ', 56), (' Finance income and finance costs ', 56), (' share of profit of equity accounted investees ', 35), (' net of tax ', 33), (' net of tax ', 33), (' Profit from discontinued operation ', 32), (' interest revenue ', 31), (' other income and revenue ', 30), (' other opertaing income ', 28), (' other income ', 27), (' Other income ', 27), (' Share of gain/(loss) of joint venture ', 26), (' Impairement (expenses)/reversal ', 26), (' Loss on revaluation of inventories', 25), (' interest gains and losses ', 24), (' other gains/losses ', 23), (' Impairment loss ', 18), (' expenses ', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance income and costs ', 72), (' Finance income and costs ', 72), (' finance income and finance cost ', 60), (' Finance income and finance costs ', 60), (' finance expenses', 57), (' other income ', 38), (' interest gains and losses ', 38), (' Other income ', 38), (' Profit from discontinued operation ', 38), (' other opertaing income ', 36), (' share of profit of equity accounted investees ', 36), (' Impairement (expenses)/reversal ', 34), (' Share of gain/(loss) of joint venture ', 33), (' other income and revenue ', 32), (' Loss on revaluation of inventories', 28), (' other gains/losses ', 27), (' interest revenue ', 27), (' net of tax ', 27), (' net of tax ', 27), (' Impairment loss ', 23), (' expenses ', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' other opertaing income ', 53), (' Profit from discontinued operation ', 52), (' Loss on revaluation of inventories', 50), (' other gains/losses ', 48), (' share of profit of equity accounted investees ', 45), (' Share of gain/(loss) of joint venture ', 44), (' other income ', 42), (' Other income ', 42), (' other income and revenue ', 41), (' net finance costs ', 38), ('finance cost ', 37), (' Impairment loss ', 37), (' finance expenses', 35), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 33), (' finance income and costs ', 33), (' interest gains and losses ', 33), (' Finance income and finance costs ', 33), (' Finance income and costs ', 33), (' Impairement (expenses)/reversal ', 30), (' interest revenue ', 24), (' expenses ', 18)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [(' finance expenses', 51), (' finance income and costs ', 43), (' Impairement (expenses)/reversal ', 43), (' Finance income and costs ', 43), (' net of tax ', 42), (' net of tax ', 42), (' finance income and finance cost ', 41), (' Finance income and finance costs ', 41), (' share of profit of equity accounted investees ', 39), (' other income ', 38), (' expenses ', 38), (' other income and revenue ', 38), (' Other income ', 38), (' other opertaing income ', 36), (' net finance costs ', 34), (' interest revenue ', 34), (' Loss on revaluation of inventories', 34), (' interest gains and losses ', 33), (' Share of gain/(loss) of joint venture ', 33), (' Profit from discontinued operation ', 30), (' other gains/losses ', 29), ('finance cost ', 27), (' Impairment loss ', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' other gains/losses ', 56), (' other opertaing income ', 52), (' Loss on revaluation of inventories', 49), (' share of profit of equity accounted investees ', 47), (' Share of gain/(loss) of joint venture ', 46), (' Profit from discontinued operation ', 43), (' other income ', 40), (' Other income ', 40), (' other income and revenue ', 39), (' net finance costs ', 36), (' Impairement (expenses)/reversal ', 36), ('finance cost ', 34), (' Impairment loss ', 34), (' finance income and finance cost ', 31), (' finance income and costs ', 31), (' interest revenue ', 31), (' Finance income and finance costs ', 31), (' Finance income and costs ', 31), (' finance expenses', 27), (' interest gains and losses ', 26), (' net of tax ', 26), (' net of tax ', 26), (' expenses ', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other income ', 67), (' Other income ', 67), (' other income and revenue ', 59), (' other opertaing income ', 55), (' net finance costs ', 49), (' other gains/losses ', 49), (' Impairement (expenses)/reversal ', 48), (' finance expenses', 46), (' Profit from discontinued operation ', 45), ('finance cost ', 42), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' share of profit of equity accounted investees ', 39), (' finance income and finance cost ', 36), (' interest gains and losses ', 36), (' Share of gain/(loss) of joint venture ', 36), (' Finance income and finance costs ', 36), (' Impairment loss ', 30), (' expenses ', 29), (' Loss on revaluation of inventories', 28), (' interest revenue ', 27), (' net of tax ', 21), (' net of tax ', 21)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [(' other opertaing income ', 46), (' share of profit of equity accounted investees ', 44), (' net finance costs ', 41), (' other income and revenue ', 40), (' Profit from discontinued operation ', 40), (' Share of gain/(loss) of joint venture ', 39), (' Impairement (expenses)/reversal ', 38), (' Loss on revaluation of inventories', 38), (' other income ', 37), (' Other income ', 37), (' other gains/losses ', 34), (' finance income and finance cost ', 34), (' finance income and costs ', 34), (' interest gains and losses ', 34), (' Finance income and finance costs ', 34), (' Finance income and costs ', 34), (' finance expenses', 32), ('finance cost ', 30), (' interest revenue ', 28), (' expenses ', 24), (' net of tax ', 24), (' net of tax ', 24), (' Impairment loss ', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9], 'score': 100, 'value': -1214362.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': [nan, '6'], 'line_item_value': [-609153.0, -605209.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' other income ', 40), (' finance income and costs ', 40), (' Other income ', 40), (' Finance income and costs ', 40), (' net of tax ', 38), (' net of tax ', 38), (' other opertaing income ', 37), (' share of profit of equity accounted investees ', 36), (' other gains/losses ', 33), (' interest revenue ', 33), (' Loss on revaluation of inventories', 33), (' finance income and finance cost ', 32), (' other income and revenue ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and finance costs ', 32), (' Impairment loss ', 30), (' Impairement (expenses)/reversal ', 28), (' Profit from discontinued operation ', 28), (' finance expenses', 27), (' interest gains and losses ', 26), (' expenses ', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses ', 52), (' Profit from discontinued operation ', 46), (' net finance costs ', 44), ('finance cost ', 43), (' other opertaing income ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 36), (' other income ', 35), (' Other income ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Impairment loss ', 35), (' finance expenses', 32), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), (' interest gains and losses ', 29), (' finance income and finance cost ', 25), (' Impairement (expenses)/reversal ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' expenses ', 67), (' finance expenses', 64), (' Impairement (expenses)/reversal ', 50), (' interest revenue ', 37), (' other gains/losses ', 30), (' finance income and costs ', 30), (' Finance income and costs ', 30), (' Loss on revaluation of inventories', 30), (' interest gains and losses ', 29), (' other opertaing income ', 27), ('finance cost ', 26), (' other income ', 26), (' Other income ', 26), (' Impairment loss ', 26), (' finance income and finance cost ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net finance costs ', 22), (' share of profit of equity accounted investees ', 21), (' net of tax ', 21), (' Profit from discontinued operation ', 21), (' net of tax ', 21), (' Share of gain/(loss) of joint venture ', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Impairement (expenses)/reversal ', 67), (' expenses ', 63), (' finance expenses', 62), (' interest revenue ', 43), (' net finance costs ', 36), (' Loss on revaluation of inventories', 35), (' interest gains and losses ', 34), (' Share of gain/(loss) of joint venture ', 34), (' net of tax ', 30), (' net of tax ', 30), (' other gains/losses ', 29), (' share of profit of equity accounted investees ', 29), (' other income and revenue ', 29), (' other opertaing income ', 26), ('finance cost ', 25), (' other income ', 25), (' Other income ', 25), (' Impairment loss ', 25), (' Profit from discontinued operation ', 25), (' finance income and costs ', 24), (' Finance income and costs ', 24), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' expenses ', 55), (' other income and revenue ', 53), (' interest revenue ', 52), (' interest gains and losses ', 47), (' finance expenses', 41), (' Share of gain/(loss) of joint venture ', 41), (' other gains/losses ', 39), (' Impairement (expenses)/reversal ', 39), (' Impairment loss ', 37), (' Profit from discontinued operation ', 37), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 32), (' finance income and costs ', 32), (' Finance income and finance costs ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories', 32), (' share of profit of equity accounted investees ', 31), ('finance cost ', 30), (' other income ', 30), (' Other income ', 30), (' other opertaing income ', 29), (' net finance costs ', 26)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' Profit from discontinued operation ', 60), (' other opertaing income ', 53), (' other gains/losses ', 52), (' net finance costs ', 39), (' share of profit of equity accounted investees ', 39), ('finance cost ', 37), (' other income ', 37), (' other income and revenue ', 37), (' Other income ', 37), (' Share of gain/(loss) of joint venture ', 36), (' finance expenses', 34), (' Impairement (expenses)/reversal ', 33), (' Loss on revaluation of inventories', 32), (' Impairment loss ', 30), (' finance income and finance cost ', 27), (' finance income and costs ', 27), (' Finance income and finance costs ', 27), (' Finance income and costs ', 27), (' interest revenue ', 26), (' interest gains and losses ', 26), (' net of tax ', 26), (' net of tax ', 26), (' expenses ', 18)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' finance income and costs ', 73), (' Finance income and costs ', 73), (' finance income and finance cost ', 60), (' Finance income and finance costs ', 60), (' net finance costs ', 59), ('finance cost ', 52), (' finance expenses', 48), (' other income and revenue ', 47), (' other income ', 43), (' Other income ', 43), (' interest gains and losses ', 41), (' Impairment loss ', 35), (' other opertaing income ', 33), (' Profit from discontinued operation ', 31), (' other gains/losses ', 30), (' interest revenue ', 30), (' Share of gain/(loss) of joint venture ', 30), (' Loss on revaluation of inventories', 30), (' share of profit of equity accounted investees ', 26), (' Impairement (expenses)/reversal ', 25), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance income and costs ', 69), (' Finance income and costs ', 69), (' finance expenses', 67), (' finance income and finance cost ', 56), (' Finance income and finance costs ', 56), (' share of profit of equity accounted investees ', 35), (' net of tax ', 33), (' net of tax ', 33), (' Profit from discontinued operation ', 32), (' interest revenue ', 31), (' other income and revenue ', 30), (' other opertaing income ', 28), (' other income ', 27), (' Other income ', 27), (' Share of gain/(loss) of joint venture ', 26), (' Impairement (expenses)/reversal ', 26), (' Loss on revaluation of inventories', 25), (' interest gains and losses ', 24), (' other gains/losses ', 23), (' Impairment loss ', 18), (' expenses ', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance income and costs ', 72), (' Finance income and costs ', 72), (' finance income and finance cost ', 60), (' Finance income and finance costs ', 60), (' finance expenses', 57), (' other income ', 38), (' interest gains and losses ', 38), (' Other income ', 38), (' Profit from discontinued operation ', 38), (' other opertaing income ', 36), (' share of profit of equity accounted investees ', 36), (' Impairement (expenses)/reversal ', 34), (' Share of gain/(loss) of joint venture ', 33), (' other income and revenue ', 32), (' Loss on revaluation of inventories', 28), (' other gains/losses ', 27), (' interest revenue ', 27), (' net of tax ', 27), (' net of tax ', 27), (' Impairment loss ', 23), (' expenses ', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' other opertaing income ', 53), (' Profit from discontinued operation ', 52), (' Loss on revaluation of inventories', 50), (' other gains/losses ', 48), (' share of profit of equity accounted investees ', 45), (' Share of gain/(loss) of joint venture ', 44), (' other income ', 42), (' Other income ', 42), (' other income and revenue ', 41), (' net finance costs ', 38), ('finance cost ', 37), (' Impairment loss ', 37), (' finance expenses', 35), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 33), (' finance income and costs ', 33), (' interest gains and losses ', 33), (' Finance income and finance costs ', 33), (' Finance income and costs ', 33), (' Impairement (expenses)/reversal ', 30), (' interest revenue ', 24), (' expenses ', 18)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [(' finance expenses', 51), (' finance income and costs ', 43), (' Impairement (expenses)/reversal ', 43), (' Finance income and costs ', 43), (' net of tax ', 42), (' net of tax ', 42), (' finance income and finance cost ', 41), (' Finance income and finance costs ', 41), (' share of profit of equity accounted investees ', 39), (' other income ', 38), (' expenses ', 38), (' other income and revenue ', 38), (' Other income ', 38), (' other opertaing income ', 36), (' net finance costs ', 34), (' interest revenue ', 34), (' Loss on revaluation of inventories', 34), (' interest gains and losses ', 33), (' Share of gain/(loss) of joint venture ', 33), (' Profit from discontinued operation ', 30), (' other gains/losses ', 29), ('finance cost ', 27), (' Impairment loss ', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' other gains/losses ', 56), (' other opertaing income ', 52), (' Loss on revaluation of inventories', 49), (' share of profit of equity accounted investees ', 47), (' Share of gain/(loss) of joint venture ', 46), (' Profit from discontinued operation ', 43), (' other income ', 40), (' Other income ', 40), (' other income and revenue ', 39), (' net finance costs ', 36), (' Impairement (expenses)/reversal ', 36), ('finance cost ', 34), (' Impairment loss ', 34), (' finance income and finance cost ', 31), (' finance income and costs ', 31), (' interest revenue ', 31), (' Finance income and finance costs ', 31), (' Finance income and costs ', 31), (' finance expenses', 27), (' interest gains and losses ', 26), (' net of tax ', 26), (' net of tax ', 26), (' expenses ', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other income ', 67), (' Other income ', 67), (' other income and revenue ', 59), (' other opertaing income ', 55), (' net finance costs ', 49), (' other gains/losses ', 49), (' Impairement (expenses)/reversal ', 48), (' finance expenses', 46), (' Profit from discontinued operation ', 45), ('finance cost ', 42), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' share of profit of equity accounted investees ', 39), (' finance income and finance cost ', 36), (' interest gains and losses ', 36), (' Share of gain/(loss) of joint venture ', 36), (' Finance income and finance costs ', 36), (' Impairment loss ', 30), (' expenses ', 29), (' Loss on revaluation of inventories', 28), (' interest revenue ', 27), (' net of tax ', 21), (' net of tax ', 21)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [(' other opertaing income ', 46), (' share of profit of equity accounted investees ', 44), (' net finance costs ', 41), (' other income and revenue ', 40), (' Profit from discontinued operation ', 40), (' Share of gain/(loss) of joint venture ', 39), (' Impairement (expenses)/reversal ', 38), (' Loss on revaluation of inventories', 38), (' other income ', 37), (' Other income ', 37), (' other gains/losses ', 34), (' finance income and finance cost ', 34), (' finance income and costs ', 34), (' interest gains and losses ', 34), (' Finance income and finance costs ', 34), (' Finance income and costs ', 34), (' finance expenses', 32), ('finance cost ', 30), (' interest revenue ', 28), (' expenses ', 24), (' net of tax ', 24), (' net of tax ', 24), (' Impairment loss ', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9], 'score': 100, 'value': -2333106.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': [nan, '6'], 'line_item_value': [-1166577.0, -1166529.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-08-11 14:58:16+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), (' income tax', 19), ('prior year ', 18)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' income tax expense', 62), (' tax (expense)/benefit', 52), (' income tax benefit/(expense)', 49), ('earlier year', 40), ('deferred tax', 36), ('prior year ', 35), ('current tax', 33), (' income tax benefit', 33), ('amount transferred to retained earnings', 30), ('provision for taxation previous year', 29), ('minimum alternate tax credit entitlement', 27), (' income tax', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('provision for taxation previous year', 44), ('amount transferred to retained earnings', 37), ('earlier year', 36), ('deferred tax', 32), ('prior year ', 31), (' income tax expense', 31), (' income tax benefit/(expense)', 30), ('minimum alternate tax credit entitlement', 29), (' tax (expense)/benefit', 29), (' income tax', 24), (' income tax benefit', 24), ('current tax', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 44), ('amount transferred to retained earnings', 43), (' income tax', 42), (' income tax benefit/(expense)', 36), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('deferred tax', 25), ('prior year ', 24), ('earlier year', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' income tax benefit', 59), ('provision for taxation previous year', 54), (' income tax expense', 51), (' income tax benefit/(expense)', 51), (' income tax', 50), (' tax (expense)/benefit', 44), ('minimum alternate tax credit entitlement', 41), ('deferred tax', 39), ('current tax', 37), ('amount transferred to retained earnings', 33), ('prior year ', 32), ('earlier year', 31)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [(' income tax benefit/(expense)', 96), (' tax (expense)/benefit', 82), (' income tax benefit', 79), (' income tax expense', 76), ('minimum alternate tax credit entitlement', 59), (' income tax', 51), ('amount transferred to retained earnings', 42), ('deferred tax', 40), ('current tax', 38), ('provision for taxation previous year', 36), ('prior year ', 28), ('earlier year', 26)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 64), ('earlier year', 50), ('prior year ', 47), ('amount transferred to retained earnings', 35), ('current tax', 34), (' income tax benefit/(expense)', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), ('deferred tax', 30), (' income tax expense', 30), (' income tax benefit', 29), (' income tax', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [('provision for taxation previous year', 47), (' tax (expense)/benefit', 46), (' income tax benefit/(expense)', 45), (' income tax expense', 44), (' income tax benefit', 40), ('amount transferred to retained earnings', 37), ('minimum alternate tax credit entitlement', 35), ('prior year ', 34), ('current tax', 33), ('earlier year', 33), (' income tax', 31), ('deferred tax', 23)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 96, 'value': 192476.0, 'line_item_label': ['Income tax (expensel/benefit'], 'note_numbers': ['7'], 'line_item_value': [192476.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), (' income tax', 19), ('prior year ', 18)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' income tax expense', 62), (' tax (expense)/benefit', 52), (' income tax benefit/(expense)', 49), ('earlier year', 40), ('deferred tax', 36), ('prior year ', 35), ('current tax', 33), (' income tax benefit', 33), ('amount transferred to retained earnings', 30), ('provision for taxation previous year', 29), ('minimum alternate tax credit entitlement', 27), (' income tax', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('provision for taxation previous year', 44), ('amount transferred to retained earnings', 37), ('earlier year', 36), ('deferred tax', 32), ('prior year ', 31), (' income tax expense', 31), (' income tax benefit/(expense)', 30), ('minimum alternate tax credit entitlement', 29), (' tax (expense)/benefit', 29), (' income tax', 24), (' income tax benefit', 24), ('current tax', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 44), ('amount transferred to retained earnings', 43), (' income tax', 42), (' income tax benefit/(expense)', 36), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('deferred tax', 25), ('prior year ', 24), ('earlier year', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' income tax benefit', 59), ('provision for taxation previous year', 54), (' income tax expense', 51), (' income tax benefit/(expense)', 51), (' income tax', 50), (' tax (expense)/benefit', 44), ('minimum alternate tax credit entitlement', 41), ('deferred tax', 39), ('current tax', 37), ('amount transferred to retained earnings', 33), ('prior year ', 32), ('earlier year', 31)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [(' income tax benefit/(expense)', 96), (' tax (expense)/benefit', 82), (' income tax benefit', 79), (' income tax expense', 76), ('minimum alternate tax credit entitlement', 59), (' income tax', 51), ('amount transferred to retained earnings', 42), ('deferred tax', 40), ('current tax', 38), ('provision for taxation previous year', 36), ('prior year ', 28), ('earlier year', 26)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 64), ('earlier year', 50), ('prior year ', 47), ('amount transferred to retained earnings', 35), ('current tax', 34), (' income tax benefit/(expense)', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), ('deferred tax', 30), (' income tax expense', 30), (' income tax benefit', 29), (' income tax', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [('provision for taxation previous year', 47), (' tax (expense)/benefit', 46), (' income tax benefit/(expense)', 45), (' income tax expense', 44), (' income tax benefit', 40), ('amount transferred to retained earnings', 37), ('minimum alternate tax credit entitlement', 35), ('prior year ', 34), ('current tax', 33), ('earlier year', 33), (' income tax', 31), ('deferred tax', 23)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 96, 'value': -5563601.0, 'line_item_label': ['Income tax (expensel/benefit'], 'note_numbers': ['7'], 'line_item_value': [-5563601.0]}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-08-11 14:58:16+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('share of', 28), ('share in', 28)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('share of', 28), ('share in', 28)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional ', 27), (' Actuarial gains / (losses) on retirement benefit obligation', 26), (' prior period ', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional ', 44), (' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('exceptional ', 42), (' prior period ', 32), (' Actuarial gains / (losses) on retirement benefit obligation', 32)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27), (' prior period ', 21)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 34), ('exceptional ', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24), ('exceptional ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 29), (' prior period ', 26), ('exceptional ', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 38), ('exceptional ', 29), (' prior period ', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 50), (' prior period ', 41), ('exceptional ', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 44), (' prior period ', 32), ('exceptional ', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' prior period ', 39), (' Actuarial gains / (losses) on retirement benefit obligation', 39), ('exceptional ', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' prior period ', 41), (' Actuarial gains / (losses) on retirement benefit obligation', 41), ('exceptional ', 21)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 42), (' prior period ', 33), ('exceptional ', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional ', 27), (' Actuarial gains / (losses) on retirement benefit obligation', 26), (' prior period ', 19)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional ', 44), (' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('exceptional ', 42), (' prior period ', 32), (' Actuarial gains / (losses) on retirement benefit obligation', 32)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27), (' prior period ', 21)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 34), ('exceptional ', 27)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24), ('exceptional ', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 29), (' prior period ', 26), ('exceptional ', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 38), ('exceptional ', 29), (' prior period ', 22)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 50), (' prior period ', 41), ('exceptional ', 24)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 44), (' prior period ', 32), ('exceptional ', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' prior period ', 39), (' Actuarial gains / (losses) on retirement benefit obligation', 39), ('exceptional ', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' prior period ', 41), (' Actuarial gains / (losses) on retirement benefit obligation', 41), ('exceptional ', 21)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 42), (' prior period ', 33), ('exceptional ', 20)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-11 14:58:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-11 14:58:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-11 14:58:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-11 14:58:16+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('NULL', 10)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = income tax (expensel/benefit , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/lexpense) for the year , res_fuzz_match = [('NULL', 13)]
2023-08-11 14:58:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
